{
  "context": "Read the following table regarding \"Coin collections\" and then answer a question.\n\nName | Number of coins\nBraden | 76\nCamilla | 94\nRick | 86\nMary | 84\nHector | 80\nDevin | 83\nEmily | 82\nAvery | 87", "question": "Read the following table regarding \"Coin collections\" and then write Python code to answer a question.\n\nName | Number of coins\nBraden | 76\nCamilla | 94\nRick | 86\nMary | 84\nHector | 80\nDevin | 83\nEmily | 82\nAvery | 87\n\nSome friends discussed the sizes of their coin collections. What is the mean of the numbers?", "answer": "84", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of the number of coins collected by each friend\ncoin_counts = [76, 94, 86, 84, 80, 83, 82, 87]\n# Calculate the mean\nmean_coins = sum(coin_counts) / len(coin_counts)\nanswer = mean_coins\nprint(answer)", "coin_counts = [76, 94, 86, 84, 80, 83, 82, 87]\nmean_coins = sum(coin_counts) / len(coin_counts)\nanswer = round(mean_coins, 1)  # rounding to one decimal place\nprint(answer)", "coin_counts = [76, 94, 86, 84, 80, 83, 82, 87]  \nmean_coins = sum(coin_counts) / len(coin_counts)  \nanswer = round(mean_coins, 1)  # rounding to one decimal place  \nprint(answer)", "# Define the coin counts for each friend\ncoin_counts = [76, 94, 86, 84, 80, 83, 82, 87]  \n\n# Calculate the mean of the coin counts\nmean_coins = sum(coin_counts) / len(coin_counts)  \n\n# Round the mean to one decimal place and store it in the variable 'answer'\nanswer = round(mean_coins, 1)  \n\n# Print the answer\nprint(answer)"], "prediction": [84.0, 84.0, 84.0, 84.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$155 | 22,600 | 5,800\n$275 | 20,500 | 9,400\n$395 | 18,400 | 13,000\n$515 | 16,300 | 16,600\n$635 | 14,200 | 20,200", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$155 | 22,600 | 5,800\n$275 | 20,500 | 9,400\n$395 | 18,400 | 13,000\n$515 | 16,300 | 16,600\n$635 | 14,200 | 20,200\n\nLook at the table. Then answer the question. At a price of $155, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "shortage", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": ["# Python code, return answer \nquantity_demanded = 22600\nquantity_supplied = 5800\n\n# Determine if there is a shortage or surplus\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelse:\n    answer = 'surplus'\nprint(answer)", "# Define the quantities demanded and supplied at the price of $155\nquantity_demanded = 22600\nquantity_supplied = 5800\n\n# Determine if there is a shortage or surplus\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelse:\n    answer = 'surplus'\n\nprint(answer)", "quantity_demanded = 22600\nquantity_supplied = 5800\n\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'equilibrium'\n\nprint(answer)", "# Define the quantities based on the table\nquantity_demanded = 22600\nquantity_supplied = 5800\n\n# Determine if there is a shortage or surplus\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'equilibrium'\n\nprint(answer)"], "prediction": ["shortage", "shortage", "shortage", "shortage"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Average food preparation time\" and then answer a question.\n\nDay | Food preparation time (minutes)\nMonday | 25\nTuesday | 27\nWednesday | 18\nThursday | 21\nFriday | 27", "question": "Read the following table regarding \"Average food preparation time\" and then write Python code to answer a question.\n\nDay | Food preparation time (minutes)\nMonday | 25\nTuesday | 27\nWednesday | 18\nThursday | 21\nFriday | 27\n\nA restaurant's average food preparation time was tracked from day to day as part of an efficiency improvement program. According to the table, what was the rate of change between Wednesday and Thursday?", "answer": "3", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nwednesday_time = 18\nthursday_time = 21\n# Calculate the rate of change from Wednesday to Thursday\nrate_of_change = thursday_time - wednesday_time\nanswer = rate_of_change\nprint(answer)", "wednesday_time = 18\nthursday_time = 21\nrate_of_change = thursday_time - wednesday_time\nanswer = f\"The rate of change in food preparation time from Wednesday to Thursday is an increase of {rate_of_change} minutes.\"\nprint(answer)", "wednesday_time = 18\nthursday_time = 21\nrate_of_change = thursday_time - wednesday_time\n\nif rate_of_change > 0:\n    answer = f\"The rate of change in food preparation time from Wednesday to Thursday is an increase of {rate_of_change} minutes.\"\nelif rate_of_change < 0:\n    answer = f\"The rate of change in food preparation time from Wednesday to Thursday is a decrease of {-rate_of_change} minutes.\"\nelse:\n    answer = \"There was no change in food preparation time from Wednesday to Thursday.\"\n\nprint(answer)", "wednesday_time = 18\nthursday_time = 21\nrate_of_change = thursday_time - wednesday_time\n\nanswer = f\"The rate of change in food preparation time from Wednesday to Thursday is {rate_of_change} minutes.\"\nprint(answer)"], "prediction": [3.0, "The rate of change in food preparation time from Wednesday to Thursday is an increase of 3 minutes.", "The rate of change in food preparation time from Wednesday to Thursday is an increase of 3 minutes.", "The rate of change in food preparation time from Wednesday to Thursday is 3 minutes."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nalpaca | $1,605.00\nkinkajou | $1,837.00\npython | $8,343.00\nparrot | $1,123.00\nmacaw | $1,629.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nalpaca | $1,605.00\nkinkajou | $1,837.00\npython | $8,343.00\nparrot | $1,123.00\nmacaw | $1,629.00\n\nErik has $7,616.00. How much money will Erik have left if he buys a parrot and a kinkajou?", "answer": "4,656", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the animals\nprice_parrot = 1123.00\nprice_kinkajou = 1837.00\n# Total cost for buying a parrot and a kinkajou\ntotal_cost = price_parrot + price_kinkajou\n# Erik's initial amount of money\ninitial_amount = 7616.00\n# Calculate the remaining amount of money after the purchase\nremaining_amount = initial_amount - total_cost\nanswer = remaining_amount\nprint(answer)", "price_parrot = 1123.00\nprice_kinkajou = 1837.00\ntotal_cost = price_parrot + price_kinkajou\ninitial_amount = 7616.00\nremaining_amount = initial_amount - total_cost\nanswer = \"{:.2f}\".format(remaining_amount)  # Format as currency\nprint(answer)", "price_parrot = 1123.00\nprice_kinkajou = 1837.00\ntotal_cost = price_parrot + price_kinkajou\ninitial_amount = 7616.00\nremaining_amount = initial_amount - total_cost\nanswer = remaining_amount  # Store as a float\nprint(\"{:.2f}\".format(answer))  # Format as currency when printing", "# Define the prices of the parrot and kinkajou\nprice_parrot = 1123.00\nprice_kinkajou = 1837.00\n\n# Calculate the total cost of buying both animals\ntotal_cost = price_parrot + price_kinkajou\n\n# Initial amount of money Erik has\ninitial_amount = 7616.00\n\n# Calculate the remaining amount after the purchase\nremaining_amount = initial_amount - total_cost\n\n# Store the result as a variable named 'answer'\nanswer = remaining_amount\n\n# Print the answer formatted as currency\nprint(\"{:.2f}\".format(answer))"], "prediction": [4656.0, 4656.0, 4656.0, 4656.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nblender | $14.02\nCD | $18.35\ncomputer mouse | $10.65\nCD player | $21.84\nDVD player | $53.57\nradio | $15.42", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nblender | $14.02\nCD | $18.35\ncomputer mouse | $10.65\nCD player | $21.84\nDVD player | $53.57\nradio | $15.42\n\nRoxanne has $32.50. Does she have enough to buy a CD and a blender? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \n# Prices of items\nprice_cd = 18.35\nprice_blender = 14.02\n# Total cost for CD and blender\ntotal_cost = price_cd + price_blender\n# Roxanne's budget\nroxanne_budget = 32.50\n# Check if Roxanne has enough money\nif total_cost <= roxanne_budget:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "# Prices of the items\nprice_cd = 18.35\nprice_blender = 14.02\n\n# Total cost of the items\ntotal_cost = price_cd + price_blender\n\n# Roxanne's budget\nroxanne_budget = 32.50\n\n# Check if Roxanne has enough money to buy both items\nanswer = 'yes' if total_cost <= roxanne_budget else 'no'\nprint(answer)", "# Prices of the items\nprice_cd = 18.35\nprice_blender = 14.02\n\n# Calculate the total cost of the items\ntotal_cost = price_cd + price_blender\n\n# Roxanne's budget\nroxanne_budget = 32.50\n\n# Determine if Roxanne has enough money\nanswer = 'yes' if total_cost <= roxanne_budget else 'no'\n\nprint(answer)", "# Define prices of the items\nprice_cd = 18.35\nprice_blender = 14.02\n\n# Calculate the total cost\ntotal_cost = price_cd + price_blender\n\n# Roxanne's budget\nroxanne_budget = 32.50\n\n# Determine if Roxanne has enough money\nanswer = 'yes' if total_cost <= roxanne_budget else 'no'\n\n# Output the answer\nprint(answer)"], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Games won by the Kingwood baseball team\" and then answer a question.\n\nYear | Games won\n2009 | 39\n2010 | 46\n2011 | 36\n2012 | 44\n2013 | 44", "question": "Read the following table regarding \"Games won by the Kingwood baseball team\" and then write Python code to answer a question.\n\nYear | Games won\n2009 | 39\n2010 | 46\n2011 | 36\n2012 | 44\n2013 | 44\n\nFans of the Kingwood baseball team compared the number of games won by their team each year. According to the table, what was the rate of change between 2009 and 2010?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of games won in 2009 and 2010\ngames_won_2009 = 39\ngames_won_2010 = 46\n\n# Calculate the rate of change\nrate_of_change = games_won_2010 - games_won_2009\nanswer = rate_of_change\nprint(answer)", "games_won_2009 = 39\ngames_won_2010 = 46\nchange_in_games_won = games_won_2010 - games_won_2009\nrate_of_change = (change_in_games_won / games_won_2009) * 100\nanswer = rate_of_change\nprint(answer)", "games_won_2009 = 39\ngames_won_2010 = 46\nchange_in_games_won = games_won_2010 - games_won_2009\nrate_of_change = (change_in_games_won / games_won_2009) * 100\nanswer = round(rate_of_change, 2)  # Rounding to two decimal places for better readability\nprint(answer)", "# Define the number of games won in 2009 and 2010\ngames_won_2009 = 39\ngames_won_2010 = 46\n\n# Calculate the change in games won\nchange_in_games_won = games_won_2010 - games_won_2009\n\n# Calculate the rate of change as a percentage\nrate_of_change = (change_in_games_won / games_won_2009) * 100\n\n# Store the result as a variable named 'answer'\nanswer = round(rate_of_change, 2)  # Rounding to two decimal places for better readability\n\n# Output the answer\nprint(answer)"], "prediction": [7.0, 17.94872, 17.95, 17.95], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Tractors made\" and then answer a question.\n\nMonth | Number of tractors\nFebruary | 97\nMarch | 93\nApril | 90\nMay | 90\nJune | 98\nJuly | 96\nAugust | 90\nSeptember | 98", "question": "Read the following table regarding \"Tractors made\" and then write Python code to answer a question.\n\nMonth | Number of tractors\nFebruary | 97\nMarch | 93\nApril | 90\nMay | 90\nJune | 98\nJuly | 96\nAugust | 90\nSeptember | 98\n\nA farm equipment company kept a record of the number of tractors made each month. What is the mean of the numbers?", "answer": "94", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of tractors made each month\ntractors_made = [97, 93, 90, 90, 98, 96, 90, 98]\n# Calculate the mean\nmean_tractors = sum(tractors_made) / len(tractors_made)\nanswer = mean_tractors\nprint(answer)", "tractors_made = [97, 93, 90, 90, 98, 96, 90, 98]\nmean_tractors = sum(tractors_made) / len(tractors_made)\nanswer = int(mean_tractors)  # Convert to integer if a whole number is desired\nprint(answer)", "tractors_made = [97, 93, 90, 90, 98, 96, 90, 98]\nmean_tractors = sum(tractors_made) / len(tractors_made)\nanswer = mean_tractors  # Keep the mean as a float\nprint(answer)", "tractors_made = [97, 93, 90, 90, 98, 96, 90, 98]\nmean_tractors = sum(tractors_made) / len(tractors_made)\nanswer = int(mean_tractors)  # Convert the mean to an integer\nprint(answer)"], "prediction": [94.0, 94.0, 94.0, 94.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Donations\" and then answer a question.\n\nPerson | Animal rights | Clean water\nEve | $4 | $15\nEli | $12 | $5\nBridgette | $9 | $11\nKamal | $18 | $11\nJanelle | $13 | $13", "question": "Read the following table regarding \"Donations\" and then write Python code to answer a question.\n\nPerson | Animal rights | Clean water\nEve | $4 | $15\nEli | $12 | $5\nBridgette | $9 | $11\nKamal | $18 | $11\nJanelle | $13 | $13\n\nA philanthropic organization compared the amounts of money that its members donated to certain causes. How much more money did Eve donate to clean water than Eli?", "answer": "10", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Donations for Eve and Eli\neve_clean_water_donation = 15\neli_clean_water_donation = 5\n# Calculate the difference in donations\ndifference_donation = eve_clean_water_donation - eli_clean_water_donation\nanswer = difference_donation\nprint(answer)", "# Define the donations made by Eve and Eli to clean water\neve_clean_water_donation = 15\neli_clean_water_donation = 5\n\n# Calculate the difference in donations\ndifference_donation = eve_clean_water_donation - eli_clean_water_donation\n\n# Store the result in the answer variable\nanswer = difference_donation\n\n# Print the answer\nprint(answer)", "# Define the clean water donations for Eve and Eli\neve_clean_water_donation = 15\neli_clean_water_donation = 5\n\n# Calculate the difference in donations\ndifference_donation = eve_clean_water_donation - eli_clean_water_donation\n\n# Store the result as an integer for clarity\nanswer = int(difference_donation)\n\n# Output the answer with context\nprint(f\"Eve donated ${answer} more to clean water than Eli.\")", "# Define the donations for Eve and Eli\neve_clean_water_donation = 15\neli_clean_water_donation = 5\n\n# Calculate the difference in donations\ndifference_donation = eve_clean_water_donation - eli_clean_water_donation\n\n# Store the result in the answer variable\nanswer = difference_donation\n\n# Output the answer\nprint(answer)"
], "prediction": [10.0, 10.0, 10.0, 10.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbook about hiking | $9.00\nbook about outer space | $2.00\nbook about animals | $5.00\nbook about music | $2.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbook about hiking | $9.00\nbook about outer space | $2.00\nbook about animals | $5.00\nbook about music | $2.00\n\nVijay has $9.00. Does he have enough to buy a book about music and a book about hiking? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \ncost_book_hiking = 9.00\ncost_book_music = 2.00\ntotal_cost = cost_book_hiking + cost_book_music\nvijay_money = 9.00\n\n# Check if Vijay has enough money\nif vijay_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the costs of the books\ncost_book_hiking = 9.00\ncost_book_music = 2.00\n\n# Calculate the total cost\ntotal_cost = cost_book_hiking + cost_book_music\n\n# Define how much money Vijay has\nvijay_money = 9.00\n\n# Determine if Vijay has enough money to buy both books\nanswer = 'yes' if vijay_money >= total_cost else 'no'\n\n# Output the answer\nprint(answer)", "cost_book_hiking = 9.00\ncost_book_music = 2.00\ntotal_cost = cost_book_hiking + cost_book_music\nvijay_money = 9.00\nanswer = 'yes' if vijay_money >= total_cost else 'no'\nprint(answer)", "# Define the costs of the books\ncost_book_hiking = 9.00\ncost_book_music = 2.00\n\n# Calculate the total cost of the books\ntotal_cost = cost_book_hiking + cost_book_music\n\n# Amount of money Vijay has\nvijay_money = 9.00\n\n# Determine if Vijay has enough money\nanswer = 'yes' if vijay_money >= total_cost else 'no'\nprint(answer)"], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Stock prices\" and then answer a question.\n\nCompany | Wednesday | Thursday\nHouston Sporting Goods | $1 | $17\nComputer Data Company | $17 | $9\nWatson and Partners | $20 | $19", "question": "Read the following table regarding \"Stock prices\" and then write Python code to answer a question.\n\nCompany | Wednesday | Thursday\nHouston Sporting Goods | $1 | $17\nComputer Data Company | $17 | $9\nWatson and Partners | $20 | $19\n\nA stock broker followed the stock prices of a certain set of companies. How much more did Computer Data Company's stock cost on Wednesday than on Thursday?", "answer": "8", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \nprice_wednesday_computer_data = 17  # Price on Wednesday\nprice_thursday_computer_data = 9     # Price on Thursday\n\n# Calculate the difference in price\ndifference = price_wednesday_computer_data - price_thursday_computer_data\nanswer = difference\nprint(answer)", "# Define the stock prices for Computer Data Company on Wednesday and Thursday\nprice_wednesday_computer_data = 17  # Price on Wednesday\nprice_thursday_computer_data = 9     # Price on Thursday\n\n# Calculate how much more the stock cost on Wednesday than on Thursday\ndifference = price_wednesday_computer_data - price_thursday_computer_data\n\n# Store the result in the variable 'answer'\nanswer = difference\n\n# Print the answer\nprint(answer)", "# Prices for Computer Data Company\nprice_wednesday_computer_data = 17  # Price on Wednesday\nprice_thursday_computer_data = 9     # Price on Thursday\n\n# Calculate the difference in prices\ndifference = price_wednesday_computer_data - price_thursday_computer_data\n\n# Store the answer in the variable 'answer'\nanswer = difference\n\n# Output the answer\nprint(answer)", "# Prices of Computer Data Company on Wednesday and Thursday\nprice_wednesday_computer_data = 17  # Price on Wednesday\nprice_thursday_computer_data = 9     # Price on Thursday\n\n# Calculate the difference\ndifference = price_wednesday_computer_data - price_thursday_computer_data\n\n# Store the result in the 'answer' variable\nanswer = difference\n\n# Print the answer\nprint(answer)"
], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nfine gravel | $2 per lb\npebbles | $3 per lb\nblack sand | $3 per lb\nrocks | $3 per lb\ncoarse gravel | $3 per lb\nwhite sand | $5 per lb", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nfine gravel | $2 per lb\npebbles | $3 per lb\nblack sand | $3 per lb\nrocks | $3 per lb\ncoarse gravel | $3 per lb\nwhite sand | $5 per lb\n\nBrenda purchased 1.1 pounds of coarse gravel. What was the total cost?", "answer": "3.30", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_coarse_gravel = 3 \npounds_purchased = 1.1 \n# Calculate total cost\ntotal_cost = price_per_pound_coarse_gravel * pounds_purchased\nanswer = total_cost\nprint(answer)", "# Define the price per pound for coarse gravel and the amount purchased\nprice_per_pound_coarse_gravel = 3 \npounds_purchased = 1.1 \n\n# Calculate the total cost\ntotal_cost = price_per_pound_coarse_gravel * pounds_purchased\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "price_per_pound_coarse_gravel = 3 \npounds_purchased = 1.1 \nanswer = price_per_pound_coarse_gravel * pounds_purchased\nprint(answer)", "price_per_pound_coarse_gravel = 3 \npounds_purchased = 1.1 \ntotal_cost = price_per_pound_coarse_gravel * pounds_purchased\n\n# Format the total cost as a currency value\nanswer = f\"${total_cost:.2f}\"  \nprint(answer)"], "prediction": [3.3, 3.3, 3.3, "$3.30"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nDog | Weight change (oz.)\nSprinkles | 5\nChamp | -6", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nDog | Weight change (oz.)\nSprinkles | 5\nChamp | -6\n\nJordan has two dogs, Sprinkles and Champ. He is concerned because Sprinkles keeps eating Champ's food. Jordan asks their vet how much each dog's weight has changed since their last visit. Which dog's weight has changed the most? Choose from the the options: ['Sprinkles', 'Champ']", "answer": "Champ", "ques_type": "multi_choice", "choices": ["Sprinkles", "Champ"], "code": ["# Python code, return answer \nweight_change_sprinkles = 5 \nweight_change_champ = -6 \n# Determine which dog's weight has changed the most\nif abs(weight_change_sprinkles) > abs(weight_change_champ):\n    answer = 'Sprinkles'\nelse:\n    answer = 'Champ'\nprint(answer)", "weight_change_sprinkles = 5 \nweight_change_champ = -6 \n\n# Compare the absolute values of the weight changes\nif abs(weight_change_sprinkles) >= abs(weight_change_champ):\n    answer = 'Sprinkles'\nelse:\n    answer = 'Champ'\n\nprint(answer)", "weight_change_sprinkles = 5 \nweight_change_champ = -6 \n\n# Calculate the absolute weight changes\nabsolute_weight_change_sprinkles = abs(weight_change_sprinkles)\nabsolute_weight_change_champ = abs(weight_change_champ)\n\n# Determine which dog's weight has changed the most\nif absolute_weight_change_sprinkles >= absolute_weight_change_champ:\n    answer = 'Sprinkles'\nelse:\n    answer = 'Champ'\n\nprint(answer)", "weight_change_sprinkles = 5 \nweight_change_champ = -6 \n\n# Calculate absolute weight changes\nabsolute_weight_change_sprinkles = abs(weight_change_sprinkles)\nabsolute_weight_change_champ = abs(weight_change_champ)\n\n# Determine which dog's weight has changed the most\nif absolute_weight_change_sprinkles > absolute_weight_change_champ:\n    answer = 'Sprinkles'\nelse:\n    answer = 'Champ'\n\nprint(answer)"], "prediction": ["Champ", "Champ", "Champ", "Champ"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Daily snowfall\" and then answer a question.\n\nDay | Snowfall (inches)\nFriday | 1\nSaturday | 7\nSunday | 8\nMonday | 4\nTuesday | 7\nWednesday | 3\nThursday | 1", "question": "Read the following table regarding \"Daily snowfall\" and then write Python code to answer a question.\n\nDay | Snowfall (inches)\nFriday | 1\nSaturday | 7\nSunday | 8\nMonday | 4\nTuesday | 7\nWednesday | 3\nThursday | 1\n\nRafi graphed the amount of snow that fell in the last 7 days. What is the median of the numbers?", "answer": "4", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# List of snowfall amounts\nsnowfall_amounts = [1, 7, 8, 4, 7, 3, 1]\n# Sort the snowfall amounts\nsorted_snowfall = sorted(snowfall_amounts)\n# Calculate the median\nn = len(sorted_snowfall)\nif n % 2 == 0:\n    median = (sorted_snowfall[n // 2 - 1] + sorted_snowfall[n // 2]) / 2\nelse:\n    median = sorted_snowfall[n // 2]\nanswer = median\nprint(answer)", "# List of snowfall amounts over the last 7 days\nsnowfall_amounts = [1, 7, 8, 4, 7, 3, 1]\n\n# Sort the snowfall amounts\nsorted_snowfall = sorted(snowfall_amounts)\n\n# Calculate the number of entries\nn = len(sorted_snowfall)\n\n# Calculate the median\nif n % 2 == 0:\n    median = (sorted_snowfall[n // 2 - 1] + sorted_snowfall[n // 2]) / 2\nelse:\n    median = sorted_snowfall[n // 2]\n\n# Store the result in the variable 'answer'\nanswer = median\n\n# Output the answer\nprint(answer)", "snowfall_amounts = [1, 7, 8, 4, 7, 3, 1]  \nsorted_snowfall = sorted(snowfall_amounts)  \nn = len(sorted_snowfall)  \nif n % 2 == 0:  \n    median = (sorted_snowfall[n // 2 - 1] + sorted_snowfall[n // 2]) / 2  \nelse:  \n    median = sorted_snowfall[n // 2]  \nanswer = median  \nprint(answer)", "snowfall_amounts = [1, 7, 8, 4, 7, 3, 1]  \nsorted_snowfall = sorted(snowfall_amounts)  \nn = len(sorted_snowfall)  \nif n % 2 == 0:  \n    median = (sorted_snowfall[n // 2 - 1] + sorted_snowfall[n // 2]) // 2  # Use integer division\nelse:  \n    median = sorted_snowfall[n // 2]  \nanswer = median  \nprint(answer)"
], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Straight-A students\" and then answer a question.\n\nYear | Students\n2007 | 41\n2008 | 45\n2009 | 43\n2010 | 44\n2011 | 49", "question": "Read the following table regarding \"Straight-A students\" and then write Python code to answer a question.\n\nYear | Students\n2007 | 41\n2008 | 45\n2009 | 43\n2010 | 44\n2011 | 49\n\nA school administrator who was concerned about grade inflation looked over the number of straight-A students from year to year. According to the table, what was the rate of change between 2007 and 2008?", "answer": "4", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nstudents_2007 = 41\nstudents_2008 = 45\n# Calculate the rate of change\nrate_of_change = students_2008 - students_2007\nanswer = rate_of_change\nprint(answer)", "students_2007 = 41\nstudents_2008 = 45\nchange_in_students = students_2008 - students_2007\nrate_of_change = (change_in_students / students_2007) * 100\nanswer = rate_of_change\nprint(answer)", "students_2007 = 41\nstudents_2008 = 45\nchange_in_students = students_2008 - students_2007\nrate_of_change = (change_in_students / students_2007) * 100\nanswer = round(rate_of_change, 2)  # rounding to two decimal places for clarity\nprint(answer)", "# Define the number of straight-A students for the years 2007 and 2008\nstudents_2007 = 41\nstudents_2008 = 45\n\n# Calculate the change in the number of students\nchange_in_students = students_2008 - students_2007\n\n# Calculate the rate of change as a percentage\nrate_of_change = (change_in_students / students_2007) * 100\n\n# Store the result in the answer variable, rounding to two decimal places\nanswer = round(rate_of_change, 2)\n\n# Output the answer\nprint(answer)"], "prediction": [4.0, 9.7561, 9.76, 9.76], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nteapot | $38\ncookbook | $19\napron | $20\nbaking dish | $14\ncasserole dish | $20", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nteapot | $38\ncookbook | $19\napron | $20\nbaking dish | $14\ncasserole dish | $20\n\nHow much money does Philip need to buy 6 teapots and 2 casserole dishes?", "answer": "268", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_teapot = 38 \nprice_casserole_dish = 20 \n# Calculate the total cost\ntotal_cost = (6 * price_teapot) + (2 * price_casserole_dish)\nanswer = total_cost\nprint(answer)", "price_teapot = 38 \nprice_casserole_dish = 20 \ntotal_cost = (6 * price_teapot) + (2 * price_casserole_dish)\nanswer = total_cost\nprint(answer)", "price_teapot = 38 \nprice_casserole_dish = 20 \ntotal_cost = (6 * price_teapot) + (2 * price_casserole_dish)\nanswer = f\"${total_cost:.2f}\"  # Format the total cost as a currency\nprint(answer)", "price_teapot = 38 \nprice_casserole_dish = 20 \ntotal_cost = (6 * price_teapot) + (2 * price_casserole_dish)\nanswer = f\"${total_cost:.2f}\"  # Format the total cost as a currency\nprint(answer)"], "prediction": [268.0, 268.0, "$268.00", "$268.00"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbar of soap | $0.98\ncomb | $0.75\nnail file | $0.51\nhair tie | $0.94\nbottle of hand lotion | $0.93", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbar of soap | $0.98\ncomb | $0.75\nnail file | $0.51\nhair tie | $0.94\nbottle of hand lotion | $0.93\n\nEmma has $1.72. Does she have enough to buy a hair tie and a comb? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \n# Prices of the items\nprice_hair_tie = 0.94\nprice_comb = 0.75\n# Total cost for hair tie and comb\ntotal_cost = price_hair_tie + price_comb\n# Amount Emma has\nemma_money = 1.72\n# Determine if she has enough money\nif emma_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "price_hair_tie = 0.94\nprice_comb = 0.75\ntotal_cost = price_hair_tie + price_comb\nemma_money = 1.72\n\n# Check if Emma has enough money and assign the result to 'answer'\nanswer = 'yes' if emma_money >= total_cost else 'no'\n\nprint(answer)", "# Prices of the items\nprice_hair_tie = 0.94\nprice_comb = 0.75\n\n# Total cost of the items\ntotal_cost = price_hair_tie + price_comb\n\n# Amount of money Emma has\nemma_money = 1.72\n\n# Determine if Emma has enough money\nanswer = 'yes' if emma_money >= total_cost else 'no'\n\n# Output the answer\nprint(answer)", "price_hair_tie = 0.94\nprice_comb = 0.75\ntotal_cost = price_hair_tie + price_comb\nemma_money = 1.72\nanswer = 'yes' if emma_money >= total_cost else 'no'\nprint(answer)"], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Cars per parking lot\" and then answer a question.\n\nStem | Leaf \n1 | 0\n2 | \n3 | 0\n4 | 2, 4, 4, 4, 4\n5 | \n6 | \n7 | \n8 | 0", "question": "Read the following table regarding \"Cars per parking lot\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 0\n2 | \n3 | 0\n4 | 2, 4, 4, 4, 4\n5 | \n6 | \n7 | \n8 | 0\n\nIn a study on public parking, the director of transportation counted the number of cars in each of the city's parking lots. How many parking lots had exactly 44 cars?", "answer": "4", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Analyzing the stem-and-leaf display for the number of cars\n# The stem '4' indicates 40, and the leaf '4, 4, 4, 4' indicates there are four 44's.\nnumber_of_parking_lots_with_44_cars = 4  # There are four instances of 44 cars.\nanswer = number_of_parking_lots_with_44_cars\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [0]), (2, []), (3, [0]), (4, [2, 4, 4, 4, 4]), (5, []), (6, []), (7, []), (8, [0])]  \n\n# Initialize counter for parking lots with exactly 44 cars  \nparking_lots_with_44_cars = 0  \n\n# Iterate through the stem and leaf data structure and count relevant parking lots  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        cars_in_lot = stem * 10 + leaf  \n        if cars_in_lot == 44:  \n            parking_lots_with_44_cars += 1  \n\nanswer = parking_lots_with_44_cars  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [0]), (2, []), (3, [0]), (4, [2, 4, 4, 4, 4]), (5, []), (6, []), (7, []), (8, [0])]  \n\n# Initialize counter for parking lots with exactly 44 cars  \nparking_lots_with_44_cars = 0  \n\n# Iterate through the stem and leaf data structure and count relevant parking lots  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        cars_in_lot = stem * 10 + leaf  \n        if cars_in_lot == 44:  \n            parking_lots_with_44_cars += 1  \n\n# Store the result as an integer  \nanswer = parking_lots_with_44_cars  \nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [(1, [0]), (2, []), (3, [0]), (4, [2, 4, 4, 4, 4]), (5, []), (6, []), (7, []), (8, [0])]\n\n# Initialize counter for parking lots with exactly 44 cars\nparking_lots_with_44_cars = 0\n\n# Iterate through the stem and leaf data structure and count relevant parking lots\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        cars_in_lot = stem * 10 + leaf\n        if cars_in_lot == 44:\n            parking_lots_with_44_cars += 1\n\n# Store the answer as an integer\nanswer = parking_lots_with_44_cars\nprint(answer)"
], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npin with a picture of the beach | $0.83\npicture of a shark | $0.87\nsouvenir cup | $0.79\nshell necklace | $0.43\ndolphin bookmark | $0.90", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npin with a picture of the beach | $0.83\npicture of a shark | $0.87\nsouvenir cup | $0.79\nshell necklace | $0.43\ndolphin bookmark | $0.90\n\nHow much money does Madelyn need to buy 9 shell necklaces?", "answer": "3.87", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_shell_necklace = 0.43 \nquantity_shell_necklaces = 9 \n# Calculate total cost\ntotal_cost = price_per_shell_necklace * quantity_shell_necklaces\nanswer = total_cost\nprint(answer)", "price_per_shell_necklace = 0.43 \nquantity_shell_necklaces = 9 \ntotal_cost = price_per_shell_necklace * quantity_shell_necklaces\nanswer = total_cost\nprint(answer)", "price_per_shell_necklace = 0.43 \nquantity_shell_necklaces = 9 \ntotal_cost = price_per_shell_necklace * quantity_shell_necklaces\nanswer = total_cost\nprint(f\"${answer:.2f}\")", "price_per_shell_necklace = 0.43 \nquantity_shell_necklaces = 9 \ntotal_cost = price_per_shell_necklace * quantity_shell_necklaces\nanswer = total_cost  # Store the total cost in the answer variable\nprint(answer)  # Output the answer"], "prediction": [3.87, 3.87, 3.87, 3.87], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Swimming team sizes (number of swimmers)\" and then answer a question.\n\nStem | Leaf \n2 | 2, 3, 7, 7\n3 | 2\n4 | 0, 3, 4\n5 | 1, 4, 8\n6 | 2, 2, 4, 5, 9", "question": "Read the following table regarding \"Swimming team sizes (number of swimmers)\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 2, 3, 7, 7\n3 | 2\n4 | 0, 3, 4\n5 | 1, 4, 8\n6 | 2, 2, 4, 5, 9\n\nAt a swim meet, Ernesto noted the size of various swim teams. How many teams have at least 30 swimmers?", "answer": "12", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Each stem represents the tens place, and the leaves represent the units place.\n# Teams with at least 30 swimmers can be read from the stem \"3\", \"4\", \"5\", and \"6\".\n\n# Teams sizes based on the stem and leaves:\nteams_sizes = [\n    22, 23, 27, 27,  # Stem 2\n    32,              # Stem 3\n    40, 43, 44,     # Stem 4\n    51, 54, 58,     # Stem 5\n    62, 62, 64, 65, 69  # Stem 6\n]\n\n# Count teams with at least 30 swimmers\nteams_with_at_least_30 = sum(1 for size in teams_sizes if size >= 30)\nanswer = teams_with_at_least_30\nprint(answer)", "teams_sizes = [\n    22, 23, 27, 27,  # Stem 2\n    32,              # Stem 3\n    40, 43, 44,     # Stem 4\n    51, 54, 58,     # Stem 5\n    62, 62, 64, 65, 69  # Stem 6\n]\n\n# Count the number of teams with at least 30 swimmers\nteams_with_at_least_30 = sum(1 for size in teams_sizes if size >= 30)\nanswer = teams_with_at_least_30  # This will be an integer\nprint(answer)", "teams_sizes = [\n    22, 23, 27, 27,  # Stem 2\n    32,              # Stem 3\n    40, 43, 44,     # Stem 4\n    51, 54, 58,     # Stem 5\n    62, 62, 64, 65, 69  # Stem 6\n]\nteams_with_at_least_30 = sum(1 for size in teams_sizes if size >= 30)\nanswer = int(teams_with_at_least_30)  # Convert to integer\nprint(answer)", "# Define the sizes of the swim teams based on the stem-and-leaf data\nteams_sizes = [\n    22, 23, 27, 27,  # Stem 2\n    32,              # Stem 3\n    40, 43, 44,     # Stem 4\n    51, 54, 58,     # Stem 5\n    62, 62, 64, 65, 69  # Stem 6\n]\n\n# Count the number of teams with at least 30 swimmers\nteams_with_at_least_30 = sum(1 for size in teams_sizes if size >= 30)\n\n# Store the result as an integer\nanswer = teams_with_at_least_30  \n\nprint(answer)"
], "prediction": [12.0, 12.0, 12.0, 12.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of bags | Number of silver buttons\n1 | 5\n2 | 10\n3 | 15\n4 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of bags | Number of silver buttons\n1 | 5\n2 | 10\n3 | 15\n4 | ?\n\nEach bag has 5 silver buttons. How many silver buttons are in 4 bags?", "answer": "20", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of bags\nnumber_of_bags = 4\n# Number of silver buttons per bag\nbuttons_per_bag = 5\n# Total silver buttons in 4 bags\ntotal_buttons = number_of_bags * buttons_per_bag\nanswer = total_buttons\nprint(answer)", "number_of_bags = 4\nbuttons_per_bag = 5\ntotal_buttons = number_of_bags * buttons_per_bag\nanswer = total_buttons  # This will be an integer\nprint(answer)", "number_of_bags = 4\nbuttons_per_bag = 5\ntotal_buttons = number_of_bags * buttons_per_bag\nanswer = int(total_buttons)  # Ensuring the result is an integer\nprint(answer)", "number_of_bags = 4\nbuttons_per_bag = 5\ntotal_buttons = number_of_bags * buttons_per_bag\nanswer = total_buttons  # No need to convert to int\nprint(answer)"], "prediction": [20.0, 20.0, 20.0, 20.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Planting seeds in the garden\" and then answer a question.\n\nSeeds planted | Frequency\n0 | 2\n1 | 3\n2 | 14\n3 | 13\n4 | 5\n5 | 19\n6 | 11", "question": "Read the following table regarding \"Planting seeds in the garden\" and then write Python code to answer a question.\n\nSeeds planted | Frequency\n0 | 2\n1 | 3\n2 | 14\n3 | 13\n4 | 5\n5 | 19\n6 | 11\n\nFor Earth Day, Fairfax High's environmental club tracked the number of seeds planted by its members. How many members planted fewer than 3 seeds?", "answer": "19", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency data for seeds planted\nfrequency_data = {\n    0: 2,\n    1: 3,\n    2: 14,\n    3: 13,\n    4: 5,\n    5: 19,\n    6: 11\n}\n# Calculate the total number of members who planted fewer than 3 seeds\nmembers_fewer_than_3 = frequency_data[0] + frequency_data[1] + frequency_data[2]\nanswer = members_fewer_than_3\nprint(answer)", "frequency_data = {\n    0: 2,\n    1: 3,\n    2: 14,\n    3: 13,\n    4: 5,\n    5: 19,\n    6: 11\n}\n\n# Count members who planted fewer than 3 seeds (only 0 and 1 seeds)\nmembers_fewer_than_3 = frequency_data[0] + frequency_data[1]\nanswer = members_fewer_than_3\nprint(answer)", "frequency_data = {\n    0: 2,\n    1: 3,\n    2: 14,\n    3: 13,\n    4: 5,\n    5: 19,\n    6: 11\n}\n\n# Calculate the number of members who planted fewer than 3 seeds\nmembers_fewer_than_3 = frequency_data[0] + frequency_data[1] + frequency_data[2]\nanswer = members_fewer_than_3\nprint(answer)", "frequency_data = {\n    0: 2,\n    1: 3,\n    2: 14,\n    3: 13,\n    4: 5,\n    5: 19,\n    6: 11\n}\n\n# Calculate the number of members who planted fewer than 3 seeds\nmembers_fewer_than_3 = frequency_data[0] + frequency_data[1]\nanswer = members_fewer_than_3\nprint(answer)"], "prediction": [19.0, 5.0, 19.0, 5.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbottle of sunscreen | $7.77\ntube of toothpaste | $1.41\npackage of dental floss | $1.55\ntoothbrush | $2.11", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbottle of sunscreen | $7.77\ntube of toothpaste | $1.41\npackage of dental floss | $1.55\ntoothbrush | $2.11\n\nHow much money does Annie need to buy a bottle of sunscreen, a package of dental floss, and a toothbrush?", "answer": "11.43", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nprice_sunscreen = 7.77\nprice_dental_floss = 1.55\nprice_toothbrush = 2.11\n\n# Total cost\ntotal_cost = price_sunscreen + price_dental_floss + price_toothbrush\nanswer = total_cost\nprint(answer)", "# Prices of the items\nprice_sunscreen = 7.77\nprice_dental_floss = 1.55\nprice_toothbrush = 2.11\n\n# Calculate total cost for the items Annie wants to buy\ntotal_cost = price_sunscreen + price_dental_floss + price_toothbrush\nanswer = total_cost\n\nprint(answer)", "price_sunscreen = 7.77\nprice_dental_floss = 1.55\nprice_toothbrush = 2.11\ntotal_cost = price_sunscreen + price_dental_floss + price_toothbrush\nanswer = \"{:.2f}\".format(total_cost)  # Format to two decimal places\nprint(answer)", "# Prices of the items\nprice_sunscreen = 7.77\nprice_dental_floss = 1.55\nprice_toothbrush = 2.11\n\n# Calculate total cost\ntotal_cost = price_sunscreen + price_dental_floss + price_toothbrush\n\n# Store the result as a float\nanswer = total_cost\n\n# Print the answer\nprint(answer)"], "prediction": [11.43, 11.43, 11.43, 11.43], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Pieces of pepperoni per pizza\" and then answer a question.\n\nStem | Leaf \n1 | 2, 5, 6\n2 | 2, 5, 6, 8, 9\n3 | 1, 7, 9\n4 | 0, 3, 3", "question": "Read the following table regarding \"Pieces of pepperoni per pizza\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 2, 5, 6\n2 | 2, 5, 6, 8, 9\n3 | 1, 7, 9\n4 | 0, 3, 3\n\nJayla counted the number of pieces of pepperoni on each pizza she made. How many pizzas had fewer than 46 pieces of pepperoni?", "answer": "14", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Extracting the values from the stem-and-leaf display\npieces_of_pepperoni = [\n    12, 15, 16,  # Stem 1\n    22, 25, 26, 28, 29,  # Stem 2\n    31, 37, 39,  # Stem 3\n    40, 43, 43  # Stem 4\n]\n\n# Count how many pizzas had fewer than 46 pieces of pepperoni\ncount_fewer_than_46 = sum(1 for pieces in pieces_of_pepperoni if pieces < 46)\nanswer = count_fewer_than_46\nprint(answer)", "pieces_of_pepperoni = [\n    12, 15, 16,  # Stem 1\n    22, 25, 26, 28, 29,  # Stem 2\n    31, 37, 39,  # Stem 3\n    40, 43, 43  # Stem 4\n]\n\n# Count pizzas with fewer than 46 pieces of pepperoni\ncount_fewer_than_46 = sum(1 for pieces in pieces_of_pepperoni if pieces < 46)\nanswer = int(count_fewer_than_46)  # Ensure the count is an integer\nprint(answer)", "pieces_of_pepperoni = [\n    12, 15, 16,  # Stem 1\n    22, 25, 26, 28, 29,  # Stem 2\n    31, 37, 39,  # Stem 3\n    40, 43, 43  # Stem 4\n]\n\n# Count the number of pizzas with fewer than 46 pieces of pepperoni\ncount_fewer_than_46 = sum(1 for pieces in pieces_of_pepperoni if pieces < 46)\nanswer = count_fewer_than_46  # Store the count as an integer\nprint(answer)", "pieces_of_pepperoni = [\n    12, 15, 16,  # Stem 1\n    22, 25, 26, 28, 29,  # Stem 2\n    31, 37, 39,  # Stem 3\n    40, 43, 43  # Stem 4\n]\n\ncount_fewer_than_46 = sum(1 for pieces in pieces_of_pepperoni if pieces < 46)\nanswer = int(count_fewer_than_46)  # Explicitly cast the count to an integer\nprint(answer)"
], "prediction": [14.0, 14.0, 14.0, 14.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Computer lab schedule\" and then answer a question.\n\nClass | Begin | End\nIntroduction to Typing | 8:05 A.M. | 9:10 A.M.\nAdvanced Typing | 9:15 A.M. | 10:25 A.M.\nComputer Finance | 10:30 A.M. | 11:00 A.M.\nWord Processing | 11:10 A.M. | 11:50 A.M.\nComputer Science | 11:55 A.M. | 12:25 P.M.\nComputer Graphics | 12:40 P.M. | 1:45 P.M.\nBeginning Programming | 1:55 P.M. | 3:15 P.M.\nWeb Page Design | 3:20 P.M. | 4:25 P.M.", "question": "Read the following table regarding \"Computer lab schedule\" and then write Python code to answer a question.\n\nClass | Begin | End\nIntroduction to Typing | 8:05 A.M. | 9:10 A.M.\nAdvanced Typing | 9:15 A.M. | 10:25 A.M.\nComputer Finance | 10:30 A.M. | 11:00 A.M.\nWord Processing | 11:10 A.M. | 11:50 A.M.\nComputer Science | 11:55 A.M. | 12:25 P.M.\nComputer Graphics | 12:40 P.M. | 1:45 P.M.\nBeginning Programming | 1:55 P.M. | 3:15 P.M.\nWeb Page Design | 3:20 P.M. | 4:25 P.M.\n\nLook at the following schedule. Which class begins at 3.20 P.M.? Choose from the the options: ['Word Processing class', 'Computer Finance class', 'Web Page Design class', 'Computer Graphics class']", "answer": "Web Page Design class", "ques_type": "multi_choice", "choices": ["Word Processing class", "Computer Finance class", "Web Page Design class", "Computer Graphics class"], "code": [
  "# Python code, return answer \nclass_begin_time = {\n    'Word Processing class': '11:10 A.M.',\n    'Computer Finance class': '10:30 A.M.',\n    'Web Page Design class': '3:20 P.M.',\n    'Computer Graphics class': '12:40 P.M.'\n}\n# Find the class that begins at 3:20 P.M.\nanswer = [class_name for class_name, start_time in class_begin_time.items() if start_time == '3:20 P.M.'][0]\nprint(answer)", "# Define the full class schedule in a dictionary\nclass_schedule = {\n    'Introduction to Typing': '8:05 A.M.',\n    'Advanced Typing': '9:15 A.M.',\n    'Computer Finance': '10:30 A.M.',\n    'Word Processing': '11:10 A.M.',\n    'Computer Science': '11:55 A.M.',\n    'Computer Graphics': '12:40 P.M.',\n    'Beginning Programming': '1:55 P.M.',\n    'Web Page Design': '3:20 P.M.'\n}\n\n# Find the class that begins at 3:20 P.M.\nanswer = [class_name for class_name, start_time in class_schedule.items() if start_time == '3:20 P.M.'][0]\nprint(answer)", "class_schedule = {\n    'Introduction to Typing': '8:05 A.M.',\n    'Advanced Typing': '9:15 A.M.',\n    'Computer Finance': '10:30 A.M.',\n    'Word Processing': '11:10 A.M.',\n    'Computer Science': '11:55 A.M.',\n    'Computer Graphics': '12:40 P.M.',\n    'Beginning Programming': '1:55 P.M.',\n    'Web Page Design': '3:20 P.M.'\n}\n\n# Check which class starts at 3:20 P.M.\nanswer = 'Web Page Design class' if class_schedule.get('Web Page Design') == '3:20 P.M.' else None\nprint(answer)", "# Define the class schedule as a dictionary\nclass_schedule = {\n    'Introduction to Typing': '8:05 A.M.',\n    'Advanced Typing': '9:15 A.M.',\n    'Computer Finance': '10:30 A.M.',\n    'Word Processing': '11:10 A.M.',\n    'Computer Science': '11:55 A.M.',\n    'Computer Graphics': '12:40 P.M.',\n    'Beginning Programming': '1:55 P.M.',\n    'Web Page Design': '3:20 P.M.'\n}\n\n# Initialize variable for the answer\nanswer = None\n\n# Iterate through the class schedule to find the class that begins at 3:20 P.M.\nfor class_name, start_time in class_schedule.items():\n    if start_time == '3:20 P.M.':\n        answer = class_name + ' class'  # Append 'class' to the name for clarity\n        break  # Exit the loop once the class is found\n\nprint(answer)"
], "prediction": ["Web Page Design class", "Web Page Design", "Web Page Design class", "Web Page Design class"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npainting signed by a famous artist | $9,254.00\njersey signed by a famous basketball player | $6,047.00\nphotograph signed by a famous movie star | $8,658.00\nball signed by a famous football player | $1,788.00\nphotograph signed by a famous race car driver | $2,896.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npainting signed by a famous artist | $9,254.00\njersey signed by a famous basketball player | $6,047.00\nphotograph signed by a famous movie star | $8,658.00\nball signed by a famous football player | $1,788.00\nphotograph signed by a famous race car driver | $2,896.00\n\nHow much more does a jersey signed by a famous basketball player cost than a photograph signed by a famous race car driver?", "answer": "3,151", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_jersey = 6047.00\ncost_photograph_race_car_driver = 2896.00\n# Calculate the difference in cost\ndifference_in_cost = cost_jersey - cost_photograph_race_car_driver\nanswer = difference_in_cost\nprint(answer)", "# Define the costs of the items\ncost_jersey = 6047.00\ncost_photograph_race_car_driver = 2896.00\n\n# Calculate the difference in cost\ndifference_in_cost = cost_jersey - cost_photograph_race_car_driver\n\n# Store the result in the variable 'answer'\nanswer = difference_in_cost\n\n# Output the answer\nprint(answer)", "# Define the costs of the items\ncost_jersey = 6047.00\ncost_photograph_race_car_driver = 2896.00\n\n# Calculate the difference in cost\ndifference_in_cost = cost_jersey - cost_photograph_race_car_driver\n\n# Store the result in the variable 'answer'\nanswer = difference_in_cost\n\n# Output the answer\nprint(answer)", "# Define the costs of the items\ncost_jersey = 6047.00\ncost_photograph_race_car_driver = 2896.00\n\n# Calculate the difference in cost\ndifference_in_cost = cost_jersey - cost_photograph_race_car_driver\n\n# Store the result in the variable 'answer'\nanswer = difference_in_cost\n\n# Output the answer\nprint(answer)"], "prediction": [3151.0, 3151.0, 3151.0, 3151.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Sixth grade classes\" and then answer a question.\n\nTeacher | Boys | Girls\nMiss West | 5 | 16\nMs. North | 6 | 8\nMrs. South | 5 | 18", "question": "Read the following table regarding \"Sixth grade classes\" and then write Python code to answer a question.\n\nTeacher | Boys | Girls\nMiss West | 5 | 16\nMs. North | 6 | 8\nMrs. South | 5 | 18\n\nSixth graders at Belleville Middle School are taught in classes of various sizes. How many more girls are in Miss West's class than Ms. North's class?", "answer": "8", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of girls in each class\ngirls_miss_west = 16\ngirls_ms_north = 8\n# Calculate the difference\ndifference = girls_miss_west - girls_ms_north\nanswer = difference\nprint(answer)", "girls_miss_west = 16\ngirls_ms_north = 8\ndifference = girls_miss_west - girls_ms_north\nanswer = difference  # This will be an integer\nprint(answer)", "girls_miss_west = 16\ngirls_ms_north = 8\ndifference = girls_miss_west - girls_ms_north\nanswer = int(difference)  # Ensuring the result is an integer\nprint(answer)", "girls_miss_west = 16\ngirls_ms_north = 8\ndifference = girls_miss_west - girls_ms_north\nanswer = difference  # No need to convert to int as the result is already an integer\nprint(answer)"], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Miles hiked\" and then answer a question.\n\nDay | Number of miles\nSaturday | 10\nSunday | 9\nMonday | 6\nTuesday | 10\nWednesday | 10", "question": "Read the following table regarding \"Miles hiked\" and then write Python code to answer a question.\n\nDay | Number of miles\nSaturday | 10\nSunday | 9\nMonday | 6\nTuesday | 10\nWednesday | 10\n\nEli went on a camping trip and logged the number of miles he hiked each day. What is the mean of the numbers?", "answer": "9", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Miles hiked each day\nmiles_hiked = [10, 9, 6, 10, 10]\n# Calculate the mean\nmean_miles = sum(miles_hiked) / len(miles_hiked)\nanswer = mean_miles\nprint(answer)", "miles_hiked = [10, 9, 6, 10, 10]\nmean_miles = sum(miles_hiked) / len(miles_hiked)\nanswer = int(mean_miles)  # Convert the mean to an integer\nprint(answer)", "miles_hiked = [10, 9, 6, 10, 10]\nmean_miles = sum(miles_hiked) / len(miles_hiked)\nanswer = mean_miles  # Keep the mean as a float\nprint(answer)", "miles_hiked = [10, 9, 6, 10, 10]\nmean_miles = sum(miles_hiked) / len(miles_hiked)\nanswer = mean_miles  # The mean will naturally be a float due to division\nprint(answer)"], "prediction": [9.0, 9.0, 9.0, 9.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of bushes | Number of flowers\n1 | 2\n2 | 4\n3 | 6\n4 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of bushes | Number of flowers\n1 | 2\n2 | 4\n3 | 6\n4 | ?\n\nEach bush has 2 flowers. How many flowers are on 4 bushes?", "answer": "8", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Each bush has 2 flowers\nflowers_per_bush = 2\nnumber_of_bushes = 4\n# Calculate the total number of flowers\ntotal_flowers = flowers_per_bush * number_of_bushes\nanswer = total_flowers\nprint(answer)", "flowers_per_bush = 2\nnumber_of_bushes = 4\ntotal_flowers = flowers_per_bush * number_of_bushes\nanswer = int(total_flowers)  # Convert to integer to avoid floating-point output\nprint(answer)", "# Define the number of flowers per bush and the number of bushes\nflowers_per_bush = 2\nnumber_of_bushes = 4\n\n# Calculate the total number of flowers\ntotal_flowers = flowers_per_bush * number_of_bushes\n\n# Store the result as an integer\nanswer = total_flowers  # This will be an integer since both operands are integers\n\nprint(answer)  # This will output 8", "# Define the number of flowers per bush and the number of bushes\nflowers_per_bush = 2\nnumber_of_bushes = 4\n\n# Calculate the total number of flowers\ntotal_flowers = flowers_per_bush * number_of_bushes\n\n# Ensure the result is an integer\nanswer = int(total_flowers)\nprint(answer)  # This will output 8"], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Apples picked\" and then answer a question.\n\nDay | Number of apples\nTuesday | 50\nWednesday | 44\nThursday | 41\nFriday | 45\nSaturday | 44\nSunday | 40", "question": "Read the following table regarding \"Apples picked\" and then write Python code to answer a question.\n\nDay | Number of apples\nTuesday | 50\nWednesday | 44\nThursday | 41\nFriday | 45\nSaturday | 44\nSunday | 40\n\nThe owner of an orchard kept records about how many apples were picked in the past 6 days. What is the mean of the numbers?", "answer": "44", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of apples picked each day\napples_picked = [50, 44, 41, 45, 44, 40]\n# Calculate the mean\nmean_apples = sum(apples_picked) / len(apples_picked)\nanswer = mean_apples\nprint(answer)", "apples_picked = [50, 44, 41, 45, 44, 40]\nmean_apples = sum(apples_picked) / len(apples_picked)\nanswer = round(mean_apples)  # Round to the nearest integer for clarity\nprint(answer)", "apples_picked = [50, 44, 41, 45, 44, 40]\nmean_apples = sum(apples_picked) / len(apples_picked)\nanswer = round(mean_apples)  # Round to the nearest integer\nprint(answer)", "apples_picked = [50, 44, 41, 45, 44, 40]\nmean_apples = sum(apples_picked) / len(apples_picked)\nanswer = int(round(mean_apples))  # Convert to integer after rounding\nprint(answer)"], "prediction": [44.0, 44.0, 44.0, 44.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Lemon-flavored candies per bag\" and then answer a question.\n\nStem | Leaf \n0 | 2, 5\n1 | 3, 5\n2 | 5\n3 | 3\n4 | 7\n5 | \n6 | 7\n7 | 4, 6\n8 | 4, 5\n9 | 0", "question": "Read the following table regarding \"Lemon-flavored candies per bag\" and then write Python code to answer a question.\n\nStem | Leaf \n0 | 2, 5\n1 | 3, 5\n2 | 5\n3 | 3\n4 | 7\n5 | \n6 | 7\n7 | 4, 6\n8 | 4, 5\n9 | 0\n\nA machine at the candy factory dispensed different numbers of lemon-flavored candies into various bags. What is the largest number of lemon-flavored candies?", "answer": "90", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number of lemon-flavored candies corresponds to the largest value in the stem-and-leaf display.\nlargest_candies = 90  # From the stem \"9 | 0\", the value is 90 candies.\nanswer = largest_candies\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(0, [2, 5]), (1, [3, 5]), (2, [5]), (3, [3]), (4, [7]), (5, []), \n                 (6, [7]), (7, [4, 6]), (8, [4, 5]), (9, [0])]  \n\n# Initialize variable to store the largest number of candies  \nlargest_candies = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number of candies  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        candies_per_bag = stem * 10 + leaf  \n        if candies_per_bag > largest_candies:  \n            largest_candies = candies_per_bag  \n\n# Check the last stem as well (stem 9 has a leaf of 0, which represents 90)  \nlargest_candies = max(largest_candies, 90)  # This is a safety check, but it's already accounted in the loop.\n\nanswer = largest_candies  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(0, [2, 5]), (1, [3, 5]), (2, [5]), (3, [3]), (4, [7]), (5, []), \n                 (6, [7]), (7, [4, 6]), (8, [4, 5]), (9, [0])]  \n\n# Initialize variable to hold the largest number of candies  \nlargest_candies = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number of candies  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        candies_per_bag = stem * 10 + leaf  \n        if candies_per_bag > largest_candies:  \n            largest_candies = candies_per_bag  \n\n# Store the result in answer variable  \nanswer = largest_candies  \nprint(answer)", "stem_and_leaf = [(0, [2, 5]), (1, [3, 5]), (2, [5]), (3, [3]), (4, [7]), (5, []), \n                 (6, [7]), (7, [4, 6]), (8, [4, 5]), (9, [0])]  \nlargest_candies = 0  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        candies_per_bag = stem * 10 + leaf  \n        if candies_per_bag > largest_candies:  \n            largest_candies = candies_per_bag  \nanswer = int(largest_candies)  # Convert to integer\nprint(answer)"
], "prediction": [90.0, 90.0, 90.0, 90.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nboat show ticket | $10.39\nbasketball ticket | $46.99\norchestra ticket | $58.16\ncar show ticket | $29.89", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nboat show ticket | $10.39\nbasketball ticket | $46.99\norchestra ticket | $58.16\ncar show ticket | $29.89\n\nHow much more does an orchestra ticket cost than a basketball ticket?", "answer": "11.17", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \norchestra_ticket_cost = 58.16 \nbasketball_ticket_cost = 46.99 \n# Calculate the difference\ndifference = orchestra_ticket_cost - basketball_ticket_cost\nanswer = difference\nprint(answer)", "# Define the costs of the tickets\norchestra_ticket_cost = 58.16 \nbasketball_ticket_cost = 46.99 \n\n# Calculate the difference in cost\ndifference = orchestra_ticket_cost - basketball_ticket_cost\n\n# Assign the result to the answer variable\nanswer = difference\n\n# Print the answer\nprint(answer)", "orchestra_ticket_cost = 58.16 \nbasketball_ticket_cost = 46.99 \ndifference = orchestra_ticket_cost - basketball_ticket_cost\nanswer = f\"The orchestra ticket costs ${difference:.2f} more than the basketball ticket.\"\nprint(answer)", "orchestra_ticket_cost = 58.16 \nbasketball_ticket_cost = 46.99 \ndifference = orchestra_ticket_cost - basketball_ticket_cost\nanswer = difference  # Store the numerical difference\nprint(answer)"], "prediction": [11.17, 11.17, "The orchestra ticket costs $11.17 more than the basketball ticket.", 11.17], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Club membership\" and then answer a question.\n\nClub | Number of members\nFrench club | 186\nmath club | 181\nJapanese club | 168\nSpanish club | 116", "question": "Read the following table regarding \"Club membership\" and then write Python code to answer a question.\n\nClub | Number of members\nFrench club | 186\nmath club | 181\nJapanese club | 168\nSpanish club | 116\n\nThe local high school found out how many members each club had. Which club has the fewest members? Choose from the the options: ['French club', 'math club', 'Japanese club', 'Spanish club']", "answer": "Spanish club", "ques_type": "multi_choice", "choices": ["French club", "math club", "Japanese club", "Spanish club"], "code": [
  "# Python code, return answer \nclubs = {\n    'French club': 186,\n    'math club': 181,\n    'Japanese club': 168,\n    'Spanish club': 116\n}\n# Find the club with the fewest members\nfewest_members_club = min(clubs, key=clubs.get)\nanswer = fewest_members_club\nprint(answer)", "# Store the clubs and their corresponding number of members in a dictionary  \nclubs = {\n    'French club': 186,\n    'math club': 181,\n    'Japanese club': 168,\n    'Spanish club': 116\n}\n\n# Find the club with the fewest members  \nfewest_members_club = min(clubs, key=clubs.get)\n\n# Store the answer in the variable 'answer'  \nanswer = fewest_members_club  \n\n# Output the answer  \nprint(answer)", "# Store the club names and their corresponding number of members in a dictionary  \nclubs = {\n    'French club': 186,\n    'math club': 181,\n    'Japanese club': 168,\n    'Spanish club': 116\n}\n\n# Find the club with the fewest members  \nfewest_members_club = min(clubs, key=clubs.get)\nanswer = fewest_members_club  \n\n# Output the answer\nprint(answer)", "# Define the clubs and their corresponding number of members\nclubs = {\n    'French club': 186,\n    'math club': 181,\n    'Japanese club': 168,\n    'Spanish club': 116\n}\n\n# List of options to choose from\noptions = ['French club', 'math club', 'Japanese club', 'Spanish club']\n\n# Find the club with the fewest members\nfewest_members_club = min(clubs, key=clubs.get)\n\n# Check if the found club is in the options\nif fewest_members_club in options:\n    answer = fewest_members_club\nelse:\n    answer = None  # or handle the case where the answer is not in options\n\nprint(answer)"
], "prediction": ["Spanish club", "Spanish club", "Spanish club", "Spanish club"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Trivia game scores\" and then answer a question.\n\nName | Score\nTamir | 81\nDillon | 82\nLuna | 87\nWayne | 86", "question": "Read the following table regarding \"Trivia game scores\" and then write Python code to answer a question.\n\nName | Score\nTamir | 81\nDillon | 82\nLuna | 87\nWayne | 86\n\nSome friends played a trivia game and recorded their scores. Who had the highest score? Choose from the the options: ['Tamir', 'Dillon', 'Luna', 'Wayne']", "answer": "Luna", "ques_type": "multi_choice", "choices": ["Tamir", "Dillon", "Luna", "Wayne"], "code": ["# Python code, return answer \nscores = {\n    'Tamir': 81,\n    'Dillon': 82,\n    'Luna': 87,\n    'Wayne': 86\n}\n# Find the friend with the highest score\nhighest_score_friend = max(scores, key=scores.get)\nanswer = highest_score_friend\nprint(answer)", "# Define the scores of friends in a trivia game\nscores = {\n    'Tamir': 81,\n    'Dillon': 82,\n    'Luna': 87,\n    'Wayne': 86\n}\n\n# Find the friend with the highest score\nhighest_score_friend = max(scores, key=scores.get)\n\n# Store the result in the answer variable\nanswer = highest_score_friend\n\n# Output the answer\nprint(answer)", "# Store the scores of friends in a dictionary  \nscores = {  \n    'Tamir': 81,  \n    'Dillon': 82,  \n    'Luna': 87,  \n    'Wayne': 86  \n}  \n  \n# Find the friend with the highest score  \nanswer = max(scores, key=scores.get)  \nprint(answer)", "scores = {  \n    'Tamir': 81,  \n    'Dillon': 82,  \n    'Luna': 87,  \n    'Wayne': 86  \n}  \nanswer = max(scores, key=scores.get)  \nprint(answer)  # This line outputs the name of the person with the highest score"], "prediction": ["Luna", "Luna", "Luna", "Luna"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Pets\" and then answer a question.\n\nName | Number of pets\nDustin | 1\nMatt | 7\nAubrey | 4\nBrittany | 4\nLeon | 9", "question": "Read the following table regarding \"Pets\" and then write Python code to answer a question.\n\nName | Number of pets\nDustin | 1\nMatt | 7\nAubrey | 4\nBrittany | 4\nLeon | 9\n\nSome students compared how many pets they have. What is the mean of the numbers?", "answer": "5", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of the number of pets\npets_count = [1, 7, 4, 4, 9]\n# Calculate the mean\nmean_pets = sum(pets_count) / len(pets_count)\nanswer = mean_pets\nprint(answer)", "# List of the number of pets each student has  \npets_count = [1, 7, 4, 4, 9]  \n\n# Calculate the mean of the number of pets  \nmean_pets = sum(pets_count) / len(pets_count)  \n\n# Store the result in the variable 'answer'  \nanswer = mean_pets  \n\n# Print the answer  \nprint(answer)", "pets_count = [1, 7, 4, 4, 9]  \nmean_pets = sum(pets_count) / len(pets_count)  \nanswer = round(mean_pets, 2)  # rounding to 2 decimal places for better presentation\nprint(answer)", "pets_count = [1, 7, 4, 4, 9]  \nmean_pets = sum(pets_count) / len(pets_count)  \nanswer = round(mean_pets, 2)  # rounding to 2 decimal places for better presentation\nprint(answer)"], "prediction": [5.0, 5.0, 5.0, 5.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Tractors made\" and then answer a question.\n\nMonth | Number of tractors\nDecember | 885\nJanuary | 859\nFebruary | 895\nMarch | 898", "question": "Read the following table regarding \"Tractors made\" and then write Python code to answer a question.\n\nMonth | Number of tractors\nDecember | 885\nJanuary | 859\nFebruary | 895\nMarch | 898\n\nA farm equipment company kept a record of the number of tractors made each month. In which month did the company make the most tractors? Choose from the the options: ['December', 'January', 'February', 'March']", "answer": "March", "ques_type": "multi_choice", "choices": ["December", "January", "February", "March"], "code": ["# Python code, return answer \ntractors_made = {\n    'December': 885,\n    'January': 859,\n    'February': 895,\n    'March': 898\n}\n# Find the month with the most tractors made\nmost_tractors_month = max(tractors_made, key=tractors_made.get)\nanswer = most_tractors_month\nprint(answer)", "# Store the number of tractors made each month in a dictionary\ntractors_made = {\n    'December': 885,\n    'January': 859,\n    'February': 895,\n    'March': 898\n}\n\n# Identify the month with the most tractors made\nmost_tractors_month = max(tractors_made, key=tractors_made.get)\n\n# Store the result in the variable 'answer'\nanswer = most_tractors_month\n\n# Print the answer\nprint(answer)", "tractors_made = {\n    'December': 885,\n    'January': 859,\n    'February': 895,\n    'March': 898\n}\nanswer = max(tractors_made, key=tractors_made.get)\nprint(answer)", "tractors_made = {\n    'December': 885,\n    'January': 859,\n    'February': 895,\n    'March': 898\n}\nanswer = max(tractors_made, key=tractors_made.get)  # Store the month with the most tractors in answer\nprint(answer)  # Output the answer"], "prediction": ["March", "March", "March", "March"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nplay ticket | $24.00\ncomedy show ticket | $49.00\nboat show ticket | $23.00\nsoccer ticket | $50.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nplay ticket | $24.00\ncomedy show ticket | $49.00\nboat show ticket | $23.00\nsoccer ticket | $50.00\n\nDominic has $72.00. Does he have enough to buy a play ticket and a soccer ticket? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \nplay_ticket_price = 24.00 \nsoccer_ticket_price = 50.00 \ntotal_cost = play_ticket_price + soccer_ticket_price \ndominic_money = 72.00 \n\n# Check if Dominic has enough money\nif dominic_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "play_ticket_price = 24.00 \nsoccer_ticket_price = 50.00 \ntotal_cost = play_ticket_price + soccer_ticket_price \ndominic_money = 72.00 \n\nif dominic_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the prices of the tickets\nplay_ticket_price = 24.00 \nsoccer_ticket_price = 50.00 \n\n# Calculate the total cost of the tickets\ntotal_cost = play_ticket_price + soccer_ticket_price \n\n# Amount of money Dominic has\ndominic_money = 72.00 \n\n# Check if Dominic has enough money and store the result\nif dominic_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "play_ticket_price = 24.00 \nsoccer_ticket_price = 50.00 \ntotal_cost = play_ticket_price + soccer_ticket_price \ndominic_money = 72.00 \n\nif dominic_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)"], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nblue sweater | $5.38\nstriped shirt | $7.32\npair of shorts | $5.02\npair of white socks | $2.02", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nblue sweater | $5.38\nstriped shirt | $7.32\npair of shorts | $5.02\npair of white socks | $2.02\n\nHow much money does Jamal need to buy 6 blue sweaters?", "answer": "32.28", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_sweater = 5.38 \nquantity_sweaters = 6 \ntotal_cost = price_per_sweater * quantity_sweaters\nanswer = total_cost\nprint(answer)", "# Define the price of one blue sweater and the quantity Jamal wants to buy\nprice_per_sweater = 5.38  \nquantity_sweaters = 6  \n\n# Calculate the total cost\ntotal_cost = price_per_sweater * quantity_sweaters  \n\n# Store the result in the answer variable\nanswer = total_cost  \n\n# Print the answer\nprint(answer)", "price_per_sweater = 5.38  \nquantity_sweaters = 6  \ntotal_cost = price_per_sweater * quantity_sweaters  \nanswer = f\"${total_cost:.2f}\"  # Format the answer as currency\nprint(answer)", "price_per_sweater = 5.38  \nquantity_sweaters = 6  \ntotal_cost = price_per_sweater * quantity_sweaters  \nanswer = f\"${total_cost:.2f}\"  # Format the answer as currency\nprint(answer)  # This will print the formatted answer"], "prediction": [32.28, 32.28, "$32.28", "$32.28"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n12 | 3\n13 | 5\n14 | 15", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n12 | 3\n13 | 5\n14 | 15\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "nonlinear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for equal differences in x-values.\nx_values = [12, 13, 14]\ny_values = [3, 5, 15]\n\n# Calculate the differences\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n# If the differences are not constant, the function is nonlinear\nis_linear = all(diff == differences[0] for diff in differences)\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "x_values = [12, 13, 14]\ny_values = [3, 5, 15]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if the differences are consistent\nis_linear = all(differences[i] == differences[0] for i in range(1, len(differences)))\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "x_values = [12, 13, 14]\ny_values = [3, 5, 15]\n\n# Calculate the differences in y and x values\ny_differences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\nx_differences = [x_values[i+1] - x_values[i] for i in range(len(x_values)-1)]\n\n# Calculate the slopes\nslopes = [y_diff / x_diff for y_diff, x_diff in zip(y_differences, x_differences)]\n\n# Check if all slopes are equal\nis_linear = all(slope == slopes[0] for slope in slopes)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values from the table\nx_values = [12, 13, 14]\ny_values = [3, 5, 15]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if all differences are equal to determine if the function is linear\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Assign the result to the answer variable\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'slopes' is not defined\")", "NameError(\"name 'differences' is not defined\")"]
}
{
  "context": "Read the following table regarding \"Newspapers sold\" and then answer a question.\n\nDay | Number of newspapers\nTuesday | 337\nWednesday | 375\nThursday | 357\nFriday | 353", "question": "Read the following table regarding \"Newspapers sold\" and then write Python code to answer a question.\n\nDay | Number of newspapers\nTuesday | 337\nWednesday | 375\nThursday | 357\nFriday | 353\n\nThe staff of a newspaper examined the number of copies sold over the past 4 days. On which day were the fewest copies sold? Choose from the the options: ['Tuesday', 'Wednesday', 'Thursday', 'Friday']", "answer": "Tuesday", "ques_type": "multi_choice", "choices": ["Tuesday", "Wednesday", "Thursday", "Friday"], "code": ["# Python code, return answer \nnewspapers_sold = {\n    'Tuesday': 337,\n    'Wednesday': 375,\n    'Thursday': 357,\n    'Friday': 353\n}\n\n# Find the day with the fewest newspapers sold\nfewest_sold_day = min(newspapers_sold, key=newspapers_sold.get)\nanswer = fewest_sold_day\nprint(answer)", "# Define the number of newspapers sold on each day in a dictionary\nnewspapers_sold = {\n    'Tuesday': 337,\n    'Wednesday': 375,\n    'Thursday': 357,\n    'Friday': 353\n}\n\n# Find the day with the fewest newspapers sold\nfewest_sold_day = min(newspapers_sold, key=newspapers_sold.get)\n\n# Store the result in the variable 'answer'\nanswer = fewest_sold_day\n\n# Output the answer\nprint(answer)", "newspapers_sold = {\n    'Tuesday': 337,\n    'Wednesday': 375,\n    'Thursday': 357,\n    'Friday': 353\n}\nfewest_sold_day = min(newspapers_sold, key=newspapers_sold.get)\nanswer = fewest_sold_day\nprint(answer)", "newspapers_sold = {\n    'Tuesday': 337,\n    'Wednesday': 375,\n    'Thursday': 357,\n    'Friday': 353\n}\nfewest_sold_day = min(newspapers_sold, key=newspapers_sold.get)\nanswer = fewest_sold_day\nprint(answer)"], "prediction": ["Tuesday", "Tuesday", "Tuesday", "Tuesday"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Blocks from school\" and then answer a question.\n\nName | Number of blocks\nZach | 10\nFarid | 5\nColette | 10\nRussell | 7\nDalton | 7\nAndy | 6\nMichael | 8\nErnesto | 3", "question": "Read the following table regarding \"Blocks from school\" and then write Python code to answer a question.\n\nName | Number of blocks\nZach | 10\nFarid | 5\nColette | 10\nRussell | 7\nDalton | 7\nAndy | 6\nMichael | 8\nErnesto | 3\n\nSome students compared how many blocks they live from school. What is the mean of the numbers?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of blocks each student lives from school\nblocks = [10, 5, 10, 7, 7, 6, 8, 3]\n# Calculate the mean\nmean_blocks = sum(blocks) / len(blocks)\nanswer = mean_blocks\nprint(answer)", "# Define the number of blocks each student lives from school  \nblocks = [10, 5, 10, 7, 7, 6, 8, 3]  \n\n# Calculate the mean of the blocks  \nmean_blocks = sum(blocks) / len(blocks)  \nanswer = mean_blocks  \n\nprint(answer)", "blocks = [10, 5, 10, 7, 7, 6, 8, 3]  \nmean_blocks = sum(blocks) / len(blocks)  \nanswer = float(mean_blocks)  # Ensure the mean is explicitly a float\nprint(answer)  # Output the mean value", "# List of the number of blocks each student lives from school\nblocks = [10, 5, 10, 7, 7, 6, 8, 3]  \n\n# Calculate the mean of the numbers\nmean_blocks = sum(blocks) / len(blocks)  \n\n# Store the result in the variable 'answer'\nanswer = mean_blocks  \n\n# Output the mean value\nprint(answer)"], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Fifth grade classes\" and then answer a question.\n\nTeacher | Boys | Girls\nMr. Burgundy | 8 | 11\nMs. Brown | 18 | 18\nMr. Orange | 6 | 4\nMiss Black | 14 | 6", "question": "Read the following table regarding \"Fifth grade classes\" and then write Python code to answer a question.\n\nTeacher | Boys | Girls\nMr. Burgundy | 8 | 11\nMs. Brown | 18 | 18\nMr. Orange | 6 | 4\nMiss Black | 14 | 6\n\nHow many more boys than girls are in Mr. Orange's class?", "answer": "2", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nboys_orange = 6 \ngirls_orange = 4 \n# Calculate the difference\ndifference = boys_orange - girls_orange\nanswer = difference\nprint(answer)", "boys_orange = 6\ngirls_orange = 4\ndifference = boys_orange - girls_orange\nanswer = abs(difference)  # Get the absolute difference\nif difference > 0:\n    answer = f\"There are {difference} more boys than girls in Mr. Orange's class.\"\nelse:\n    answer = f\"There are {-difference} more girls than boys in Mr. Orange's class.\"\nprint(answer)", "boys_orange = 6\ngirls_orange = 4\ndifference = boys_orange - girls_orange\n\nif difference > 0:\n    answer = f\"There are {difference} more boys than girls in Mr. Orange's class.\"\nelif difference < 0:\n    answer = f\"There are {-difference} more girls than boys in Mr. Orange's class.\"\nelse:\n    answer = \"There are equal numbers of boys and girls in Mr. Orange's class.\"\n\nprint(answer)", "# Define the number of boys and girls in Mr. Orange's class\nboys_orange = 6\ngirls_orange = 4\n\n# Calculate the difference\ndifference = boys_orange - girls_orange\n\n# Determine the correct message based on the difference\nif difference > 0:\n    answer = f\"There are {difference} more boys than girls in Mr. Orange's class.\"\nelif difference < 0:\n    answer = f\"There are {-difference} more girls than boys in Mr. Orange's class.\"\nelse:\n    answer = \"There are equal numbers of boys and girls in Mr. Orange's class.\"\n\nprint(answer)"], "prediction": [2.0, "There are 2 more boys than girls in Mr. Orange's class.", "There are 2 more boys than girls in Mr. Orange's class.", "There are 2 more boys than girls in Mr. Orange's class."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Chocolate consumption per capita (kg)\" and then answer a question.\n\nCountry | 2002 | 2005\nBelgium | 8 | 11\nSwitzerland | 11 | 10\nAustralia | 4 | 5\nGermany | 10 | 11\nAustria | 8 | 9", "question": "Read the following table regarding \"Chocolate consumption per capita (kg)\" and then write Python code to answer a question.\n\nCountry | 2002 | 2005\nBelgium | 8 | 11\nSwitzerland | 11 | 10\nAustralia | 4 | 5\nGermany | 10 | 11\nAustria | 8 | 9\n\nLucia's Candies has been studying how much chocolate people have been eating in different countries. Which country consumed the least chocolate per capita in 2002? Choose from the the options: ['Switzerland', 'Belgium', 'Austria', 'Australia']", "answer": "Australia", "ques_type": "multi_choice", "choices": ["Switzerland", "Belgium", "Austria", "Australia"], "code": [
  "# Python code, return answer \nchocolate_consumption_2002 = {\n    'Belgium': 8,\n    'Switzerland': 11,\n    'Australia': 4,\n    'Germany': 10,\n    'Austria': 8\n}\n\n# Find the country with the least chocolate consumption in 2002\nleast_consumption_country = min(chocolate_consumption_2002, key=chocolate_consumption_2002.get)\nanswer = least_consumption_country\nprint(answer)", "# Define the chocolate consumption data for 2002\nchocolate_consumption_2002 = {\n    'Belgium': 8,\n    'Switzerland': 11,\n    'Australia': 4,\n    'Germany': 10,\n    'Austria': 8\n}\n\n# Find the country with the least chocolate consumption in 2002\nleast_consumption_country = min(chocolate_consumption_2002, key=chocolate_consumption_2002.get)\n\n# Store the result as 'answer'\nanswer = least_consumption_country\nprint(answer)", "# Define the chocolate consumption per capita in 2002\nchocolate_consumption_2002 = {\n    'Belgium': 8,\n    'Switzerland': 11,\n    'Australia': 4,\n    'Germany': 10,\n    'Austria': 8\n}\n\n# Find the country that consumed the least chocolate per capita in 2002\nleast_consumption_country = min(chocolate_consumption_2002, key=chocolate_consumption_2002.get)\n\n# Store the result in the variable 'answer'\nanswer = least_consumption_country\n\n# Print the answer\nprint(answer)", "# Define the chocolate consumption data for 2002\nchocolate_consumption_2002 = {\n    'Belgium': 8,\n    'Switzerland': 11,\n    'Australia': 4,\n    'Germany': 10,\n    'Austria': 8\n}\n\n# Find the country with the least chocolate consumption in 2002\nleast_consumption_country = min(chocolate_consumption_2002, key=chocolate_consumption_2002.get)\nanswer = least_consumption_country\n\nprint(answer)"
], "prediction": ["Australia", "Australia", "Australia", "Australia"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Office sizes (square meters)\" and then answer a question.\n\nStem | Leaf \n3 | 1, 1, 3, 7, 8, 8\n4 | 8\n5 | 3, 4\n6 | 9\n7 | 2, 3\n8 | 0, 9\n9 | 0", "question": "Read the following table regarding \"Office sizes (square meters)\" and then write Python code to answer a question.\n\nStem | Leaf \n3 | 1, 1, 3, 7, 8, 8\n4 | 8\n5 | 3, 4\n6 | 9\n7 | 2, 3\n8 | 0, 9\n9 | 0\n\nMichelle, who rents properties for a living, measures all the offices in a building she is renting. How many offices are exactly 38 square meters?", "answer": "2", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The office sizes are represented in a stem-and-leaf format.\n# The size '38' square meters corresponds to the stem '3' and leaf '8'.\noffices_38_square_meters = 1  # There is one office that is exactly 38 square meters.\nanswer = offices_38_square_meters\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(3, [1, 1, 3, 7, 8, 8]), (4, [8]), (5, [3, 4]), (6, [9]), (7, [2, 3]), (8, [0, 9]), (9, [0])]\n\n# Initialize counter for offices that are exactly 38 square meters\noffices_38_square_meters = 0\n\n# Iterate through the stem and leaf data structure and count relevant offices\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        if stem == 3 and leaf == 8:  # 38 square meters corresponds to stem 3 and leaf 8\n            offices_38_square_meters += 1\n\nanswer = offices_38_square_meters\nprint(answer)", "stem_and_leaf = [(3, [1, 1, 3, 7, 8, 8]), (4, [8]), (5, [3, 4]), (6, [9]), (7, [2, 3]), (8, [0, 9]), (9, [0])]\noffices_38_square_meters = 0\n\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        if stem == 3 and leaf == 8:  # 38 square meters corresponds to stem 3 and leaf 8\n            offices_38_square_meters += 1\n\nanswer = int(offices_38_square_meters)  # Ensure the answer is an integer\nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [(3, [1, 1, 3, 7, 8, 8]), (4, [8]), (5, [3, 4]), (6, [9]), (7, [2, 3]), (8, [0, 9]), (9, [0])]\n\n# Initialize counter for offices that are exactly 38 square meters\noffices_38_square_meters = 0\n\n# Iterate through the stem and leaf data structure\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        if stem == 3 and leaf == 8:  # 38 square meters corresponds to stem 3 and leaf 8\n            offices_38_square_meters += 1\n\n# Store the answer as an integer\nanswer = offices_38_square_meters\nprint(answer)"
], "prediction": [1.0, 2.0, 2.0, 2.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$545 | 19,000 | 3,200\n$625 | 14,500 | 7,500\n$705 | 10,000 | 11,800\n$785 | 5,500 | 16,100\n$865 | 1,000 | 20,400", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$545 | 19,000 | 3,200\n$625 | 14,500 | 7,500\n$705 | 10,000 | 11,800\n$785 | 5,500 | 16,100\n$865 | 1,000 | 20,400\n\nLook at the table. Then answer the question. At a price of $625, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "shortage", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": ["# Python code, return answer \nquantity_demanded_at_625 = 14500 \nquantity_supplied_at_625 = 7500 \n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_625 > quantity_supplied_at_625:\n    answer = 'shortage'\nelse:\n    answer = 'surplus'\n\nprint(answer)", "quantity_demanded_at_625 = 14500 \nquantity_supplied_at_625 = 7500 \n\nif quantity_demanded_at_625 > quantity_supplied_at_625:\n    answer = 'shortage'\nelif quantity_demanded_at_625 < quantity_supplied_at_625:\n    answer = 'surplus'\nelse:\n    answer = 'equilibrium'\n\nprint(answer)", "# Define the quantities for the price of $625\nquantity_demanded_at_625 = 14500 \nquantity_supplied_at_625 = 7500 \n\n# Determine if there is a shortage or surplus\nanswer = 'shortage' if quantity_demanded_at_625 > quantity_supplied_at_625 else 'surplus' if quantity_demanded_at_625 < quantity_supplied_at_625 else 'equilibrium'\n\nprint(answer)", "# Define the quantities demanded and supplied at the price of $625\nquantity_demanded_at_625 = 14500 \nquantity_supplied_at_625 = 7500 \n\n# Determine if there is a shortage, surplus, or equilibrium\nif quantity_demanded_at_625 > quantity_supplied_at_625:\n    answer = 'shortage'\nelif quantity_demanded_at_625 < quantity_supplied_at_625:\n    answer = 'surplus'\nelse:\n    answer = 'equilibrium'\n\nprint(answer)"], "prediction": ["shortage", "shortage", "shortage", "shortage"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Minutes spent practicing\" and then answer a question.\n\nDay | Minutes\nMonday | 118\nTuesday | 142\nWednesday | 169\nThursday | 146", "question": "Read the following table regarding \"Minutes spent practicing\" and then write Python code to answer a question.\n\nDay | Minutes\nMonday | 118\nTuesday | 142\nWednesday | 169\nThursday | 146\n\nRosa jotted down how many minutes she spent practicing volleyball in the past 4 days. On which day did Rosa practice the most? Choose from the the options: ['Monday', 'Tuesday', 'Wednesday', 'Thursday']", "answer": "Wednesday", "ques_type": "multi_choice", "choices": ["Monday", "Tuesday", "Wednesday", "Thursday"], "code": [
  "# Python code, return answer \npractice_minutes = {\n    'Monday': 118,\n    'Tuesday': 142,\n    'Wednesday': 169,\n    'Thursday': 146\n}\n# Find the day with the most minutes practiced\nmost_practice_day = max(practice_minutes, key=practice_minutes.get)\nanswer = most_practice_day\nprint(answer)", "# Define the dictionary with practice minutes for each day\npractice_minutes = {\n    'Monday': 118,\n    'Tuesday': 142,\n    'Wednesday': 169,\n    'Thursday': 146\n}\n\n# Find the day with the maximum practice minutes\nmost_practice_day = max(practice_minutes, key=practice_minutes.get)\n\n# Store the result in the answer variable\nanswer = most_practice_day\n\n# Print the answer\nprint(answer)", "# Define the practice minutes for each day\npractice_minutes = {\n    'Monday': 118,\n    'Tuesday': 142,\n    'Wednesday': 169,\n    'Thursday': 146\n}\n\n# Find the day with the most practice minutes\nmost_practice_day = max(practice_minutes, key=practice_minutes.get)\nanswer = most_practice_day\n\nprint(answer)", "# Store the minutes Rosa practiced each day in a dictionary\npractice_minutes = {\n    'Monday': 118,\n    'Tuesday': 142,\n    'Wednesday': 169,\n    'Thursday': 146\n}\n\n# Identify the day with the maximum practice minutes\nmost_practice_day = max(practice_minutes, key=practice_minutes.get)\n\n# Store the result in the answer variable\nanswer = most_practice_day\n\n# Output the answer\nprint(answer)"
], "prediction": ["Wednesday", "Wednesday", "Wednesday", "Wednesday"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$960 | 17,500 | 3,100\n$1,010 | 16,700 | 6,800\n$1,060 | 15,900 | 10,500\n$1,110 | 15,100 | 14,200\n$1,160 | 14,300 | 17,900", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$960 | 17,500 | 3,100\n$1,010 | 16,700 | 6,800\n$1,060 | 15,900 | 10,500\n$1,110 | 15,100 | 14,200\n$1,160 | 14,300 | 17,900\n\nLook at the table. Then answer the question. At a price of $1,010, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "shortage", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": ["# Python code, return answer \nquantity_demanded = 16700  # at price $1,010\nquantity_supplied = 6800    # at price $1,010\n\n# Determine if there is a shortage or surplus\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelse:\n    answer = 'surplus'\n\nprint(answer)", "# Define the quantity demanded and quantity supplied at the price of $1,010\nquantity_demanded = 16700  # at price $1,010\nquantity_supplied = 6800    # at price $1,010\n\n# Determine if there is a shortage or surplus\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelse:\n    answer = 'surplus'\n\nprint(answer)", "quantity_demanded = 16700  # at price $1,010\nquantity_supplied = 6800    # at price $1,010\n\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'equilibrium'\n\nprint(answer)", "# Define the price and corresponding quantities\nprice = 1010\nquantity_demanded = 16700  # at price $1,010\nquantity_supplied = 6800    # at price $1,010\n\n# Determine if there is a shortage or surplus\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'equilibrium'\n\nprint(answer)"], "prediction": ["shortage", "shortage", "shortage", "shortage"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Hours of babysitting\" and then answer a question.\n\nMonth | Hours\nNovember | 50\nDecember | 57\nJanuary | 36\nFebruary | 68\nMarch | 61\nApril | 45\nMay | 55\nJune | 54", "question": "Read the following table regarding \"Hours of babysitting\" and then write Python code to answer a question.\n\nMonth | Hours\nNovember | 50\nDecember | 57\nJanuary | 36\nFebruary | 68\nMarch | 61\nApril | 45\nMay | 55\nJune | 54\n\nCarson looked at his calendar to figure out how much time he spent babysitting each month. What is the range of the numbers?", "answer": "32", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of hours spent babysitting each month\nhours = [50, 57, 36, 68, 61, 45, 55, 54]\n# Calculate the range\nrange_hours = max(hours) - min(hours)\nanswer = range_hours\nprint(answer)", "hours = [50, 57, 36, 68, 61, 45, 55, 54]\nrange_hours = max(hours) - min(hours)\nanswer = int(range_hours)  # Convert to integer\nprint(answer)", "# Define the hours of babysitting for each month\nhours = [50, 57, 36, 68, 61, 45, 55, 54]\n\n# Calculate the range of hours\nrange_hours = max(hours) - min(hours)\n\n# Store the result in the variable 'answer'\nanswer = range_hours\n\n# Output the answer\nprint(answer)", "# Define the list of hours spent babysitting each month  \nhours = [50, 57, 36, 68, 61, 45, 55, 54]  \n\n# Calculate the range of hours  \nrange_hours = max(hours) - min(hours)  \nanswer = range_hours  # This will be an integer since we are dealing with whole numbers  \nprint(answer)"], "prediction": [32.0, 32.0, 32.0, 32.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Stock prices\" and then answer a question.\n\nCompany | Monday | Tuesday\nWatson and Partners | $8 | $2\nComputer Data Company | $12 | $7\nJonas Incorporated | $10 | $9\nHouston Sporting Goods | $4 | $5", "question": "Read the following table regarding \"Stock prices\" and then write Python code to answer a question.\n\nCompany | Monday | Tuesday\nWatson and Partners | $8 | $2\nComputer Data Company | $12 | $7\nJonas Incorporated | $10 | $9\nHouston Sporting Goods | $4 | $5\n\nA stock broker followed the stock prices of a certain set of companies. On Tuesday, how much more did Jonas Incorporated's stock cost than Houston Sporting Goods's stock?", "answer": "4", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Stock prices on Tuesday\njonas_stock_tuesday = 9\nhouston_stock_tuesday = 5\n# Calculate the difference in stock prices\ndifference = jonas_stock_tuesday - houston_stock_tuesday\nanswer = difference\nprint(answer)", "# Define the stock prices for Jonas Incorporated and Houston Sporting Goods on Tuesday\njonas_stock_tuesday = 9  # Jonas Incorporated stock price on Tuesday\nhouston_stock_tuesday = 5  # Houston Sporting Goods stock price on Tuesday\n\n# Calculate the difference in stock prices\ndifference = jonas_stock_tuesday - houston_stock_tuesday\n\n# Store the result in the variable 'answer'\nanswer = difference\n\n# Print the answer\nprint(answer)", "# Define the stock prices for Jonas Incorporated and Houston Sporting Goods on Tuesday\njonas_stock_tuesday = 9  # Jonas Incorporated stock price on Tuesday\nhouston_stock_tuesday = 5  # Houston Sporting Goods stock price on Tuesday\n\n# Calculate the difference in stock prices\nanswer = jonas_stock_tuesday - houston_stock_tuesday\n\n# Format the output to reflect currency\nanswer = f\"${answer:.2f}\"\nprint(answer)", "# Stock prices on Tuesday\njonas_stock_tuesday = 9  # Jonas Incorporated stock price on Tuesday\nhouston_stock_tuesday = 5  # Houston Sporting Goods stock price on Tuesday\n\n# Calculate the difference\ndifference = jonas_stock_tuesday - houston_stock_tuesday\n\n# Format the answer as a string with a dollar sign\nanswer = f\"${difference:.2f}\"\nprint(answer)"
], "prediction": [4.0, 4.0, "$4.00", "$4.00"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Menu items per restaurant\" and then answer a question.\n\nStem | Leaf \n1 | 2, 8\n2 | 1, 9\n3 | 0\n4 | \n5 | 0, 3, 4, 5, 5, 8, 9\n6 | 3, 7, 9\n7 | 1, 9, 9\n8 | 0, 9", "question": "Read the following table regarding \"Menu items per restaurant\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 2, 8\n2 | 1, 9\n3 | 0\n4 | \n5 | 0, 3, 4, 5, 5, 8, 9\n6 | 3, 7, 9\n7 | 1, 9, 9\n8 | 0, 9\n\nA food critic counted the number of menu items at each restaurant in town. How many restaurants have fewer than 90 menu items?", "answer": "20", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Analyzing the stem-and-leaf display for counts of menu items in restaurants\nmenu_items_counts = [12, 18, 21, 29, 30, 40, 50, 53, 54, 55, 58, 59, 63, 67, 69, 71, 79, 79, 80, 89]\n# Counting how many restaurants have fewer than 90 menu items\nfewer_than_90_count = len([count for count in menu_items_counts if count < 90])\nanswer = fewer_than_90_count\nprint(answer)", "# List of menu items counts\nmenu_items_counts = [12, 18, 21, 29, 30, 40, 50, 53, 54, 55, 58, 59, 63, 67, 69, 71, 79, 79, 80, 89]\n\n# Count the number of restaurants with fewer than 90 menu items\nfewer_than_90_count = sum(1 for count in menu_items_counts if count < 90)\nanswer = fewer_than_90_count\n\nprint(answer)", "menu_items_counts = [12, 18, 21, 29, 30, 40, 50, 53, 54, 55, 58, 59, 63, 67, 69, 71, 79, 79, 80, 89]\nfewer_than_90_count = sum(1 for count in menu_items_counts if count < 90)\nanswer = fewer_than_90_count  # This will be an integer\nprint(answer)", "menu_items_counts = [12, 18, 21, 29, 30, 40, 50, 53, 54, 55, 58, 59, 63, 67, 69, 71, 79, 79, 80, 89]\nfewer_than_90_count = sum(1 for count in menu_items_counts if count < 90)\nanswer = int(fewer_than_90_count)  # Ensure the result is an integer\nprint(answer)"], "prediction": [20.0, 20.0, 20.0, 20.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Students receiving scholarships\" and then answer a question.\n\nYear | Students\n2009 | 23\n2010 | 17\n2011 | 16\n2012 | 15\n2013 | 12", "question": "Read the following table regarding \"Students receiving scholarships\" and then write Python code to answer a question.\n\nYear | Students\n2009 | 23\n2010 | 17\n2011 | 16\n2012 | 15\n2013 | 12\n\nThe financial aid office at McKinney University produced an internal report on the number of students receiving scholarships. According to the table, what was the rate of change between 2010 and 2011?", "answer": "-1", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of students receiving scholarships in 2010 and 2011\nstudents_2010 = 17\nstudents_2011 = 16\n# Calculate the rate of change\nrate_of_change = students_2011 - students_2010\nanswer = rate_of_change\nprint(answer)", "students_2010 = 17\nstudents_2011 = 16\n\n# Calculate the rate of change as a percentage\nrate_of_change = ((students_2011 - students_2010) / students_2010) * 100\nanswer = rate_of_change\nprint(answer)", "students_2010 = 17\nstudents_2011 = 16\nrate_of_change = ((students_2011 - students_2010) / students_2010) * 100\nanswer = round(rate_of_change, 2)  # Round to two decimal places\nprint(answer)", "students_2010 = 17\nstudents_2011 = 16\nrate_of_change = ((students_2011 - students_2010) / students_2010) * 100\nanswer = round(rate_of_change, 2)  # Round to two decimal places\nprint(answer)"], "prediction": [-1.0, -5.88235, -5.88, -5.88], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Clubs\" and then answer a question.\n\nName | Number of clubs\nKirk | 1\nReggie | 1\nChloe | 4\nNorma | 5\nPedro | 3\nMaddie | 3\nHassan | 5\nAnna | 5", "question": "Read the following table regarding \"Clubs\" and then write Python code to answer a question.\n\nName | Number of clubs\nKirk | 1\nReggie | 1\nChloe | 4\nNorma | 5\nPedro | 3\nMaddie | 3\nHassan | 5\nAnna | 5\n\nSome students compared how many clubs they belong to. What is the mode of the numbers?", "answer": "5", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nfrom statistics import mode\n\n# List of the number of clubs for each student\nclubs_count = [1, 1, 4, 5, 3, 3, 5, 5]\n\n# Calculate the mode\nanswer = mode(clubs_count)\nprint(answer)", "from statistics import mode\n\nclubs_count = [1, 1, 4, 5, 3, 3, 5, 5]\nanswer = int(mode(clubs_count))  # Convert the mode to an integer\nprint(answer)", "from statistics import mode\n\nclubs_count = [1, 1, 4, 5, 3, 3, 5, 5]\nanswer = mode(clubs_count)  # The mode function already returns an integer\nprint(answer)", "from statistics import mode\n\nclubs_count = [1, 1, 4, 5, 3, 3, 5, 5]\nanswer = int(mode(clubs_count))  # Convert the result to an integer\nprint(answer)"], "prediction": [5.0, 5.0, 5.0, 5.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Clubs\" and then answer a question.\n\nName | Number of clubs\nAiden | 3\nNolan | 1\nQuinn | 7\nElise | 3\nLarry | 3\nRose | 3\nZoe | 7\nGabriel | 7", "question": "Read the following table regarding \"Clubs\" and then write Python code to answer a question.\n\nName | Number of clubs\nAiden | 3\nNolan | 1\nQuinn | 7\nElise | 3\nLarry | 3\nRose | 3\nZoe | 7\nGabriel | 7\n\nSome students compared how many clubs they belong to. What is the mode of the numbers?", "answer": "3", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nfrom collections import Counter\n\n# List of the number of clubs each student belongs to\nclubs_count = [3, 1, 7, 3, 3, 3, 7, 7]\n\n# Calculate the mode\nmode_data = Counter(clubs_count)\nmode_value = mode_data.most_common(1)[0][0]  # Get the most common value\nanswer = mode_value\nprint(answer)", "from collections import Counter\n\nclubs_count = [3, 1, 7, 3, 3, 3, 7, 7]\nmode_data = Counter(clubs_count)\nmode_value = mode_data.most_common(1)[0][0]  # Get the most common value\nanswer = int(mode_value)  # Ensure the answer is an integer\nprint(answer)", "from collections import Counter\n\n# List of the number of clubs each student belongs to\nclubs_count = [3, 1, 7, 3, 3, 3, 7, 7]\n\n# Count the occurrences of each number of clubs\nmode_data = Counter(clubs_count)\n\n# Get the most common value\nmode_value = mode_data.most_common(1)[0][0]\n\n# Store the mode as an integer\nanswer = int(mode_value)\n\nprint(answer)", "from collections import Counter\n\n# List of the number of clubs each student belongs to\nclubs_count = [3, 1, 7, 3, 3, 3, 7, 7]\n\n# Use Counter to find the mode\nmode_data = Counter(clubs_count)\nmode_value = mode_data.most_common(1)[0][0]\n\n# Store the mode as an integer\nanswer = mode_value\nprint(answer)"], "prediction": [3.0, 3.0, 3.0, 3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Loaves of leftover bread\" and then answer a question.\n\nDay | Leftover loaves\nSunday | 24\nMonday | 9\nTuesday | 19\nWednesday | 15\nThursday | 38", "question": "Read the following table regarding \"Loaves of leftover bread\" and then write Python code to answer a question.\n\nDay | Leftover loaves\nSunday | 24\nMonday | 9\nTuesday | 19\nWednesday | 15\nThursday | 38\n\nA vendor who sold bread at farmers' markets counted the number of leftover loaves at the end of each day. According to the table, what was the rate of change between Wednesday and Thursday?", "answer": "23", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \nleftover_loaves_wednesday = 15\nleftover_loaves_thursday = 38\n# Calculate the rate of change\nrate_of_change = leftover_loaves_thursday - leftover_loaves_wednesday\nanswer = rate_of_change\nprint(answer)", "leftover_loaves_wednesday = 15\nleftover_loaves_thursday = 38\nrate_of_change = leftover_loaves_thursday - leftover_loaves_wednesday\n\n# Provide context for the rate of change\nanswer = f\"The rate of change in leftover loaves from Wednesday to Thursday is an increase of {rate_of_change} loaves.\"\nprint(answer)", "leftover_loaves_wednesday = 15\nleftover_loaves_thursday = 38\n\n# Calculate the absolute change\nabsolute_change = leftover_loaves_thursday - leftover_loaves_wednesday\n\n# Calculate the rate of change as a percentage\nrate_of_change_percentage = (absolute_change / leftover_loaves_wednesday) * 100\n\nanswer = f\"The rate of change in leftover loaves from Wednesday to Thursday is an increase of {absolute_change} loaves, which is a {rate_of_change_percentage:.2f}% increase.\"\nprint(answer)", "# Define the leftover loaves for Wednesday and Thursday\nleftover_loaves_wednesday = 15\nleftover_loaves_thursday = 38\n\n# Calculate the absolute change and the rate of change percentage\nabsolute_change = leftover_loaves_thursday - leftover_loaves_wednesday\nrate_of_change_percentage = (absolute_change / leftover_loaves_wednesday) * 100\n\n# Store the result in a concise format\nanswer = rate_of_change_percentage\nprint(answer)"
], "prediction": [23.0, "The rate of change in leftover loaves from Wednesday to Thursday is an increase of 23 loaves.", "The rate of change in leftover loaves from Wednesday to Thursday is an increase of 23 loaves, which is a 153.33% increase.", 153.33333], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Rounds in the spelling bee\" and then answer a question.\n\nYear | Rounds\n2009 | 15\n2010 | 13\n2011 | 15\n2012 | 15\n2013 | 12", "question": "Read the following table regarding \"Rounds in the spelling bee\" and then write Python code to answer a question.\n\nYear | Rounds\n2009 | 15\n2010 | 13\n2011 | 15\n2012 | 15\n2013 | 12\n\nMrs. Newman told students how many rounds to expect in the spelling bee based on previous years. According to the table, what was the rate of change between 2010 and 2011?", "answer": "2", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Rounds in the spelling bee for 2010 and 2011\nrounds_2010 = 13\nrounds_2011 = 15\n\n# Calculate the rate of change\nrate_of_change = rounds_2011 - rounds_2010\nanswer = rate_of_change\nprint(answer)", "rounds_2010 = 13\nrounds_2011 = 15\n\n# Calculate the change in rounds\nchange_in_rounds = rounds_2011 - rounds_2010\n\n# Calculate the rate of change as a percentage\nrate_of_change_percentage = (change_in_rounds / rounds_2010) * 100\n\nanswer = rate_of_change_percentage\nprint(answer)", "rounds_2010 = 13\nrounds_2011 = 15\nchange_in_rounds = rounds_2011 - rounds_2010\nrate_of_change_percentage = (change_in_rounds / rounds_2010) * 100\nanswer = round(rate_of_change_percentage, 2)  # Rounding to two decimal places for better readability\nprint(answer)", "rounds_2010 = 13\nrounds_2011 = 15\nchange_in_rounds = rounds_2011 - rounds_2010\nrate_of_change_percentage = (change_in_rounds / rounds_2010) * 100\nanswer = round(rate_of_change_percentage, 2)  # Rounding to two decimal places for better readability"], "prediction": [2.0, 15.38462, 15.38, 15.38], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Schools in each town\" and then answer a question.\n\nTown | Number of schools\nRichmond | 7\nSalem | 5\nColumbia | 7\nMayfield | 9\nChesterton | 5\nWatertown | 8\nMarion | 8\nSpringfield | 5", "question": "Read the following table regarding \"Schools in each town\" and then write Python code to answer a question.\n\nTown | Number of schools\nRichmond | 7\nSalem | 5\nColumbia | 7\nMayfield | 9\nChesterton | 5\nWatertown | 8\nMarion | 8\nSpringfield | 5\n\nThe county released data about how many schools there are in each town. What is the range of the numbers?", "answer": "4", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of the number of schools in each town\nschools_in_towns = [7, 5, 7, 9, 5, 8, 8, 5]\n# Calculate the range\nrange_of_schools = max(schools_in_towns) - min(schools_in_towns)\nanswer = range_of_schools\nprint(answer)", "schools_in_towns = [7, 5, 7, 9, 5, 8, 8, 5]\nrange_of_schools = max(schools_in_towns) - min(schools_in_towns)\nanswer = int(range_of_schools)  # Convert to integer for clarity\nprint(answer)", "schools_in_towns = [7, 5, 7, 9, 5, 8, 8, 5]\nrange_of_schools = max(schools_in_towns) - min(schools_in_towns)\nanswer = range_of_schools  # No need to convert to int, as the result is already an integer\nprint(answer)", "schools_in_towns = [7, 5, 7, 9, 5, 8, 8, 5]\nrange_of_schools = max(schools_in_towns) - min(schools_in_towns)\nanswer = int(range_of_schools)  # Convert the result to an integer\nprint(answer)"], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nsunflower seeds | $3 per pound\nflax seeds | $6 per pound\nsesame seeds | $5 per pound\nsoybeans | $3 per pound\nlentils | $2 per pound\npumpkin seeds | $2 per pound", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nsunflower seeds | $3 per pound\nflax seeds | $6 per pound\nsesame seeds | $5 per pound\nsoybeans | $3 per pound\nlentils | $2 per pound\npumpkin seeds | $2 per pound\n\nCamille wants to buy 1 pound of sesame seeds and 1 pound of pumpkin seeds. How much will she spend?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_sesame = 5 \nprice_per_pound_pumpkin = 2 \n# Total cost for 1 pound of each\ntotal_cost = price_per_pound_sesame + price_per_pound_pumpkin\nanswer = total_cost\nprint(answer)", "# Define the prices per pound for the seeds\nprice_per_pound_sesame = 5  \nprice_per_pound_pumpkin = 2  \n\n# Calculate the total cost for 1 pound of each seed\ntotal_cost = price_per_pound_sesame + price_per_pound_pumpkin  \n\n# Store the result in the answer variable\nanswer = total_cost  \n\n# Print the answer\nprint(answer)", "price_per_pound_sesame = 5  \nprice_per_pound_pumpkin = 2  \ntotal_cost = price_per_pound_sesame + price_per_pound_pumpkin  \nanswer = int(total_cost)  # Convert to integer for cleaner output\nprint(answer)", "price_per_pound_sesame = 5  \nprice_per_pound_pumpkin = 2  \ntotal_cost = price_per_pound_sesame + price_per_pound_pumpkin  \nanswer = total_cost  # Keep the total cost as a float\nprint(answer)"], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Computers in classrooms\" and then answer a question.\n\nTeacher | Number of computers\nMrs. Tan | 18\nMrs. Rossi | 18\nMs. Rojas | 11\nMr. Watson | 6\nMr. Morales | 6\nMr. Lim | 18", "question": "Read the following table regarding \"Computers in classrooms\" and then write Python code to answer a question.\n\nTeacher | Number of computers\nMrs. Tan | 18\nMrs. Rossi | 18\nMs. Rojas | 11\nMr. Watson | 6\nMr. Morales | 6\nMr. Lim | 18\n\nThe teachers at a middle school counted how many computers they had in their classrooms. What is the mode of the numbers?", "answer": "18", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nfrom statistics import mode\n\n# Number of computers per teacher\ncomputers = [18, 18, 11, 6, 6, 18]\n\n# Calculate the mode of the numbers\nanswer = mode(computers)\nprint(answer)", "from statistics import mode\n\n# List of number of computers in classrooms\ncomputers = [18, 18, 11, 6, 6, 18]\n\n# Calculate the mode\nanswer = int(mode(computers))  # Convert the mode result to an integer\nprint(answer)", "from statistics import mode\n\ncomputers = [18, 18, 11, 6, 6, 18]\nanswer = mode(computers)  # Get the mode directly\nprint(answer)", "from collections import Counter\n\n# List of number of computers in classrooms\ncomputers = [18, 18, 11, 6, 6, 18]\n\n# Count the occurrences of each number\ncomputer_counts = Counter(computers)\n\n# Find the maximum frequency\nmax_frequency = max(computer_counts.values())\n\n# Find all numbers that have the maximum frequency\nmodes = [number for number, frequency in computer_counts.items() if frequency == max_frequency]\n\n# Since we are looking for the mode, we can return the first one found\nanswer = modes[0]  # Assuming we want the first mode in case of multiple modes\nprint(answer)"], "prediction": [18.0, 18.0, 18.0, 18.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Stock prices\" and then answer a question.\n\nCompany | Wednesday | Thursday\nJonas Incorporated | $7 | $6\nWhite and Company | $18 | $1\nHouston Sporting Goods | $10 | $16", "question": "Read the following table regarding \"Stock prices\" and then write Python code to answer a question.\n\nCompany | Wednesday | Thursday\nJonas Incorporated | $7 | $6\nWhite and Company | $18 | $1\nHouston Sporting Goods | $10 | $16\n\nA stock broker followed the stock prices of a certain set of companies. How much did White and Company's stock cost on Thursday?", "answer": "1", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Price of White and Company on Thursday\nwhite_company_thursday_price = 1\nanswer = white_company_thursday_price\nprint(answer)", "# Assign the price of White and Company's stock on Thursday to the variable\nwhite_company_thursday_price = 1.00  # Representing $1 as a float\nanswer = f\"${white_company_thursday_price:.2f}\"  # Formatting the output with a dollar sign and two decimal places\nprint(answer)", "# Storing the price of White and Company's stock on Thursday\nwhite_company_thursday_price = 1.00  # Representing $1 as a float\n\n# Formatting the output with a dollar sign and two decimal places\nanswer = f\"${white_company_thursday_price:.2f}\"\n\n# Print the answer\nprint(answer)", "# Store the stock prices in a dictionary\nstock_prices = {\n    'Jonas Incorporated': {'Wednesday': 7, 'Thursday': 6},\n    'White and Company': {'Wednesday': 18, 'Thursday': 1},\n    'Houston Sporting Goods': {'Wednesday': 10, 'Thursday': 16}\n}\n\n# Retrieve the price of White and Company's stock on Thursday\nwhite_company_thursday_price = stock_prices['White and Company']['Thursday']\n\n# Store the result in the variable 'answer'\nanswer = f\"${white_company_thursday_price:.2f}\"\n\nprint(answer)"], "prediction": [1.0, "$1.00", "$1.00", "$1.00"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\njar of salsa | $0.99\nbottle of ketchup | $0.98\nbottle of vinegar | $0.57\nbottle of hot sauce | $0.86", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\njar of salsa | $0.99\nbottle of ketchup | $0.98\nbottle of vinegar | $0.57\nbottle of hot sauce | $0.86\n\nCindy has $1.50. Does she have enough to buy a bottle of ketchup and a bottle of vinegar? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \ncost_ketchup = 0.98 \ncost_vinegar = 0.57 \ntotal_cost = cost_ketchup + cost_vinegar\n# Check if Cindy has enough money\ncindy_money = 1.50\nif cindy_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "cost_ketchup = 0.98 \ncost_vinegar = 0.57 \ntotal_cost = cost_ketchup + cost_vinegar\ncindy_money = 1.50\n\n# Check if Cindy has enough money\nif cindy_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)  # This will output 'no' because the total cost is actually $1.55 which exceeds $1.50", "# Define the costs of the items\ncost_ketchup = 0.98 \ncost_vinegar = 0.57 \n\n# Calculate the total cost\ntotal_cost = cost_ketchup + cost_vinegar\n\n# Amount of money Cindy has\ncindy_money = 1.50\n\n# Determine if Cindy has enough money\nif cindy_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\n# Output the answer\nprint(answer)  # This will output 'no' because the total cost is actually $1.55 which exceeds $1.50", "# Define the costs of the items\ncost_ketchup = 0.98\ncost_vinegar = 0.57\n\n# Calculate the total cost\ntotal_cost = cost_ketchup + cost_vinegar\n\n# Amount of money Cindy has\ncindy_money = 1.50\n\n# Check if Cindy has enough money\nanswer = 'yes' if cindy_money >= total_cost else 'no'\n\nprint(answer)  # This will output 'no' because the total cost is $1.55 which exceeds $1.50"
], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n12 | 8\n13 | 15\n14 | 16", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n12 | 8\n13 | 15\n14 | 16\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "nonlinear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for constant x differences.\nx_values = [12, 13, 14]\ny_values = [8, 15, 16]\n\n# Calculate the differences\nx_diff = [x_values[i+1] - x_values[i] for i in range(len(x_values) - 1)]\ny_diff = [y_values[i+1] - y_values[i] for i in range(len(y_values) - 1)]\n\n# Check if the ratio of change in y is constant for the change in x\nis_linear = (y_diff[0] / x_diff[0] == y_diff[1] / x_diff[1])\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "x_values = [12, 13, 14]\ny_values = [8, 15, 16]\n\n# Calculate the differences\ny_diff = [y_values[i+1] - y_values[i] for i in range(len(y_values) - 1)]\nx_diff = [x_values[i+1] - x_values[i] for i in range(len(x_values) - 1)]\n\n# Check if the differences in y are constant\nis_linear = all(d == y_diff[0] for d in y_diff)\n\n# Determine the type of function\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "x_values = [12, 13, 14]\ny_values = [8, 15, 16]\n\n# Calculate the differences\nx_diff = [x_values[i+1] - x_values[i] for i in range(len(x_values) - 1)]\ny_diff = [y_values[i+1] - y_values[i] for i in range(len(y_values) - 1)]\n\n# Check if the ratio of differences is constant\nslopes = [y_diff[i] / x_diff[i] for i in range(len(x_diff))]\nis_linear = all(slope == slopes[0] for slope in slopes)\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values from the table\nx_values = [12, 13, 14]\ny_values = [8, 15, 16]\n\n# Calculate the slopes between each pair of points\nslopes = []\nfor i in range(len(x_values) - 1):\n    slope = (y_values[i + 1] - y_values[i]) / (x_values[i + 1] - x_values[i])\n    slopes.append(slope)\n\n# Check if all slopes are the same\nis_linear = all(s == slopes[0] for s in slopes)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)"
], "prediction": ["nonlinear", null, null, null], "report": ["Done", "NameError(\"name 'y_diff' is not defined\")", "NameError(\"name 'slopes' is not defined\")", "NameError(\"name 'slopes' is not defined\")"]
}
{
  "context": "Read the following table regarding \"Points per game\" and then answer a question.\n\nStem | Leaf \n0 | 9\n1 | 3, 4\n2 | 6\n3 | 8\n4 | \n5 | 0\n6 | 4", "question": "Read the following table regarding \"Points per game\" and then write Python code to answer a question.\n\nStem | Leaf \n0 | 9\n1 | 3, 4\n2 | 6\n3 | 8\n4 | \n5 | 0\n6 | 4\n\nA high school basketball coach counted the number of points her team scored each game. What is the smallest number of points?", "answer": "9", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The smallest number of points corresponds to the smallest value in the stem-and-leaf display.\nsmallest_points = 9  # From the stem \"0 | 9\", the value is 9 points.\nanswer = smallest_points\nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [(0, [9]), (1, [3, 4]), (2, [6]), (3, [8]), (4, []), (5, [0]), (6, [4])]\n\n# Initialize a variable to store the smallest points\nsmallest_points = float('inf')\n\n# Iterate through the stem and leaf data structure to find the smallest points\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        points = stem * 10 + leaf\n        if points < smallest_points:\n            smallest_points = points\n\nanswer = smallest_points\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(0, [9]), (1, [3, 4]), (2, [6]), (3, [8]), (4, []), (5, [0]), (6, [4])]  \n  \n# Initialize variable to store the smallest points  \nsmallest_points = float('inf')  \n  \n# Iterate through the stem and leaf data structure to find the smallest points  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        points = stem * 10 + leaf  \n        if points < smallest_points:  \n            smallest_points = points  \n  \n# Convert smallest_points to an integer  \nanswer = int(smallest_points)  \nprint(answer)", "stem_and_leaf = [(0, [9]), (1, [3, 4]), (2, [6]), (3, [8]), (4, []), (5, [0]), (6, [4])]  \nsmallest_points = float('inf')  \n\nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        points = stem * 10 + leaf  \n        if points < smallest_points:  \n            smallest_points = points  \n\nanswer = int(smallest_points)  # Ensure the answer is an integer\nprint(answer)  # Output: 9"
], "prediction": [9.0, 9.0, 9.0, 9.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nduck stamp | $0.17\nlarge cardboard box | $0.81\nsmall red box | $0.45\nflag stamp | $0.32\npiece of bubble wrap | $0.70\ntulip stamp | $0.16", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nduck stamp | $0.17\nlarge cardboard box | $0.81\nsmall red box | $0.45\nflag stamp | $0.32\npiece of bubble wrap | $0.70\ntulip stamp | $0.16\n\nHow much money does Trudy need to buy 7 pieces of bubble wrap?", "answer": "4.90", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_piece_bubble_wrap = 0.70 \npieces_needed = 7 \n# Calculate total cost\ntotal_cost = price_per_piece_bubble_wrap * pieces_needed\nanswer = total_cost\nprint(answer)", "price_per_piece_bubble_wrap = 0.70 \npieces_needed = 7 \ntotal_cost = price_per_piece_bubble_wrap * pieces_needed\nanswer = f\"${total_cost:.2f}\"  # Format the output to two decimal places\nprint(answer)", "price_per_piece_bubble_wrap = 0.70 \npieces_needed = 7 \ntotal_cost = price_per_piece_bubble_wrap * pieces_needed\nanswer = f\"${total_cost:.2f}\"  # Format the output to two decimal places\nprint(answer)", "price_per_piece_bubble_wrap = 0.70  \npieces_needed = 7  \ntotal_cost = price_per_piece_bubble_wrap * pieces_needed  \nanswer = total_cost  # Store the total cost as a float\nprint(f\"${answer:.2f}\")  # Output the answer formatted to two decimal places"], "prediction": [4.9, "$4.90", "$4.90", 4.9], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Velvet | Suede\nFoam | 3 | 4\nBeads | 1 | 2", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Velvet | Suede\nFoam | 3 | 4\nBeads | 1 | 2\n\nGordon and his brother are at a store shopping for a beanbag chair for their school's library. The store sells beanbag chairs with different fabrics and types of filling. What is the probability that a randomly selected beanbag chair is filled with foam and is made from velvet? Simplify any fractions.", "answer": "3/10", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total number of beanbag chairs\ntotal_chairs = 3 + 4 + 1 + 2\n\n# Number of beanbag chairs filled with foam and made from velvet\nfoam_velvet_chairs = 3\n\n# Calculate the probability\nprobability = foam_velvet_chairs / total_chairs\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(foam_velvet_chairs, total_chairs).limit_denominator()\n\nanswer = simplified_probability\nprint(answer)", "# Define the counts of beanbag chairs based on filling and fabric\nfoam_velvet_chairs = 3  # Number of chairs filled with foam and made from velvet\ntotal_chairs = 3 + 4 + 1 + 2  # Total number of chairs\n\n# Calculate the probability of selecting a foam velvet chair\nfrom fractions import Fraction\nprobability = Fraction(foam_velvet_chairs, total_chairs).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = probability\nprint(answer)", "foam_velvet_chairs = 3  # Number of chairs filled with foam and made from velvet\ntotal_chairs = 3 + 4 + 1 + 2  # Total number of chairs\nfrom fractions import Fraction\n\n# Calculate the probability as a fraction\nprobability = Fraction(foam_velvet_chairs, total_chairs).limit_denominator()\nanswer = probability  # Store the answer as a fraction\nprint(answer)", "# Number of beanbag chairs filled with foam and made from velvet\nfoam_velvet_chairs = 3  \n\n# Total number of chairs\ntotal_chairs = 3 + 4 + 1 + 2  \n\n# Calculate the probability as a fraction\nfrom fractions import Fraction\nprobability = Fraction(foam_velvet_chairs, total_chairs).limit_denominator()\n\n# Store the answer as a fraction\nanswer = probability  \nprint(answer)"
], "prediction": [0.3, 0.3, 0.3, 0.3], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Class schedule\" and then answer a question.\n\nSubject | Begin | End\nHistory | 8:30 A.M. | 9:35 A.M.\nEnglish | 9:45 A.M. | 10:30 A.M.\nMusic | 10:35 A.M. | 11:55 A.M.\nArt | 12:05 P.M. | 1:00 P.M.\nChemistry | 1:05 P.M. | 2:25 P.M.\nMath | 2:35 P.M. | 3:50 P.M.\nGym | 4:00 P.M. | 4:40 P.M.", "question": "Read the following table regarding \"Class schedule\" and then write Python code to answer a question.\n\nSubject | Begin | End\nHistory | 8:30 A.M. | 9:35 A.M.\nEnglish | 9:45 A.M. | 10:30 A.M.\nMusic | 10:35 A.M. | 11:55 A.M.\nArt | 12:05 P.M. | 1:00 P.M.\nChemistry | 1:05 P.M. | 2:25 P.M.\nMath | 2:35 P.M. | 3:50 P.M.\nGym | 4:00 P.M. | 4:40 P.M.\n\nLook at the following schedule. When does Math class begin? Choose from the the options: ['2:25 P.M.', '3:50 P.M.', '2:35 P.M.', '4:00 P.M.']", "answer": "2:35 P.M.", "ques_type": "multi_choice", "choices": ["2:25 P.M.", "3:50 P.M.", "2:35 P.M.", "4:00 P.M."], "code": ["# Python code, return answer \n# Math class begin time\nmath_class_begin = '2:35 P.M.'\nanswer = math_class_begin\nprint(answer)", "# Define the options for when Math class begins\noptions = ['2:25 P.M.', '3:50 P.M.', '2:35 P.M.', '4:00 P.M.']\n\n# Assign the beginning time of Math class\nmath_class_begin = '2:35 P.M.'\n\n# Check if the assigned time is in the options\nif math_class_begin in options:\n    answer = math_class_begin\nelse:\n    answer = \"Math class start time not found in options.\"\n\nprint(answer)", "# Define the start time for Math class  \nmath_class_begin = '2:35 P.M.'  \n\n# Assign the start time to the answer variable  \nanswer = math_class_begin  \n\nprint(answer)", "# Define the class schedule as a dictionary\nclass_schedule = {\n    'History': {'Begin': '8:30 A.M.', 'End': '9:35 A.M.'},\n    'English': {'Begin': '9:45 A.M.', 'End': '10:30 A.M.'},\n    'Music': {'Begin': '10:35 A.M.', 'End': '11:55 A.M.'},\n    'Art': {'Begin': '12:05 P.M.', 'End': '1:00 P.M.'},\n    'Chemistry': {'Begin': '1:05 P.M.', 'End': '2:25 P.M.'},\n    'Math': {'Begin': '2:35 P.M.', 'End': '3:50 P.M.'},\n    'Gym': {'Begin': '4:00 P.M.', 'End': '4:40 P.M.'}\n}\n\n# Retrieve the begin time for Math class\nmath_class_begin = class_schedule['Math']['Begin']\nanswer = math_class_begin\n\nprint(answer)"], "prediction": ["2:35 P.M.", "2:35 P.M.", "2:35 P.M.", "2:35 P.M."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Children's weights (lbs)\" and then answer a question.\n\nStem | Leaf \n2 | 7, 9\n3 | 7, 7\n4 | 4\n5 | 0, 7\n6 | 4, 5, 5, 6, 7, 7, 8", "question": "Read the following table regarding \"Children's weights (lbs)\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 7, 9\n3 | 7, 7\n4 | 4\n5 | 0, 7\n6 | 4, 5, 5, 6, 7, 7, 8\n\nDr. Mueller, a pediatrician, weighed all the children who recently visited her office. What is the weight of the lightest child?", "answer": "27", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The lightest child corresponds to the smallest value in the stem-and-leaf display.\nlightest_child_weight = 27  # From the stem \"2 | 7\", the value is 27 lbs.\nanswer = lightest_child_weight\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [7, 9]), (3, [7, 7]), (4, [4]), (5, [0, 7]), (6, [4, 5, 5, 6, 7, 7, 8])]  \n\n# Initialize variable for the lightest child's weight  \nlightest_child_weight = float('inf')  \n\n# Iterate through the stem and leaf data structure to find the lightest child's weight  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        weight = stem * 10 + leaf  # Calculate the weight from the stem and leaf  \n        if weight < lightest_child_weight:  \n            lightest_child_weight = weight  # Update if a lighter weight is found  \n\nanswer = lightest_child_weight  \nprint(answer)", "stem_and_leaf = [(2, [7, 9]), (3, [7, 7]), (4, [4]), (5, [0, 7]), (6, [4, 5, 5, 6, 7, 7, 8])]  \nlightest_child_weight = float('inf')  \n\nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        weight = stem * 10 + leaf  # Calculate the weight from the stem and leaf  \n        if weight < lightest_child_weight:  \n            lightest_child_weight = weight  # Update if a lighter weight is found  \n\nanswer = int(lightest_child_weight)  # Convert to integer for clarity  \nprint(answer)", "# Define the stem and leaf data structure for children's weights\nstem_and_leaf = [(2, [7, 9]), (3, [7, 7]), (4, [4]), (5, [0, 7]), (6, [4, 5, 5, 6, 7, 7, 8])]  \n\n# Initialize a variable to track the lightest child's weight\nlightest_child_weight = float('inf')  \n\n# Iterate through the stem and leaf data structure to find the lightest weight\nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        weight = stem * 10 + leaf  # Calculate the weight from the stem and leaf  \n        if weight < lightest_child_weight:  \n            lightest_child_weight = weight  # Update if a lighter weight is found  \n\nanswer = int(lightest_child_weight)  # Convert to integer for clarity\nprint(answer)"
], "prediction": [27.0, 27.0, 27.0, 27.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n15 | 18\n16 | 9\n17 | 0", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n15 | 18\n16 | 9\n17 | 0\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "linear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for equal intervals of x-values.\nx_values = [15, 16, 17]\ny_values = [18, 9, 0]\n\n# Calculate the differences\ndifference_x = [x_values[i+1] - x_values[i] for i in range(len(x_values)-1)]\ndifference_y = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Calculate slopes between points\nslopes = [difference_y[i] / difference_x[i] for i in range(len(difference_x))]\n\n# Check if all slopes are the same\nif len(set(slopes)) == 1:\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\n\nprint(answer)", "x_values = [15, 16, 17]\ny_values = [18, 9, 0]\n\n# Calculate the differences\ndifference_x = [x_values[i+1] - x_values[i] for i in range(len(x_values)-1)]\ndifference_y = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Calculate the slopes\nslopes = [difference_y[i] / difference_x[i] for i in range(len(difference_x))]\n\n# Check if all slopes are the same\nif len(set(slopes)) == 1:\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\n\nprint(answer)  # This should output 'nonlinear'", "x_values = [15, 16, 17]\ny_values = [18, 9, 0]\n\n# Calculate the differences between consecutive y values\ndifference_y = [y_values[i + 1] - y_values[i] for i in range(len(y_values) - 1)]\n\n# Calculate the differences between consecutive x values\ndifference_x = [x_values[i + 1] - x_values[i] for i in range(len(x_values) - 1)]\n\n# Check if the slopes are consistent\nslopes = [difference_y[i] / difference_x[i] for i in range(len(difference_y))]\n\n# Determine if the function is linear or nonlinear\nif len(set(slopes)) == 1:\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\n\nprint(answer)  # This should output 'nonlinear'", "x_values = [15, 16, 17]\ny_values = [18, 9, 0]\n\n# Calculate the differences in y and x\ndifference_y = [y_values[i + 1] - y_values[i] for i in range(len(y_values) - 1)]\ndifference_x = [x_values[i + 1] - x_values[i] for i in range(len(x_values) - 1)]\n\n# Calculate the slopes\nslopes = [difference_y[i] / difference_x[i] for i in range(len(difference_y))]\n\n# Check if all slopes are the same\nif len(set(slopes)) == 1:\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\n\nprint(answer)  # This should output 'nonlinear'"
], "prediction": ["linear", "linear", "linear", "linear"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Number of birds seen\" and then answer a question.\n\nMonth | Number of birds\nApril | 488\nMay | 381\nJune | 689", "question": "Read the following table regarding \"Number of birds seen\" and then write Python code to answer a question.\n\nMonth | Number of birds\nApril | 488\nMay | 381\nJune | 689\n\nThe bird-watching club recorded how many birds its members saw each month. How many more birds did the club see in April than in May?", "answer": "107", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nbirds_april = 488\nbirds_may = 381\n# Calculate the difference in the number of birds seen\ndifference = birds_april - birds_may\nanswer = difference\nprint(answer)", "# Define the number of birds seen in April and May\nbirds_april = 488\nbirds_may = 381\n\n# Calculate the difference\ndifference = birds_april - birds_may\n\n# Store the result in the answer variable\nanswer = difference\n\n# Print the answer\nprint(answer)", "birds_april = 488\nbirds_may = 381\ndifference = birds_april - birds_may\nanswer = int(difference)  # Convert to integer to avoid decimal point\nprint(answer)", "birds_april = 488\nbirds_may = 381\ndifference = birds_april - birds_may\nanswer = difference  # No need to convert to int, as it's already an integer\nprint(answer)"], "prediction": [107.0, 107.0, 107.0, 107.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nencyclopedia | $10.45\nairplane calendar | $13.23\nmap of the world | $13.10\ndog calendar | $11.63\nphoto album | $25.28\nmap of Africa | $10.10", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nencyclopedia | $10.45\nairplane calendar | $13.23\nmap of the world | $13.10\ndog calendar | $11.63\nphoto album | $25.28\nmap of Africa | $10.10\n\nHow much more does an airplane calendar cost than a map of Africa?", "answer": "3.13", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_airplane_calendar = 13.23 \ncost_map_of_africa = 10.10 \n# Calculate the difference in cost\ndifference_in_cost = cost_airplane_calendar - cost_map_of_africa\nanswer = difference_in_cost\nprint(answer)", "# Define the costs of the items\ncost_airplane_calendar = 13.23  # Cost of the airplane calendar\ncost_map_of_africa = 10.10       # Cost of the map of Africa\n\n# Calculate the difference in cost\ndifference_in_cost = cost_airplane_calendar - cost_map_of_africa\n\n# Store the result in the answer variable\nanswer = difference_in_cost\n\n# Print the result\nprint(answer)", "cost_airplane_calendar = 13.23  # Cost of the airplane calendar\ncost_map_of_africa = 10.10       # Cost of the map of Africa\ndifference_in_cost = cost_airplane_calendar - cost_map_of_africa\nanswer = difference_in_cost\nprint(answer)  # This will output the answer correctly", "# Define the costs of the items\ncost_airplane_calendar = 13.23  # Cost of the airplane calendar\ncost_map_of_africa = 10.10       # Cost of the map of Africa\n\n# Calculate the difference in cost\ndifference_in_cost = cost_airplane_calendar - cost_map_of_africa\n\n# Store the result in the variable 'answer'\nanswer = difference_in_cost\n\n# Output the result\nprint(answer)  # This will output the answer correctly"], "prediction": [3.13, 3.13, 3.13, 3.13], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Toys per bin\" and then answer a question.\n\nStem | Leaf \n1 | 4, 7\n2 | 0, 8\n3 | 9\n4 | 6\n5 | 6, 8\n6 | 0, 0, 6\n7 | 0, 1, 2, 4\n8 | 2, 3", "question": "Read the following table regarding \"Toys per bin\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 4, 7\n2 | 0, 8\n3 | 9\n4 | 6\n5 | 6, 8\n6 | 0, 0, 6\n7 | 0, 1, 2, 4\n8 | 2, 3\n\nA toy store employee counted the number of toys in each bin in the sale section. How many bins had fewer than 54 toys?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of toys per bin based on the stem-and-leaf display\ntoys_per_bin = [14, 17, 20, 28, 39, 46, 56, 58, 60, 60, 66, 70, 71, 72, 74, 82, 83]\n\n# Count the number of bins with fewer than 54 toys\nbins_fewer_than_54 = sum(1 for toys in toys_per_bin if toys < 54)\nanswer = bins_fewer_than_54\nprint(answer)", "toys_per_bin = [14, 17, 20, 28, 39, 46, 56, 58, 60, 60, 66, 70, 71, 72, 74, 82, 83]\nbins_fewer_than_54 = sum(1 for toys in toys_per_bin if toys < 54)\nanswer = int(bins_fewer_than_54)  # Convert to integer\nprint(answer)", "toys_per_bin = [14, 17, 20, 28, 39, 46, 56, 58, 60, 60, 66, 70, 71, 72, 74, 82, 83]\nbins_fewer_than_54 = sum(1 for toys in toys_per_bin if toys < 54)\nanswer = bins_fewer_than_54  # No conversion needed, already an integer\nprint(answer)", "toys_per_bin = [14, 17, 20, 28, 39, 46, 56, 58, 60, 60, 66, 70, 71, 72, 74, 82, 83]\nbins_fewer_than_54 = sum(1 for toys in toys_per_bin if toys < 54)\nanswer = int(bins_fewer_than_54)  # Convert to integer\nprint(answer)"], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Stuffed animals\" and then answer a question.\n\nNumber of stuffed animals | Frequency\n0 | 6\n1 | 9\n2 | 1\n3 | 17\n4 | 4\n5 | 20\n6 | 10", "question": "Read the following table regarding \"Stuffed animals\" and then write Python code to answer a question.\n\nNumber of stuffed animals | Frequency\n0 | 6\n1 | 9\n2 | 1\n3 | 17\n4 | 4\n5 | 20\n6 | 10\n\nAs part of a stuffed animal drive for the local children's hospital, the students at Walter Elementary School record how many stuffed animals they have collected. How many students have at least 4 stuffed animals?", "answer": "34", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency data from the table\nfrequency_data = {\n    0: 6,\n    1: 9,\n    2: 1,\n    3: 17,\n    4: 4,\n    5: 20,\n    6: 10\n}\n\n# Calculate the number of students with at least 4 stuffed animals\nstudents_with_at_least_4 = frequency_data[4] + frequency_data[5] + frequency_data[6]\nanswer = students_with_at_least_4\nprint(answer)", "frequency_data = {\n    0: 6,\n    1: 9,\n    2: 1,\n    3: 17,\n    4: 4,\n    5: 20,\n    6: 10\n}\nstudents_with_at_least_4 = frequency_data[4] + frequency_data[5] + frequency_data[6]\nanswer = int(students_with_at_least_4)  # Cast to int to ensure the output is an integer\nprint(answer)", "frequency_data = {\n    0: 6,\n    1: 9,\n    2: 1,\n    3: 17,\n    4: 4,\n    5: 20,\n    6: 10\n}\n\n# Calculate the number of students with at least 4 stuffed animals\nstudents_with_at_least_4 = frequency_data[4] + frequency_data[5] + frequency_data[6]\nanswer = students_with_at_least_4\n\nprint(answer)", "frequency_data = {\n    0: 6,\n    1: 9,\n    2: 1,\n    3: 17,\n    4: 4,\n    5: 20,\n    6: 10\n}\nstudents_with_at_least_4 = frequency_data[4] + frequency_data[5] + frequency_data[6]\nanswer = int(students_with_at_least_4)  # Ensure the result is an integer\nprint(answer)"], "prediction": [34.0, 34.0, 34.0, 34.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Books read\" and then answer a question.\n\nName | Number of books\nAlexandra | 76\nMalik | 76\nPercy | 72\nZach | 72\nBrendan | 76", "question": "Read the following table regarding \"Books read\" and then write Python code to answer a question.\n\nName | Number of books\nAlexandra | 76\nMalik | 76\nPercy | 72\nZach | 72\nBrendan | 76\n\nAlexandra's classmates recorded how many books they read last year. What is the mode of the numbers?", "answer": "76", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of the number of books read by each student\nbooks_read = [76, 76, 72, 72, 76]\n\n# Calculate the mode\nfrom statistics import mode\nmode_value = mode(books_read)\nanswer = mode_value\nprint(answer)", "books_read = [76, 76, 72, 72, 76]\nfrom statistics import mode\nmode_value = mode(books_read)\nanswer = int(mode_value)  # Convert to integer\nprint(answer)", "# List of books read by each student\nbooks_read = [76, 76, 72, 72, 76]\n\n# Importing the mode function from statistics module\nfrom statistics import mode\n\n# Finding the mode value\nmode_value = mode(books_read)\n\n# Storing the mode as an integer in the answer variable\nanswer = mode_value  # This will already be an integer\n\nprint(answer)", "books_read = [76, 76, 72, 72, 76]\nfrom statistics import mode\nmode_value = mode(books_read)\nanswer = int(mode_value)  # Convert the mode to an integer\nprint(answer)"], "prediction": [76.0, 76.0, 76.0, 76.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"States visited\" and then answer a question.\n\nName | Number of states\nKurt | 6\nHeather | 10\nShawna | 9\nAdam | 6\nMeg | 6", "question": "Read the following table regarding \"States visited\" and then write Python code to answer a question.\n\nName | Number of states\nKurt | 6\nHeather | 10\nShawna | 9\nAdam | 6\nMeg | 6\n\nKurt's class recorded how many states each student has visited. What is the median of the numbers?", "answer": "6", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# List of the number of states visited by each student\nstates_visited = [6, 10, 9, 6, 6]\n\n# Sort the list to find the median\nstates_visited.sort()\n\n# Calculate the median\nn = len(states_visited)\nif n % 2 == 1:\n    median = states_visited[n // 2]  # Middle value for odd number of elements\nelse:\n    median = (states_visited[n // 2 - 1] + states_visited[n // 2]) / 2  # Average of two middle values for even number of elements\n\nanswer = median\nprint(answer)", "states_visited = [6, 10, 9, 6, 6]  \nstates_visited.sort()  \nn = len(states_visited)  \nif n % 2 == 1:  \n    median = states_visited[n // 2]  # Middle value for odd number of elements  \nelse:  \n    median = (states_visited[n // 2 - 1] + states_visited[n // 2]) / 2  # Average of two middle values for even number of elements  \n\nanswer = median  \nprint(answer)", "states_visited = [6, 10, 9, 6, 6]  \nstates_visited.sort()  \nn = len(states_visited)  \nif n % 2 == 1:  \n    median = states_visited[n // 2]  # Middle value for odd number of elements  \nelse:  \n    median = (states_visited[n // 2 - 1] + states_visited[n // 2]) / 2  # Average of two middle values for even number of elements  \n\n# Convert median to int if it's a whole number\nif median.is_integer():\n    median = int(median)\n\nanswer = median  \nprint(answer)", "states_visited = [6, 10, 9, 6, 6]  \nstates_visited.sort()  \nn = len(states_visited)  \nif n % 2 == 1:  \n    median = states_visited[n // 2]  # Middle value for odd number of elements  \nelse:  \n    median = (states_visited[n // 2 - 1] + states_visited[n // 2]) / 2  # Average of two middle values for even number of elements  \n\n# Convert median to int if it's a whole number\nif median.is_integer():\n    median = int(median)\n\nanswer = median  \nprint(answer)"
], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Roses per bush\" and then answer a question.\n\nStem | Leaf \n2 | 1\n3 | 6\n4 | 7\n5 | 7\n6 | 4, 5\n7 | 4\n8 | 2, 4\n9 | 0", "question": "Read the following table regarding \"Roses per bush\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 1\n3 | 6\n4 | 7\n5 | 7\n6 | 4, 5\n7 | 4\n8 | 2, 4\n9 | 0\n\nThe owner of a plant nursery wrote down the number of roses on each bush. What is the largest number of roses?", "answer": "90", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number of roses corresponds to the largest value in the stem-and-leaf display.\nlargest_roses = 90  # From the stem \"9 | 0\", the value is 90 roses.\nanswer = largest_roses\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(2, [1]), (3, [6]), (4, [7]), (5, [7]), (6, [4, 5]), (7, [4]), (8, [2, 4]), (9, [0])]\n\n# Initialize variable to hold the largest number of roses\nlargest_roses = 0\n\n# Iterate through the stem and leaf data structure to find the largest number of roses\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        roses_per_bush = stem * 10 + leaf\n        if roses_per_bush > largest_roses:\n            largest_roses = roses_per_bush\n\nanswer = largest_roses\nprint(answer)", "stem_and_leaf = [(2, [1]), (3, [6]), (4, [7]), (5, [7]), (6, [4, 5]), (7, [4]), (8, [2, 4]), (9, [0])]\nlargest_roses = 0\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        roses_per_bush = stem * 10 + leaf\n        if roses_per_bush > largest_roses:\n            largest_roses = roses_per_bush\nanswer = largest_roses\nprint(answer)", "stem_and_leaf = [(2, [1]), (3, [6]), (4, [7]), (5, [7]), (6, [4, 5]), (7, [4]), (8, [2, 4]), (9, [0])]\nlargest_roses = 0\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        roses_per_bush = stem * 10 + leaf\n        if roses_per_bush > largest_roses:\n            largest_roses = roses_per_bush\nanswer = int(largest_roses)  # Convert to integer\nprint(answer)"
], "prediction": [90.0, 90.0, 90.0, 90.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Bus schedule\" and then answer a question.\n\nthe kickball field | 8:45 A.M. | 9:15 A.M. | 10:15 A.M. | 10:30 A.M. | 10:45 A.M.\nthe library | 9:00 A.M. | 9:30 A.M. | 10:30 A.M. | 10:45 A.M. | 11:00 A.M.\nthe school | 9:30 A.M. | 10:00 A.M. | 11:00 A.M. | 11:15 A.M. | 11:30 A.M.\nthe mall | 10:30 A.M. | 11:00 A.M. | 12:00 P.M. | 12:15 P.M. | 12:30 P.M.\nthe zoo | 11:30 A.M. | 12:00 P.M. | 1:00 P.M. | 1:15 P.M. | 1:30 P.M.\nthe playground | 12:00 P.M. | 12:30 P.M. | 1:30 P.M. | 1:45 P.M. | 2:00 P.M.\nthe doctor's office | 12:30 P.M. | 1:00 P.M. | 2:00 P.M. | 2:15 P.M. | 2:30 P.M.\nthe post office | 12:45 P.M. | 1:15 P.M. | 2:15 P.M. | 2:30 P.M. | 2:45 P.M.\nthe science museum | 1:00 P.M. | 1:30 P.M. | 2:30 P.M. | 2:45 P.M. | 3:00 P.M.", "question": "Read the following table regarding \"Bus schedule\" and then write Python code to answer a question.\n\nthe kickball field | 8:45 A.M. | 9:15 A.M. | 10:15 A.M. | 10:30 A.M. | 10:45 A.M.\nthe library | 9:00 A.M. | 9:30 A.M. | 10:30 A.M. | 10:45 A.M. | 11:00 A.M.\nthe school | 9:30 A.M. | 10:00 A.M. | 11:00 A.M. | 11:15 A.M. | 11:30 A.M.\nthe mall | 10:30 A.M. | 11:00 A.M. | 12:00 P.M. | 12:15 P.M. | 12:30 P.M.\nthe zoo | 11:30 A.M. | 12:00 P.M. | 1:00 P.M. | 1:15 P.M. | 1:30 P.M.\nthe playground | 12:00 P.M. | 12:30 P.M. | 1:30 P.M. | 1:45 P.M. | 2:00 P.M.\nthe doctor's office | 12:30 P.M. | 1:00 P.M. | 2:00 P.M. | 2:15 P.M. | 2:30 P.M.\nthe post office | 12:45 P.M. | 1:15 P.M. | 2:15 P.M. | 2:30 P.M. | 2:45 P.M.\nthe science museum | 1:00 P.M. | 1:30 P.M. | 2:30 P.M. | 2:45 P.M. | 3:00 P.M.\n\nLook at the following schedule. Ruth just missed the 11.00 A.M. bus at the mall. How long does she have to wait until the next bus? Choose from the the options: ['15 minutes', '30 minutes', '45 minutes', '1 hour']", "answer": "1 hour", "ques_type": "multi_choice", "choices": ["15 minutes", "30 minutes", "45 minutes", "1 hour"], "code": [
  "# Python code, return answer \n# The next bus time after 11:00 A.M. at the mall\nnext_bus_time = \"12:00 P.M.\"\n# Current time after missing the 11:00 A.M. bus\ncurrent_time = \"11:00 A.M.\"\n\n# Convert times to minutes\ndef convert_to_minutes(time_str):\n    if 'P.M.' in time_str:\n        hour = int(time_str.split(':')[0]) + 12\n    else:\n        hour = int(time_str.split(':')[0])\n    minutes = int(time_str.split(':')[1].split()[0])\n    return hour * 60 + minutes\n\ncurrent_time_minutes = convert_to_minutes(current_time)\nnext_bus_time_minutes = convert_to_minutes(next_bus_time)\n\n# Calculate waiting time\nwaiting_time = next_bus_time_minutes - current_time_minutes\n\nanswer = f\"{waiting_time} minutes\"\nprint(answer)", "# Define the bus schedule times\nnext_bus_time = \"12:00 P.M.\"\ncurrent_time = \"11:00 A.M.\"\n\n# Function to convert time to minutes\ndef convert_to_minutes(time_str):\n    hour = int(time_str.split(':')[0])\n    minutes = int(time_str.split(':')[1].split()[0])\n    if 'P.M.' in time_str and hour != 12:\n        hour += 12\n    if 'A.M.' in time_str and hour == 12:\n        hour = 0\n    return hour * 60 + minutes\n\n# Convert both times to minutes\ncurrent_time_minutes = convert_to_minutes(current_time)\nnext_bus_time_minutes = convert_to_minutes(next_bus_time)\n\n# Calculate the waiting time\nwaiting_time = next_bus_time_minutes - current_time_minutes\n\n# Determine the waiting time in a readable format\nif waiting_time == 15:\n    answer = '15 minutes'\nelif waiting_time == 30:\n    answer = '30 minutes'\nelif waiting_time == 45:\n    answer = '45 minutes'\nelif waiting_time == 60:\n    answer = '1 hour'\nelse:\n    answer = f\"{waiting_time} minutes\"\n\nprint(answer)", "next_bus_time = \"12:00 P.M.\"\ncurrent_time = \"11:00 A.M.\"\n\ndef convert_to_minutes(time_str):\n    hour = int(time_str.split(':')[0])\n    minutes = int(time_str.split(':')[1].split()[0])\n    if 'P.M.' in time_str and hour != 12:\n        hour += 12\n    if 'A.M.' in time_str and hour == 12:\n        hour = 0\n    return hour * 60 + minutes\n\ncurrent_time_minutes = convert_to_minutes(current_time)\nnext_bus_time_minutes = convert_to_minutes(next_bus_time)\nwaiting_time = next_bus_time_minutes - current_time_minutes\n\n# Determine the waiting time in a more straightforward manner\nif waiting_time == 15:\n    answer = '15 minutes'\nelif waiting_time == 30:\n    answer = '30 minutes'\nelif waiting_time == 45:\n    answer = '45 minutes'\nelif waiting_time >= 60:\n    answer = '1 hour'\nelse:\n    answer = f\"{waiting_time} minutes\"\n\nprint(answer)", "next_bus_time = \"12:00 P.M.\"\ncurrent_time = \"11:00 A.M.\"\n\ndef convert_to_minutes(time_str):\n    hour = int(time_str.split(':')[0])\n    minutes = int(time_str.split(':')[1].split()[0])\n    if 'P.M.' in time_str and hour != 12:\n        hour += 12\n    if 'A.M.' in time_str and hour == 12:\n        hour = 0\n    return hour * 60 + minutes\n\ncurrent_time_minutes = convert_to_minutes(current_time)\nnext_bus_time_minutes = convert_to_minutes(next_bus_time)\nwaiting_time = next_bus_time_minutes - current_time_minutes\n\n# Ensure waiting time is non-negative\nif waiting_time < 0:\n    answer = \"Bus schedule error\"\nelse:\n    if waiting_time == 15:\n        answer = '15 minutes'\n    elif waiting_time == 30:\n        answer = '30 minutes'\n    elif waiting_time == 45:\n        answer = '45 minutes'\n    elif waiting_time >= 60:\n        answer = '1 hour'\n    else:\n        answer = f\"{waiting_time} minutes\"\n\nprint(answer)"
], "prediction": ["780 minutes", "1 hour", "1 hour", "1 hour"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$885 | 19,000 | 10,100\n$925 | 16,000 | 12,400\n$965 | 13,000 | 14,700\n$1,005 | 10,000 | 17,000\n$1,045 | 7,000 | 19,300", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$885 | 19,000 | 10,100\n$925 | 16,000 | 12,400\n$965 | 13,000 | 14,700\n$1,005 | 10,000 | 17,000\n$1,045 | 7,000 | 19,300\n\nLook at the table. Then answer the question. At a price of $1,005, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "surplus", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": ["# Python code, return answer \nquantity_demanded = 10000  # at price $1,005\nquantity_supplied = 17000   # at price $1,005\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n    \nprint(answer)", "# Define the quantities based on the provided table\nquantity_demanded = 10000  # at price $1,005\nquantity_supplied = 17000   # at price $1,005\n\n# Determine if there is a surplus or shortage\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the quantities based on the table\nquantity_demanded = 10000  # at price $1,005\nquantity_supplied = 17000   # at price $1,005\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Given values from the table\nquantity_demanded = 10000  # at price $1,005\nquantity_supplied = 17000   # at price $1,005\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)"], "prediction": ["surplus", "surplus", "surplus", "surplus"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Riverside arts education budget\" and then answer a question.\n\nYear | Per-student budget\n2014 | $46\n2015 | $36\n2016 | $42\n2017 | $42\n2018 | $29", "question": "Read the following table regarding \"Riverside arts education budget\" and then write Python code to answer a question.\n\nYear | Per-student budget\n2014 | $46\n2015 | $36\n2016 | $42\n2017 | $42\n2018 | $29\n\nIn hopes of raising more funds for arts education, some parents in the Riverside School District publicized the current per-student arts education budget. According to the table, what was the rate of change between 2016 and 2017?", "answer": "0", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Per-student budget for the years in question\nbudget_2016 = 42\nbudget_2017 = 42\n\n# Calculate the rate of change\nrate_of_change = budget_2017 - budget_2016\nanswer = rate_of_change\nprint(answer)", "budget_2016 = 42\nbudget_2017 = 42\n\n# Calculate the percentage change\npercentage_change = ((budget_2017 - budget_2016) / budget_2016) * 100\nanswer = percentage_change\nprint(answer)", "# Define the budgets for the years 2016 and 2017  \nbudget_2016 = 42  \nbudget_2017 = 42  \n\n# Calculate the rate of change (difference) between the two years  \nrate_of_change = budget_2017 - budget_2016  \nanswer = rate_of_change  \nprint(answer)", "budget_2016 = 42  \nbudget_2017 = 42  \n\n# Calculate the rate of change as a percentage\nrate_of_change = ((budget_2017 - budget_2016) / budget_2016) * 100  \nanswer = rate_of_change  \nprint(answer)"], "prediction": [0.0, 0.0, 0.0, 0.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nkidney beans | $1.38 per pound\nsoybeans | $2.33 per pound\nlentils | $1.86 per pound\ngarbanzo beans | $1.14 per pound\nmung beans | $1.45 per pound", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nkidney beans | $1.38 per pound\nsoybeans | $2.33 per pound\nlentils | $1.86 per pound\ngarbanzo beans | $1.14 per pound\nmung beans | $1.45 per pound\n\nColleen bought 3 pounds of mung beans. How much did she spend?", "answer": "4.35", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_mung_beans = 1.45 \npounds_bought = 3 \nanswer = price_per_pound_mung_beans * pounds_bought\nprint(answer)", "# Define the price per pound of mung beans and the quantity bought\nprice_per_pound_mung_beans = 1.45 \npounds_bought = 3 \n\n# Calculate the total amount spent\ntotal_spent = price_per_pound_mung_beans * pounds_bought\n\n# Store the result in the answer variable with a currency format\nanswer = f\"${total_spent:.2f}\"\nprint(answer)", "price_per_pound_mung_beans = 1.45 \npounds_bought = 3 \ntotal_spent = price_per_pound_mung_beans * pounds_bought\nanswer = total_spent  # Store as a numerical value\nprint(answer)", "price_per_pound_mung_beans = 1.45 \npounds_bought = 3 \ntotal_spent = price_per_pound_mung_beans * pounds_bought\nanswer = total_spent  # Store as a numerical value\nprint(f\"Colleen spent ${answer:.2f} on mung beans.\")"], "prediction": [4.35, "$4.35", 4.35, 4.35], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Peppermint candies per jar\" and then answer a question.\n\nStem | Leaf \n1 | 4, 5, 9\n2 | 0, 4, 5, 6, 6, 7, 8, 8\n3 | 3, 4\n4 | \n5 | \n6 | 1, 5, 8, 9", "question": "Read the following table regarding \"Peppermint candies per jar\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 4, 5, 9\n2 | 0, 4, 5, 6, 6, 7, 8, 8\n3 | 3, 4\n4 | \n5 | \n6 | 1, 5, 8, 9\n\nEmmy, a candy store employee, placed peppermint candies into jars of various sizes. What is the largest number of peppermint candies?", "answer": "69", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number of peppermint candies corresponds to the highest value in the stem-and-leaf display.\nlargest_candies = 689  # From the stem \"6 | 1, 5, 8, 9\", the largest value is 689.\nanswer = largest_candies\nprint(answer)", "# Define the stem and leaf data structure as a list of tuples\nstem_and_leaf = [(1, [4, 5, 9]), (2, [0, 4, 5, 6, 6, 7, 8, 8]), (3, [3, 4]), (4, []), (5, []), (6, [1, 5, 8, 9])]\n\n# Initialize a variable to track the largest number of peppermint candies\nlargest_candies = 0\n\n# Iterate through the stem and leaf data structure to find the largest value\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        # Calculate the number of candies\n        candies = stem * 10 + leaf\n        # Update the largest_candies if the current candies is greater\n        if candies > largest_candies:\n            largest_candies = candies\n\nanswer = largest_candies\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [4, 5, 9]), (2, [0, 4, 5, 6, 6, 7, 8, 8]), (3, [3, 4]), (4, []), (5, []), (6, [1, 5, 8, 9])]  \n\n# Initialize variable to keep track of the largest number of candies  \nlargest_candies = None  \n\n# Iterate through the stem and leaf data structure and find the largest number of candies  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        candies = stem * 10 + leaf  # Calculate the number of candies  \n        if largest_candies is None or candies > largest_candies:  # Check if it's the largest  \n            largest_candies = candies  \n\nanswer = largest_candies  \nprint(answer)", "stem_and_leaf = [(1, [4, 5, 9]), (2, [0, 4, 5, 6, 6, 7, 8, 8]), (3, [3, 4]), (4, []), (5, []), (6, [1, 5, 8, 9])]  \nlargest_candies = 0  # Initialize as 0 since we are looking for the maximum  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        candies = stem * 10 + leaf  # Calculate the number of candies  \n        if candies > largest_candies:  # Check if it's the largest  \n            largest_candies = candies  \nanswer = largest_candies  \nprint(answer)"
], "prediction": [689.0, 69.0, 69.0, 69.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Pages per book\" and then answer a question.\n\nStem | Leaf \n4 | 1, 1, 1, 2, 4, 4, 5, 6, 7, 8, 9, 9\n5 | 0, 2\n6 | 2, 4, 6\n7 | 2, 2, 6, 7\n8 | 5, 5, 7\n9 | 0", "question": "Read the following table regarding \"Pages per book\" and then write Python code to answer a question.\n\nStem | Leaf \n4 | 1, 1, 1, 2, 4, 4, 5, 6, 7, 8, 9, 9\n5 | 0, 2\n6 | 2, 4, 6\n7 | 2, 2, 6, 7\n8 | 5, 5, 7\n9 | 0\n\nDavid counted the pages in each book on his English class's required reading list. How many books had at least 60 pages?", "answer": "11", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Extracting the number of pages from the stem-and-leaf display\npages = [\n    41, 41, 41, 42, 44, 44, 45, 46, 47, 48, 49, 49,  # Stem 4\n    50, 52,                                  # Stem 5\n    62, 64, 66,                               # Stem 6\n    72, 72, 76, 77,                           # Stem 7\n    85, 85, 87,                               # Stem 8\n    90                                      # Stem 9\n]\n\n# Count books with at least 60 pages\ncount_at_least_60_pages = sum(1 for page in pages if page >= 60)\nanswer = count_at_least_60_pages\nprint(answer)", "pages = [\n    41, 41, 41, 42, 44, 44, 45, 46, 47, 48, 49, 49,  # Stem 4\n    50, 52,                                  # Stem 5\n    62, 64, 66,                               # Stem 6\n    72, 72, 76, 77,                           # Stem 7\n    85, 85, 87,                               # Stem 8\n    90                                      # Stem 9\n]\ncount_at_least_60_pages = sum(1 for page in pages if page >= 60)\nanswer = int(count_at_least_60_pages)  # Ensure the result is an integer\nprint(answer)", "# List of pages in each book based on the stem-and-leaf data\npages = [\n    41, 41, 41, 42, 44, 44, 45, 46, 47, 48, 49, 49,  # Stem 4\n    50, 52,                                  # Stem 5\n    62, 64, 66,                               # Stem 6\n    72, 72, 76, 77,                           # Stem 7\n    85, 85, 87,                               # Stem 8\n    90                                      # Stem 9\n]\n\n# Count how many books have at least 60 pages\ncount_at_least_60_pages = sum(1 for page in pages if page >= 60)\nanswer = count_at_least_60_pages  # The result is already an integer\nprint(answer)", "# List of pages based on the given stem and leaf data\npages = [\n    41, 41, 41, 42, 44, 44, 45, 46, 47, 48, 49, 49,  # Stem 4\n    50, 52,                                  # Stem 5\n    62, 64, 66,                               # Stem 6\n    72, 72, 76, 77,                           # Stem 7\n    85, 85, 87,                               # Stem 8\n    90                                      # Stem 9\n]\n\n# Count the number of books with at least 60 pages\ncount_at_least_60_pages = len([page for page in pages if page >= 60])\nanswer = count_at_least_60_pages  # The result is now an integer\nprint(answer)"
], "prediction": [11.0, 11.0, 11.0, 11.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Boxes of cereal purchased\" and then answer a question.\n\nCereal | Number of boxes purchased\nToasted Treats | 8,016\nFruit-E-Ohs | 4,087\nWhole Wheat Goodness | 6,145\nOaty Yums | 1,786", "question": "Read the following table regarding \"Boxes of cereal purchased\" and then write Python code to answer a question.\n\nCereal | Number of boxes purchased\nToasted Treats | 8,016\nFruit-E-Ohs | 4,087\nWhole Wheat Goodness | 6,145\nOaty Yums | 1,786\n\nA business analyst compared purchases of different types of cereal. How many more boxes of Whole Wheat Goodness were purchased than boxes of Fruit-E-Ohs?", "answer": "2,058", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of boxes purchased for each cereal type\nboxes_whole_wheat_goodness = 6145\nboxes_fruit_e_ohs = 4087\n\n# Calculate the difference\ndifference = boxes_whole_wheat_goodness - boxes_fruit_e_ohs\nanswer = difference\nprint(answer)", "boxes_whole_wheat_goodness = 6145\nboxes_fruit_e_ohs = 4087\ndifference = boxes_whole_wheat_goodness - boxes_fruit_e_ohs\nanswer = int(difference)  # Convert to integer for clarity\nprint(answer)", "boxes_whole_wheat_goodness = 6145\nboxes_fruit_e_ohs = 4087\ndifference = boxes_whole_wheat_goodness - boxes_fruit_e_ohs\nanswer = difference  # No need to convert to int since the result is already an integer\nprint(answer)", "boxes_whole_wheat_goodness = 6145\nboxes_fruit_e_ohs = 4087\ndifference = boxes_whole_wheat_goodness - boxes_fruit_e_ohs\nanswer = int(difference)  # Ensure the result is an integer\nprint(answer)"], "prediction": [2058.0, 2058.0, 2058.0, 2058.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Clubs\" and then answer a question.\n\nName | Number of clubs\nRhianna | 1\nAntonio | 1\nDebbie | 7\nShane | 7\nGrayson | 1\nPablo | 7\nFrancesca | 1\nNeil | 7", "question": "Read the following table regarding \"Clubs\" and then write Python code to answer a question.\n\nName | Number of clubs\nRhianna | 1\nAntonio | 1\nDebbie | 7\nShane | 7\nGrayson | 1\nPablo | 7\nFrancesca | 1\nNeil | 7\n\nSome students compared how many clubs they belong to. What is the mean of the numbers?", "answer": "4", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of clubs for each student\nclubs_count = [1, 1, 7, 7, 1, 7, 1, 7]\n# Calculate the mean\nmean_clubs = sum(clubs_count) / len(clubs_count)\nanswer = mean_clubs\nprint(answer)", "clubs_count = [1, 1, 7, 7, 1, 7, 1, 7]\nmean_clubs = sum(clubs_count) / len(clubs_count)\nanswer = mean_clubs\nprint(answer)", "clubs_count = [1, 1, 7, 7, 1, 7, 1, 7]\nmean_clubs = sum(clubs_count) / len(clubs_count)\nanswer = f\"The mean number of clubs is {mean_clubs:.1f}.\"\nprint(answer)", "clubs_count = [1, 1, 7, 7, 1, 7, 1, 7]\nmean_clubs = sum(clubs_count) / len(clubs_count)\nanswer = mean_clubs\nprint(answer)"], "prediction": [4.0, 4.0, "The mean number of clubs is 4.0.", 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of bunches | Number of flowers\n1 | 5\n2 | 10\n3 | 15\n4 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of bunches | Number of flowers\n1 | 5\n2 | 10\n3 | 15\n4 | ?\n\nEach bunch has 5 flowers. How many flowers are in 4 bunches?", "answer": "20", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Each bunch contains 5 flowers\nflowers_per_bunch = 5\nbunches = 4\n# Calculate the total number of flowers in 4 bunches\ntotal_flowers = flowers_per_bunch * bunches\nanswer = total_flowers\nprint(answer)", "flowers_per_bunch = 5\nbunches = 4\ntotal_flowers = flowers_per_bunch * bunches\nanswer = total_flowers\nprint(answer)", "flowers_per_bunch = 5\nbunches = 4\ntotal_flowers = flowers_per_bunch * bunches\nanswer = int(total_flowers)  # Ensure the answer is an integer\nprint(answer)", "flowers_per_bunch = 5\nbunches = 4\ntotal_flowers = flowers_per_bunch * bunches\nanswer = total_flowers  # No need to convert to int since total_flowers is already an integer\nprint(answer)"], "prediction": [20.0, 20.0, 20.0, 20.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nHawaiian vacation package | $4,866.00\nJamaican vacation package | $2,625.00\nAustralian vacation package | $3,635.00\nCaribbean vacation package | $1,398.00\nAfrican safari vacation package | $4,371.00\nEuropean vacation package | $6,510.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nHawaiian vacation package | $4,866.00\nJamaican vacation package | $2,625.00\nAustralian vacation package | $3,635.00\nCaribbean vacation package | $1,398.00\nAfrican safari vacation package | $4,371.00\nEuropean vacation package | $6,510.00\n\nJackson has $9,489.00. Does he have enough to buy a European vacation package and a Jamaican vacation package? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# Prices of the vacation packages\neuropean_package = 6510.00\njamaican_package = 2625.00\n\n# Total cost for both packages\ntotal_cost = european_package + jamaican_package\n\n# Jackson's budget\njackson_budget = 9489.00\n\n# Check if Jackson has enough money\nif jackson_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the prices of the vacation packages\neuropean_package = 6510.00\njamaican_package = 2625.00\n\n# Calculate the total cost of both packages\ntotal_cost = european_package + jamaican_package\n\n# Define Jackson's budget\njackson_budget = 9489.00\n\n# Check if Jackson has enough money and assign the answer\nanswer = 'yes' if jackson_budget >= total_cost else 'no'\n\n# Print the answer\nprint(answer)", "# Define the prices of the vacation packages\neuropean_package = 6510.00\njamaican_package = 2625.00\n\n# Calculate the total cost of both packages\ntotal_cost = european_package + jamaican_package\n\n# Define Jackson's budget\njackson_budget = 9489.00\n\n# Determine if Jackson has enough money and store the result in 'answer'\nanswer = 'yes' if jackson_budget >= total_cost else 'no'\n\n# Output the answer\nprint(answer)", "# Define the prices of the vacation packages\neuropean_package = 6510.00\njamaican_package = 2625.00\n\n# Calculate the total cost of both packages\ntotal_cost = european_package + jamaican_package\n\n# Jackson's budget\njackson_budget = 9489.00\n\n# Determine if Jackson has enough money\nanswer = 'yes' if jackson_budget >= total_cost else 'no'\n\n# Output the answer\nprint(answer)"
], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Web pages visited\" and then answer a question.\n\nPerson | Number of Web pages\nBrendan | 265\nShawn | 259\nAdam | 256\nTess | 226", "question": "Read the following table regarding \"Web pages visited\" and then write Python code to answer a question.\n\nPerson | Number of Web pages\nBrendan | 265\nShawn | 259\nAdam | 256\nTess | 226\n\nSeveral people compared how many Web pages they had visited. Who visited the most Web pages? Choose from the the options: ['Brendan', 'Shawn', 'Adam', 'Tess']", "answer": "Brendan", "ques_type": "multi_choice", "choices": ["Brendan", "Shawn", "Adam", "Tess"], "code": ["# Python code, return answer \nweb_pages_visited = {\n    'Brendan': 265,\n    'Shawn': 259,\n    'Adam': 256,\n    'Tess': 226\n}\n# Find the person who visited the most web pages\nmost_web_pages_person = max(web_pages_visited, key=web_pages_visited.get)\nanswer = most_web_pages_person\nprint(answer)", "# Define the web pages visited by each person in a dictionary\nweb_pages_visited = {\n    'Brendan': 265,\n    'Shawn': 259,\n    'Adam': 256,\n    'Tess': 226\n}\n\n# Find the person who visited the most web pages\nmost_web_pages_person = max(web_pages_visited, key=web_pages_visited.get)\nanswer = most_web_pages_person\n\nprint(answer)", "# Store the number of web pages visited by each person in a dictionary\nweb_pages_visited = {\n    'Brendan': 265,\n    'Shawn': 259,\n    'Adam': 256,\n    'Tess': 226\n}\n\n# Find the person who visited the most web pages\nmost_web_pages_person = max(web_pages_visited, key=web_pages_visited.get)\nanswer = most_web_pages_person\n\nprint(answer)", "web_pages_visited = {\n    'Brendan': 265,\n    'Shawn': 259,\n    'Adam': 256,\n    'Tess': 226\n}\nmost_web_pages_person = max(web_pages_visited, key=web_pages_visited.get)\nanswer = most_web_pages_person\nprint(answer)"], "prediction": ["Brendan", "Brendan", "Brendan", "Brendan"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Balloons sold\" and then answer a question.\n\nDay | Number of balloons\nFriday | 36\nSaturday | 30\nSunday | 32\nMonday | 39\nTuesday | 37\nWednesday | 45\nThursday | 16", "question": "Read the following table regarding \"Balloons sold\" and then write Python code to answer a question.\n\nDay | Number of balloons\nFriday | 36\nSaturday | 30\nSunday | 32\nMonday | 39\nTuesday | 37\nWednesday | 45\nThursday | 16\n\nThe manager of a party supply store researched how many balloons it sold in the past 7 days. What is the range of the numbers?", "answer": "29", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of balloons sold each day\nballoons_sold = [36, 30, 32, 39, 37, 45, 16]\n# Calculate the range\nrange_balloons = max(balloons_sold) - min(balloons_sold)\nanswer = range_balloons\nprint(answer)", "balloons_sold = [36, 30, 32, 39, 37, 45, 16]\nrange_balloons = max(balloons_sold) - min(balloons_sold)\nanswer = range_balloons\nprint(int(answer))  # Convert to int for cleaner output", "balloons_sold = [36, 30, 32, 39, 37, 45, 16]\nrange_balloons = max(balloons_sold) - min(balloons_sold)\nanswer = int(range_balloons)  # Convert to int for cleaner output\nprint(answer)", "balloons_sold = [36, 30, 32, 39, 37, 45, 16]\nrange_balloons = max(balloons_sold) - min(balloons_sold)\nanswer = range_balloons  # No need for conversion, as it will be an integer\nprint(answer)"], "prediction": [29.0, 29.0, 29.0, 29.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nfinch | $48.44\ncockatoo | $58.86\npot-bellied pig | $26.30\nhedgehog | $61.09\nchinchilla | $39.24\nchameleon | $63.10", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nfinch | $48.44\ncockatoo | $58.86\npot-bellied pig | $26.30\nhedgehog | $61.09\nchinchilla | $39.24\nchameleon | $63.10\n\nHow much money does Rhianna need to buy a hedgehog and a finch?", "answer": "109.53", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_finch = 48.44\nprice_hedgehog = 61.09\n# Total cost to buy a hedgehog and a finch\ntotal_cost = price_finch + price_hedgehog\nanswer = total_cost\nprint(answer)", "# Define the prices of the animals  \nprice_finch = 48.44  \nprice_hedgehog = 61.09  \n\n# Calculate the total cost  \ntotal_cost = price_finch + price_hedgehog  \n\n# Store the result in the answer variable  \nanswer = total_cost  \n\n# Print the answer  \nprint(answer)", "# Define the prices of the animals in a dictionary\nanimal_prices = {\n    'finch': 48.44,\n    'hedgehog': 61.09\n}\n\n# Calculate the total cost for a hedgehog and a finch\ntotal_cost = animal_prices['finch'] + animal_prices['hedgehog']\nanswer = total_cost\n\nprint(answer)", "# Define the animal prices in a dictionary\nanimal_prices = {\n    'finch': 48.44,\n    'hedgehog': 61.09\n}\n\n# Calculate the total cost for a hedgehog and a finch\ntotal_cost = animal_prices['finch'] + animal_prices['hedgehog']\nanswer = total_cost\n\nprint(answer)"], "prediction": [109.53, 109.53, 109.53, 109.53], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Fish per tank\" and then answer a question.\n\nStem | Leaf \n3 | 1, 4, 7\n4 | 5, 5, 5, 9\n5 | 5\n6 | 1", "question": "Read the following table regarding \"Fish per tank\" and then write Python code to answer a question.\n\nStem | Leaf \n3 | 1, 4, 7\n4 | 5, 5, 5, 9\n5 | 5\n6 | 1\n\nA pet store owner had his staff count the number of fish in each tank. How many tanks have fewer than 60 fish?", "answer": "8", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Extracting the number of fish from the stem-and-leaf display\nfish_counts = [31, 34, 37, 45, 45, 45, 49, 55, 61]  # Composing the counts based on the stem-leaf representation\n# Count how many tanks have fewer than 60 fish\ntanks_fewer_than_60 = sum(1 for count in fish_counts if count < 60)\nanswer = tanks_fewer_than_60\nprint(answer)", "# Define the fish counts based on the stem-leaf representation\nfish_counts = [31, 34, 37, 45, 45, 45, 49, 55, 61]  \n\n# Count the number of tanks with fewer than 60 fish\ntanks_fewer_than_60 = sum(1 for count in fish_counts if count < 60)\n\n# Store the result as an integer\nanswer = int(tanks_fewer_than_60)\nprint(answer)", "# Define the stem and leaf data structure based on the provided table\nstem_and_leaf = [(3, [1, 4, 7]), (4, [5, 5, 5, 9]), (5, [5]), (6, [1])]\n\n# Initialize a counter for tanks with fewer than 60 fish\ntanks_fewer_than_60 = 0\n\n# Iterate through the stem and leaf data structure and count relevant tanks\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        fish_count = stem * 10 + leaf  # Calculate the actual fish count\n        if fish_count < 60:  # Check if the count is fewer than 60\n            tanks_fewer_than_60 += 1\n\nanswer = tanks_fewer_than_60\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(3, [1, 4, 7]), (4, [5, 5, 5, 9]), (5, [5]), (6, [1])]  \n  \n# Initialize counter for tanks with fewer than 60 fish  \ntanks_fewer_than_60 = 0  \n  \n# Iterate through the stem and leaf data structure and count relevant tanks  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        fish_count = stem * 10 + leaf  # Calculate the actual fish count  \n        if fish_count < 60:  # Check if the count is fewer than 60  \n            tanks_fewer_than_60 += 1  \n  \nanswer = tanks_fewer_than_60  \nprint(answer)"
], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Tires made\" and then answer a question.\n\nMonth | Number of tires\nNovember | 3,607\nDecember | 5,898\nJanuary | 8,814\nFebruary | 1,472", "question": "Read the following table regarding \"Tires made\" and then write Python code to answer a question.\n\nMonth | Number of tires\nNovember | 3,607\nDecember | 5,898\nJanuary | 8,814\nFebruary | 1,472\n\nA tire factory manager monitored the number of tires made each month. How many more tires did the factory make in January than in February?", "answer": "7,342", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ntires_january = 8814\ntires_february = 1472\n# Calculate the difference in tires made between January and February\ndifference = tires_january - tires_february\nanswer = difference\nprint(answer)", "tires_january = 8814\ntires_february = 1472\ndifference = tires_january - tires_february\nanswer = difference  # This will be an integer\nprint(answer)", "# Define the number of tires made in January and February\ntires_january = 8814\ntires_february = 1472\n\n# Calculate the difference\ndifference = tires_january - tires_february\n\n# Store the result as an integer\nanswer = int(difference)  # Explicitly convert to integer if needed\nprint(answer)", "# Define the number of tires made in January and February\ntires_january = 8814\ntires_february = 1472\n\n# Calculate the difference\ndifference = tires_january - tires_february\n\n# Store the result as an integer\nanswer = difference  # Since the result is already an integer, no need for explicit conversion\n\nprint(answer)"], "prediction": [7342.0, 7342.0, 7342.0, 7342.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Broken tiles per shipment\" and then answer a question.\n\nStem | Leaf \n4 | 0, 3, 5, 8\n5 | 1, 6, 7, 8, 9\n6 | 3, 6, 6, 8, 9, 9\n7 | 1, 4", "question": "Read the following table regarding \"Broken tiles per shipment\" and then write Python code to answer a question.\n\nStem | Leaf \n4 | 0, 3, 5, 8\n5 | 1, 6, 7, 8, 9\n6 | 3, 6, 6, 8, 9, 9\n7 | 1, 4\n\nSeaside Flooring tracked the number of broken tiles in each shipment it received last year. What is the smallest number of broken tiles?", "answer": "40", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The smallest number of broken tiles corresponds to the smallest value in the stem-and-leaf display.\nsmallest_broken_tiles = 40  # From the stem \"4 | 0\", the value is 40 tiles.\nanswer = smallest_broken_tiles\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(4, [0, 3, 5, 8]), (5, [1, 6, 7, 8, 9]), (6, [3, 6, 6, 8, 9, 9]), (7, [1, 4])]\n\n# Initialize a variable to hold the smallest number of broken tiles\nsmallest_broken_tiles = float('inf')\n\n# Iterate through the stem and leaf data structure to find the smallest value\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        broken_tiles = stem * 10 + leaf\n        if broken_tiles < smallest_broken_tiles:\n            smallest_broken_tiles = broken_tiles\n\nanswer = smallest_broken_tiles\nprint(answer)", "stem_and_leaf = [(4, [0, 3, 5, 8]), (5, [1, 6, 7, 8, 9]), (6, [3, 6, 6, 8, 9, 9]), (7, [1, 4])]\nsmallest_broken_tiles = float('inf')\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        broken_tiles = stem * 10 + leaf\n        if broken_tiles < smallest_broken_tiles:\n            smallest_broken_tiles = broken_tiles\nanswer = int(smallest_broken_tiles)  # Convert to integer\nprint(answer)", "stem_and_leaf = [(4, [0, 3, 5, 8]), (5, [1, 6, 7, 8, 9]), (6, [3, 6, 6, 8, 9, 9]), (7, [1, 4])]\nsmallest_broken_tiles = float('inf')\n\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        broken_tiles = stem * 10 + leaf\n        if broken_tiles < smallest_broken_tiles:\n            smallest_broken_tiles = broken_tiles\n\nanswer = int(smallest_broken_tiles)  # Convert to integer\nprint(answer)"
], "prediction": [40.0, 40.0, 40.0, 40.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Train schedule\" and then answer a question.\n\nCedarburg | 7:45 A.M. | 8:30 A.M. | 9:30 A.M. | 10:30 A.M.\nStafford | 9:30 A.M. | 10:15 A.M. | 11:15 A.M. | 12:15 P.M.\nNorwood | 10:00 A.M. | 10:45 A.M. | 11:45 A.M. | 12:45 P.M.\nDanville | 11:00 A.M. | 11:45 A.M. | 12:45 P.M. | 1:45 P.M.\nHillsboro | 11:45 A.M. | 12:30 P.M. | 1:30 P.M. | 2:30 P.M.\nLanberry | 12:30 P.M. | 1:15 P.M. | 2:15 P.M. | 3:15 P.M.\nCenterville | 2:15 P.M. | 3:00 P.M. | 4:00 P.M. | 5:00 P.M.", "question": "Read the following table regarding \"Train schedule\" and then write Python code to answer a question.\n\nCedarburg | 7:45 A.M. | 8:30 A.M. | 9:30 A.M. | 10:30 A.M.\nStafford | 9:30 A.M. | 10:15 A.M. | 11:15 A.M. | 12:15 P.M.\nNorwood | 10:00 A.M. | 10:45 A.M. | 11:45 A.M. | 12:45 P.M.\nDanville | 11:00 A.M. | 11:45 A.M. | 12:45 P.M. | 1:45 P.M.\nHillsboro | 11:45 A.M. | 12:30 P.M. | 1:30 P.M. | 2:30 P.M.\nLanberry | 12:30 P.M. | 1:15 P.M. | 2:15 P.M. | 3:15 P.M.\nCenterville | 2:15 P.M. | 3:00 P.M. | 4:00 P.M. | 5:00 P.M.\n\nLook at the following schedule. Malia is at Hillsboro at 2.15 P.M. How soon can she get to Lanberry? Choose from the the options: ['10:30 A.M.', '1:15 P.M.', '3:15 P.M.', '12:15 P.M.']", "answer": "3:15 P.M.", "ques_type": "multi_choice", "choices": ["10:30 A.M.", "1:15 P.M.", "3:15 P.M.", "12:15 P.M."], "code": [
  "# Python code, return answer \n# Malia is at Hillsboro at 2:15 P.M. and wants to go to Lanberry. \n# Looking at the train schedule, she needs to find the next available train from Hillsboro to Lanberry.\n\n# Hillsboro schedule after 2:15 P.M.\nhillsboro_trains = ['11:45 A.M.', '12:30 P.M.', '1:30 P.M.', '2:30 P.M.']\n# Next train available from Hillsboro after 2:15 P.M.\nnext_hillsboro_train = '2:30 P.M.'\n\n# Schedule for Lanberry\nlanberry_trains = ['12:30 P.M.', '1:15 P.M.', '2:15 P.M.', '3:15 P.M.']\n\n# The next available train from Hillsboro arrives in Lanberry at 3:15 P.M.\nanswer = '3:15 P.M.'\nprint(answer)", "# Define the train schedules\nhillsboro_trains = ['11:45 A.M.', '12:30 P.M.', '1:30 P.M.', '2:30 P.M.']\nlanberry_trains = ['12:30 P.M.', '1:15 P.M.', '2:15 P.M.', '3:15 P.M.']\n\n# Malia arrives at Hillsboro at 2:15 P.M.\narrival_time = '2:15 P.M.'\n\n# Find the next train from Hillsboro after 2:15 P.M.\nnext_hillsboro_train = None\nfor train in hillsboro_trains:\n    if train > arrival_time:\n        next_hillsboro_train = train\n        break\n\n# Find the soonest train from Lanberry after the next Hillsboro train\nanswer = None\nif next_hillsboro_train:\n    for train in lanberry_trains:\n        if train > next_hillsboro_train:\n            answer = train\n            break\n\n# If no train is found, it means she can take the last one\nif answer is None:\n    answer = lanberry_trains[-1]\n\nprint(answer)", "# Define the train schedules for Hillsboro and Lanberry\nhillsboro_trains = ['11:45 A.M.', '12:30 P.M.', '1:30 P.M.', '2:30 P.M.']\nlanberry_trains = ['12:30 P.M.', '1:15 P.M.', '2:15 P.M.', '3:15 P.M.']\n\n# Malia's arrival time at Hillsboro\narrival_time = '2:15 P.M.'\n\n# Find the next train from Hillsboro after Malia's arrival\nnext_hillsboro_train = None\nfor train in hillsboro_trains:\n    if train > arrival_time:\n        next_hillsboro_train = train\n        break\n\n# Find the soonest Lanberry train after the next Hillsboro train\nanswer = None\nif next_hillsboro_train:\n    for train in lanberry_trains:\n        if train > next_hillsboro_train:\n            answer = train\n            break\n\n# If no answer found, set to the last Lanberry train (in case all trains are missed)\nif answer is None and lanberry_trains:\n    answer = lanberry_trains[-1]\n\nprint(answer)", "# Define the train schedules\nhillsboro_trains = ['11:45 A.M.', '12:30 P.M.', '1:30 P.M.', '2:30 P.M.']\nlanberry_trains = ['12:30 P.M.', '1:15 P.M.', '2:15 P.M.', '3:15 P.M.']\narrival_time = '2:15 P.M.'\n\n# Find the next train from Hillsboro after Malia's arrival\nnext_hillsboro_train = None\nfor train in hillsboro_trains:\n    if train > arrival_time:\n        next_hillsboro_train = train\n        break\n\n# Find the soonest train from Lanberry after the next Hillsboro train\nanswer = None\nif next_hillsboro_train:\n    for train in lanberry_trains:\n        if train > next_hillsboro_train:\n            answer = train\n            break\n\n# If no train is found, check if she can take the last available train from Lanberry\nif answer is None and lanberry_trains:\n    answer = lanberry_trains[-1]\n\nprint(answer)"
], "prediction": ["3:15 P.M.", "3:15 P.M.", "3:15 P.M.", "3:15 P.M."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Bird sightings in parks\" and then answer a question.\n\nPark | Vultures | Falcons\nNorthside Park | 2 | 3\nSkyline Park | 6 | 17\nMountain Park | 10 | 19", "question": "Read the following table regarding \"Bird sightings in parks\" and then write Python code to answer a question.\n\nPark | Vultures | Falcons\nNorthside Park | 2 | 3\nSkyline Park | 6 | 17\nMountain Park | 10 | 19\n\nTori, a birdwatcher, counted the number of each species of bird at the local county parks. How many more birds were spotted in Mountain Park than in Skyline Park?", "answer": "6", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Number of birds spotted in each park\nmountain_park_vultures = 10\nmountain_park_falcons = 19\nskyline_park_vultures = 6\nskyline_park_falcons = 17\n\n# Total birds in each park\ntotal_mountain_park = mountain_park_vultures + mountain_park_falcons\ntotal_skyline_park = skyline_park_vultures + skyline_park_falcons\n\n# Calculate the difference in the number of birds\ndifference = total_mountain_park - total_skyline_park\nanswer = difference\nprint(answer)", "mountain_park_vultures = 10\nmountain_park_falcons = 19\nskyline_park_vultures = 6\nskyline_park_falcons = 17\n\n# Calculate total birds in each park\ntotal_mountain_park = mountain_park_vultures + mountain_park_falcons\ntotal_skyline_park = skyline_park_vultures + skyline_park_falcons\n\n# Calculate the difference in the number of birds\ndifference_in_birds = total_mountain_park - total_skyline_park\nanswer = int(difference_in_birds)  # Ensure the answer is an integer\nprint(answer)", "mountain_park_vultures = 10\nmountain_park_falcons = 19\nskyline_park_vultures = 6\nskyline_park_falcons = 17\n\ntotal_mountain_park = mountain_park_vultures + mountain_park_falcons\ntotal_skyline_park = skyline_park_vultures + skyline_park_falcons\n\ndifference_in_birds = total_mountain_park - total_skyline_park\nanswer = difference_in_birds  # No need to convert to int, it's already an integer\nprint(answer)", "mountain_park_vultures = 10\nmountain_park_falcons = 19\nskyline_park_vultures = 6\nskyline_park_falcons = 17\n\ntotal_mountain_park = mountain_park_vultures + mountain_park_falcons\ntotal_skyline_park = skyline_park_vultures + skyline_park_falcons\ndifference_in_birds = total_mountain_park - total_skyline_park\n\nanswer = int(difference_in_birds)  # Explicitly convert to integer\nprint(answer)"
], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Broken tiles per shipment\" and then answer a question.\n\nStem | Leaf \n2 | 3\n3 | 4\n4 | \n5 | 8\n6 | \n7 | 9\n8 | 3, 5\n9 | 0", "question": "Read the following table regarding \"Broken tiles per shipment\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 3\n3 | 4\n4 | \n5 | 8\n6 | \n7 | 9\n8 | 3, 5\n9 | 0\n\nDover Flooring tracked the number of broken tiles in each shipment it received last year. What is the largest number of broken tiles?", "answer": "90", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number of broken tiles corresponds to the largest value in the stem-and-leaf display.\nlargest_broken_tiles = 90  # From the stem \"9 | 0\", the value is 90 broken tiles.\nanswer = largest_broken_tiles\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(2, [3]), (3, [4]), (4, []), (5, [8]), (6, []), (7, [9]), (8, [3, 5]), (9, [0])]\n\n# Initialize variable to track the largest number of broken tiles\nlargest_broken_tiles = 0\n\n# Iterate through the stem and leaf data structure and find the maximum number of broken tiles\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        broken_tiles = stem * 10 + leaf\n        if broken_tiles > largest_broken_tiles:\n            largest_broken_tiles = broken_tiles\n\n# Also check the stems with no leaves to ensure we consider all possible values\nfor stem in range(2, 10):\n    if stem == 4 or stem == 6:  # These have no leaves\n        continue\n    elif stem == 5:\n        broken_tiles = stem * 10 + 8  # 58\n        if broken_tiles > largest_broken_tiles:\n            largest_broken_tiles = broken_tiles\n    elif stem == 7:\n        broken_tiles = stem * 10 + 9  # 79\n        if broken_tiles > largest_broken_tiles:\n            largest_broken_tiles = broken_tiles\n    elif stem == 8:\n        for leaf in [3, 5]:  # 83, 85\n            broken_tiles = stem * 10 + leaf\n            if broken_tiles > largest_broken_tiles:\n                largest_broken_tiles = broken_tiles\n\nanswer = largest_broken_tiles\nprint(answer)", "# Define the stem and leaf data structure  \nstem_and_leaf = [(2, [3]), (3, [4]), (4, []), (5, [8]), (6, []), (7, [9]), (8, [3, 5]), (9, [0])]  \n\n# Initialize variable to track the largest number of broken tiles  \nlargest_broken_tiles = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number of broken tiles  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        broken_tiles = stem * 10 + leaf  \n        if broken_tiles > largest_broken_tiles:  \n            largest_broken_tiles = broken_tiles  \n\n# Store the result in the answer variable  \nanswer = largest_broken_tiles  \n\n# Print the answer  \nprint(answer)", "stem_and_leaf = [(2, [3]), (3, [4]), (4, []), (5, [8]), (6, []), (7, [9]), (8, [3, 5]), (9, [0])]  \nlargest_broken_tiles = 0  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        broken_tiles = stem * 10 + leaf  \n        if broken_tiles > largest_broken_tiles:  \n            largest_broken_tiles = broken_tiles  \nanswer = largest_broken_tiles  # This will remain an integer\nprint(answer)"
], "prediction": [90.0, 90.0, 90.0, 90.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Actors per movie\" and then answer a question.\n\nStem | Leaf \n1 | 2, 3, 5, 7, 8\n2 | 1, 2, 8\n3 | 2, 6\n4 | 7\n5 | 0\n6 | 7\n7 | 3\n8 | 4, 4, 7, 8\n9 | 0", "question": "Read the following table regarding \"Actors per movie\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 2, 3, 5, 7, 8\n2 | 1, 2, 8\n3 | 2, 6\n4 | 7\n5 | 0\n6 | 7\n7 | 3\n8 | 4, 4, 7, 8\n9 | 0\n\nThe movie critic liked to count the number of actors in each movie she saw. What is the largest number of actors?", "answer": "90", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number of actors corresponds to the largest value in the stem-and-leaf display.\nlargest_number_of_actors = 90  # From the stem \"9 | 0\", the value is 90 actors.\nanswer = largest_number_of_actors\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [2, 3, 5, 7, 8]), (2, [1, 2, 8]), (3, [2, 6]), (4, [7]), (5, [0]), (6, [7]), (7, [3]), (8, [4, 4, 7, 8]), (9, [0])]  \n  \n# Initialize variable to track the largest number of actors  \nlargest_number_of_actors = 0  \n  \n# Iterate through the stem and leaf data structure to find the largest number of actors  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        number_of_actors = stem * 10 + leaf  \n        if number_of_actors > largest_number_of_actors:  \n            largest_number_of_actors = number_of_actors  \n  \nanswer = largest_number_of_actors  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [2, 3, 5, 7, 8]), (2, [1, 2, 8]), (3, [2, 6]), (4, [7]), (5, [0]), (6, [7]), (7, [3]), (8, [4, 4, 7, 8]), (9, [0])]  \n\n# Initialize variable to store the largest number of actors  \nlargest_number_of_actors = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number of actors  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        number_of_actors = stem * 10 + leaf  # Calculate the number of actors  \n        if number_of_actors > largest_number_of_actors:  \n            largest_number_of_actors = number_of_actors  # Update if current is larger  \n\nanswer = largest_number_of_actors  \nprint(answer)", "# Define the stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [2, 3, 5, 7, 8]), (2, [1, 2, 8]), (3, [2, 6]), (4, [7]), (5, [0]), (6, [7]), (7, [3]), (8, [4, 4, 7, 8]), (9, [0])]  \n\n# Initialize variable to store the largest number of actors  \nlargest_number_of_actors = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number of actors  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        number_of_actors = stem * 10 + leaf  # Calculate the number of actors  \n        if number_of_actors > largest_number_of_actors:  \n            largest_number_of_actors = number_of_actors  # Update if current is larger  \n\nanswer = largest_number_of_actors  \nprint(answer)  # Output the answer"
], "prediction": [90.0, 90.0, 90.0, 90.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Donations received\" and then answer a question.\n\nCause | April | May\nParks | $7 | $4\nAnimals | $15 | $17\nEducation | $18 | $18", "question": "Read the following table regarding \"Donations received\" and then write Python code to answer a question.\n\nCause | April | May\nParks | $7 | $4\nAnimals | $15 | $17\nEducation | $18 | $18\n\nA county agency recorded the money donated to several charitable causes over time. How much money was raised for parks in April?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ndonations_parks_april = 7  # From the table, the amount raised for parks in April\nanswer = donations_parks_april\nprint(answer)", "# Define the donation amount for parks in April as an integer\ndonations_parks_april = 7  # The amount raised for parks in April\nanswer = donations_parks_april\nprint(answer)", "# Define the amount raised for parks in April\ndonations_parks_april = 7.00  # The amount raised for parks in April\n\n# Format the output as a monetary value\nanswer = f\"${donations_parks_april:.2f}\"\nprint(answer)", "# Amount raised for parks in April\ndonations_parks_april = 7.00  \nanswer = donations_parks_april  # Store as a numeric variable\nprint(answer)"], "prediction": [7.0, 7.0, "$7.00", 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ndark chocolate chips | $5 per lb\nbutterscotch chips | $3 per lb\nwhite chocolate chips | $7 per lb\nmilk chocolate chips | $6 per lb", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ndark chocolate chips | $5 per lb\nbutterscotch chips | $3 per lb\nwhite chocolate chips | $7 per lb\nmilk chocolate chips | $6 per lb\n\nMark buys 0.6 pounds of milk chocolate chips. What is the total cost?", "answer": "3.60", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_milk_chocolate = 6 \npounds_bought = 0.6 \n# Calculate the total cost\ntotal_cost = price_per_pound_milk_chocolate * pounds_bought\nanswer = total_cost\nprint(answer)", "# Define the price per pound for milk chocolate chips  \nprice_per_pound_milk_chocolate = 6  \n\n# Define the number of pounds bought  \npounds_bought = 0.6  \n\n# Calculate the total cost  \ntotal_cost = price_per_pound_milk_chocolate * pounds_bought  \n\n# Store the result in the variable 'answer'  \nanswer = total_cost  \n\n# Print the answer  \nprint(answer)", "# Define the price per pound for milk chocolate chips  \nprice_per_pound_milk_chocolate = 6  \n\n# Define the number of pounds bought  \npounds_bought = 0.6  \n\n# Calculate the total cost  \ntotal_cost = price_per_pound_milk_chocolate * pounds_bought  \n\n# Store the result in the answer variable  \nanswer = total_cost  \n\n# Output the answer  \nprint(answer)", "price_per_pound_milk_chocolate = 6  \npounds_bought = 0.6  \ntotal_cost = price_per_pound_milk_chocolate * pounds_bought  \nanswer = f\"${total_cost:.2f}\"  # Format the output as a monetary value\nprint(answer)"], "prediction": [3.6, 3.6, 3.6, "$3.60"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbat signed by a famous baseball player | $9,504.00\nbook signed by a famous author | $9,035.00\nshirt signed by a famous soccer player | $1,785.00\nphotograph signed by a famous movie star | $4,463.00\njersey signed by a famous hockey player | $2,448.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbat signed by a famous baseball player | $9,504.00\nbook signed by a famous author | $9,035.00\nshirt signed by a famous soccer player | $1,785.00\nphotograph signed by a famous movie star | $4,463.00\njersey signed by a famous hockey player | $2,448.00\n\nHow much money does Dave need to buy a shirt signed by a famous soccer player, a photograph signed by a famous movie star, and a jersey signed by a famous hockey player?", "answer": "8,696", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nprice_shirt = 1785.00\nprice_photograph = 4463.00\nprice_jersey = 2448.00\n\n# Total cost for Dave\ntotal_cost = price_shirt + price_photograph + price_jersey\nanswer = total_cost\nprint(answer)", "price_shirt = 1785.00\nprice_photograph = 4463.00\nprice_jersey = 2448.00\ntotal_cost = price_shirt + price_photograph + price_jersey\nanswer = \"${:,.2f}\".format(total_cost)  # Format as currency\nprint(answer)", "# Define the prices of the items\nprice_shirt = 1785.00\nprice_photograph = 4463.00\nprice_jersey = 2448.00\n\n# Calculate the total cost\ntotal_cost = price_shirt + price_photograph + price_jersey\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "price_shirt = 1785.00\nprice_photograph = 4463.00\nprice_jersey = 2448.00\ntotal_cost = price_shirt + price_photograph + price_jersey\nanswer = \"${:,.2f}\".format(total_cost)  # Format as currency\nprint(answer)"], "prediction": [8696.0, "$8,696.00", 8696.0, "$8,696.00"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ncoarse gravel | $1.62/kg\npebbles | $2.26/kg\nwhite sand | $2.14/kg\nrocks | $1.28/kg\nfine gravel | $1.57/kg", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ncoarse gravel | $1.62/kg\npebbles | $2.26/kg\nwhite sand | $2.14/kg\nrocks | $1.28/kg\nfine gravel | $1.57/kg\n\nTucker bought 1 kilogram of coarse gravel and 3 kilograms of white sand. How much did he spend?", "answer": "8.04", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices per kilogram\nprice_coarse_gravel = 1.62 \nprice_white_sand = 2.14 \n# Amounts bought\nkilograms_coarse_gravel = 1 \nkilograms_white_sand = 3 \n# Calculate total cost\ntotal_cost = (price_coarse_gravel * kilograms_coarse_gravel) + (price_white_sand * kilograms_white_sand)\nanswer = total_cost\nprint(answer)", "# Define the prices per kilogram\nprice_coarse_gravel = 1.62 \nprice_white_sand = 2.14 \n\n# Define the quantities bought\nkilograms_coarse_gravel = 1 \nkilograms_white_sand = 3 \n\n# Calculate the total cost\ntotal_cost = (price_coarse_gravel * kilograms_coarse_gravel) + (price_white_sand * kilograms_white_sand)\nanswer = total_cost\n\nprint(answer)", "# Prices per kilogram\nprice_coarse_gravel = 1.62 \nprice_white_sand = 2.14 \n\n# Amount purchased\nkilograms_coarse_gravel = 1 \nkilograms_white_sand = 3 \n\n# Total cost calculation\ntotal_cost = (price_coarse_gravel * kilograms_coarse_gravel) + (price_white_sand * kilograms_white_sand)\nanswer = total_cost\nprint(answer)", "# Prices per kilogram\nprice_coarse_gravel = 1.62 \nprice_white_sand = 2.14 \n\n# Amounts in kilograms\nkilograms_coarse_gravel = 1 \nkilograms_white_sand = 3 \n\n# Calculate total cost\ntotal_cost = (price_coarse_gravel * kilograms_coarse_gravel) + (price_white_sand * kilograms_white_sand)\nanswer = total_cost\n\nprint(answer)  # This should output the correct total cost"
], "prediction": [8.04, 8.04, 8.04, 8.04], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Sit-up competition (number of sit-ups)\" and then answer a question.\n\nStem | Leaf \n2 | 1\n3 | 1, 1, 8\n4 | 2\n5 | 5, 6, 6, 8, 9\n6 | 2, 4, 7\n7 | 0, 0, 0, 4, 5, 7, 9\n8 | 1, 4, 7", "question": "Read the following table regarding \"Sit-up competition (number of sit-ups)\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 1\n3 | 1, 1, 8\n4 | 2\n5 | 5, 6, 6, 8, 9\n6 | 2, 4, 7\n7 | 0, 0, 0, 4, 5, 7, 9\n8 | 1, 4, 7\n\nMiss Lawrence ran a sit-up competition among her P.E. students and monitored how many sit-ups each students could do. How many people did at least 30 sit-ups but fewer than 90 sit-ups?", "answer": "22", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Extracting the number of sit-ups from the stem-and-leaf display\nsit_ups = [\n    21,  # from stem 2\n    31, 31, 38,  # from stem 3\n    42,  # from stem 4\n    55, 56, 56, 58, 59,  # from stem 5\n    62, 64, 67,  # from stem 6\n    70, 70, 70, 74, 75, 77, 79,  # from stem 7\n    81, 84, 87  # from stem 8\n]\n\n# Counting how many students did at least 30 sit-ups but fewer than 90 sit-ups\ncount = sum(1 for sit_up in sit_ups if 30 <= sit_up < 90)\nanswer = count\nprint(answer)", "```python\nsit_ups = [\n    21,  # from stem 2\n    31, 31, 38,  # from stem 3\n    42,  # from stem 4\n    55, 56, 56, 58, 59,  # from stem 5\n    62, 64, 67,  # from stem 6\n    70, 70, 70, 74, 75, 77, 79,  # from stem 7\n    81, 84, 87  # from stem 8\n]\ncount =", "sit_ups = [\n    21,  # from stem 2\n    31, 31, 38,  # from stem 3\n    42,  # from stem 4\n    55, 56, 56, 58, 59,  # from stem 5\n    62, 64, 67,  # from stem 6\n    70, 70, 70, 74, 75, 77, 79,  # from stem 7\n    81, 84, 87  # from stem 8\n]\ncount = len([sit_up for sit_up in sit_ups if 30 <= sit_up < 90])\nanswer = count\nprint(answer)", "sit_ups = [\n    21,  # from stem 2\n    31, 31, 38,  # from stem 3\n    42,  # from stem 4\n    55, 56, 56, 58, 59,  # from stem 5\n    62, 64, 67,  # from stem 6\n    70, 70, 70, 74, 75, 77, 79,  # from stem 7\n    81, 84, 87  # from stem 8\n]\ncount = len([sit_up for sit_up in sit_ups if 30 <= sit_up < 90])\nanswer = count  # This will be an integer\nprint(answer)"
], "prediction": [22.0, null, 22.0, 22.0], "report": ["Done", "SyntaxError('invalid syntax', ('<string>', 1, 1, '```python\\n', 1, 2))", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Basketball team mascot shooting contest\" and then answer a question.\n\nMascot | Baskets | Misses\nRhianna Rhino | 16 | 18\nTina Tiger | 13 | 11\nAnnie Armadillo | 5 | 7\nBarry Bulldog | 1 | 19", "question": "Read the following table regarding \"Basketball team mascot shooting contest\" and then write Python code to answer a question.\n\nMascot | Baskets | Misses\nRhianna Rhino | 16 | 18\nTina Tiger | 13 | 11\nAnnie Armadillo | 5 | 7\nBarry Bulldog | 1 | 19\n\nAt a charity basketball shootout, excited fans counted the baskets and misses made by each of the team mascots. How many more baskets did Annie Armadillo have than Barry Bulldog?", "answer": "4", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Baskets made by each mascot\nbaskets_annie = 5\nbaskets_barry = 1\n# Calculate the difference in baskets\ndifference = baskets_annie - baskets_barry\nanswer = difference\nprint(answer)", "baskets_annie = 5\nbaskets_barry = 1\ndifference = baskets_annie - baskets_barry\nanswer = difference  # This will be an integer\nprint(answer)", "baskets_annie = 5\nbaskets_barry = 1\ndifference = baskets_annie - baskets_barry\nanswer = difference  # This will be an integer\nprint(answer)", "baskets_annie = 5\nbaskets_barry = 1\ndifference = baskets_annie - baskets_barry\nanswer = difference  # This will be an integer\nprint(answer)"], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Trees planted\" and then answer a question.\n\nOrganization | Number of trees planted\nMake it Green | 565\nDreaming Green | 552\nAcorns to Oaks | 526\nNew Planet | 562", "question": "Read the following table regarding \"Trees planted\" and then write Python code to answer a question.\n\nOrganization | Number of trees planted\nMake it Green | 565\nDreaming Green | 552\nAcorns to Oaks | 526\nNew Planet | 562\n\nAn environmental agency examined how many trees were planted by different organizations. Which organization planted the fewest trees? Choose from the the options: ['Make it Green', 'Dreaming Green', 'Acorns to Oaks', 'New Planet']", "answer": "Acorns to Oaks", "ques_type": "multi_choice", "choices": ["Make it Green", "Dreaming Green", "Acorns to Oaks", "New Planet"], "code": [
  "# Python code, return answer \ntrees_planted = {\n    'Make it Green': 565,\n    'Dreaming Green': 552,\n    'Acorns to Oaks': 526,\n    'New Planet': 562\n}\n# Find the organization that planted the fewest trees\nfewest_trees_organization = min(trees_planted, key=trees_planted.get)\nanswer = fewest_trees_organization\nprint(answer)", "# Store the organizations and their corresponding number of trees planted in a dictionary  \ntrees_planted = {\n    'Make it Green': 565,\n    'Dreaming Green': 552,\n    'Acorns to Oaks': 526,\n    'New Planet': 562\n}\n\n# Find the organization that planted the fewest trees  \nfewest_trees_organization = min(trees_planted, key=trees_planted.get)\n\n# Store the result in the answer variable  \nanswer = fewest_trees_organization  \n\n# Output the answer  \nprint(answer)", "# Store the organizations and their corresponding number of trees planted in a dictionary  \ntrees_planted = {\n    'Make it Green': 565,\n    'Dreaming Green': 552,\n    'Acorns to Oaks': 526,\n    'New Planet': 562\n}\n\n# Find the organization that planted the fewest trees  \nfewest_trees_organization = min(trees_planted, key=trees_planted.get)\n\n# Store the result in the variable 'answer'\nanswer = fewest_trees_organization\n\n# Output the answer\nprint(answer)", "trees_planted = {\n    'Make it Green': 565,\n    'Dreaming Green': 552,\n    'Acorns to Oaks': 526,\n    'New Planet': 562\n}\nfewest_trees_organization = min(trees_planted, key=trees_planted.get)\nanswer = fewest_trees_organization\nprint(answer)"
], "prediction": ["Acorns to Oaks", "Acorns to Oaks", "Acorns to Oaks", "Acorns to Oaks"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Passengers per train\" and then answer a question.\n\nStem | Leaf \n1 | 1\n2 | 4\n3 | 1, 5, 6, 6\n4 | 0, 1, 7\n5 | 4, 7, 8, 8, 9", "question": "Read the following table regarding \"Passengers per train\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 1\n2 | 4\n3 | 1, 5, 6, 6\n4 | 0, 1, 7\n5 | 4, 7, 8, 8, 9\n\nThe train conductor made sure to count the number of passengers on each train. How many trains had exactly 41 passengers?", "answer": "1", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# From the stem-and-leaf display, we can see the number of passengers for each train.\n# The train with exactly 41 passengers corresponds to the stem \"4\" and the leaf \"1\".\n# Thus, there is 1 train with exactly 41 passengers.\n\nnumber_of_trains_with_41_passengers = 1\nanswer = number_of_trains_with_41_passengers\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [1]), (2, [4]), (3, [1, 5, 6, 6]), (4, [0, 1, 7]), (5, [4, 7, 8, 8, 9])]  \n  \n# Initialize counter for trains with exactly 41 passengers  \ntrains_with_41_passengers = 0  \n  \n# Iterate through the stem and leaf data structure and count relevant trains  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        passengers_per_train = stem * 10 + leaf  \n        if passengers_per_train == 41:  \n            trains_with_41_passengers += 1  \n  \nanswer = trains_with_41_passengers  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [1]), (2, [4]), (3, [1, 5, 6, 6]), (4, [0, 1, 7]), (5, [4, 7, 8, 8, 9])]  \n\n# Initialize counter for trains with exactly 41 passengers  \ntrains_with_41_passengers = 0  \n\n# Iterate through the stem and leaf data structure and count relevant trains  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        passengers_per_train = stem * 10 + leaf  \n        if passengers_per_train == 41:  \n            trains_with_41_passengers += 1  \n\n# Store the result in the answer variable  \nanswer = trains_with_41_passengers  \nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [(1, [1]), (2, [4]), (3, [1, 5, 6, 6]), (4, [0, 1, 7]), (5, [4, 7, 8, 8, 9])]\n\n# Initialize counter for trains with exactly 41 passengers\ntrains_with_41_passengers = 0\n\n# Iterate through the stem and leaf data structure and count relevant trains\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        passengers_per_train = stem * 10 + leaf\n        if passengers_per_train == 41:\n            trains_with_41_passengers += 1\n\n# Store the result in the answer variable\nanswer = trains_with_41_passengers\nprint(answer)"
], "prediction": [1.0, 1.0, 1.0, 1.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Winter Olympics schedule\" and then answer a question.\n\nEvent | Begin | End\ncross-country skiing | 10:55 A.M. | 12:10 P.M.\nfigure skating | 11:10 A.M. | 12:35 P.M.\nbobsled | 12:10 P.M. | 1:10 P.M.\nice hockey | 12:25 P.M. | 3:50 P.M.\nluge | 3:10 P.M. | 7:25 P.M.\nsnowboarding | 6:30 P.M. | 9:55 P.M.", "question": "Read the following table regarding \"Winter Olympics schedule\" and then write Python code to answer a question.\n\nEvent | Begin | End\ncross-country skiing | 10:55 A.M. | 12:10 P.M.\nfigure skating | 11:10 A.M. | 12:35 P.M.\nbobsled | 12:10 P.M. | 1:10 P.M.\nice hockey | 12:25 P.M. | 3:50 P.M.\nluge | 3:10 P.M. | 7:25 P.M.\nsnowboarding | 6:30 P.M. | 9:55 P.M.\n\nLook at the following schedule. When does the bobsled event end? Choose from the the options: ['12:10 P.M.', '1:10 P.M.', '9:55 P.M.', '3:50 P.M.']", "answer": "1:10 P.M.", "ques_type": "multi_choice", "choices": ["12:10 P.M.", "1:10 P.M.", "9:55 P.M.", "3:50 P.M."], "code": [
  "# Python code, return answer \nbobsled_end_time = '1:10 P.M.'\nanswer = bobsled_end_time\nprint(answer)", "# Define the end time of the bobsled event\nbobsled_end_time = '1:10 P.M.'\n\n# Define the options\noptions = ['12:10 P.M.', '1:10 P.M.', '9:55 P.M.', '3:50 P.M.']\n\n# Check if the bobsled end time is in the options\nif bobsled_end_time in options:\n    answer = bobsled_end_time\nelse:\n    answer = None  # or handle the case where it's not in options\n\nprint(answer)", "# Define the schedule for the Winter Olympics events\nschedule = {\n    'cross-country skiing': ('10:55 A.M.', '12:10 P.M.'),\n    'figure skating': ('11:10 A.M.', '12:35 P.M.'),\n    'bobsled': ('12:10 P.M.', '1:10 P.M.'),\n    'ice hockey': ('12:25 P.M.', '3:50 P.M.'),\n    'luge': ('3:10 P.M.', '7:25 P.M.'),\n    'snowboarding': ('6:30 P.M.', '9:55 P.M.')\n}\n\n# Get the end time for the bobsled event\nbobsled_end_time = schedule['bobsled'][1]\n\n# List of options to choose from\noptions = ['12:10 P.M.', '1:10 P.M.', '9:55 P.M.', '3:50 P.M.']\n\n# Check if the end time is in the options and assign it to answer\nif bobsled_end_time in options:\n    answer = bobsled_end_time\nelse:\n    answer = None  # Handle the case where it's not in options\n\nprint(answer)", "# Define the schedule of events with their start and end times\nschedule = {\n    'cross-country skiing': ('10:55 A.M.', '12:10 P.M.'),\n    'figure skating': ('11:10 A.M.', '12:35 P.M.'),\n    'bobsled': ('12:10 P.M.', '1:10 P.M.'),\n    'ice hockey': ('12:25 P.M.', '3:50 P.M.'),\n    'luge': ('3:10 P.M.', '7:25 P.M.'),\n    'snowboarding': ('6:30 P.M.', '9:55 P.M.')\n}\n\n# Get the end time of the bobsled event\nbobsled_end_time = schedule['bobsled'][1]\n\n# Format the output to match the options\nformatted_bobsled_end_time = bobsled_end_time.replace('1:10 P.M.', '01:10 P.M.')\n\n# Store the answer\nanswer = formatted_bobsled_end_time\n\nprint(answer)"
], "prediction": ["1:10 P.M.", "1:10 P.M.", "1:10 P.M.", "01:10 P.M."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Actors per movie\" and then answer a question.\n\nStem | Leaf \n3 | 5, 5\n4 | 1, 4\n5 | 0, 9\n6 | 1\n7 | 7\n8 | 4\n9 | 0, 0, 0", "question": "Read the following table regarding \"Actors per movie\" and then write Python code to answer a question.\n\nStem | Leaf \n3 | 5, 5\n4 | 1, 4\n5 | 0, 9\n6 | 1\n7 | 7\n8 | 4\n9 | 0, 0, 0\n\nThe movie critic liked to count the number of actors in each movie she saw. What is the largest number of actors?", "answer": "90", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number of actors corresponds to the largest value in the stem-and-leaf display.\nlargest_number_of_actors = 90  # From the stem \"9 | 0, 0, 0\", the value is 90.\nanswer = largest_number_of_actors\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(3, [5, 5]), (4, [1, 4]), (5, [0, 9]), (6, [1]), (7, [7]), (8, [4]), (9, [0, 0, 0])]\n\n# Initialize variable to track the largest number of actors\nlargest_number_of_actors = 0\n\n# Iterate through the stem and leaf data structure to find the largest number of actors\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        # Calculate the number of actors for each stem and leaf combination\n        number_of_actors = stem * 10 + leaf\n        # Update the largest number of actors if the current number is greater\n        if number_of_actors > largest_number_of_actors:\n            largest_number_of_actors = number_of_actors\n\nanswer = largest_number_of_actors\nprint(answer)", "stem_and_leaf = [(3, [5, 5]), (4, [1, 4]), (5, [0, 9]), (6, [1]), (7, [7]), (8, [4]), (9, [0, 0, 0])]\nlargest_number_of_actors = 0\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        # Calculate the number of actors for each stem and leaf combination\n        number_of_actors = stem * 10 + leaf\n        # Update the largest number of actors if the current number is greater\n        if number_of_actors > largest_number_of_actors:\n            largest_number_of_actors = number_of_actors\nanswer = largest_number_of_actors  # This will be an integer\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(3, [5, 5]), (4, [1, 4]), (5, [0, 9]), (6, [1]), (7, [7]), (8, [4]), (9, [0, 0, 0])]  \n  \n# Initialize variable to track the largest number of actors  \nlargest_number_of_actors = 0  \n  \n# Iterate through the stem and leaf data structure to find the largest number of actors  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        number_of_actors = stem * 10 + leaf  # Calculate the number of actors for each stem and leaf combination  \n        if number_of_actors > largest_number_of_actors:  # Update if the current number is greater  \n            largest_number_of_actors = number_of_actors  \n  \nanswer = largest_number_of_actors  # Store the result as an integer  \nprint(answer)  # Output the result"
], "prediction": [90.0, 90.0, 90.0, 90.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n13 | 3\n14 | 7\n15 | 13", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n13 | 3\n14 | 7\n15 | 13\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "nonlinear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": ["# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for equal differences in x-values.\nx_values = [13, 14, 15]\ny_values = [3, 7, 13]\n\n# Calculate the differences\ndifferences = [y_values[i] - y_values[i - 1] for i in range(1, len(y_values))]\n# Check if the differences are constant\nis_linear = all(diff == differences[0] for diff in differences)\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values\nx_values = [13, 14, 15]\ny_values = [3, 7, 13]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i] - y_values[i - 1] for i in range(1, len(y_values))]\n\n# Check if all differences are the same to determine if the function is linear\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Assign the result to the answer variable\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "", "x_values = [13, 14, 15]\ny_values = [3, 7, 13]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i] - y_values[i - 1] for i in range(1, len(y_values))]\n\n# Check if all differences are the same\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)"], "prediction": [null, null, null, null], "report": ["NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "Done", "NameError(\"name 'differences' is not defined\")"]
}
{
  "context": "Read the following table regarding \"Trees planted\" and then answer a question.\n\nOrganization | Number of trees planted\nTrees for All | 69\nNew Planet | 94\nAcorns to Oaks | 74\nLet it Grow | 83\nPlant It | 82\nHeal the Earth | 70\nDreaming Green | 84\nMake it Green | 92", "question": "Read the following table regarding \"Trees planted\" and then write Python code to answer a question.\n\nOrganization | Number of trees planted\nTrees for All | 69\nNew Planet | 94\nAcorns to Oaks | 74\nLet it Grow | 83\nPlant It | 82\nHeal the Earth | 70\nDreaming Green | 84\nMake it Green | 92\n\nAn environmental agency examined how many trees were planted by different organizations. What is the mean of the numbers?", "answer": "81", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of trees planted by each organization\ntrees_planted = [69, 94, 74, 83, 82, 70, 84, 92]\n# Calculate the mean\nmean_trees = sum(trees_planted) / len(trees_planted)\nanswer = mean_trees\nprint(answer)", "trees_planted = [69, 94, 74, 83, 82, 70, 84, 92]\nmean_trees = sum(trees_planted) / len(trees_planted)\nanswer = round(mean_trees)  # Round the result to the nearest integer\nprint(answer)", "# List of trees planted by various organizations\ntrees_planted = [69, 94, 74, 83, 82, 70, 84, 92]\n\n# Calculate the mean of the numbers\nmean_trees = sum(trees_planted) / len(trees_planted)\n\n# Store the result as an integer\nanswer = round(mean_trees)  # Round the result to the nearest integer\n\nprint(answer)", "trees_planted = [69, 94, 74, 83, 82, 70, 84, 92]\nmean_trees = sum(trees_planted) / len(trees_planted)\nanswer = mean_trees  # Keep the result as a float for precision\nprint(answer)"], "prediction": [81.0, 81.0, 81.0, 81.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Idaho crop prices per cwt\" and then answer a question.\n\nCrop | 2004 | 2005\nLentils | $14 | $12\nTimothy seed | $7 | $7\nApples | $12 | $18\nCanola | $11 | $10\nPeas | $7 | $6", "question": "Read the following table regarding \"Idaho crop prices per cwt\" and then write Python code to answer a question.\n\nCrop | 2004 | 2005\nLentils | $14 | $12\nTimothy seed | $7 | $7\nApples | $12 | $18\nCanola | $11 | $10\nPeas | $7 | $6\n\nAn Idaho farmer has been monitoring crop prices over time. Per cwt, how much did peas cost in 2004?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Price of peas in 2004\npeas_price_2004 = 7  # From the table, the price of peas in 2004\nanswer = peas_price_2004\nprint(answer)", "# Price of peas per cwt in 2004 from the Idaho crop prices table\npeas_price_2004 = 7  \nanswer = peas_price_2004  \nprint(answer)", "# Price of peas in Idaho for the year 2004\npeas_price_2004 = 7  \nanswer = peas_price_2004  \nprint(answer)", "peas_price_2004 = 7  \nanswer = f\"The price of peas in 2004 was ${peas_price_2004} per cwt.\"  \nprint(answer)"], "prediction": [7.0, 7.0, 7.0, "The price of peas in 2004 was $7 per cwt."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Doctor's office wait times (minutes)\" and then answer a question.\n\nStem | Leaf \n3 | 3\n4 | 1, 4\n5 | 6, 7\n6 | 6\n7 | 2", "question": "Read the following table regarding \"Doctor's office wait times (minutes)\" and then write Python code to answer a question.\n\nStem | Leaf \n3 | 3\n4 | 1, 4\n5 | 6, 7\n6 | 6\n7 | 2\n\nThe receptionist at a doctor's office kept track of each patient's wait time. What is the shortest wait time?", "answer": "33", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The shortest wait time corresponds to the smallest value in the stem-and-leaf display.\nshortest_wait_time = 33  # From the stem \"3 | 3\", the value is 33 minutes.\nanswer = shortest_wait_time\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(3, [3]), (4, [1, 4]), (5, [6, 7]), (6, [6]), (7, [2])]  \n\n# Initialize variable for the shortest wait time  \nshortest_wait_time = float('inf')  \n\n# Iterate through the stem and leaf data structure to find the shortest wait time  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        wait_time = stem * 10 + leaf  # Calculate wait time  \n        if wait_time < shortest_wait_time:  \n            shortest_wait_time = wait_time  # Update shortest wait time  \n\nanswer = shortest_wait_time  \nprint(answer)", "stem_and_leaf = [(3, [3]), (4, [1, 4]), (5, [6, 7]), (6, [6]), (7, [2])]  \nshortest_wait_time = float('inf')  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        wait_time = stem * 10 + leaf  # Calculate wait time  \n        if wait_time < shortest_wait_time:  \n            shortest_wait_time = wait_time  # Update shortest wait time  \nanswer = int(shortest_wait_time)  # Convert to integer\nprint(answer)", "# Define the stem and leaf data structure  \nstem_and_leaf = [(3, [3]), (4, [1, 4]), (5, [6, 7]), (6, [6]), (7, [2])]  \n\n# Initialize the shortest wait time to a very high value  \nshortest_wait_time = float('inf')  \n\n# Iterate through the stem and leaf data structure to find the shortest wait time  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        wait_time = stem * 10 + leaf  # Calculate wait time  \n        if wait_time < shortest_wait_time:  \n            shortest_wait_time = wait_time  # Update shortest wait time  \n\nanswer = int(shortest_wait_time)  # Convert to integer to get the final answer  \nprint(answer)"
], "prediction": [33.0, 33.0, 33.0, 33.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Roller coasters per amusement park\" and then answer a question.\n\nStem | Leaf \n1 | 3, 9\n2 | 0, 0, 0, 1, 7, 7, 8, 9\n3 | 2, 3, 6, 8\n4 | 2, 2, 4, 5, 7", "question": "Read the following table regarding \"Roller coasters per amusement park\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 3, 9\n2 | 0, 0, 0, 1, 7, 7, 8, 9\n3 | 2, 3, 6, 8\n4 | 2, 2, 4, 5, 7\n\nIrma found a list of the number of roller coasters at each amusement park in the state. How many amusement parks have fewer than 50 roller coasters?", "answer": "19", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Extracting the number of roller coasters from the stem-and-leaf display\nroller_coasters = [\n    13, 19,   # From stem \"1\"\n    20, 20, 20, 21, 27, 27, 28, 29,  # From stem \"2\"\n    32, 33, 36, 38,  # From stem \"3\"\n    42, 42, 44, 45, 47  # From stem \"4\"\n]\n\n# Count how many amusement parks have fewer than 50 roller coasters\nfewer_than_50 = sum(1 for coasters in roller_coasters if coasters < 50)\nanswer = fewer_than_50\nprint(answer)", "roller_coasters = [\n    13, 19,   # From stem \"1\"\n    20, 20, 20, 21, 27, 27, 28, 29,  # From stem \"2\"\n    32, 33, 36, 38,  # From stem \"3\"\n    42, 42, 44, 45, 47  # From stem \"4\"\n]\nfewer_than_50 = sum(1 for coasters in roller_coasters if coasters < 50)\nanswer = int(fewer_than_50)  # Ensure the result is an integer\nprint(answer)", "roller_coasters = [\n    13, 19,   # From stem \"1\"\n    20, 20, 20, 21, 27, 27, 28, 29,  # From stem \"2\"\n    32, 33, 36, 38,  # From stem \"3\"\n    42, 42, 44, 45, 47  # From stem \"4\"\n]\nfewer_than_50 = sum(1 for coasters in roller_coasters if coasters < 50)\nanswer = fewer_than_50  # No need for conversion\nprint(answer)", "roller_coasters = [\n    13, 19,   # From stem \"1\"\n    20, 20, 20, 21, 27, 27, 28, 29,  # From stem \"2\"\n    32, 33, 36, 38,  # From stem \"3\"\n    42, 42, 44, 45, 47  # From stem \"4\"\n]\nfewer_than_50 = sum(1 for coasters in roller_coasters if coasters < 50)\nanswer = fewer_than_50  # This will be an integer\nprint(answer)"
], "prediction": [19.0, 19.0, 19.0, 19.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nMixture | Temperature (\u00b0C)\nBromine mixture | -4\nAcetone mixture | 5", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nMixture | Temperature (\u00b0C)\nBromine mixture | -4\nAcetone mixture | 5\n\nIn science class, Brooke is measuring the temperature of different chemical mixtures. The temperatures of two mixtures are shown in the table. Which mixture's temperature is closest to zero? Choose from the the options: ['bromine mixture', 'acetone mixture']", "answer": "bromine mixture", "ques_type": "multi_choice", "choices": ["bromine mixture", "acetone mixture"], "code": [
  "# Python code, return answer \nbromine_temperature = -4\nacetone_temperature = 5\n\n# Calculate the absolute distances to zero\nbromine_distance_to_zero = abs(bromine_temperature)\nacetone_distance_to_zero = abs(acetone_temperature)\n\n# Determine which mixture's temperature is closest to zero\nif bromine_distance_to_zero < acetone_distance_to_zero:\n    answer = 'bromine mixture'\nelse:\n    answer = 'acetone mixture'\n\nprint(answer)", "bromine_temperature = -4\nacetone_temperature = 5\nbromine_distance_to_zero = abs(bromine_temperature)\nacetone_distance_to_zero = abs(acetone_temperature)\n\nif bromine_distance_to_zero < acetone_distance_to_zero:\n    answer = 'bromine mixture'\nelse:\n    answer = 'acetone mixture'\n    \n# Correcting the logic to identify the closest mixture to zero\nif bromine_distance_to_zero > acetone_distance_to_zero:\n    answer = 'acetone mixture'\n\nprint(answer)", "bromine_temperature = -4\nacetone_temperature = 5\nbromine_distance_to_zero = abs(bromine_temperature)\nacetone_distance_to_zero = abs(acetone_temperature)\n\nif bromine_distance_to_zero < acetone_distance_to_zero:\n    answer = 'bromine mixture'\nelse:\n    answer = 'acetone mixture'\n\nprint(answer)", "bromine_temperature = -4\nacetone_temperature = 5\n\nbromine_distance_to_zero = abs(bromine_temperature)\nacetone_distance_to_zero = abs(acetone_temperature)\n\nif bromine_distance_to_zero < acetone_distance_to_zero:\n    answer = 'bromine mixture'\nelse:\n    answer = 'acetone mixture'\n\nprint(answer)"
], "prediction": ["bromine mixture", "bromine mixture", "bromine mixture", "bromine mixture"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Quiz show scores\" and then answer a question.\n\nName | Score\nErnest | 2\nDan | 4\nKenny | 2\nAustin | 2\nJustine | 6\nLila | 5\nRyan | 3", "question": "Read the following table regarding \"Quiz show scores\" and then write Python code to answer a question.\n\nName | Score\nErnest | 2\nDan | 4\nKenny | 2\nAustin | 2\nJustine | 6\nLila | 5\nRyan | 3\n\nThe players on a quiz show received the following scores. What is the median of the numbers?", "answer": "3", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nscores = [2, 4, 2, 2, 6, 5, 3]\n# Sort the scores to find the median\nscores.sort()\n# Calculate the median\nn = len(scores)\nif n % 2 == 0:\n    median = (scores[n//2 - 1] + scores[n//2]) / 2\nelse:\n    median = scores[n//2]\nanswer = median\nprint(answer)", "scores = [2, 4, 2, 2, 6, 5, 3]\nscores.sort()\nn = len(scores)\nmedian = scores[n // 2]  # For odd n, this directly gives the middle element\nanswer = median\nprint(answer)", "scores = [2, 4, 2, 2, 6, 5, 3]\nscores.sort()\nn = len(scores)\n\nif n % 2 == 1:  # If the number of scores is odd\n    median = scores[n // 2]\nelse:  # If the number of scores is even\n    median = (scores[n // 2 - 1] + scores[n // 2]) / 2\n\nanswer = median\nprint(answer)", "scores = [2, 4, 2, 2, 6, 5, 3]\nscores.sort()\nn = len(scores)\n\nif n % 2 == 1:  # If the number of scores is odd\n    median = scores[n // 2]\nelse:  # If the number of scores is even\n    median = (scores[n // 2 - 1] + scores[n // 2]) / 2\n\n# Convert to integer if the median is a whole number\nif median.is_integer():\n    median = int(median)\n\nanswer = median\nprint(answer)"], "prediction": [3.0, 3.0, 3.0, 3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Donations received\" and then answer a question.\n\nCause | April | May\nMedical research | $4 | $18\nParks | $13 | $19\nHunger | $7 | $17", "question": "Read the following table regarding \"Donations received\" and then write Python code to answer a question.\n\nCause | April | May\nMedical research | $4 | $18\nParks | $13 | $19\nHunger | $7 | $17\n\nA county agency recorded the money donated to several charitable causes over time. Which cause raised less money in April, hunger or medical research? Choose from the the options: ['hunger', 'medical research']", "answer": "medical research", "ques_type": "multi_choice", "choices": ["hunger", "medical research"], "code": ["# Python code, return answer \n# Donations in April for both causes\nhunger_april = 7\nmedical_research_april = 4\n\n# Determine which cause raised less money in April\nif hunger_april < medical_research_april:\n    answer = 'hunger'\nelse:\n    answer = 'medical research'\n\nprint(answer)", "hunger_april = 7\nmedical_research_april = 4\n\nif hunger_april < medical_research_april:\n    answer = 'hunger'\nelse:\n    answer = 'medical research'\n\nprint(answer)", "hunger_april = 7\nmedical_research_april = 4\n\n# Compare the donations for April\nif medical_research_april < hunger_april:\n    answer = 'medical research'\nelse:\n    answer = 'hunger'\n\nprint(answer)", "# Define the donation amounts for April\nhunger_april = 7\nmedical_research_april = 4\n\n# Determine which cause raised less money in April\nif medical_research_april < hunger_april:\n    answer = 'medical research'\nelse:\n    answer = 'hunger'\n\nprint(answer)"], "prediction": ["medical research", "medical research", "medical research", "medical research"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Train tickets sold\" and then answer a question.\n\nDay | Number of tickets\nTuesday | 24\nWednesday | 28\nThursday | 26\nFriday | 24\nSaturday | 20", "question": "Read the following table regarding \"Train tickets sold\" and then write Python code to answer a question.\n\nDay | Number of tickets\nTuesday | 24\nWednesday | 28\nThursday | 26\nFriday | 24\nSaturday | 20\n\nThe transportation company tracked the number of train tickets sold in the past 5 days. What is the median of the numbers?", "answer": "24", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# List of tickets sold for each day\ntickets_sold = [24, 28, 26, 24, 20]\n# Sort the list to find the median\ntickets_sold.sort()\n# Calculate the median\nn = len(tickets_sold)\nif n % 2 == 1:  # If the number of observations is odd\n    median = tickets_sold[n // 2]\nelse:           # If the number of observations is even\n    median = (tickets_sold[n // 2 - 1] + tickets_sold[n // 2]) / 2\n\nanswer = median\nprint(answer)", "tickets_sold = [24, 28, 26, 24, 20]\ntickets_sold.sort()\nn = len(tickets_sold)\nif n % 2 == 1:  # If the number of observations is odd\n    median = tickets_sold[n // 2]\nelse:           # If the number of observations is even\n    median = (tickets_sold[n // 2 - 1] + tickets_sold[n // 2]) / 2\n\n# Convert median to integer if it's a whole number\nanswer = int(median) if median.is_integer() else median\nprint(answer)", "tickets_sold = [24, 28, 26, 24, 20]\ntickets_sold.sort()\nn = len(tickets_sold)\n\nif n % 2 == 1:  # If the number of observations is odd\n    median = tickets_sold[n // 2]\nelse:           # If the number of observations is even\n    median = (tickets_sold[n // 2 - 1] + tickets_sold[n // 2]) / 2\n\n# Store the median in 'answer' and ensure it's an integer if it's a whole number\nanswer = int(median) if median.is_integer() else median\n\nprint(answer)", "# List of tickets sold\ntickets_sold = [24, 28, 26, 24, 20]\n\n# Sort the list\ntickets_sold.sort()\n\n# Calculate the median\nn = len(tickets_sold)\nif n % 2 == 1:  # If the number of observations is odd\n    median = tickets_sold[n // 2]\nelse:           # If the number of observations is even\n    median = (tickets_sold[n // 2 - 1] + tickets_sold[n // 2]) / 2\n\n# Store the result in 'answer' as an integer if it's a whole number\nanswer = int(median) if median.is_integer() else median\nprint(answer)"
], "prediction": [24.0, 24.0, 24.0, 24.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Road bike tires | Mountain bike tires\nRed | 5 | 2\nGreen | 2 | 2", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Road bike tires | Mountain bike tires\nRed | 5 | 2\nGreen | 2 | 2\n\nBilly is shopping for a new bicycle. He is most interested in color and type of tires. What is the probability that a randomly selected bike is green and has road bike tires? Simplify any fractions.", "answer": "2/11", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total bikes\ntotal_bikes = 5 + 2 + 2 + 2\n\n# Bikes that are green and have road bike tires\ngreen_road_bike_tires = 2 \n\n# Probability calculation\nprobability_green_road = green_road_bike_tires / total_bikes\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(green_road_bike_tires, total_bikes).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Number of tires for each type and color\nroad_bike_tires = {'Red': 5, 'Green': 2}\nmountain_bike_tires = {'Red': 2, 'Green': 2}\n\n# Calculate total number of bikes\ntotal_bikes = sum(road_bike_tires.values()) + sum(mountain_bike_tires.values())\n\n# Number of green bikes with road bike tires\ngreen_road_bike_tires = road_bike_tires['Green']\n\n# Calculate the probability\nfrom fractions import Fraction\nprobability_green_road = Fraction(green_road_bike_tires, total_bikes).limit_denominator()\n\n# Store the result in the answer variable\nanswer = probability_green_road\nprint(answer)", "```python\n# Define the number of tires", "# Define the number of tires for each color and type\nroad_bike_tires = {'Red': 5, 'Green': 2}\nmountain_bike_tires = {'Red': 2, 'Green': 2}\n\n# Calculate the total number of bikes\ntotal_bikes = sum(road_bike_tires.values()) + sum(mountain_bike_tires.values())\n\n# Get the number of green road bike tires\ngreen_road_bike_tires = road_bike_tires['Green']\n\n# Calculate the probability as a fraction\nfrom fractions import Fraction\nprobability_green_road = Fraction(green_road_bike_tires, total_bikes).limit_denominator()\n\n# Store the result in the answer variable\nanswer = f\"{probability_green_road.numerator}/{probability_green_road.denominator}\"\nprint(answer)"
], "prediction": [0.18182, 0.18182, null, "2/11"], "report": ["Done", "Done", "SyntaxError('invalid syntax', ('<string>', 1, 1, '```python\\n', 1, 2))", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ndeep-sea fishing package | $987.00\nsurfing adventure package | $904.00\nsailing trip package | $744.00\ncamping adventure package | $641.00\nparachuting adventure package | $738.00\nwhale-watching adventure package | $608.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ndeep-sea fishing package | $987.00\nsurfing adventure package | $904.00\nsailing trip package | $744.00\ncamping adventure package | $641.00\nparachuting adventure package | $738.00\nwhale-watching adventure package | $608.00\n\nKenneth has $1,614.00. Does he have enough to buy a surfing adventure package and a camping adventure package? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# Prices of the packages\nsurfing_package_price = 904.00\ncamping_package_price = 641.00\n# Total cost for both packages\ntotal_cost = surfing_package_price + camping_package_price\n# Kenneth's budget\nkenneth_budget = 1614.00\n# Check if Kenneth has enough money\nif kenneth_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "# Define the prices of the adventure packages\nsurfing_package_price = 904.00\ncamping_package_price = 641.00\n\n# Calculate the total cost of both packages\ntotal_cost = surfing_package_price + camping_package_price\n\n# Define Kenneth's budget\nkenneth_budget = 1614.00\n\n# Check if Kenneth has enough money for both packages\nif kenneth_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "def can_afford_packages(surfing_price, camping_price, budget):\n    total_cost = surfing_price + camping_price\n    return 'yes' if budget >= total_cost else 'no'\n\nsurfing_package_price = 904.00\ncamping_package_price = 641.00\nkenneth_budget = 1614.00\n\nanswer = can_afford_packages(surfing_package_price, camping_package_price, kenneth_budget)\nprint(answer)", "def can_afford_packages(surfing_price, camping_price, budget):\n    total_cost = surfing_price + camping_price\n    return 'yes' if budget >= total_cost else 'no'\n\nsurfing_package_price = 904.00\ncamping_package_price = 641.00\nkenneth_budget = 1614.00\n\n# Store the result in the variable 'answer'\nanswer = can_afford_packages(surfing_package_price, camping_package_price, kenneth_budget)\n\n# Output the answer\nprint(answer)"
], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Regular cleaning | Broken tooth\nPatients under 18 years old | 3 | 2\nPatients 19-60 years old | 3 | 5", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Regular cleaning | Broken tooth\nPatients under 18 years old | 3 | 2\nPatients 19-60 years old | 3 | 5\n\nA dentist was making note of his upcoming appointments with different aged patients and the reasons for their visits. What is the probability that a randomly selected appointment is with patients 19-60 years old and is for a broken tooth? Simplify any fractions.", "answer": "5/13", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total patients\npatients_under_18 = 3 + 2\npatients_19_to_60 = 3 + 5\ntotal_patients = patients_under_18 + patients_19_to_60\n\n# Patients 19-60 years old with a broken tooth\npatients_broken_tooth_19_to_60 = 5\n\n# Probability calculation\nprobability = patients_broken_tooth_19_to_60 / total_patients\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(patients_broken_tooth_19_to_60, total_patients).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Define the number of patients for each category\npatients_under_18 = 3 + 2  # Regular cleaning + Broken tooth\npatients_19_to_60 = 3 + 5   # Regular cleaning + Broken tooth\n\n# Total number of patients\ntotal_patients = patients_under_18 + patients_19_to_60\n\n# Number of patients 19-60 years old with a broken tooth\npatients_broken_tooth_19_to_60 = 5\n\n# Calculate the probability\nfrom fractions import Fraction\nprobability = Fraction(patients_broken_tooth_19_to_60, total_patients).limit_denominator()\n\nanswer = probability\nprint(answer)", "# Define the number of patients for each category\npatients_under_18_regular = 3\npatients_under_18_broken = 2\npatients_19_to_60_regular = 3\npatients_19_to_60_broken = 5\n\n# Calculate total patients for each age group\npatients_under_18_total = patients_under_18_regular + patients_under_18_broken\npatients_19_to_60_total = patients_19_to_60_regular + patients_19_to_60_broken\n\n# Calculate total patients\ntotal_patients = patients_under_18_total + patients_19_to_60_total\n\n# Number of patients 19-60 years old with broken tooth\npatients_broken_tooth_19_to_60 = patients_19_to_60_broken\n\n# Calculate probability as a fraction\nfrom fractions import Fraction\nprobability = Fraction(patients_broken_tooth_19_to_60, total_patients).limit_denominator()\n\n# Store the result in 'answer'\nanswer = probability\nprint(answer)", "patients_under_18_regular = 3\npatients_under_18_broken = 2\npatients_19_to_60_regular = 3\npatients_19_to_60_broken = 5\n\n# Calculate total patients for each age group\npatients_under_18_total = patients_under_18_regular + patients_under_18_broken\npatients_19_to_60_total = patients_19_to_60_regular + patients_19_to_60_broken\n\n# Calculate total patients\ntotal_patients = patients_under_18_total + patients_19_to_60_total\n\n# Calculate the number of patients aged 19-60 with a broken tooth\npatients_broken_tooth_19_to_60 = patients_19_to_60_broken\n\n# Calculate the probability as a fraction\nfrom fractions import Fraction\nprobability = Fraction(patients_broken_tooth_19_to_60, total_patients).limit_denominator()\n\n# Store the result in the answer variable\nanswer = probability\nprint(answer)"
], "prediction": [0.38462, 0.38462, 0.38462, 0.38462], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbrass clip | $0.08\nelastic band | $0.03\ngold tack | $0.05\nfour-inch nail | $0.03\nsmall metal hook | $0.01", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbrass clip | $0.08\nelastic band | $0.03\ngold tack | $0.05\nfour-inch nail | $0.03\nsmall metal hook | $0.01\n\nHow much money does Sasha need to buy a gold tack and an elastic band?", "answer": "0.08", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nprice_gold_tack = 0.05 \nprice_elastic_band = 0.03 \n# Total cost for the items\ntotal_cost = price_gold_tack + price_elastic_band\nanswer = total_cost\nprint(answer)", "price_gold_tack = 0.05 \nprice_elastic_band = 0.03 \ntotal_cost = price_gold_tack + price_elastic_band\nanswer = f\"${total_cost:.2f}\"  # Format the result to two decimal places\nprint(answer)", "# Define the prices of the items\nprice_gold_tack = 0.05 \nprice_elastic_band = 0.03 \n\n# Calculate the total cost\ntotal_cost = price_gold_tack + price_elastic_band\n\n# Format the result to two decimal places\nanswer = f\"${total_cost:.2f}\"\n\nprint(answer)", "price_gold_tack = 0.05 \nprice_elastic_band = 0.03 \ntotal_cost = price_gold_tack + price_elastic_band\nanswer = f\"Total cost for a gold tack and an elastic band: ${total_cost:.2f}\"\nprint(answer)"], "prediction": [0.08, "$0.08", "$0.08", "Total cost for a gold tack and an elastic band: $0.08"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ncookie dough ice cream | $3 per pound\nmint ice cream | $5 per pound\ncoffee ice cream | $6 per pound\ndouble chocolate ice cream | $5 per pound\nstrawberry ice cream | $3 per pound\ncherry ice cream | $5 per pound", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ncookie dough ice cream | $3 per pound\nmint ice cream | $5 per pound\ncoffee ice cream | $6 per pound\ndouble chocolate ice cream | $5 per pound\nstrawberry ice cream | $3 per pound\ncherry ice cream | $5 per pound\n\nCarly went to the store and bought 1+1/10 pounds of coffee ice cream. How much did she spend?", "answer": "6.60", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_coffee_ice_cream = 6  # price in dollars\npounds_bought = 1 + 1/10  # Carly bought 1 and 1/10 pounds\n# Calculate total cost\ntotal_cost = price_per_pound_coffee_ice_cream * pounds_bought\nanswer = total_cost\nprint(answer)", "# Define the price per pound of coffee ice cream\nprice_per_pound_coffee_ice_cream = 6  # price in dollars\n\n# Calculate the amount of ice cream bought\npounds_bought = 1 + 1/10  # Carly bought 1 and 1/10 pounds\n\n# Calculate the total cost\ntotal_cost = price_per_pound_coffee_ice_cream * pounds_bought\n\n# Format the total cost as a currency string\nanswer = f\"${total_cost:.2f}\"\nprint(answer)", "price_per_pound_coffee_ice_cream = 6  # price in dollars\npounds_bought = 1 + 1/10  # Carly bought 1 and 1/10 pounds\ntotal_cost = price_per_pound_coffee_ice_cream * pounds_bought\nanswer = total_cost  # Store the result in the variable 'answer'\nprint(f\"${answer:.2f}\")  # Print the formatted output", "price_per_pound_coffee_ice_cream = 6  # price in dollars\npounds_bought = 1 + 1/10  # Carly bought 1 and 1/10 pounds\ntotal_cost = price_per_pound_coffee_ice_cream * pounds_bought\nanswer = total_cost  # Store the result in the variable 'answer'\nprint(answer)  # Print the value stored in 'answer'"], "prediction": [6.6, "$6.60", 6.6, 6.6], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nhockey ticket | $36\ngolf ticket | $39\nbasketball ticket | $78\nbaseball ticket | $34\nfootball ticket | $81\nsoccer ticket | $52", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nhockey ticket | $36\ngolf ticket | $39\nbasketball ticket | $78\nbaseball ticket | $34\nfootball ticket | $81\nsoccer ticket | $52\n\nHow much money does Kimberly need to buy a football ticket, a soccer ticket, and a hockey ticket?", "answer": "169", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the tickets\nfootball_ticket_price = 81 \nsoccer_ticket_price = 52 \nhockey_ticket_price = 36 \n\n# Total money needed for the tickets\ntotal_money_needed = football_ticket_price + soccer_ticket_price + hockey_ticket_price\nanswer = total_money_needed\nprint(answer)", "football_ticket_price = 81 \nsoccer_ticket_price = 52 \nhockey_ticket_price = 36 \n\n# Calculate the total money needed\ntotal_money_needed = football_ticket_price + soccer_ticket_price + hockey_ticket_price\n\n# Store the result in the answer variable\nanswer = total_money_needed\n\n# Print the answer\nprint(answer)", "# Prices of the tickets\nfootball_ticket_price = 81 \nsoccer_ticket_price = 52 \nhockey_ticket_price = 36 \n\n# Total money needed for the tickets\ntotal_money_needed = football_ticket_price + soccer_ticket_price + hockey_ticket_price\n\n# Format the total money as a currency value\nanswer = \"${:,.2f}\".format(total_money_needed)\nprint(answer)", "# Prices of the tickets\nfootball_ticket_price = 81 \nsoccer_ticket_price = 52 \nhockey_ticket_price = 36 \n\n# Calculate the total money needed\ntotal_money_needed = football_ticket_price + soccer_ticket_price + hockey_ticket_price\n\n# Store the answer as a numerical value\nanswer = total_money_needed\n\n# Print the formatted output\nformatted_answer = \"${:,.2f}\".format(answer)\nprint(formatted_answer)"], "prediction": [169.0, 169.0, "$169.00", 169.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n4 | 8\n5 | 10\n6 | 18", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n4 | 8\n5 | 10\n6 | 18\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "nonlinear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear or nonlinear, we can check the ratios of change between x and y.\n\n# Calculate the differences\npoints = [(4, 8), (5, 10), (6, 18)]\n\n# Check the differences\ndifferences = [(y2 - y1) / (x2 - x1) for (x1, y1), (x2, y2) in zip(points[:-1], points[1:])]\n\n# If the differences are not constant, the function is nonlinear\nif differences[0] != differences[1]:\n    answer = 'nonlinear'\nelse:\n    answer = 'linear'\n\nprint(answer)", "points = [(4, 8), (5, 10), (6, 18)]\ndifferences = [(y2 - y1) / (x2 - x1) for (x1, y1), (x2, y2) in zip(points[:-1], points[1:])]\n\n# Check if all differences are the same\nif all(diff == differences[0] for diff in differences):\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\n\nprint(answer)", "points = [(4, 8), (5, 10), (6, 18)]\ndifferences = [(y2 - y1) / (x2 - x1) for (x1, y1), (x2, y2) in zip(points[:-1], points[1:])]\n\n# Check if all differences are the same\nif all(diff == differences[0] for diff in differences):\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\n\nprint(answer)", "points = [(4, 8), (5, 10), (6, 18)]\nslopes = [(y2 - y1) / (x2 - x1) for (x1, y1), (x2, y2) in zip(points[:-1], points[1:])]\nif all(slope == slopes[0] for slope in slopes):\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\nprint(answer)"
], "prediction": ["nonlinear", null, null, null], "report": ["Done", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'slopes' is not defined\")"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbearded dragon | $36\nhedgehog | $79\ncockatoo | $89\npot-bellied pig | $25", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbearded dragon | $36\nhedgehog | $79\ncockatoo | $89\npot-bellied pig | $25\n\nTara has $110. Does she have enough to buy a cockatoo and a pot-bellied pig? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \ncost_cockatoo = 89 \ncost_pot_bellied_pig = 25 \ntotal_cost = cost_cockatoo + cost_pot_bellied_pig\ntara_budget = 110\n\nif tara_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the costs of the animals\ncost_cockatoo = 89 \ncost_pot_bellied_pig = 25 \n\n# Calculate the total cost\ntotal_cost = cost_cockatoo + cost_pot_bellied_pig\n\n# Define Tara's budget\ntara_budget = 110\n\n# Check if Tara has enough money\nif tara_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "cost_cockatoo = 89 \ncost_pot_bellied_pig = 25 \ntotal_cost = cost_cockatoo + cost_pot_bellied_pig\ntara_budget = 110\n\n# Check if Tara has enough money\nanswer = 'yes' if tara_budget >= total_cost else 'no'\n\nprint(answer)", "cost_cockatoo = 89 \ncost_pot_bellied_pig = 25 \ntotal_cost = cost_cockatoo + cost_pot_bellied_pig\ntara_budget = 110\nanswer = 'yes' if tara_budget >= total_cost else 'no'\nprint(answer)"], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nhydrofoil | $8,453.00\nbulldozer | $7,768.00\ndump truck | $6,637.00\nrace car | $8,738.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nhydrofoil | $8,453.00\nbulldozer | $7,768.00\ndump truck | $6,637.00\nrace car | $8,738.00\n\nHow much money does Lena need to buy a bulldozer, a dump truck, and a hydrofoil?", "answer": "22,858", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nbulldozer_price = 7768.00\ndump_truck_price = 6637.00\nhydrofoil_price = 8453.00\n# Calculate the total cost\ntotal_cost = bulldozer_price + dump_truck_price + hydrofoil_price\nanswer = total_cost\nprint(answer)", "# Prices of the items\nbulldozer_price = 7768.00\ndump_truck_price = 6637.00\nhydrofoil_price = 8453.00\n\n# Calculate total cost\ntotal_cost = bulldozer_price + dump_truck_price + hydrofoil_price\n\n# Store the result in 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the prices of the items\nbulldozer_price = 7768.00\ndump_truck_price = 6637.00\nhydrofoil_price = 8453.00\n\n# Calculate the total cost\ntotal_cost = bulldozer_price + dump_truck_price + hydrofoil_price\n\n# Store the result in the answer variable\nanswer = total_cost\n\n# Output the answer in a formatted string\nprint(f\"Lena needs a total of ${answer:.2f} to buy a bulldozer, a dump truck, and a hydrofoil.\")", "# Define the prices of the items\nbulldozer_price = 7768.00\ndump_truck_price = 6637.00\nhydrofoil_price = 8453.00\n\n# Calculate the total cost\ntotal_cost = bulldozer_price + dump_truck_price + hydrofoil_price\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)"], "prediction": [22858.0, 22858.0, 22858.0, 22858.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of apartments | Number of light switches\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of apartments | Number of light switches\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | ?\n\nEach apartment has 10 light switches. How many light switches are in 5 apartments?", "answer": "50", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Given that each apartment has 10 light switches\nlight_switches_per_apartment = 10 \nnumber_of_apartments = 5 \n# Calculate the total number of light switches in 5 apartments\ntotal_light_switches = light_switches_per_apartment * number_of_apartments\nanswer = total_light_switches\nprint(answer)", "# Define the number of light switches per apartment and the number of apartments\nlight_switches_per_apartment = 10\nnumber_of_apartments = 5\n\n# Calculate the total number of light switches\ntotal_light_switches = light_switches_per_apartment * number_of_apartments\n\n# Ensure the result is an integer\nanswer = int(total_light_switches)\nprint(answer)", "light_switches_per_apartment = 10\nnumber_of_apartments = 5\ntotal_light_switches = light_switches_per_apartment * number_of_apartments\nanswer = total_light_switches  # This will be an integer\nprint(answer)", "light_switches_per_apartment = 10\nnumber_of_apartments = 5\ntotal_light_switches = light_switches_per_apartment * number_of_apartments\nanswer = total_light_switches  # This will be an integer\nprint(answer)"], "prediction": [50.0, 50.0, 50.0, 50.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Ferry schedule\" and then answer a question.\n\nLocation | Arrive | Depart\nSandy Shores | 8:00 A.M. | 8:05 A.M.\nStarfish City | 8:30 A.M. | 9:00 A.M.\nCliff View | 9:50 A.M. | 10:10 A.M.\nBeach Town | 10:55 A.M. | 11:05 A.M.\nBay Harbor | 12:20 P.M. | 12:25 P.M.\nWindy Sands | 1:50 P.M. | 1:55 P.M.\nFoggy Port | 3:35 P.M. | 3:50 P.M.\nGrassy Beach | 4:15 P.M. | 4:45 P.M.\nGreen Harbor | 5:35 P.M. | 5:45 P.M.\nPebble Town | 6:10 P.M. | 6:35 P.M.", "question": "Read the following table regarding \"Ferry schedule\" and then write Python code to answer a question.\n\nLocation | Arrive | Depart\nSandy Shores | 8:00 A.M. | 8:05 A.M.\nStarfish City | 8:30 A.M. | 9:00 A.M.\nCliff View | 9:50 A.M. | 10:10 A.M.\nBeach Town | 10:55 A.M. | 11:05 A.M.\nBay Harbor | 12:20 P.M. | 12:25 P.M.\nWindy Sands | 1:50 P.M. | 1:55 P.M.\nFoggy Port | 3:35 P.M. | 3:50 P.M.\nGrassy Beach | 4:15 P.M. | 4:45 P.M.\nGreen Harbor | 5:35 P.M. | 5:45 P.M.\nPebble Town | 6:10 P.M. | 6:35 P.M.\n\nLook at the following schedule. At which stop does the ferry arrive at 6.10 P.M.? Choose from the the options: ['Sandy Shores', 'Pebble Town', 'Bay Harbor', 'Grassy Beach']", "answer": "Pebble Town", "ques_type": "multi_choice", "choices": ["Sandy Shores", "Pebble Town", "Bay Harbor", "Grassy Beach"], "code": [
  "# Python code, return answer \nferry_schedule = {\n    'Sandy Shores': {'Arrive': '8:00 A.M.', 'Depart': '8:05 A.M.'},\n    'Starfish City': {'Arrive': '8:30 A.M.', 'Depart': '9:00 A.M.'},\n    'Cliff View': {'Arrive': '9:50 A.M.', 'Depart': '10:10 A.M.'},\n    'Beach Town': {'Arrive': '10:55 A.M.', 'Depart': '11:05 A.M.'},\n    'Bay Harbor': {'Arrive': '12:20 P.M.', 'Depart': '12:25 P.M.'},\n    'Windy Sands': {'Arrive': '1:50 P.M.', 'Depart': '1:55 P.M.'},\n    'Foggy Port': {'Arrive': '3:35 P.M.', 'Depart': '3:50 P.M.'},\n    'Grassy Beach': {'Arrive': '4:15 P.M.', 'Depart': '4:45 P.M.'},\n    'Green Harbor': {'Arrive': '5:35 P.M.', 'Depart': '5:45 P.M.'},\n    'Pebble Town': {'Arrive': '6:10 P.M.', 'Depart': '6:35 P.M.'}\n}\n\n# Find the stop where the ferry arrives at 6:10 P.M.\narrival_time = '6:10 P.M.'\nanswer = [location for location, times in ferry_schedule.items() if times['Arrive'] == arrival_time]\n\n# Since the question specifies only one option, we return the first element\nanswer = answer[0] if answer else None\nprint(answer)", "ferry_schedule = {\n    'Sandy Shores': {'Arrive': '8:00 A.M.', 'Depart': '8:05 A.M.'},\n    'Starfish City': {'Arrive': '8:30 A.M.', 'Depart': '9:00 A.M.'},\n    'Cliff View': {'Arrive': '9:50 A.M.', 'Depart': '10:10 A.M.'},\n    'Beach Town': {'Arrive': '10:55 A.M.', 'Depart': '11:05 A.M.'},\n    'Bay Harbor': {'Arrive': '12:20 P.M.', 'Depart': '12:25 P.M.'},\n    'Windy Sands': {'Arrive': '1:50 P.M.', 'Depart': '1:55 P.M.'},\n    'Foggy Port': {'Arrive': '3:35 P.M.', 'Depart': '3:50 P.M.'},\n    'Grassy Beach': {'Arrive': '4:15 P.M.', 'Depart': '4:45 P.M.'},\n    'Green Harbor': {'Arrive': '5:35 P.M.', 'Depart': '5:45 P.M.'},\n    'Pebble Town': {'Arrive': '6:10 P.M.', 'Depart': '6:35 P.M.'}\n}\n\narrival_time = '6:10 P.M.'\noptions = ['Sandy Shores', 'Pebble Town', 'Bay Harbor', 'Grassy Beach']\n\n# Find the location where the ferry arrives at the specified time\nfound_location = [location for location, times in ferry_schedule.items() if times['Arrive'] == arrival_time]\n\n# Check if the found location is in the options\nanswer = found_location[0] if found_location and found_location[0] in options else None\nprint(answer)", "ferry_schedule = {\n    'Sandy Shores': {'Arrive': '8:00 A.M.', 'Depart': '8:05 A.M.'},\n    'Starfish City': {'Arrive': '8:30 A.M.', 'Depart': '9:00 A.M.'},\n    'Cliff View': {'Arrive': '9:50 A.M.', 'Depart': '10:10 A.M.'},\n    'Beach Town': {'Arrive': '10:55 A.M.', 'Depart': '11:05 A.M.'},\n    'Bay Harbor': {'Arrive': '12:20 P.M.', 'Depart': '12:25 P.M.'},\n    'Windy Sands': {'Arrive': '1:50 P.M.', 'Depart': '1:55 P.M.'},\n    'Foggy Port': {'Arrive': '3:35 P.M.', 'Depart': '3:50 P.M.'},\n    'Grassy Beach': {'Arrive': '4:15 P.M.', 'Depart': '4:45 P.M.'},\n    'Green Harbor': {'Arrive': '5:35 P.M.', 'Depart': '5:45 P.M.'},\n    'Pebble Town': {'Arrive': '6:10 P.M.', 'Depart': '6:35 P.M.'}\n}\n\narrival_time = '6:10 P.M.'\noptions = ['Sandy Shores', 'Pebble Town', 'Bay Harbor', 'Grassy Beach']\n\n# Find the location that matches the arrival time\nfound_location = next((location for location, times in ferry_schedule.items() if times['Arrive'] == arrival_time), None)\n\n# Check if the found location is in the options and assign it to answer\nanswer = found_location if found_location in options else None\nprint(answer)", "# Define the ferry schedule as a dictionary\nferry_schedule = {\n    'Sandy Shores': {'Arrive': '8:00 A.M.', 'Depart': '8:05 A.M.'},\n    'Starfish City': {'Arrive': '8:30 A.M.', 'Depart': '9:00 A.M.'},\n    'Cliff View': {'Arrive': '9:50 A.M.', 'Depart': '10:10 A.M.'},\n    'Beach Town': {'Arrive': '10:55 A.M.', 'Depart': '11:05 A.M.'},\n    'Bay Harbor': {'Arrive': '12:20 P.M.', 'Depart': '12:25 P.M.'},\n    'Windy Sands': {'Arrive': '1:50 P.M.', 'Depart': '1:55 P.M.'},\n    'Foggy Port': {'Arrive': '3:35 P.M.', 'Depart': '3:50 P.M.'},\n    'Grassy Beach': {'Arrive': '4:15 P.M.', 'Depart': '4:45 P.M.'},\n    'Green Harbor': {'Arrive': '5:35 P.M.', 'Depart': '5:45 P.M.'},\n    'Pebble Town': {'Arrive': '6:10 P.M.', 'Depart': '6:35 P.M.'}\n}\n\n# Define the arrival time to check\narrival_time = '6:10 P.M.'\n\n# Define the options for possible stops\noptions = ['Sandy Shores', 'Pebble Town', 'Bay Harbor', 'Grassy Beach']\n\n# Find the location that matches the arrival time\nanswer = next((location for location, times in ferry_schedule.items() if times['Arrive'] == arrival_time), None)\n\n# Check if the answer is in the options\nif answer in options:\n    print(answer)\nelse:\n    print(None)"
], "prediction": ["Pebble Town", "Pebble Town", null, null], "report": ["Done", "Done", "NameError(\"name 'arrival_time' is not defined\")", "NameError(\"name 'arrival_time' is not defined\")"]
}
{
  "context": "Read the following table regarding \"Photographs taken\" and then answer a question.\n\nDay | Number of photographs\nSaturday | 10\nSunday | 10\nMonday | 6\nTuesday | 4\nWednesday | 4\nThursday | 6\nFriday | 6", "question": "Read the following table regarding \"Photographs taken\" and then write Python code to answer a question.\n\nDay | Number of photographs\nSaturday | 10\nSunday | 10\nMonday | 6\nTuesday | 4\nWednesday | 4\nThursday | 6\nFriday | 6\n\nCarrie looked at the dates of the digital photos on her computer to find out how many she had taken in the past 7 days. What is the mode of the numbers?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nfrom statistics import mode\n\n# Number of photographs taken each day\nphotographs = [10, 10, 6, 4, 4, 6, 6]\n\n# Calculate the mode\nmode_photographs = mode(photographs)\nanswer = mode_photographs\nprint(answer)", "from statistics import mode\n\nphotographs = [10, 10, 6, 4, 4, 6, 6]\nmode_photographs = mode(photographs)\nanswer = int(mode_photographs)  # Convert to integer\nprint(answer)", "from statistics import mode\n\nphotographs = [10, 10, 6, 4, 4, 6, 6]\nmode_photographs = mode(photographs)\nanswer = int(mode_photographs)  # Convert to integer for clarity\nprint(answer)", "from statistics import mode\n\n# List of photographs taken each day\nphotographs = [10, 10, 6, 4, 4, 6, 6]\n\n# Calculate the mode of the photographs\nmode_photographs = mode(photographs)\n\n# Store the result in the answer variable as an integer\nanswer = mode_photographs\n\nprint(answer)"], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nraisins | $2.91/kilogram\nbanana chips | $1.20/kilogram\ndried apple | $3.04/kilogram\ndried pear | $3.14/kilogram\ndried mango | $1.76/kilogram\ndried pineapple | $1.38/kilogram", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nraisins | $2.91/kilogram\nbanana chips | $1.20/kilogram\ndried apple | $3.04/kilogram\ndried pear | $3.14/kilogram\ndried mango | $1.76/kilogram\ndried pineapple | $1.38/kilogram\n\nGabe went to the store. He bought 1 kilogram of raisins. How much did he spend?", "answer": "2.91", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_kilogram_raisins = 2.91 \nkilograms_bought = 1 \nanswer = price_per_kilogram_raisins * kilograms_bought\nprint(answer)", "# Define the price per kilogram of raisins\nprice_per_kilogram_raisins = 2.91 \n\n# Define the number of kilograms bought\nkilograms_bought = 1 \n\n# Calculate the total amount spent\nanswer = price_per_kilogram_raisins * kilograms_bought\n\n# Output the answer\nprint(answer)", "# Define the price per kilogram of raisins and the kilograms bought\nprice_per_kilogram_raisins = 2.91  \nkilograms_bought = 1  \n\n# Calculate the total amount spent\nanswer = price_per_kilogram_raisins * kilograms_bought  \n\n# Print the answer\nprint(answer)", "# Define the price per kilogram of raisins\nprice_per_kilogram_raisins = 2.91  \n# Define the number of kilograms bought\nkilograms_bought = 1  \n# Calculate the total amount spent\nanswer = price_per_kilogram_raisins * kilograms_bought  \nprint(answer)"], "prediction": [2.91, 2.91, 2.91, 2.91], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nMonth | Change in water level (in.)\nApril | -6\nMay | 4", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nMonth | Change in water level (in.)\nApril | -6\nMay | 4\n\nThe houses in Tanvi's town get their water from a local reservoir. Tanvi and a group of engineers monitor the water level for safety and health reasons. The change in water level over two months is shown in the table. During which month did the water level change more? Choose from the the options: ['April', 'May']", "answer": "April", "ques_type": "multi_choice", "choices": ["April", "May"], "code": [
  "# Python code, return answer \nchange_april = abs(-6)  # Water level decreased by 6 inches\nchange_may = abs(4)     # Water level increased by 4 inches\n\n# Determine which month had a greater change in water level\nif change_april > change_may:\n    answer = 'April'\nelse:\n    answer = 'May'\nprint(answer)", "change_april = -6  # Water level decreased by 6 inches\nchange_may = 4     # Water level increased by 4 inches\n\n# Calculate the absolute changes\nabs_change_april = abs(change_april)\nabs_change_may = abs(change_may)\n\n# Determine which month had a greater absolute change\nif abs_change_april > abs_change_may:\n    answer = 'April'\nelse:\n    answer = 'May'\n\nprint(answer)", "change_april = -6  # Water level decreased by 6 inches\nchange_may = 4     # Water level increased by 4 inches\n\n# Calculate absolute changes\nabs_change_april = abs(change_april)\nabs_change_may = abs(change_may)\n\n# Determine which month had the greater absolute change\nif abs_change_april > abs_change_may:\n    answer = 'April'\nelse:\n    answer = 'May'\n\nprint(answer)", "change_april = -6  # Water level decreased by 6 inches\nchange_may = 4     # Water level increased by 4 inches\n\nif change_may > change_april:\n    answer = 'May'\nelse:\n    answer = 'April'\n\nprint(answer)"
], "prediction": ["April", "April", "April", "May"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Actors per movie\" and then answer a question.\n\nStem | Leaf \n2 | 2, 3, 4, 6, 7, 9\n3 | 0, 2, 4, 4, 6, 6, 6, 7\n4 | 2, 3, 5\n5 | \n6 | 5, 6, 6\n7 | 0, 4, 4, 9", "question": "Read the following table regarding \"Actors per movie\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 2, 3, 4, 6, 7, 9\n3 | 0, 2, 4, 4, 6, 6, 6, 7\n4 | 2, 3, 5\n5 | \n6 | 5, 6, 6\n7 | 0, 4, 4, 9\n\nThe movie critic liked to count the number of actors in each movie he saw. What is the smallest number of actors?", "answer": "22", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The smallest number of actors corresponds to the smallest value in the stem-and-leaf display.\nsmallest_actors = 22  # From the stem \"2 | 2\", the value is 22 actors.\nanswer = smallest_actors\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(2, [2, 3, 4, 6, 7, 9]), (3, [0, 2, 4, 4, 6, 6, 6, 7]), (4, [2, 3, 5]), (5, []), (6, [5, 6, 6]), (7, [0, 4, 4, 9])]\n\n# Initialize a variable to hold the smallest number of actors\nsmallest_actors = float('inf')\n\n# Iterate through the stem and leaf data structure and find the smallest number of actors\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        actors_per_movie = stem * 10 + leaf\n        if actors_per_movie < smallest_actors:\n            smallest_actors = actors_per_movie\n\nanswer = smallest_actors\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(2, [2, 3, 4, 6, 7, 9]), \n                 (3, [0, 2, 4, 4, 6, 6, 6, 7]), \n                 (4, [2, 3, 5]), \n                 (5, []), \n                 (6, [5, 6, 6]), \n                 (7, [0, 4, 4, 9])]\n\n# Initialize variable to store the smallest number of actors\nsmallest_actors = float('inf')\n\n# Iterate through the stem and leaf data structure\nfor stem, leaf_list in stem_and_leaf:\n    if leaf_list:  # Check if the leaf list is not empty\n        for leaf in leaf_list:\n            actors_per_movie = stem * 10 + leaf\n            if actors_per_movie < smallest_actors:\n                smallest_actors = actors_per_movie\n\nanswer = smallest_actors\nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [\n    (2, [2, 3, 4, 6, 7, 9]), \n    (3, [0, 2, 4, 4, 6, 6, 6, 7]), \n    (4, [2, 3, 5]), \n    (5, []), \n    (6, [5, 6, 6]), \n    (7, [0, 4, 4, 9])\n]\n\n# Initialize variable for smallest number of actors\nsmallest_actors = float('inf')\n\n# Iterate through the stem and leaf data structure\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        actors_per_movie = stem * 10 + leaf\n        if actors_per_movie < smallest_actors:\n            smallest_actors = actors_per_movie\n\n# Store the result as an integer\nanswer = int(smallest_actors)\n\nprint(answer)"
], "prediction": [22.0, 22.0, 22.0, 22.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Number of houses sold\" and then answer a question.\n\nTown | Number of houses sold\nLivingston | 270\nStamford | 480\nOther | 280", "question": "Read the following table regarding \"Number of houses sold\" and then write Python code to answer a question.\n\nTown | Number of houses sold\nLivingston | 270\nStamford | 480\nOther | 280\n\nA real estate agent evaluated the number of houses sold this year in each town in Taylor County. What fraction of houses sold in Taylor County were in Stamford? Simplify your answer.", "answer": "48/103", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total houses sold in Taylor County\ntotal_houses_sold = 270 + 480 + 280\n# Houses sold in Stamford\nstamford_houses = 480\n# Calculate the fraction of houses sold in Stamford\nfraction_stamford = stamford_houses / total_houses_sold\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_fraction = Fraction(stamford_houses, total_houses_sold).limit_denominator()\nanswer = simplified_fraction\nprint(answer)", "# Define the number of houses sold in each town\nlivingston_houses = 270\nstamford_houses = 480\nother_houses = 280\n\n# Calculate the total number of houses sold\ntotal_houses_sold = livingston_houses + stamford_houses + other_houses\n\n# Calculate the simplified fraction of houses sold in Stamford\nfrom fractions import Fraction\nanswer = Fraction(stamford_houses, total_houses_sold).limit_denominator()\n\nprint(answer)", "# Define the number of houses sold in each town\nlivingston_houses = 270\nstamford_houses = 480\nother_houses = 280\n\n# Calculate the total number of houses sold\ntotal_houses_sold = livingston_houses + stamford_houses + other_houses\n\n# Import the Fraction class to represent the fraction of houses sold in Stamford\nfrom fractions import Fraction\n\n# Calculate the fraction of houses sold in Stamford and simplify it\nanswer = Fraction(stamford_houses, total_houses_sold).limit_denominator()\n\nprint(answer)", "# Define the number of houses sold in each town\nlivingston_houses = 270\nstamford_houses = 480\nother_houses = 280\n\n# Calculate the total number of houses sold\ntotal_houses_sold = livingston_houses + stamford_houses + other_houses\n\n# Import the Fraction class to represent the fraction\nfrom fractions import Fraction\n\n# Calculate the fraction of houses sold in Stamford and simplify it\nanswer = Fraction(stamford_houses, total_houses_sold).limit_denominator()\n\n# Output the answer\nprint(answer)"
], "prediction": [0.46602, 0.46602, 0.46602, 0.46602], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Playing miniature golf last summer\" and then answer a question.\n\nTimes played | Frequency\n0 | 15\n1 | 4\n2 | 8\n3 | 10\n4 | 9", "question": "Read the following table regarding \"Playing miniature golf last summer\" and then write Python code to answer a question.\n\nTimes played | Frequency\n0 | 15\n1 | 4\n2 | 8\n3 | 10\n4 | 9\n\nThe Hillsboro Tourism Office researched how often people played miniature golf last summer. How many people are there in all?", "answer": "46", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of people playing miniature golf\nfrequency = {\n    0: 15,\n    1: 4,\n    2: 8,\n    3: 10,\n    4: 9\n}\n\n# Calculate the total number of people\ntotal_people = sum(frequency.values())\nanswer = total_people\nprint(answer)", "frequency = {\n    0: 15,\n    1: 4,\n    2: 8,\n    3: 10,\n    4: 9\n}\ntotal_people = sum(frequency.values())\nanswer = total_people  # This will be an integer\nprint(answer)", "```python\n", "frequency = {\n    0: 15,\n    1: 4,\n    2: 8,\n    3: 10,\n    4: 9\n}\ntotal_people = sum(frequency.values())\nanswer = int(total_people)  # Convert to integer to ensure the output is not a float\nprint(answer)"], "prediction": [46.0, 46.0, null, 46.0], "report": ["Done", "Done", "SyntaxError('invalid syntax', ('<string>', 1, 1, '```python\\n', 1, 2))", "Done"]
}
{
  "context": "Read the following table regarding \"Trivia game scores\" and then answer a question.\n\nName | Score\nRoger | 28\nBrennan | 29\nManny | 27\nEdward | 25", "question": "Read the following table regarding \"Trivia game scores\" and then write Python code to answer a question.\n\nName | Score\nRoger | 28\nBrennan | 29\nManny | 27\nEdward | 25\n\nSome friends played a trivia game and recorded their scores. Who had the lowest score? Choose from the the options: ['Roger', 'Brennan', 'Manny', 'Edward']", "answer": "Edward", "ques_type": "multi_choice", "choices": ["Roger", "Brennan", "Manny", "Edward"], "code": ["# Python code, return answer \nscores = {\n    'Roger': 28,\n    'Brennan': 29,\n    'Manny': 27,\n    'Edward': 25\n}\n# Find the name with the lowest score\nlowest_score_name = min(scores, key=scores.get)\nanswer = lowest_score_name\nprint(answer)", "scores = {\n    'Roger': 28,\n    'Brennan': 29,\n    'Manny': 27,\n    'Edward': 25\n}\nlowest_score_name = min(scores, key=scores.get)\nanswer = lowest_score_name\nprint(answer)  # Outputting the answer", "# Store the scores in a dictionary\nscores = {\n    'Roger': 28,\n    'Brennan': 29,\n    'Manny': 27,\n    'Edward': 25\n}\n\n# Find the name with the lowest score\nlowest_score_name = min(scores, key=scores.get)\n\n# Store the result in the variable 'answer'\nanswer = lowest_score_name\n\n# Output the answer\nprint(answer)", "# Define the scores of the players in a dictionary\nscores = {\n    'Roger': 28,\n    'Brennan': 29,\n    'Manny': 27,\n    'Edward': 25\n}\n\n# Find the player with the lowest score\nlowest_score_name = min(scores, key=scores.get)\n\n# Store the result in the variable 'answer'\nanswer = lowest_score_name\n\n# Print the answer\nprint(answer)  # This will output: Edward"], "prediction": ["Edward", "Edward", "Edward", "Edward"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of fish bowls | Number of fish\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of fish bowls | Number of fish\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | ?\n\nEach fish bowl has 10 fish. How many fish are in 5 fish bowls?", "answer": "50", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of fish in each bowl\nfish_per_bowl = 10 \n# Number of fish bowls\nnumber_of_bowls = 5 \n# Calculate total number of fish\ntotal_fish = fish_per_bowl * number_of_bowls\nanswer = total_fish\nprint(answer)", "fish_per_bowl = 10 \nnumber_of_bowls = 5 \ntotal_fish = fish_per_bowl * number_of_bowls\nanswer = int(total_fish)  # Convert to integer\nprint(answer)", "fish_per_bowl = 10 \nnumber_of_bowls = 5 \ntotal_fish = fish_per_bowl * number_of_bowls\nanswer = total_fish  # No need to convert to integer\nprint(answer)", "fish_per_bowl = 10 \nnumber_of_bowls = 5 \ntotal_fish = fish_per_bowl * number_of_bowls\nanswer = int(total_fish)  # Convert to integer for whole number representation\nprint(answer)"], "prediction": [50.0, 50.0, 50.0, 50.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbook about basketball | $18.00\nbook about the Olympics | $15.00\nbook about sharks | $19.00\nbook about cats | $24.00\nbook about hiking | $14.00\nbook about trains | $17.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbook about basketball | $18.00\nbook about the Olympics | $15.00\nbook about sharks | $19.00\nbook about cats | $24.00\nbook about hiking | $14.00\nbook about trains | $17.00\n\nErin has $39.00. Does she have enough to buy a book about sharks and a book about basketball? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \n# Prices of the books\nprice_basketball = 18.00\nprice_sharks = 19.00\n# Total cost for both books\ntotal_cost = price_basketball + price_sharks\n# Erin's budget\nerin_budget = 39.00\n# Check if Erin has enough money\nif erin_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "# Define the prices of the books\nprice_basketball = 18.00\nprice_sharks = 19.00\n\n# Calculate the total cost of the books\ntotal_cost = price_basketball + price_sharks\n\n# Define Erin's budget\nerin_budget = 39.00\n\n# Check if Erin has enough money to buy the books\nif erin_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "price_basketball = 18.00\nprice_sharks = 19.00\ntotal_cost = price_basketball + price_sharks\nerin_budget = 39.00\n\nif erin_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the prices of the books\nprice_basketball = 18.00\nprice_sharks = 19.00\n\n# Calculate the total cost\ntotal_cost = price_basketball + price_sharks\n\n# Define Erin's budget\nerin_budget = 39.00\n\n# Check if Erin can afford the books\nanswer = 'yes' if erin_budget >= total_cost else 'no'\n\nprint(answer)"], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nfleece blanket | $12.00\npillow | $13.00\nquilt | $46.00\nnavy blue bath mat | $15.00\nyellow bath towel | $14.00\nflannel sheet | $24.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nfleece blanket | $12.00\npillow | $13.00\nquilt | $46.00\nnavy blue bath mat | $15.00\nyellow bath towel | $14.00\nflannel sheet | $24.00\n\nHow much money does Edward need to buy 2 navy blue bath mats?", "answer": "30", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_bath_mat = 15.00 \nnumber_of_bath_mats = 2 \ntotal_cost = price_per_bath_mat * number_of_bath_mats\nanswer = total_cost\nprint(answer)", "# Define the price per navy blue bath mat and the number of bath mats Edward wants to buy\nprice_per_bath_mat = 15.00  \nnumber_of_bath_mats = 2  \n\n# Calculate the total cost\ntotal_cost = price_per_bath_mat * number_of_bath_mats  \n\n# Store the result in the variable 'answer'\nanswer = total_cost  \n\n# Output the answer\nprint(answer)", "price_per_bath_mat = 15.00  \nnumber_of_bath_mats = 2  \ntotal_cost = price_per_bath_mat * number_of_bath_mats  \nanswer = int(total_cost)  # Convert to integer to remove the decimal point\nprint(answer)", "price_per_bath_mat = 15.00  \nnumber_of_bath_mats = 2  \ntotal_cost = price_per_bath_mat * number_of_bath_mats  \nanswer = total_cost  # Keep as float for currency representation\nprint(answer)"], "prediction": [30.0, 30.0, 30.0, 30.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Hours of babysitting\" and then answer a question.\n\nMonth | Hours\nNovember | 8\nDecember | 6\nJanuary | 8\nFebruary | 6\nMarch | 6\nApril | 9\nMay | 9", "question": "Read the following table regarding \"Hours of babysitting\" and then write Python code to answer a question.\n\nMonth | Hours\nNovember | 8\nDecember | 6\nJanuary | 8\nFebruary | 6\nMarch | 6\nApril | 9\nMay | 9\n\nLillian looked at her calendar to figure out how much time she spent babysitting each month. What is the mode of the numbers?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nhours = [8, 6, 8, 6, 6, 9, 9]\n# Finding the mode\nfrom statistics import mode\nanswer = mode(hours)\nprint(answer)", "hours = [8, 6, 8, 6, 6, 9, 9]\nfrom statistics import mode\nanswer = int(mode(hours))  # Convert the mode to an integer\nprint(answer)", "hours = [8, 6, 8, 6, 6, 9, 9]\nfrom statistics import mode\nanswer = mode(hours)  # The mode will be an integer\nprint(answer)", "hours = [8, 6, 8, 6, 6, 9, 9]\nfrom statistics import mode\nanswer = int(mode(hours))  # Convert the mode to an integer\nprint(answer)"], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$540 | 21,300 | 8,100\n$590 | 18,700 | 10,600\n$640 | 16,100 | 13,100\n$690 | 13,500 | 15,600\n$740 | 10,900 | 18,100", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$540 | 21,300 | 8,100\n$590 | 18,700 | 10,600\n$640 | 16,100 | 13,100\n$690 | 13,500 | 15,600\n$740 | 10,900 | 18,100\n\nLook at the table. Then answer the question. At a price of $690, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "surplus", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": [
  "# Python code, return answer \n# Quantity demanded and supplied at the price of $690\nquantity_demanded_at_690 = 13500\nquantity_supplied_at_690 = 15600\n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_690 < quantity_supplied_at_690:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the quantities based on the table\nquantity_demanded_at_690 = 13500  # Quantity demanded at price $690\nquantity_supplied_at_690 = 15600   # Quantity supplied at price $690\n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_690 < quantity_supplied_at_690:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Correctly define the quantity demanded and supplied at the price of $690\nquantity_demanded_at_690 = 13500  # Quantity demanded at price $690\nquantity_supplied_at_690 = 15600   # Quantity supplied at price $690\n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_690 < quantity_supplied_at_690:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Correct values based on the table\nquantity_demanded_at_690 = 13500  # Quantity demanded at price $690\nquantity_supplied_at_690 = 15600   # Quantity supplied at price $690\n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_690 < quantity_supplied_at_690:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)"
], "prediction": ["surplus", "surplus", "surplus", "surplus"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Donations received\" and then answer a question.\n\nCause | March | April\nParks | $4 | $6\nEducation | $19 | $7\nHunger | $18 | $10\nAnimals | $10 | $17", "question": "Read the following table regarding \"Donations received\" and then write Python code to answer a question.\n\nCause | March | April\nParks | $4 | $6\nEducation | $19 | $7\nHunger | $18 | $10\nAnimals | $10 | $17\n\nA county agency recorded the money donated to several charitable causes over time. How much money was raised for animals in March?", "answer": "10", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Amount of money raised for animals in March\ndonations_animals_march = 10  # From the table\nanswer = donations_animals_march\nprint(answer)", "# Store the donations in a dictionary for better structure\ndonations = {\n    'Parks': {'March': 4.0, 'April': 6.0},\n    'Education': {'March': 19.0, 'April': 7.0},\n    'Hunger': {'March': 18.0, 'April': 10.0},\n    'Animals': {'March': 10.0, 'April': 17.0}\n}\n\n# Access the donation amount for animals in March\ndonations_animals_march = donations['Animals']['March']\nanswer = donations_animals_march\nprint(answer)", "donations = {\n    'Parks': {'March': 4.0, 'April': 6.0},\n    'Education': {'March': 19.0, 'April': 7.0},\n    'Hunger': {'March': 18.0, 'April': 10.0},\n    'Animals': {'March': 10.0, 'April': 17.0}\n}\n\n# Extract the amount raised for animals in March\nanswer = donations['Animals']['March']\nprint(answer)", "# Define the donations data structure\ndonations = {\n    'Parks': {'March': 4.0, 'April': 6.0},\n    'Education': {'March': 19.0, 'April': 7.0},\n    'Hunger': {'March': 18.0, 'April': 10.0},\n    'Animals': {'March': 10.0, 'April': 17.0}\n}\n\n# Retrieve the amount raised for animals in March\nanswer = donations['Animals']['March']\nprint(answer)"], "prediction": [10.0, 10.0, 10.0, 10.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nDate | Description | Received | Expenses | Available Funds\n | Balance: end of June | | | $450.70\n7/5 | cleaning the Hoffmans' pool | $15.00 | | $465.70\n7/17 | bottle of water | | $1.50 | $464.20\n7/29 | swim trunks | | $16.80 | $447.40", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nDate | Description | Received | Expenses | Available Funds\n | Balance: end of June | | | $450.70\n7/5 | cleaning the Hoffmans' pool | $15.00 | | $465.70\n7/17 | bottle of water | | $1.50 | $464.20\n7/29 | swim trunks | | $16.80 | $447.40\n\nThis is Duncan's complete financial record for July. On July 5, how much money did Duncan make?", "answer": "15", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Money Duncan made on July 5\nmoney_made_july_5 = 15.00\nanswer = money_made_july_5\nprint(answer)", "# Amount of money Duncan made on July 5\nmoney_made_july_5 = 15.00\n\n# Assign the result to the answer variable\nanswer = money_made_july_5\n\n# Print the result with context\nprint(f\"Duncan made ${answer} on July 5.\")", "money_made_july_5 = 15.00\nanswer = money_made_july_5\nprint(answer)", "# Financial record for July\ntransactions = {\n    '7/5': {'description': \"cleaning the Hoffmans' pool\", 'received': 15.00, 'expenses': 0.00},\n    '7/17': {'description': \"bottle of water\", 'received': 0.00, 'expenses': 1.50},\n    '7/29': {'description': \"swim trunks\", 'received': 0.00, 'expenses': 16.80}\n}\n\n# Calculate total money made in July\ntotal_money_made = transactions['7/5']['received']\n\nanswer = total_money_made\nprint(answer)"], "prediction": [15.0, 15.0, 15.0, 15.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Sports team membership\" and then answer a question.\n\nTeam | Number of members\nbaseball team | 38\nfootball team | 37\nwater polo team | 34\nvolleyball team | 35", "question": "Read the following table regarding \"Sports team membership\" and then write Python code to answer a question.\n\nTeam | Number of members\nbaseball team | 38\nfootball team | 37\nwater polo team | 34\nvolleyball team | 35\n\nGrace's school reported how many members each sports team had. Which team has the most members? Choose from the the options: ['baseball team', 'football team', 'water polo team', 'volleyball team']", "answer": "baseball team", "ques_type": "multi_choice", "choices": ["baseball team", "football team", "water polo team", "volleyball team"], "code": ["# Python code, return answer \nteams = {\n    'baseball team': 38,\n    'football team': 37,\n    'water polo team': 34,\n    'volleyball team': 35\n}\n# Find the team with the most members\nmost_members_team = max(teams, key=teams.get)\nanswer = most_members_team\nprint(answer)", "teams = {\n    'baseball team': 38,\n    'football team': 37,\n    'water polo team': 34,\n    'volleyball team': 35\n}\nmost_members_team = max(teams, key=teams.get)\nanswer = most_members_team\nprint(answer)", "# Store the teams and their corresponding number of members in a dictionary\nteams = {\n    'baseball team': 38,\n    'football team': 37,\n    'water polo team': 34,\n    'volleyball team': 35\n}\n\n# Use the max function to find the team with the most members\nmost_members_team = max(teams, key=teams.get)\n\n# Store the result in the answer variable\nanswer = most_members_team\n\n# Output the answer\nprint(answer)", "teams = {\n    'baseball team': 38,\n    'football team': 37,\n    'water polo team': 34,\n    'volleyball team': 35\n}\nmost_members_team = max(teams, key=teams.get)\nanswer = most_members_team\nprint(answer)"], "prediction": ["baseball team", "baseball team", "baseball team", "baseball team"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$430 | 17,800 | 5,000\n$480 | 14,200 | 8,700\n$530 | 10,600 | 12,400\n$580 | 7,000 | 16,100\n$630 | 3,400 | 19,800", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$430 | 17,800 | 5,000\n$480 | 14,200 | 8,700\n$530 | 10,600 | 12,400\n$580 | 7,000 | 16,100\n$630 | 3,400 | 19,800\n\nLook at the table. Then answer the question. At a price of $580, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "surplus", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": ["# Python code, return answer \n# Given values at a price of $580\nquantity_demanded = 7000\nquantity_supplied = 16100\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the quantities demanded and supplied at a price of $580\nquantity_demanded = 7000\nquantity_supplied = 16100\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "quantity_demanded = 7000\nquantity_supplied = 16100\n\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelse:\n    answer = 'equilibrium'\n\nprint(answer)", "# Define the quantities demanded and supplied at the price of $580\nquantity_demanded = 7000\nquantity_supplied = 16100\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelse:\n    answer = 'equilibrium'\n\nprint(answer)"], "prediction": ["surplus", "surplus", "surplus", "surplus"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Trips to the science museum last year\" and then answer a question.\n\nNumber of trips | Frequency\n0 | 3\n1 | 6\n2 | 2\n3 | 5\n4 | 12\n5 | 1\n6 | 13", "question": "Read the following table regarding \"Trips to the science museum last year\" and then write Python code to answer a question.\n\nNumber of trips | Frequency\n0 | 3\n1 | 6\n2 | 2\n3 | 5\n4 | 12\n5 | 1\n6 | 13\n\nMrs. Roy, the biology teacher, asked her students how many times they went to the science museum last year. How many students went to the science museum more than 1 time?", "answer": "33", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Frequency of students based on the number of trips\nfrequency = {\n    0: 3,\n    1: 6,\n    2: 2,\n    3: 5,\n    4: 12,\n    5: 1,\n    6: 13\n}\n\n# Calculate the number of students who went more than 1 time\nstudents_more_than_one = sum(frequency[trips] for trips in frequency if trips > 1)\nanswer = students_more_than_one\nprint(answer)", "# Define the frequency dictionary\nfrequency = {\n    0: 3,\n    1: 6,\n    2: 2,\n    3: 5,\n    4: 12,\n    5: 1,\n    6: 13\n}\n\n# Calculate the number of students who went to the science museum more than 1 time\nstudents_more_than_one = sum(frequency[trips] for trips in frequency if trips > 1)\n\n# Store the result in the answer variable\nanswer = students_more_than_one\n\n# Output the answer\nprint(answer)", "# Define the frequency of trips to the science museum\nfrequency = {\n    0: 3,\n    1: 6,\n    2: 2,\n    3: 5,\n    4: 12,\n    5: 1,\n    6: 13\n}\n\n# Calculate the number of students who went to the museum more than 1 time\nstudents_more_than_one = sum(frequency[trips] for trips in frequency if trips > 1)\n\n# Store the result in the variable 'answer'\nanswer = students_more_than_one\n\n# Output the answer\nprint(answer)", "# Define the frequency of trips to the science museum\nfrequency = {\n    0: 3,\n    1: 6,\n    2: 2,\n    3: 5,\n    4: 12,\n    5: 1,\n    6: 13\n}\n\n# Calculate the number of students who went to the museum more than once\nstudents_more_than_one = sum(frequency[trips] for trips in frequency if trips > 1)\n\n# Store the result in the answer variable\nanswer = students_more_than_one\n\n# Output the answer\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'frequency' is not defined\")", "NameError(\"name 'frequency' is not defined\")", "NameError(\"name 'frequency' is not defined\")", "NameError(\"name 'frequency' is not defined\")"]
}
{
  "context": "Read the following table regarding \"Spelling test scores\" and then answer a question.\n\nStem | Leaf \n1 | 7\n2 | 2, 8\n3 | 0, 5, 5, 8, 9\n4 | 5, 7, 8\n5 | 8, 9\n6 | 2, 6, 7\n7 | 1, 2, 5, 7, 8, 8, 9\n8 | 1\n9 | 0", "question": "Read the following table regarding \"Spelling test scores\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 7\n2 | 2, 8\n3 | 0, 5, 5, 8, 9\n4 | 5, 7, 8\n5 | 8, 9\n6 | 2, 6, 7\n7 | 1, 2, 5, 7, 8, 8, 9\n8 | 1\n9 | 0\n\nThis morning, Mr. Molina released the scores from last week's spelling test. How many students scored at least 58 points?", "answer": "14", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Extract scores from the stem-and-leaf display that are at least 58\nscores = [\n    17,      # Stem 1\n    22, 28,  # Stem 2\n    30, 35, 35, 38, 39,  # Stem 3\n    45, 47, 48,  # Stem 4\n    58, 59,  # Stem 5\n    62, 66, 67,  # Stem 6\n    71, 72, 75, 77, 78, 78, 79,  # Stem 7\n    81,  # Stem 8\n    90  # Stem 9\n]\n\n# Count how many scores are at least 58\ncount_at_least_58 = sum(1 for score in scores if score >= 58)\nanswer = count_at_least_58\nprint(answer)", "scores = [\n    17,      # Stem 1\n    22, 28,  # Stem 2\n    30, 35, 35, 38, 39,  # Stem 3\n    45, 47, 48,  # Stem 4\n    58, 59,  # Stem 5\n    62, 66, 67,  # Stem 6\n    71, 72, 75, 77, 78, 78, 79,  # Stem 7\n    81,  # Stem 8\n    90  # Stem 9\n]\ncount_at_least_58 = sum(1 for score in scores if score >= 58)\nanswer = int(count_at_least_58)  # Ensure the count is an integer\nprint(answer)", "scores = [\n    17,      # Stem 1\n    22, 28,  # Stem 2\n    30, 35, 35, 38, 39,  # Stem 3\n    45, 47, 48,  # Stem 4\n    58, 59,  # Stem 5\n    62, 66, 67,  # Stem 6\n    71, 72, 75, 77, 78, 78, 79,  # Stem 7\n    81,  # Stem 8\n    90  # Stem 9\n]\ncount_at_least_58 = sum(1 for score in scores if score >= 58)\nanswer = count_at_least_58  # No need to convert to int\nprint(answer)", "scores = [\n    17,      # Stem 1\n    22, 28,  # Stem 2\n    30, 35, 35, 38, 39,  # Stem 3\n    45, 47, 48,  # Stem 4\n    58, 59,  # Stem 5\n    62, 66, 67,  # Stem 6\n    71, 72, 75, 77, 78, 78, 79,  # Stem 7\n    81,  # Stem 8\n    90  # Stem 9\n]\n\ncount_at_least_58 = sum(1 for score in scores if score >= 58)\nanswer = count_at_least_58  # This will be an integer\nprint(answer)"
], "prediction": [14.0, 14.0, 14.0, 14.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Stop signs\" and then answer a question.\n\nStreet | Number of stop signs\nIrving Street | 3\nJackson Street | 10\nPeabody Street | 6\nWatson Street | 5\nMarshall Street | 5\nSpring Street | 7", "question": "Read the following table regarding \"Stop signs\" and then write Python code to answer a question.\n\nStreet | Number of stop signs\nIrving Street | 3\nJackson Street | 10\nPeabody Street | 6\nWatson Street | 5\nMarshall Street | 5\nSpring Street | 7\n\nThe town council reported on how many stop signs there are on each street. What is the mean of the numbers?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of the number of stop signs on each street\nstop_signs = [3, 10, 6, 5, 5, 7]\n# Calculate the mean\nmean_stop_signs = sum(stop_signs) / len(stop_signs)\nanswer = mean_stop_signs\nprint(answer)", "stop_signs = [3, 10, 6, 5, 5, 7]\nmean_stop_signs = sum(stop_signs) / len(stop_signs)\nanswer = round(mean_stop_signs, 2)  # Round to 2 decimal places for clarity\nprint(answer)", "stop_signs = [3, 10, 6, 5, 5, 7]\nmean_stop_signs = sum(stop_signs) / len(stop_signs)\nanswer = mean_stop_signs  # Store the mean in the variable answer\nprint(answer)", "stop_signs = [3, 10, 6, 5, 5, 7]\nmean_stop_signs = sum(stop_signs) / len(stop_signs)\nanswer = round(mean_stop_signs, 2)  # Round the mean to 2 decimal places for better formatting\nprint(answer)"], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n3 | 16\n19 | 2\n19 | 4\n13 | 18", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n3 | 16\n19 | 2\n19 | 4\n13 | 18\n\nLook at this table. Is this relation a function? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# A relation is a function if each input (x value) is associated with exactly one output (y value).\n# We will check if any x value is associated with more than one y value.\nx_values = [3, 19, 19, 13]\ny_values = [16, 2, 4, 18]\n\n# Create a dictionary to track occurrences of x values\nx_to_y = {}\nfor x, y in zip(x_values, y_values):\n    if x in x_to_y:\n        x_to_y[x].add(y)\n    else:\n        x_to_y[x] = {y}\n\n# Check if any x has more than one corresponding y\nis_function = all(len(y_set) == 1 for y_set in x_to_y.values())\n\nanswer = 'yes' if is_function else 'no'\nprint(answer)", "# Define the x and y values\nx_values = [3, 19, 19, 13]\ny_values = [16, 2, 4, 18]\n\n# Create a dictionary to map x values to y values\nx_to_y = {}\nfor x, y in zip(x_values, y_values):\n    if x in x_to_y:\n        # If the x value already exists, check if the new y is different\n        if x_to_y[x] != y:\n            answer = 'no'  # Found a different y for the same x\n            break\n    else:\n        x_to_y[x] = y\nelse:\n    answer = 'yes'  # No conflicting y values found\n\nprint(answer)", "# Define the x and y values\nx_values = [3, 19, 19, 13]\ny_values = [16, 2, 4, 18]\n\n# Create a dictionary to map x to y\nx_to_y = {}\n\n# Check for function validity\nfor x, y in zip(x_values, y_values):\n    if x in x_to_y:\n        if x_to_y[x] != y:\n            answer = 'no'  # Found a different y for the same x\n            break\n    else:\n        x_to_y[x] = y\nelse:\n    answer = 'yes'  # No conflicting y values found\n\nprint(answer)", "x_values = [3, 19, 19, 13]\ny_values = [16, 2, 4, 18]\nx_to_y = {}\nis_function = True  # Assume it's a function until proven otherwise\n\nfor x, y in zip(x_values, y_values):\n    if x in x_to_y:\n        if x_to_y[x] != y:\n            is_function = False  # Found a different y for the same x\n            break\n    else:\n        x_to_y[x] = y\n\nanswer = 'yes' if is_function else 'no'\nprint(answer)"
], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of desks | Number of yellow notepads\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of desks | Number of yellow notepads\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | ?\n\nEach desk has 5 yellow notepads. How many yellow notepads are on 5 desks?", "answer": "25", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nnumber_of_desks = 5 \nnotepads_per_desk = 5 \n# Calculate the total number of yellow notepads for 5 desks\ntotal_notepads = number_of_desks * notepads_per_desk\nanswer = total_notepads\nprint(answer)", "number_of_desks = 5 \nnotepads_per_desk = 5 \ntotal_notepads = number_of_desks * notepads_per_desk\nanswer = int(total_notepads)  # Convert to integer\nprint(answer)", "number_of_desks = 5 \nnotepads_per_desk = 5 \ntotal_notepads = number_of_desks * notepads_per_desk\nanswer = total_notepads  # No need to convert to integer\nprint(answer)", "number_of_desks = 5 \nnotepads_per_desk = 5 \ntotal_notepads = number_of_desks * notepads_per_desk\nanswer = total_notepads  # This will be an integer\nprint(answer)"], "prediction": [25.0, 25.0, 25.0, 25.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of bags | Number of yellow buttons\n1 | 10\n2 | 20\n3 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of bags | Number of yellow buttons\n1 | 10\n2 | 20\n3 | ?\n\nEach bag has 10 yellow buttons. How many yellow buttons are in 3 bags?", "answer": "30", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Each bag has 10 yellow buttons\nyellow_buttons_per_bag = 10 \n# Number of bags\nnumber_of_bags = 3 \n# Calculate total yellow buttons in 3 bags\ntotal_yellow_buttons = yellow_buttons_per_bag * number_of_bags\nanswer = total_yellow_buttons\nprint(answer)", "yellow_buttons_per_bag = 10 \nnumber_of_bags = 3 \ntotal_yellow_buttons = yellow_buttons_per_bag * number_of_bags\nanswer = int(total_yellow_buttons)  # Convert to integer to avoid float output\nprint(answer)", "```python\nyellow_buttons_per_bag =", "yellow_buttons_per_bag = 10 \nnumber_of_bags = 3 \ntotal_yellow_buttons = yellow_buttons_per_bag * number_of_bags\nanswer = total_yellow_buttons  # No need to convert to integer\nprint(answer)"], "prediction": [30.0, 30.0, null, 30.0], "report": ["Done", "Done", "SyntaxError('invalid syntax', ('<string>', 1, 1, '```python\\n', 1, 2))", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of bags | Number of yellow buttons\n1 | 5\n2 | 10\n3 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of bags | Number of yellow buttons\n1 | 5\n2 | 10\n3 | ?\n\nEach bag has 5 yellow buttons. How many yellow buttons are in 3 bags?", "answer": "15", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Each bag has 5 yellow buttons\nyellow_buttons_per_bag = 5\n# Number of bags\nnumber_of_bags = 3\n# Calculate total yellow buttons in 3 bags\ntotal_yellow_buttons = yellow_buttons_per_bag * number_of_bags\nanswer = total_yellow_buttons\nprint(answer)", "yellow_buttons_per_bag = 5\nnumber_of_bags = 3\ntotal_yellow_buttons = yellow_buttons_per_bag * number_of_bags\nanswer = total_yellow_buttons  # This will be an integer\nprint(answer)", "yellow_buttons_per_bag = 5\nnumber_of_bags = 3\ntotal_yellow_buttons = yellow_buttons_per_bag * number_of_bags\nanswer = int(total_yellow_buttons)  # Ensuring the result is an integer\nprint(answer)", "yellow_buttons_per_bag = 5\nnumber_of_bags = 3\ntotal_yellow_buttons = yellow_buttons_per_bag * number_of_bags\nanswer = total_yellow_buttons  # The result is already an integer\nprint(answer)"], "prediction": [15.0, 15.0, 15.0, 15.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ncatfish | $9 per lb\nhalibut | $10 per lb\ntilapia | $4 per lb\nsalmon | $4 per lb\ntuna | $6 per lb\ntrout | $7 per lb", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ncatfish | $9 per lb\nhalibut | $10 per lb\ntilapia | $4 per lb\nsalmon | $4 per lb\ntuna | $6 per lb\ntrout | $7 per lb\n\nHenry went to the store and bought 3.7 pounds of salmon. How much did he spend?", "answer": "14.80", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_salmon = 4  # price of salmon per pound\npounds_bought = 3.7          # pounds of salmon bought\n# Calculate total cost\ntotal_cost = price_per_pound_salmon * pounds_bought\nanswer = total_cost\nprint(answer)", "price_per_pound_salmon = 4  # price of salmon per pound\npounds_bought = 3.7          # pounds of salmon bought\ntotal_cost = price_per_pound_salmon * pounds_bought\nanswer = f\"${total_cost:.2f}\"  # format as currency\nprint(answer)", "# Price of salmon per pound based on the given table\nprice_per_pound_salmon = 4  # price of salmon per lb\npounds_bought = 3.7          # pounds of salmon bought\n\n# Calculate total cost\ntotal_cost = price_per_pound_salmon * pounds_bought\n\n# Format the total cost as currency\nanswer = f\"${total_cost:.2f}\"  # format as currency\nprint(answer)", "# Define the price per pound of salmon and the pounds bought\nprice_per_pound_salmon = 4  # price of salmon per lb\npounds_bought = 3.7          # pounds of salmon bought\n\n# Calculate the total cost\ntotal_cost = price_per_pound_salmon * pounds_bought\n\n# Format the total cost as currency\nanswer = f\"${total_cost:.2f}\"  # format as currency\n\nprint(answer)"], "prediction": [14.8, "$14.80", "$14.80", "$14.80"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | A tent | Matches\nDesert | 6 | 7\nRainforest | 2 | 5", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | A tent | Matches\nDesert | 6 | 7\nRainforest | 2 | 5\n\nIn the first episode of a reality show, contestants had to spin two wheels of fate. Spinning the first wheel determined the remote location where contestants would reside for the duration of the season. Spinning the second wheel determined which \"bonus survival tool\" they would be allowed to bring, along with a few other necessary items. What is the probability that a randomly selected participant spun the first wheel and landed on desert and spun the second wheel and landed on a tent? Simplify any fractions.", "answer": "3/10", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total possible outcomes for each wheel\ntotal_locations = 2  # Desert, Rainforest\ntotal_tools = 2      # Tent, Matches\n\n# Probability of landing on Desert and then on Tent\nprobability_desert = 1 / total_locations\nprobability_tent = 1 / total_tools\n\n# Combined probability of both events happening\ncombined_probability = probability_desert * probability_tent\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(combined_probability).limit_denominator()\n\nanswer = simplified_probability\nprint(answer)", "# Define the total outcomes for both wheels\ntotal_locations = 2  # Desert, Rainforest\ntotal_tools = 2      # Tent, Matches\n\n# Calculate the probability of landing on desert and tent\nprobability_desert = 1 / total_locations  # Probability of landing on Desert\nprobability_tent = 1 / total_tools          # Probability of landing on Tent\n\n# Combined probability\ncombined_probability = probability_desert * probability_tent\n\n# Since there are 4 possible outcomes (Desert-Tent, Desert-Matches, Rainforest-Tent, Rainforest-Matches)\ntotal_outcomes = total_locations * total_tools\n\n# Calculate the combined probability as a fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(1, total_outcomes)  # Only 1 favorable outcome (Desert-Tent)\n\nanswer = simplified_probability\nprint(answer)", "# Define total outcomes\ntotal_locations = 2  # Desert, Rainforest\ntotal_tools = 2      # Tent, Matches\n\n# Calculate the probability of landing on Desert and Tent\nprobability_desert = 1 / total_locations  # Probability of landing on Desert\nprobability_tent = 1 / total_tools          # Probability of landing on Tent\n\n# Combined probability\ncombined_probability = probability_desert * probability_tent\n\n# Representing the combined probability as a fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(combined_probability).limit_denominator()\n\n# Assigning the final result to answer\nanswer = simplified_probability\nprint(answer)", "# Define the counts from the table\ndesert_tents = 6\nrainforest_tents = 2\ndesert_matches = 7\nrainforest_matches = 5\n\n# Total items for each location\ntotal_items_desert = desert_tents + desert_matches\ntotal_items_rainforest = rainforest_tents + rainforest_matches\n\n# Total locations\ntotal_locations = 2  # Desert, Rainforest\n\n# Probability of selecting Desert and then selecting Tent\nprobability_desert = 1 / total_locations  # Probability of landing on Desert\nprobability_tent_given_desert = desert_tents / total_items_desert  # Probability of landing on Tent given Desert\n\n# Combined probability\ncombined_probability = probability_desert * probability_tent_given_desert\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(combined_probability).limit_denominator()\n\nanswer = simplified_probability\nprint(answer)"
], "prediction": [0.25, 0.25, 0.25, 0.23077], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nMonth | Change in water level (in.)\nApril | -6\nMay | 4", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nMonth | Change in water level (in.)\nApril | -6\nMay | 4\n\nThe houses in Krysta's town get their water from a local reservoir. Krysta and a group of engineers monitor the water level for safety and health reasons. The change in water level over two months is shown in the table. During which month did the water level change more? Choose from the the options: ['April', 'May']", "answer": "April", "ques_type": "multi_choice", "choices": ["April", "May"], "code": ["# Python code, return answer \nchange_april = abs(-6)  # Water level decreased by 6 inches\nchange_may = abs(4)     # Water level increased by 4 inches\n\n# Determine which month had a greater change in water level\nif change_april > change_may:\n    answer = 'April'\nelse:\n    answer = 'May'\nprint(answer)", "change_april = -6  # Water level decreased by 6 inches\nchange_may = 4     # Water level increased by 4 inches\n\n# Calculate the absolute changes\nabs_change_april = abs(change_april)\nabs_change_may = abs(change_may)\n\n# Determine which month had the greater change\nif abs_change_april > abs_change_may:\n    answer = 'April'\nelse:\n    answer = 'May'\n\nprint(answer)", "change_april = -6  # Water level decreased by 6 inches\nchange_may = 4     # Water level increased by 4 inches\n\nif change_april < change_may:\n    answer = 'May'  # Greater increase in water level\nelse:\n    answer = 'April'  # Greater decrease in water level\n\nprint(answer)", "change_april = -6  # Water level decreased by 6 inches\nchange_may = 4     # Water level increased by 4 inches\n\n# Compare absolute changes in water level\nif abs(change_april) > abs(change_may):\n    answer = 'April'  # Greater absolute change in water level\nelse:\n    answer = 'May'  # Greater absolute change in water level\n\nprint(answer)"], "prediction": ["April", "April", "May", "April"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbook about Asia | $6\nbook about Antarctica | $8\nbook about Australia | $7\nbook about hiking | $5\nbook about Europe | $7\nbook about cars | $5", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbook about Asia | $6\nbook about Antarctica | $8\nbook about Australia | $7\nbook about hiking | $5\nbook about Europe | $7\nbook about cars | $5\n\nHow much money does Percy need to buy a book about hiking and a book about Australia?", "answer": "12", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_hiking = 5 \nprice_australia = 7 \n# Total cost for both books\ntotal_cost = price_hiking + price_australia\nanswer = total_cost\nprint(answer)", "# Prices of the books\nprice_hiking = 5 \nprice_australia = 7 \n\n# Calculate the total cost\ntotal_cost = price_hiking + price_australia\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "price_hiking = 5 \nprice_australia = 7 \ntotal_cost = price_hiking + price_australia\nanswer = total_cost  # total_cost is already an integer\nprint(answer)", "price_hiking = 5 \nprice_australia = 7 \ntotal_cost = price_hiking + price_australia\nanswer = total_cost  # total_cost is already an integer\nprint(answer)"], "prediction": [12.0, 12.0, 12.0, 12.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Horizontally | Vertically\n50 photos | 5 | 2\n100 photos | 5 | 5", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Horizontally | Vertically\n50 photos | 5 | 2\n100 photos | 5 | 5\n\nDanielle just returned from a spring break volunteer trip. She is shopping for a photo album that will showcase her photos from the trip. The albums range in photo capacity and orientation. What is the probability that a randomly selected photo album holds exactly 100 photos and is oriented vertically? Simplify any fractions.", "answer": "5/17", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total number of albums\ntotal_albums = 2  # 50 photos album and 100 photos album\n\n# Number of albums that hold exactly 100 photos and are oriented vertically\nalbums_100_photos_vertically = 1  # Only one album with 100 photos and vertical orientation\n\n# Calculate the probability\nprobability = albums_100_photos_vertically / total_albums\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(albums_100_photos_vertically, total_albums).limit_denominator()\n\nanswer = simplified_probability\nprint(answer)", "# Define the number of albums for each capacity and orientation\nalbums_50_photos = 2  # 50 photos album: 1 horizontal + 1 vertical\nalbums_100_photos = 2  # 100 photos album: 1 horizontal + 1 vertical\n\n# Total number of albums\ntotal_albums = albums_50_photos + albums_100_photos\n\n# Number of albums that hold exactly 100 photos and are oriented vertically\nalbums_100_photos_vertically = 1  # Only one album with 100 photos and vertical orientation\n\n# Calculate the probability\nprobability = albums_100_photos_vertically / total_albums\n\n# Simplify the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(albums_100_photos_vertically, total_albums).limit_denominator()\n\n# Store the result\nanswer = simplified_probability\nprint(answer)", "# Define the number of photo albums based on their capacity and orientation\nalbums_50_photos_horizontal = 1  # 50 photos album: horizontal\nalbums_50_photos_vertical = 1    # 50 photos album: vertical\nalbums_100_photos_horizontal = 1  # 100 photos album: horizontal\nalbums_100_photos_vertical = 1    # 100 photos album: vertical\n\n# Calculate the total number of albums\ntotal_albums = (albums_50_photos_horizontal + albums_50_photos_vertical +\n                 albums_100_photos_horizontal + albums_100_photos_vertical)\n\n# There is only one album with 100 photos and vertical orientation\nalbums_100_photos_vertically = albums_100_photos_vertical\n\n# Calculate the probability\nprobability = albums_100_photos_vertically / total_albums\n\n# Simplify the probability using fractions\nfrom fractions import Fraction\nsimplified_probability = Fraction(albums_100_photos_vertically, total_albums).limit_denominator()\n\n# Store the result in the answer variable\nanswer = simplified_probability\nprint(answer)", "# Define the number of albums based on the table data\nalbums_50_photos_horizontal = 5  # 50 photos album: horizontal\nalbums_50_photos_vertical = 2    # 50 photos album: vertical\nalbums_100_photos_horizontal = 5  # 100 photos album: horizontal\nalbums_100_photos_vertical = 5    # 100 photos album: vertical\n\n# Calculate the total number of albums\ntotal_albums = (albums_50_photos_horizontal + albums_50_photos_vertical +\n                 albums_100_photos_horizontal + albums_100_photos_vertical)\n\n# The number of albums that hold exactly 100 photos and are oriented vertically\nalbums_100_photos_vertically = albums_100_photos_vertical\n\n# Calculate the probability\nprobability = albums_100_photos_vertically / total_albums\n\n# Simplify the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(albums_100_photos_vertically, total_albums).limit_denominator()\n\nanswer = simplified_probability\nprint(answer)"
], "prediction": [0.5, 0.25, 0.25, 0.29412], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nquilt | $35.11\nyellow bath towel | $17.99\npillow | $12.75\nfleece blanket | $14.08\nflannel sheet | $19.47\nbeach blanket | $13.52", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nquilt | $35.11\nyellow bath towel | $17.99\npillow | $12.75\nfleece blanket | $14.08\nflannel sheet | $19.47\nbeach blanket | $13.52\n\nHow much more does a fleece blanket cost than a beach blanket?", "answer": "0.56", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_fleece_blanket = 14.08\ncost_beach_blanket = 13.52\n# Calculate the difference in cost\ndifference = cost_fleece_blanket - cost_beach_blanket\nanswer = difference\nprint(answer)", "# Define the costs of the fleece blanket and the beach blanket\ncost_fleece_blanket = 14.08\ncost_beach_blanket = 13.52\n\n# Calculate the difference in cost\ndifference = cost_fleece_blanket - cost_beach_blanket\n\n# Store the result in the variable 'answer'\nanswer = difference\n\n# Print the answer\nprint(answer)", "cost_fleece_blanket = 14.08\ncost_beach_blanket = 13.52\ndifference = cost_fleece_blanket - cost_beach_blanket\nanswer = f\"A fleece blanket costs ${difference:.2f} more than a beach blanket.\"\nprint(answer)", "cost_fleece_blanket = 14.08\ncost_beach_blanket = 13.52\ndifference = cost_fleece_blanket - cost_beach_blanket\nanswer = difference\nprint(answer)"], "prediction": [0.56, 0.56, "A fleece blanket costs $0.56 more than a beach blanket.", 0.56], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Temperature at noon\" and then answer a question.\n\nDay | Temperature (\u00c2\u00b0C)\nThursday | 7\nFriday | 10\nSaturday | 5\nSunday | 7\nMonday | 7", "question": "Read the following table regarding \"Temperature at noon\" and then write Python code to answer a question.\n\nDay | Temperature (\u00c2\u00b0C)\nThursday | 7\nFriday | 10\nSaturday | 5\nSunday | 7\nMonday | 7\n\nMadelyn graphed the temperature at noon for 5 days. What is the median of the numbers?", "answer": "7", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \ntemperatures = [7, 10, 5, 7, 7]\n# Sort the temperatures to find the median\ntemperatures.sort()\n# Calculate the median\nn = len(temperatures)\nif n % 2 == 1:\n    median = temperatures[n // 2]\nelse:\n    median = (temperatures[n // 2 - 1] + temperatures[n // 2]) / 2\nanswer = median\nprint(answer)", "temperatures = [7, 10, 5, 7, 7]  \ntemperatures.sort()  \nn = len(temperatures)  \nif n % 2 == 1:  \n    median = temperatures[n // 2]  \nelse:  \n    median = (temperatures[n // 2 - 1] + temperatures[n // 2]) / 2  \nanswer = int(median)  # Convert to integer if needed  \nprint(answer)", "# List of temperatures\ntemperatures = [7, 10, 5, 7, 7]\n\n# Sort the temperatures\ntemperatures.sort()\n\n# Calculate the number of temperatures\nn = len(temperatures)\n\n# Calculate the median\nif n % 2 == 1:\n    median = temperatures[n // 2]\nelse:\n    median = (temperatures[n // 2 - 1] + temperatures[n // 2]) / 2\n\n# Store the result in 'answer' ensuring the correct data type\nanswer = median if median % 1 != 0 else int(median)  # Keep as float if not a whole number, else convert to int\n\nprint(answer)", "temperatures = [7, 10, 5, 7, 7]\ntemperatures.sort()\nn = len(temperatures)\nif n % 2 == 1:\n    median = temperatures[n // 2]\nelse:\n    median = (temperatures[n // 2 - 1] + temperatures[n // 2]) / 2\nanswer = median if median % 1 != 0 else int(median)  # Keep as float if not a whole number, else convert to int\n\nprint(answer)"
], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$80 | 20,200 | 15,300\n$180 | 15,400 | 17,200\n$280 | 10,600 | 19,100\n$380 | 5,800 | 21,000\n$480 | 1,000 | 22,900", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$80 | 20,200 | 15,300\n$180 | 15,400 | 17,200\n$280 | 10,600 | 19,100\n$380 | 5,800 | 21,000\n$480 | 1,000 | 22,900\n\nLook at the table. Then answer the question. At a price of $380, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "surplus", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": [
  "# Python code, return answer \n# Quantity demanded and supplied at the price of $380\nquantity_demanded_at_380 = 5800\nquantity_supplied_at_380 = 21000\n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_380 < quantity_supplied_at_380:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the correct quantities for the price of $380\nquantity_demanded_at_380 = 5800  # This is the quantity demanded at $380\nquantity_supplied_at_380 = 21000  # This is the quantity supplied at $380\n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_380 < quantity_supplied_at_380:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Correct values for quantity demanded and quantity supplied at a price of $380\nquantity_demanded_at_380 = 5800  # This is the quantity demanded at $380\nquantity_supplied_at_380 = 21000  # This is the quantity supplied at $380\n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_380 < quantity_supplied_at_380:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the quantities demanded and supplied at a price of $380\nquantity_demanded_at_380 = 5800  # This is the quantity demanded at $380\nquantity_supplied_at_380 = 21000  # This is the quantity supplied at $380\n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_380 < quantity_supplied_at_380:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)"
], "prediction": ["surplus", "surplus", "surplus", "surplus"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Eating macaroni and cheese last month\" and then answer a question.\n\nTimes eaten | Frequency\n0 | 9\n1 | 20\n2 | 5\n3 | 2\n4 | 3\n5 | 15\n6 | 19", "question": "Read the following table regarding \"Eating macaroni and cheese last month\" and then write Python code to answer a question.\n\nTimes eaten | Frequency\n0 | 9\n1 | 20\n2 | 5\n3 | 2\n4 | 3\n5 | 15\n6 | 19\n\nA food manufacturer surveyed consumers about their macaroni and cheese consumption. How many people ate macaroni and cheese more than 1 time?", "answer": "44", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Frequency of people eating macaroni and cheese\nfrequency_data = {\n    0: 9,\n    1: 20,\n    2: 5,\n    3: 2,\n    4: 3,\n    5: 15,\n    6: 19\n}\n\n# Calculate the number of people who ate macaroni and cheese more than 1 time\npeople_more_than_one_time = sum(frequency for times, frequency in frequency_data.items() if times > 1)\nanswer = people_more_than_one_time\nprint(answer)", "frequency_data = {\n    0: 9,\n    1: 20,\n    2: 5,\n    3: 2,\n    4: 3,\n    5: 15,\n    6: 19\n}\n\n# Calculate the number of people who ate macaroni and cheese more than 1 time\npeople_more_than_one_time = sum(frequency for times, frequency in frequency_data.items() if times > 1)\n\nanswer = people_more_than_one_time\nprint(answer)", "frequency_data = {\n    0: 9,\n    1: 20,\n    2: 5,\n    3: 2,\n    4: 3,\n    5: 15,\n    6: 19\n}\n\n# Calculate the number of people who ate macaroni and cheese more than 1 time\npeople_more_than_one_time = sum(frequency for times, frequency in frequency_data.items() if times > 1)\nanswer = people_more_than_one_time\nprint(answer)", "frequency_data = {\n    0: 9,\n    1: 20,\n    2: 5,\n    3: 2,\n    4: 3,\n    5: 15,\n    6: 19\n}\npeople_more_than_one_time = sum(frequency for times, frequency in frequency_data.items() if times > 1)\nanswer = int(people_more_than_one_time)  # Ensure the answer is an integer\nprint(answer)"
], "prediction": [44.0, 44.0, 44.0, 44.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Daily temperatures (\u00b0C)\" and then answer a question.\n\nStem | Leaf \n1 | 1, 1, 2, 2\n2 | 3, 6, 6, 7, 8\n3 | 0, 2, 2, 3, 5, 5\n4 | 1, 3", "question": "Read the following table regarding \"Daily temperatures (\u00b0C)\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 1, 1, 2, 2\n2 | 3, 6, 6, 7, 8\n3 | 0, 2, 2, 3, 5, 5\n4 | 1, 3\n\nFor a science fair project, Mackenzie tracked the temperature each day. How many temperature readings were at least 10\u00b0C but less than 18\u00b0C?", "answer": "4", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# List of temperature readings from the stem-and-leaf display\ntemperatures = [\n    11, 11, 12, 12,  # From stem 1\n    23, 26, 26, 27, 28,  # From stem 2\n    30, 32, 32, 33, 35, 35,  # From stem 3\n    41, 43  # From stem 4\n]\n\n# Count readings between 10\u00b0C (inclusive) and 18\u00b0C (exclusive)\ncount_readings = sum(1 for temp in temperatures if 10 <= temp < 18)\nanswer = count_readings\nprint(answer)", "# Define the stem and leaf data structure as a list of tuples\nstem_and_leaf = [\n    (1, [1, 1, 2, 2]),  # Represents 11, 11, 12, 12\n    (2, [3, 6, 6, 7, 8]),  # Represents 23, 26, 26, 27, 28\n    (3, [0, 2, 2, 3, 5, 5]),  # Represents 30, 32, 32, 33, 35, 35\n    (4, [1, 3])  # Represents 41, 43\n]\n\n# Initialize counter for temperature readings between 10\u00b0C and 18\u00b0C\ncount_readings = 0\n\n# Iterate through the stem and leaf data structure and count relevant temperatures\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        temperature = stem * 10 + leaf\n        if 10 <= temperature < 18:\n            count_readings += 1\n\nanswer = count_readings\nprint(answer)", "# Define the stem and leaf data structure as a list of tuples  \nstem_and_leaf = [\n    (1, [1, 1, 2, 2]),  # Represents 11, 11, 12, 12\n    (2, [3, 6, 6, 7, 8]),  # Represents 23, 26, 26, 27, 28\n    (3, [0, 2, 2, 3, 5, 5]),  # Represents 30, 32, 32, 33, 35, 35\n    (4, [1, 3])  # Represents 41, 43\n]\n\n# Initialize counter for readings at least 10\u00b0C but less than 18\u00b0C  \ncount_readings = 0\n\n# Iterate through the stem and leaf data structure and count relevant readings  \nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        temperature = stem * 10 + leaf\n        if 10 <= temperature < 18:  # Check if the temperature is in the desired range\n            count_readings += 1\n\n# Store the result in 'answer' variable\nanswer = count_readings\n\n# Print the result\nprint(answer)", "# Define the stem and leaf data structure  \nstem_and_leaf = [\n    (1, [1, 1, 2, 2]),  # Represents temperatures: 11, 11, 12, 12\n    (2, [3, 6, 6, 7, 8]),  # Represents temperatures: 23, 26, 26, 27, 28\n    (3, [0, 2, 2, 3, 5, 5]),  # Represents temperatures: 30, 32, 32, 33, 35, 35\n    (4, [1, 3])  # Represents temperatures: 41, 43\n]\n\n# Initialize counter for readings in the desired temperature range  \ncount_readings = 0  \n\n# Iterate through the stem and leaf data structure and count relevant readings  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        temperature = stem * 10 + leaf  # Calculate actual temperature  \n        if 10 <= temperature < 18:  # Check if the temperature is in the desired range  \n            count_readings += 1  \n\n# Store the result in the answer variable  \nanswer = count_readings  \nprint(answer)  # Output the answer"
], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Paintings per exhibit\" and then answer a question.\n\nStem | Leaf \n1 | 5\n2 | 5, 9\n3 | 0\n4 | \n5 | \n6 | 3, 6", "question": "Read the following table regarding \"Paintings per exhibit\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 5\n2 | 5, 9\n3 | 0\n4 | \n5 | \n6 | 3, 6\n\nA museum curator counted the number of paintings in each exhibit at the art museum. How many exhibits have at least 20 paintings but fewer than 50 paintings?", "answer": "3", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Interpreting the stem-and-leaf display to find exhibits with 20 to 49 paintings\nexhibits_with_paintings = [15, 25, 29, 30, 40, 50, 63, 66]\n\n# Count the number of exhibits with at least 20 and fewer than 50 paintings\ncount_exhibits = len([paintings for paintings in exhibits_with_paintings if 20 <= paintings < 50])\nanswer = count_exhibits\nprint(answer)", "# Define the number of paintings per exhibit based on the stem-and-leaf data\nexhibits_with_paintings = [15, 25, 29, 30, 40, 63]  # Corrected list based on the stem and leaf\n\n# Count the number of exhibits with at least 20 paintings but fewer than 50 paintings\ncount_exhibits = len([paintings for paintings in exhibits_with_paintings if 20 <= paintings < 50])\nanswer = count_exhibits\n\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(1, [5]), (2, [5, 9]), (3, [0]), (4, []), (5, []), (6, [3, 6])]\n\n# Initialize counter for exhibits with at least 20 paintings but fewer than 50 paintings\nexhibits_with_20_to_49_paintings = 0\n\n# Iterate through the stem and leaf data structure and count relevant exhibits\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        paintings_per_exhibit = stem * 10 + leaf\n        if 20 <= paintings_per_exhibit < 50:\n            exhibits_with_20_to_49_paintings += 1\n\nanswer = exhibits_with_20_to_49_paintings\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [5]), (2, [5, 9]), (3, [0]), (4, []), (5, []), (6, [3, 6])]  \n  \n# Initialize counter for exhibits with at least 20 paintings but fewer than 50 paintings  \nexhibits_with_20_to_49_paintings = 0  \n  \n# Iterate through the stem and leaf data structure and count relevant exhibits  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        paintings_per_exhibit = stem * 10 + leaf  \n        if 20 <= paintings_per_exhibit < 50:  \n            exhibits_with_20_to_49_paintings += 1  \n  \nanswer = exhibits_with_20_to_49_paintings  \nprint(answer)"
], "prediction": [4.0, 4.0, 3.0, 3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Cheese consumption per capita (kg)\" and then answer a question.\n\nCountry | 1996 | 2006\nGermany | 12 | 20\nGreat Britain | 9 | 10\nCanada | 10 | 11\nAustralia | 10 | 10\nArgentina | 11 | 11", "question": "Read the following table regarding \"Cheese consumption per capita (kg)\" and then write Python code to answer a question.\n\nCountry | 1996 | 2006\nGermany | 12 | 20\nGreat Britain | 9 | 10\nCanada | 10 | 11\nAustralia | 10 | 10\nArgentina | 11 | 11\n\nAn agricultural agency is researching how much cheese people have been eating in different parts of the world. Which country consumed the most cheese per capita in 2006? Choose from the the options: ['Germany', 'Canada', 'Great Britain', 'Argentina']", "answer": "Germany", "ques_type": "multi_choice", "choices": ["Germany", "Canada", "Great Britain", "Argentina"], "code": [
  "# Python code, return answer \ncheese_consumption_2006 = {\n    'Germany': 20,\n    'Great Britain': 10,\n    'Canada': 11,\n    'Australia': 10,\n    'Argentina': 11\n}\n# Find the country with the most cheese consumption in 2006\nmost_cheese_country = max(cheese_consumption_2006, key=cheese_consumption_2006.get)\nanswer = most_cheese_country\nprint(answer)", "cheese_consumption_2006 = {\n    'Germany': 20,\n    'Great Britain': 10,\n    'Canada': 11,\n    'Australia': 10,\n    'Argentina': 11\n}\n\n# Find the country with the maximum cheese consumption in 2006\nmost_cheese_country = max(cheese_consumption_2006, key=cheese_consumption_2006.get)\nanswer = most_cheese_country\n\nprint(answer)  # This will output: Germany", "# Define the cheese consumption data for 2006\ncheese_consumption_2006 = {\n    'Germany': 20,\n    'Great Britain': 10,\n    'Canada': 11,\n    'Australia': 10,\n    'Argentina': 11\n}\n\n# Find the country that consumed the most cheese per capita in 2006\nmost_cheese_country = max(cheese_consumption_2006, key=cheese_consumption_2006.get)\n\n# Store the result in the answer variable\nanswer = most_cheese_country\n\n# Output the answer\nprint(answer)  # This will output: Germany", "# Define cheese consumption per capita in 2006\ncheese_consumption_2006 = {\n    'Germany': 20,\n    'Great Britain': 10,\n    'Canada': 11,\n    'Australia': 10,\n    'Argentina': 11\n}\n\n# Find the country that consumed the most cheese in 2006\nmax_consumption = max(cheese_consumption_2006.values())\nmost_cheese_countries = [country for country, consumption in cheese_consumption_2006.items() if consumption == max_consumption]\n\n# Since the question asks for the country with the highest consumption, we can just take the first one\nanswer = most_cheese_countries[0]  # This will be 'Germany' in this case\nprint(answer)"
], "prediction": ["Germany", "Germany", "Germany", "Germany"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Math teachers\" and then answer a question.\n\nHigh school | Number of math teachers\nGreen High | 4\nCedar High | 9\nWestside High | 8\nNorthside High | 6\nLincoln High | 10\nHillview High | 8\nMoore High | 8\nRiver High | 9", "question": "Read the following table regarding \"Math teachers\" and then write Python code to answer a question.\n\nHigh school | Number of math teachers\nGreen High | 4\nCedar High | 9\nWestside High | 8\nNorthside High | 6\nLincoln High | 10\nHillview High | 8\nMoore High | 8\nRiver High | 9\n\nThe school district compared how many math teachers each high school has. What is the range of the numbers?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of math teachers at each high school\nmath_teachers_counts = [4, 9, 8, 6, 10, 8, 8, 9]\n# Calculate the range\nrange_math_teachers = max(math_teachers_counts) - min(math_teachers_counts)\nanswer = range_math_teachers\nprint(answer)", "math_teachers_counts = [4, 9, 8, 6, 10, 8, 8, 9]\nrange_math_teachers = max(math_teachers_counts) - min(math_teachers_counts)\nanswer = int(range_math_teachers)  # Convert the result to an integer\nprint(answer)", "math_teachers_counts = [4, 9, 8, 6, 10, 8, 8, 9]\nrange_math_teachers = max(math_teachers_counts) - min(math_teachers_counts)\nanswer = range_math_teachers  # No need to convert to int, as it will already be an integer\nprint(answer)", "math_teachers_counts = [4, 9, 8, 6, 10, 8, 8, 9]\nrange_math_teachers = max(math_teachers_counts) - min(math_teachers_counts)\nanswer = int(range_math_teachers)  # Convert to int to ensure the output is an integer\nprint(answer)"], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Company sizes (number of employees)\" and then answer a question.\n\nStem | Leaf \n2 | 8\n3 | 3, 3, 4\n4 | 0, 6, 6, 7, 9\n5 | 1, 2, 8\n6 | 1, 8\n7 | 2, 2, 8, 8\n8 | 2, 9\n9 | 0", "question": "Read the following table regarding \"Company sizes (number of employees)\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 8\n3 | 3, 3, 4\n4 | 0, 6, 6, 7, 9\n5 | 1, 2, 8\n6 | 1, 8\n7 | 2, 2, 8, 8\n8 | 2, 9\n9 | 0\n\nThe Springtown Chamber of Commerce researched the number of employees working at local companies. How many companies have less than 89 employees?", "answer": "19", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# We will count the number of companies with less than 89 employees from the stem-and-leaf display.\n\n# Extracting the number of employees from the stem-and-leaf display\ncompany_sizes = [28, 33, 33, 34, 40, 46, 46, 47, 49, 51, 52, 58, 61, 68, 72, 72, 78, 78, 82, 89, 90]\n\n# Counting companies with less than 89 employees\ncount_less_than_89 = sum(1 for size in company_sizes if size < 89)\n\nanswer = count_less_than_89\nprint(answer)", "# Define the stem and leaf data structure based on the provided table\nstem_and_leaf = [\n    (2, [8]),\n    (3, [3, 3, 4]),\n    (4, [0, 6, 6, 7, 9]),\n    (5, [1, 2, 8]),\n    (6, [1, 8]),\n    (7, [2, 2, 8, 8]),\n    (8, [2, 9]),\n    (9, [0])\n]\n\n# Initialize counter for companies with less than 89 employees\ncount_less_than_89 = 0\n\n# Iterate through the stem and leaf data structure and count relevant companies\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        employees = stem * 10 + leaf\n        if employees < 89:\n            count_less_than_89 += 1\n\nanswer = count_less_than_89\nprint(answer)", "stem_and_leaf = [\n    (2, [8]),\n    (3, [3, 3, 4]),\n    (4, [0, 6, 6, 7, 9]),\n    (5, [1, 2, 8]),\n    (6, [1, 8]),\n    (7, [2, 2, 8, 8]),\n    (8, [2, 9]),\n    (9, [0])\n]\n\ncount_less_than_89 = 0\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        employees = stem * 10 + leaf\n        if employees < 89:\n            count_less_than_89 += 1\n\nanswer = count_less_than_89  # Ensure the answer is an integer\nprint(answer)", "stem_and_leaf = [\n    (2, [8]),\n    (3, [3, 3, 4]),\n    (4, [0, 6, 6, 7, 9]),\n    (5, [1, 2, 8]),\n    (6, [1, 8]),\n    (7, [2, 2, 8, 8]),\n    (8, [2, 9]),\n    (9, [0])\n]\n\ncount_less_than_89 = 0\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        employees = stem * 10 + leaf\n        if employees < 89:\n            count_less_than_89 += 1\n\nanswer = count_less_than_89  # This will be an integer\nprint(answer)"
], "prediction": [19.0, 19.0, 19.0, 19.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Menu items per restaurant\" and then answer a question.\n\nStem | Leaf \n1 | 6, 9\n2 | \n3 | \n4 | \n5 | 0, 5\n6 | 2\n7 | 4", "question": "Read the following table regarding \"Menu items per restaurant\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 6, 9\n2 | \n3 | \n4 | \n5 | 0, 5\n6 | 2\n7 | 4\n\nA food critic counted the number of menu items at each restaurant in town. What is the largest number of menu items?", "answer": "74", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number of menu items corresponds to the largest value in the stem-and-leaf display.\nlargest_menu_items = 74  # From the stem \"7 | 4\", the value is 74 items.\nanswer = largest_menu_items\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [6, 9]), (2, []), (3, []), (4, []), (5, [0, 5]), (6, [2]), (7, [4])]  \n\n# Initialize variable to store the largest number of menu items  \nlargest_menu_items = 0  \n\n# Iterate through the stem and leaf data structure to find the largest menu items  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        menu_items = stem * 10 + leaf  \n        if menu_items > largest_menu_items:  \n            largest_menu_items = menu_items  \n\n# Check if any leaves exist for the highest stem (7)  \nif 7 in [stem for stem, _ in stem_and_leaf]:  \n    largest_menu_items = max(largest_menu_items, 74)  # 74 is from stem 7, leaf 4\n\nanswer = largest_menu_items  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [6, 9]), (2, []), (3, []), (4, []), (5, [0, 5]), (6, [2]), (7, [4])]  \n\n# Initialize variable to keep track of the largest number of menu items  \nlargest_menu_items = 0  \n\n# Iterate through the stem and leaf data structure  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        menu_items = stem * 10 + leaf  \n        if menu_items > largest_menu_items:  \n            largest_menu_items = menu_items  \n\n# Check for the maximum value from stem 7  \nif 7 in [stem for stem, _ in stem_and_leaf]:  \n    largest_menu_items = max(largest_menu_items, 74)  # 74 is from stem 7, leaf 4\n\n# Assign the result to answer\nanswer = largest_menu_items  \nprint(answer)", "# Define the stem and leaf data structure  \nstem_and_leaf = [(1, [6, 9]), (2, []), (3, []), (4, []), (5, [0, 5]), (6, [2]), (7, [4])]  \n\n# Initialize variable to track the largest number of menu items  \nlargest_menu_items = 0  \n\n# Iterate through the stem and leaf data structure to find the largest menu items  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        menu_items = stem * 10 + leaf  \n        if menu_items > largest_menu_items:  \n            largest_menu_items = menu_items  \n    # Check for the maximum value from stems with leaves  \n    if leaf_list:  # If there are any leaves in the current stem\n        menu_items = stem * 10 + max(leaf_list)  # Calculate max for this stem\n        if menu_items > largest_menu_items:\n            largest_menu_items = menu_items  \n\nanswer = largest_menu_items  \nprint(answer)"
], "prediction": [74.0, 74.0, 74.0, 74.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Going to the water park last summer\" and then answer a question.\n\nNumber of trips | Frequency\n1 | 12\n2 | 16\n3 | 0\n4 | 5\n5 | 7", "question": "Read the following table regarding \"Going to the water park last summer\" and then write Python code to answer a question.\n\nNumber of trips | Frequency\n1 | 12\n2 | 16\n3 | 0\n4 | 5\n5 | 7\n\nA theme park developer recorded the number of people who visited the local water park last summer. How many people went to the water park at least 3 times?", "answer": "12", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Frequency of visits\nfrequency_data = {\n    1: 12,\n    2: 16,\n    3: 0,\n    4: 5,\n    5: 7\n}\n\n# Calculate the number of people who went to the water park at least 3 times\npeople_at_least_3_times = frequency_data[3] + frequency_data[4] + frequency_data[5]\nanswer = people_at_least_3_times\nprint(answer)", "# Define the frequency data as integers\nfrequency_data = {\n    1: 12,\n    2: 16,\n    3: 0,\n    4: 5,\n    5: 7\n}\n\n# Calculate the number of people who went to the water park at least 3 times\npeople_at_least_3_times = frequency_data[3] + frequency_data[4] + frequency_data[5]\n\n# Ensure the answer is an integer\nanswer = int(people_at_least_3_times)\nprint(answer)", "frequency_data = {\n    1: 12,\n    2: 16,\n    3: 0,\n    4: 5,\n    5: 7\n}\n\n# Calculate the number of people who went to the water park at least 3 times\npeople_at_least_3_times = frequency_data[3] + frequency_data[4] + frequency_data[5]\nanswer = people_at_least_3_times  # This will be an integer\nprint(answer)", "frequency_data = {\n    1: 12,\n    2: 16,\n    3: 0,\n    4: 5,\n    5: 7\n}\npeople_at_least_3_times = frequency_data[4] + frequency_data[5]  # Only need to sum values for 4 and 5 trips\nanswer = people_at_least_3_times  # This will be an integer\nprint(answer)"
], "prediction": [12.0, 12.0, 12.0, 12.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ngreen kitchen towel | $2.99\nbeach blanket | $6.89\nnavy blue bath mat | $7.57\nflannel sheet | $7.01\nbeach towel | $6.38", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ngreen kitchen towel | $2.99\nbeach blanket | $6.89\nnavy blue bath mat | $7.57\nflannel sheet | $7.01\nbeach towel | $6.38\n\nHow much more does a navy blue bath mat cost than a green kitchen towel?", "answer": "4.58", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_navy_bath_mat = 7.57 \ncost_green_kitchen_towel = 2.99 \n# Calculate the difference in cost\ndifference_in_cost = cost_navy_bath_mat - cost_green_kitchen_towel\nanswer = difference_in_cost\nprint(answer)", "cost_navy_bath_mat = 7.57 \ncost_green_kitchen_towel = 2.99 \ndifference_in_cost = cost_navy_bath_mat - cost_green_kitchen_towel\nanswer = f\"${difference_in_cost:.2f}\"  # Format the output as currency\nprint(answer)", "cost_navy_bath_mat = 7.57 \ncost_green_kitchen_towel = 2.99 \ndifference_in_cost = cost_navy_bath_mat - cost_green_kitchen_towel\nanswer = difference_in_cost  # Store the difference in cost directly\nprint(answer)", "# Define the costs of the items\ncost_navy_bath_mat = 7.57 \ncost_green_kitchen_towel = 2.99 \n\n# Calculate the difference in cost\ndifference_in_cost = cost_navy_bath_mat - cost_green_kitchen_towel\n\n# Store the result in the variable 'answer'\nanswer = difference_in_cost  \n\n# Print the answer\nprint(answer)"], "prediction": [4.58, "$4.58", 4.58, 4.58], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Nobel Prize winners\" and then answer a question.\n\nCountry | 1970s | 1980s\nGermany | 9 | 11\nCanada | 2 | 3\nRussia | 5 | 1\nFrance | 3 | 5", "question": "Read the following table regarding \"Nobel Prize winners\" and then write Python code to answer a question.\n\nCountry | 1970s | 1980s\nGermany | 9 | 11\nCanada | 2 | 3\nRussia | 5 | 1\nFrance | 3 | 5\n\nFor an assignment, Stefan looked at which countries got the most Nobel Prizes in various decades. Which country had more Nobel Prize winners in the 1970s, Russia or Germany? Choose from the the options: ['Russia', 'Germany']", "answer": "Germany", "ques_type": "multi_choice", "choices": ["Russia", "Germany"], "code": [
  "# Python code, return answer \n# Nobel Prize winners in the 1970s for each country\nnobel_1970s = {\n    'Germany': 9,\n    'Russia': 5\n}\n# Compare the number of winners\nif nobel_1970s['Germany'] > nobel_1970s['Russia']:\n    answer = 'Germany'\nelse:\n    answer = 'Russia'\nprint(answer)", "# Store the number of Nobel Prize winners for each country in the 1970s  \nnobel_1970s = {\n    'Germany': 9,\n    'Russia': 5\n}\n\n# Determine which country had more Nobel Prize winners in the 1970s\nif nobel_1970s['Germany'] > nobel_1970s['Russia']:\n    answer = 'Germany'\nelif nobel_1970s['Germany'] < nobel_1970s['Russia']:\n    answer = 'Russia'\nelse:\n    answer = 'Both countries had the same number of winners'\n\nprint(answer)", "# Define the number of Nobel Prize winners in the 1970s for Germany and Russia\nnobel_1970s = {\n    'Germany': 9,\n    'Russia': 5\n}\n\n# Compare the number of winners and determine which country had more\nif nobel_1970s['Germany'] > nobel_1970s['Russia']:\n    answer = 'Germany'\nelse:\n    answer = 'Russia'\n\nprint(answer)", "nobel_1970s = {\n    'Germany': 9,\n    'Russia': 5\n}\n\nif nobel_1970s['Germany'] > nobel_1970s['Russia']:\n    answer = 'Germany'\nelif nobel_1970s['Germany'] < nobel_1970s['Russia']:\n    answer = 'Russia'\nelse:\n    answer = 'Both countries had the same number of Nobel Prize winners'\n\nprint(answer)"
], "prediction": ["Germany", "Germany", "Germany", "Germany"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Clubs\" and then answer a question.\n\nName | Number of clubs\nJoseph | 8\nAllie | 7\nEliana | 2\nLeroy | 6\nDavid | 2\nTucker | 7\nXavier | 4", "question": "Read the following table regarding \"Clubs\" and then write Python code to answer a question.\n\nName | Number of clubs\nJoseph | 8\nAllie | 7\nEliana | 2\nLeroy | 6\nDavid | 2\nTucker | 7\nXavier | 4\n\nSome students compared how many clubs they belong to. What is the range of the numbers?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of clubs for each student\nclubs = [8, 7, 2, 6, 2, 7, 4]\n\n# Calculate the range\nrange_of_clubs = max(clubs) - min(clubs)\nanswer = range_of_clubs\nprint(answer)", "clubs = [8, 7, 2, 6, 2, 7, 4]\nrange_of_clubs = max(clubs) - min(clubs)\nanswer = int(range_of_clubs)  # Convert to integer\nprint(answer)", "clubs = [8, 7, 2, 6, 2, 7, 4]\nrange_of_clubs = max(clubs) - min(clubs)\nanswer = range_of_clubs  # No need to convert to integer, as it's already an integer\nprint(answer)", "clubs = [8, 7, 2, 6, 2, 7, 4]\nrange_of_clubs = max(clubs) - min(clubs)\nanswer = int(range_of_clubs)  # Convert to integer to ensure the result is an integer\nprint(answer)"], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nAfrican safari vacation package | $512\nCaribbean vacation package | $613\nEuropean vacation package | $576\nAustralian vacation package | $849", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nAfrican safari vacation package | $512\nCaribbean vacation package | $613\nEuropean vacation package | $576\nAustralian vacation package | $849\n\nHow much money does Emmet need to buy 8 European vacation packages and 7 Caribbean vacation packages?", "answer": "8,899", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the vacation packages\neuropean_price = 576\ncaribbean_price = 613\n\n# Number of packages needed\nnum_european = 8\nnum_caribbean = 7\n\n# Total cost calculation\ntotal_cost = (european_price * num_european) + (caribbean_price * num_caribbean)\nanswer = total_cost\nprint(answer)", "european_price = 576\ncaribbean_price = 613\nnum_european = 8\nnum_caribbean = 7\n\n# Calculate the total cost correctly\ntotal_cost = (european_price * num_european) + (caribbean_price * num_caribbean)\nanswer = total_cost\nprint(answer)", "european_price = 576\ncaribbean_price = 613\nnum_european = 8\nnum_caribbean = 7\ntotal_cost = (european_price * num_european) + (caribbean_price * num_caribbean)\nanswer = int(total_cost)  # Convert to integer for whole number representation\nprint(answer)", "european_price = 576\ncaribbean_price = 613\nnum_european = 8\nnum_caribbean = 7\ntotal_cost = (european_price * num_european) + (caribbean_price * num_caribbean)\nanswer = total_cost  # No need to convert to int since total_cost is already a whole number\nprint(answer)"], "prediction": [8899.0, 8899.0, 8899.0, 8899.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nset of dishes | $25.05\nset of forks | $11.35\ncookie jar | $14.36\ncutting board | $10.52\nbaking dish | $15.53\nsoup pot | $67.53", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nset of dishes | $25.05\nset of forks | $11.35\ncookie jar | $14.36\ncutting board | $10.52\nbaking dish | $15.53\nsoup pot | $67.53\n\nHow much money does Jason need to buy a set of forks and a baking dish?", "answer": "26.88", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nprice_forks = 11.35\nprice_baking_dish = 15.53\n# Calculate the total cost\ntotal_cost = price_forks + price_baking_dish\nanswer = total_cost\nprint(answer)", "price_forks = 11.35\nprice_baking_dish = 15.53\ntotal_cost = price_forks + price_baking_dish\nanswer = round(total_cost, 2)  # Format to two decimal places\nprint(answer)", "# Prices of the items\nprice_forks = 11.35\nprice_baking_dish = 15.53\n\n# Calculate total cost\ntotal_cost = price_forks + price_baking_dish\n\n# Assign the result to 'answer'\nanswer = round(total_cost, 2)  # Format to two decimal places\n\n# Output the answer\nprint(answer)", "# Prices of the items\nprice_forks = 11.35\nprice_baking_dish = 15.53\n\n# Calculate total cost\ntotal_cost = price_forks + price_baking_dish\n\n# Store the result in the variable 'answer'\nanswer = round(total_cost, 2)  # Format to two decimal places\n\n# Print the answer\nprint(answer)"], "prediction": [26.88, 26.88, 26.88, 26.88], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Hours worked\" and then answer a question.\n\nDay | Hours\nThursday | 6\nFriday | 8\nSaturday | 8\nSunday | 8\nMonday | 2\nTuesday | 10\nWednesday | 6", "question": "Read the following table regarding \"Hours worked\" and then write Python code to answer a question.\n\nDay | Hours\nThursday | 6\nFriday | 8\nSaturday | 8\nSunday | 8\nMonday | 2\nTuesday | 10\nWednesday | 6\n\nA waitress kept track of how many hours she worked each day. What is the median of the numbers?", "answer": "8", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# List of hours worked each day\nhours_worked = [6, 8, 8, 8, 2, 10, 6]\n\n# Sort the hours to find the median\nhours_worked.sort()\n\n# Calculate the median\nn = len(hours_worked)\nif n % 2 == 1:  # If the number of hours is odd\n    median = hours_worked[n // 2]\nelse:           # If the number of hours is even\n    median = (hours_worked[n // 2 - 1] + hours_worked[n // 2]) / 2\n\nanswer = median\nprint(answer)", "# List of hours worked each day\nhours_worked = [6, 8, 8, 8, 2, 10, 6]\n\n# Sort the list to find the median\nhours_worked.sort()\nn = len(hours_worked)\n\n# Calculate the median\nif n % 2 == 1:  # If the number of hours is odd\n    answer = hours_worked[n // 2]\nelse:           # If the number of hours is even\n    answer = (hours_worked[n // 2 - 1] + hours_worked[n // 2]) / 2\n\nprint(answer)", "# Define the hours worked each day\nhours_worked = [6, 8, 8, 8, 2, 10, 6]\n\n# Sort the list of hours\nhours_worked.sort()\n\n# Calculate the median\nn = len(hours_worked)\nif n % 2 == 1:  # If the number of hours is odd\n    answer = hours_worked[n // 2]\nelse:           # If the number of hours is even\n    answer = (hours_worked[n // 2 - 1] + hours_worked[n // 2]) / 2\n\nprint(answer)", "# List of hours worked each day\nhours_worked = [6, 8, 8, 8, 2, 10, 6]\n\n# Sort the list to prepare for median calculation\nhours_worked.sort()\n\n# Calculate the median\nn = len(hours_worked)\nif n % 2 == 1:  # If the number of hours is odd\n    answer = hours_worked[n // 2]\nelse:           # If the number of hours is even\n    answer = (hours_worked[n // 2 - 1] + hours_worked[n // 2]) / 2\n\nprint(answer)"
], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Whale watching\" and then answer a question.\n\nWhales spotted | Frequency\n0 | 16\n1 | 17\n2 | 5\n3 | 20\n4 | 14", "question": "Read the following table regarding \"Whale watching\" and then write Python code to answer a question.\n\nWhales spotted | Frequency\n0 | 16\n1 | 17\n2 | 5\n3 | 20\n4 | 14\n\nAn adventure tour company found out how many whales people saw on its most popular whale tour. How many people saw fewer than 3 whales?", "answer": "38", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of people who saw fewer than 3 whales\nfrequency_fewer_than_3 = 16 + 17 + 5  # 0, 1, and 2 whales\nanswer = frequency_fewer_than_3\nprint(answer)", "# Define the frequencies of whales spotted\nwhale_frequencies = {\n    0: 16,\n    1: 17,\n    2: 5,\n    3: 20,\n    4: 14\n}\n\n# Calculate the total number of people who saw fewer than 3 whales\nfrequency_fewer_than_3 = whale_frequencies[0] + whale_frequencies[1] + whale_frequencies[2]\nanswer = frequency_fewer_than_3\n\nprint(answer)", "# Define the whale frequencies as a dictionary\nwhale_frequencies = {\n    0: 16,\n    1: 17,\n    2: 5,\n    3: 20,\n    4: 14\n}\n\n# Calculate the total number of people who saw fewer than 3 whales\nfrequency_fewer_than_3 = whale_frequencies[0] + whale_frequencies[1] + whale_frequencies[2]\nanswer = frequency_fewer_than_3\n\nprint(answer)", "whale_frequencies = {\n    0: 16,\n    1: 17,\n    2: 5,\n    3: 20,\n    4: 14\n}\n\nfrequency_fewer_than_3 = whale_frequencies[0] + whale_frequencies[1] + whale_frequencies[2]\nanswer = int(frequency_fewer_than_3)  # Convert to integer explicitly\nprint(answer)"], "prediction": [38.0, 38.0, 38.0, 38.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Favorite sandwiches\" and then answer a question.\n\nSandwich | Lower elementary students | Upper elementary students\nCheese | 6 | 16\nHam | 4 | 12\nEgg salad | 19 | 18\nPeanut butter | 16 | 19\nTurkey | 18 | 5", "question": "Read the following table regarding \"Favorite sandwiches\" and then write Python code to answer a question.\n\nSandwich | Lower elementary students | Upper elementary students\nCheese | 6 | 16\nHam | 4 | 12\nEgg salad | 19 | 18\nPeanut butter | 16 | 19\nTurkey | 18 | 5\n\nThe school cafeteria asked students about their favorite sandwiches before updating the lunch menu. How many students voted for cheese sandwiches?", "answer": "22", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of students who voted for cheese sandwiches\nlower_elementary_cheese = 6\nupper_elementary_cheese = 16\ntotal_cheese_votes = lower_elementary_cheese + upper_elementary_cheese\nanswer = total_cheese_votes\nprint(answer)", "lower_elementary_cheese = 6\nupper_elementary_cheese = 16\ntotal_cheese_votes = lower_elementary_cheese + upper_elementary_cheese\nanswer = total_cheese_votes  # This will be an integer\nprint(answer)", "lower_elementary_cheese = 6\nupper_elementary_cheese = 16\ntotal_cheese_votes = lower_elementary_cheese + upper_elementary_cheese\nanswer = total_cheese_votes  # This will be an integer\nprint(answer)", "# Number of votes for cheese sandwiches from lower and upper elementary students\nlower_elementary_cheese = 6\nupper_elementary_cheese = 16\n\n# Calculate total cheese votes\ntotal_cheese_votes = lower_elementary_cheese + upper_elementary_cheese\n\n# Ensure the answer is an integer\nanswer = int(total_cheese_votes)\nprint(answer)"], "prediction": [22.0, 22.0, 22.0, 22.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"House sales\" and then answer a question.\n\nCity | Number of houses sold\nBriggs Corner | 83\nNew Hamburg | 86\nMelville | 94\nFremont | 92\nLiberty City | 94\nCharles Falls | 89\nPleasant Town | 89\nPennytown | 87", "question": "Read the following table regarding \"House sales\" and then write Python code to answer a question.\n\nCity | Number of houses sold\nBriggs Corner | 83\nNew Hamburg | 86\nMelville | 94\nFremont | 92\nLiberty City | 94\nCharles Falls | 89\nPleasant Town | 89\nPennytown | 87\n\nA real estate agent looked into how many houses were sold in different cities. What is the range of the numbers?", "answer": "11", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nhouses_sold = [83, 86, 94, 92, 94, 89, 89, 87]\n# Calculate the range\nrange_of_houses = max(houses_sold) - min(houses_sold)\nanswer = range_of_houses\nprint(answer)", "houses_sold = [83, 86, 94, 92, 94, 89, 89, 87]\nrange_of_houses = max(houses_sold) - min(houses_sold)\nanswer = int(range_of_houses)  # Convert to integer for clarity\nprint(answer)", "houses_sold = [83, 86, 94, 92, 94, 89, 89, 87]\nrange_of_houses = max(houses_sold) - min(houses_sold)\nanswer = range_of_houses  # Keep it as an integer\nprint(answer)", "houses_sold = [83, 86, 94, 92, 94, 89, 89, 87]\nrange_of_houses = max(houses_sold) - min(houses_sold)\nanswer = int(range_of_houses)  # Convert to integer\nprint(answer)"], "prediction": [11.0, 11.0, 11.0, 11.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Zoo schedule\" and then answer a question.\n\nEvent | Begin | End\ngiraffe feeding | 10:00 A.M. | 11:05 A.M.\nbear lecture | 11:40 A.M. | 12:30 P.M.\ninsect show | 1:10 P.M. | 1:40 P.M.\nkoala feeding | 2:10 P.M. | 2:40 P.M.\nreptile show | 3:10 P.M. | 4:00 P.M.\ntiger lecture | 3:30 P.M. | 4:50 P.M.\nbird show | 5:40 P.M. | 6:25 P.M.", "question": "Read the following table regarding \"Zoo schedule\" and then write Python code to answer a question.\n\nEvent | Begin | End\ngiraffe feeding | 10:00 A.M. | 11:05 A.M.\nbear lecture | 11:40 A.M. | 12:30 P.M.\ninsect show | 1:10 P.M. | 1:40 P.M.\nkoala feeding | 2:10 P.M. | 2:40 P.M.\nreptile show | 3:10 P.M. | 4:00 P.M.\ntiger lecture | 3:30 P.M. | 4:50 P.M.\nbird show | 5:40 P.M. | 6:25 P.M.\n\nLook at the following schedule. When does the koala feeding begin? Choose from the the options: ['3:10 P.M.', '1:10 P.M.', '2:10 P.M.', '5:40 P.M.']", "answer": "2:10 P.M.", "ques_type": "multi_choice", "choices": ["3:10 P.M.", "1:10 P.M.", "2:10 P.M.", "5:40 P.M."], "code": [
  "# Python code, return answer \n# The start time for the koala feeding event\nkoala_feeding_start_time = '2:10 P.M.'\nanswer = koala_feeding_start_time\nprint(answer)", "# Define the schedule as a dictionary\nzoo_schedule = {\n    'giraffe feeding': ('10:00 A.M.', '11:05 A.M.'),\n    'bear lecture': ('11:40 A.M.', '12:30 P.M.'),\n    'insect show': ('1:10 P.M.', '1:40 P.M.'),\n    'koala feeding': ('2:10 P.M.', '2:40 P.M.'),\n    'reptile show': ('3:10 P.M.', '4:00 P.M.'),\n    'tiger lecture': ('3:30 P.M.', '4:50 P.M.'),\n    'bird show': ('5:40 P.M.', '6:25 P.M.')\n}\n\n# Get the start time for the koala feeding\nkoala_feeding_start_time = zoo_schedule['koala feeding'][0]\nanswer = koala_feeding_start_time\n\nprint(answer)", "# Define the zoo schedule as a dictionary\nzoo_schedule = {\n    'giraffe feeding': ('10:00 A.M.', '11:05 A.M.'),\n    'bear lecture': ('11:40 A.M.', '12:30 P.M.'),\n    'insect show': ('1:10 P.M.', '1:40 P.M.'),\n    'koala feeding': ('2:10 P.M.', '2:40 P.M.'),\n    'reptile show': ('3:10 P.M.', '4:00 P.M.'),\n    'tiger lecture': ('3:30 P.M.', '4:50 P.M.'),\n    'bird show': ('5:40 P.M.', '6:25 P.M.')\n}\n\n# Retrieve the start time for the koala feeding event\nkoala_feeding_start_time = zoo_schedule['koala feeding'][0]\nanswer = koala_feeding_start_time\n\n# Print the answer\nprint(answer)", "# Define the zoo schedule as a dictionary  \nzoo_schedule = {  \n    'giraffe feeding': ('10:00 A.M.', '11:05 A.M.'),  \n    'bear lecture': ('11:40 A.M.', '12:30 P.M.'),  \n    'insect show': ('1:10 P.M.', '1:40 P.M.'),  \n    'koala feeding': ('2:10 P.M.', '2:40 P.M.'),  \n    'reptile show': ('3:10 P.M.', '4:00 P.M.'),  \n    'tiger lecture': ('3:30 P.M.', '4:50 P.M.'),  \n    'bird show': ('5:40 P.M.', '6:25 P.M.')  \n}  \n  \n# Retrieve the start time for the koala feeding event  \nkoala_feeding_start_time = zoo_schedule['koala feeding'][0]  \nanswer = f\"The koala feeding begins at {koala_feeding_start_time}.\"  \nprint(answer)"
], "prediction": ["2:10 P.M.", "2:10 P.M.", "2:10 P.M.", "The koala feeding begins at 2:10 P.M.."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nMixture | Temperature (\u00b0C)\nBromine mixture | -4\nAcetone mixture | 5", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nMixture | Temperature (\u00b0C)\nBromine mixture | -4\nAcetone mixture | 5\n\nIn science class, Alana is measuring the temperature of different chemical mixtures. The temperatures of two mixtures are shown in the table. Which mixture's temperature is closest to zero? Choose from the the options: ['bromine mixture', 'acetone mixture']", "answer": "bromine mixture", "ques_type": "multi_choice", "choices": ["bromine mixture", "acetone mixture"], "code": [
  "# Python code, return answer \nbromine_temp = -4 \nacetone_temp = 5 \n\n# Calculate the absolute distances to zero\ndistance_bromine = abs(bromine_temp)\ndistance_acetone = abs(acetone_temp)\n\n# Determine which mixture is closest to zero\nif distance_bromine < distance_acetone:\n    answer = 'bromine mixture'\nelse:\n    answer = 'acetone mixture'\n\nprint(answer)", "bromine_temp = -4 \nacetone_temp = 5 \n\n# Calculate the absolute distances from zero\ndistance_bromine = abs(bromine_temp)\ndistance_acetone = abs(acetone_temp)\n\n# Determine which mixture's temperature is closest to zero\nif distance_bromine < distance_acetone:\n    answer = 'bromine mixture'\nelse:\n    answer = 'acetone mixture'\n\nprint(answer)", "# Final code to get the answer\nbromine_temp = -4 \nacetone_temp = 5 \n\n# Calculate the distance from zero for both temperatures\ndistance_bromine = abs(bromine_temp)\ndistance_acetone = abs(acetone_temp)\n\n# Determine which temperature is closer to zero\nif distance_bromine < distance_acetone:\n    answer = 'bromine mixture'\nelse:\n    answer = 'acetone mixture'\n\n# Output the result\nprint(answer)", "bromine_temp = -4 \nacetone_temp = 5 \n\ndistance_bromine = abs(bromine_temp)\ndistance_acetone = abs(acetone_temp)\n\nif distance_bromine < distance_acetone:\n    answer = 'bromine mixture'\nelse:\n    answer = 'acetone mixture'\n\nprint(answer)"
], "prediction": ["bromine mixture", "bromine mixture", "bromine mixture", "bromine mixture"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Donations received\" and then answer a question.\n\nCause | May | June\nMedical research | $16 | $8\nAnimals | $13 | $8\nHunger | $12 | $10\nParks | $8 | $10", "question": "Read the following table regarding \"Donations received\" and then write Python code to answer a question.\n\nCause | May | June\nMedical research | $16 | $8\nAnimals | $13 | $8\nHunger | $12 | $10\nParks | $8 | $10\n\nA county agency recorded the money donated to several charitable causes over time. How much money was raised for animals in May?", "answer": "13", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Amount donated for animals in May\ndonation_animals_may = 13\nanswer = donation_animals_may\nprint(answer)", "# Store the donations in a dictionary for better clarity and structure\ndonations = {\n    'Medical research': {'May': 16.0, 'June': 8.0},\n    'Animals': {'May': 13.0, 'June': 8.0},\n    'Hunger': {'May': 12.0, 'June': 10.0},\n    'Parks': {'May': 8.0, 'June': 10.0}\n}\n\n# Access the donation amount for animals in May\ndonation_animals_may = donations['Animals']['May']\nanswer = donation_animals_may\nprint(answer)", "# Define the donations data structure\ndonations = {\n    'Medical research': {'May': 16.0, 'June': 8.0},\n    'Animals': {'May': 13.0, 'June': 8.0},\n    'Hunger': {'May': 12.0, 'June': 10.0},\n    'Parks': {'May': 8.0, 'June': 10.0}\n}\n\n# Retrieve the amount of money raised for animals in May\ndonation_animals_may = donations['Animals']['May']\n\n# Store the result in the variable 'answer'\nanswer = donation_animals_may\n\n# Output the answer\nprint(answer)", "# Define the donations data structure as a dictionary\ndonations = {\n    'Medical research': {'May': 16.0, 'June': 8.0},\n    'Animals': {'May': 13.0, 'June': 8.0},\n    'Hunger': {'May': 12.0, 'June': 10.0},\n    'Parks': {'May': 8.0, 'June': 10.0}\n}\n\n# Retrieve the amount of money raised for animals in May\nanswer = donations['Animals']['May']\nprint(answer)"
], "prediction": [13.0, 13.0, 13.0, 13.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Donations\" and then answer a question.\n\nPerson | Clean water | Animal rights\nIsaiah | $12 | $5\nLiam | $4 | $10\nBridget | $16 | $9\nAnne | $19 | $18", "question": "Read the following table regarding \"Donations\" and then write Python code to answer a question.\n\nPerson | Clean water | Animal rights\nIsaiah | $12 | $5\nLiam | $4 | $10\nBridget | $16 | $9\nAnne | $19 | $18\n\nA philanthropic organization compared the amounts of money that its members donated to certain causes. How much more money did Anne donate to clean water than Bridget?", "answer": "3", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Donations for clean water\nanne_donation = 19 \nbridget_donation = 16 \n# Calculate the difference in donations\ndifference = anne_donation - bridget_donation\nanswer = difference\nprint(answer)", "# Donations made by Anne and Bridget to clean water\nanne_donation_clean_water = 19  \nbridget_donation_clean_water = 16  \n\n# Calculate the difference in donations\ndifference_in_donations = anne_donation_clean_water - bridget_donation_clean_water  \nanswer = difference_in_donations  \n\nprint(answer)", "# Define the donations made by Anne and Bridget to clean water\nanne_donation_clean_water = 19  \nbridget_donation_clean_water = 16  \n\n# Calculate the difference in donations\ndifference_in_donations = anne_donation_clean_water - bridget_donation_clean_water  \n\n# Store the result in the variable 'answer'\nanswer = difference_in_donations  \n\n# Output the answer\nprint(answer)", "# Define the donations for Anne and Bridget specifically for clean water\nanne_donation_clean_water = 19  \nbridget_donation_clean_water = 16  \n\n# Calculate the difference in donations to clean water\ndifference_in_donations = anne_donation_clean_water - bridget_donation_clean_water  \n\n# Store the result as an integer\nanswer = int(difference_in_donations)  \nprint(answer)"], "prediction": [3.0, 3.0, 3.0, 3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nrainbow key chain | $0.75\npumpkin key chain | $0.98\npiano key chain | $0.84\npuppy key chain | $0.94\nglobe key chain | $0.80\nhorse key chain | $0.68", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nrainbow key chain | $0.75\npumpkin key chain | $0.98\npiano key chain | $0.84\npuppy key chain | $0.94\nglobe key chain | $0.80\nhorse key chain | $0.68\n\nHow much money does Vijay need to buy a piano key chain and a pumpkin key chain?", "answer": "1.82", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the key chains\nprice_piano_key_chain = 0.84\nprice_pumpkin_key_chain = 0.98\n# Total cost for both key chains\ntotal_cost = price_piano_key_chain + price_pumpkin_key_chain\nanswer = total_cost\nprint(answer)", "# Prices of the key chains\nprice_piano_key_chain = 0.84\nprice_pumpkin_key_chain = 0.98\n\n# Calculate total cost\ntotal_cost = price_piano_key_chain + price_pumpkin_key_chain\nanswer = total_cost\n\nprint(answer)", "# Define the prices of the key chains\nprice_piano_key_chain = 0.84\nprice_pumpkin_key_chain = 0.98\n\n# Calculate the total cost\ntotal_cost = price_piano_key_chain + price_pumpkin_key_chain\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "# Prices of key chains\nprice_piano_key_chain = 0.84\nprice_pumpkin_key_chain = 0.98\n\n# Calculate total cost for Vijay\ntotal_cost_vijay = price_piano_key_chain + price_pumpkin_key_chain\nanswer = total_cost_vijay\nprint(answer)"], "prediction": [1.82, 1.82, 1.82, 1.82], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Bus schedule\" and then answer a question.\n\nthe mall | 9:45 A.M. | 10:00 A.M. | 10:30 A.M. | 11:00 A.M.\nthe post office | 10:45 A.M. | 11:00 A.M. | 11:30 A.M. | 12:00 P.M.\nthe school | 11:45 A.M. | 12:00 P.M. | 12:30 P.M. | 1:00 P.M.\nthe playground | 12:30 P.M. | 12:45 P.M. | 1:15 P.M. | 1:45 P.M.\nthe library | 1:00 P.M. | 1:15 P.M. | 1:45 P.M. | 2:15 P.M.", "question": "Read the following table regarding \"Bus schedule\" and then write Python code to answer a question.\n\nthe mall | 9:45 A.M. | 10:00 A.M. | 10:30 A.M. | 11:00 A.M.\nthe post office | 10:45 A.M. | 11:00 A.M. | 11:30 A.M. | 12:00 P.M.\nthe school | 11:45 A.M. | 12:00 P.M. | 12:30 P.M. | 1:00 P.M.\nthe playground | 12:30 P.M. | 12:45 P.M. | 1:15 P.M. | 1:45 P.M.\nthe library | 1:00 P.M. | 1:15 P.M. | 1:45 P.M. | 2:15 P.M.\n\nLook at the following schedule. Jayla got on the bus at the mall at 10.30 A.M. What time will she get to the playground? Choose from the the options: ['1:15 P.M.', '1:45 P.M.', '11:00 A.M.', '10:45 A.M.']", "answer": "1:15 P.M.", "ques_type": "multi_choice", "choices": ["1:15 P.M.", "1:45 P.M.", "11:00 A.M.", "10:45 A.M."], "code": [
  "# Python code, return answer\n# From the table, we can analyze the bus schedule.\n# Jayla gets on the bus at the mall at 10:30 A.M.\n# The next bus schedule is:\n# 10:30 A.M. from the mall takes her to the post office\n# The post office bus at 11:00 A.M. takes her to the school\n# From the school, the next bus at 12:30 P.M. goes to the playground\n\n# Therefore, the complete journey is:\n# 10:30 A.M. mall -> 10:45 A.M. post office (15 min)\n# 11:00 A.M. post office -> 11:30 A.M. school (30 min)\n# Wait at the school until 12:30 P.M.\n# 12:30 P.M. school -> 1:15 P.M. playground\n\narrival_time_playground = '1:15 P.M.'\nanswer = arrival_time_playground\nprint(answer)", "# Define the bus schedule as a dictionary\nbus_schedule = {\n    'the mall': ['9:45 A.M.', '10:00 A.M.', '10:30 A.M.', '11:00 A.M.'],\n    'the post office': ['10:45 A.M.', '11:00 A.M.', '11:30 A.M.', '12:00 P.M.'],\n    'the school': ['11:45 A.M.', '12:00 P.M.', '12:30 P.M.', '1:00 P.M.'],\n    'the playground': ['12:30 P.M.', '12:45 P.M.', '1:15 P.M.', '1:45 P.M.'],\n    'the library': ['1:00 P.M.', '1:15 P.M.', '1:45 P.M.', '2:15 P.M.']\n}\n\n# Jayla got on the bus at the mall at 10:30 A.M.\nmall_departure_time = '10:30 A.M.'\n\n# Determine the next bus from the mall after 10:30 A.M.\nnext_bus_time = bus_schedule['the mall'][2]  # The next bus after 10:30 A.M. is at 11:00 A.M.\n\n# Assuming the bus takes a direct route to the playground, we find the corresponding arrival time.\narrival_time_playground = bus_schedule['the playground'][0]  # The first bus to the playground after getting off at the post office\n\nanswer = arrival_time_playground\nprint(answer)", "# Define the bus schedule as a dictionary\nbus_schedule = {\n    'the mall': ['9:45 A.M.', '10:00 A.M.', '10:30 A.M.', '11:00 A.M.'],\n    'the post office': ['10:45 A.M.', '11:00 A.M.', '11:30 A.M.', '12:00 P.M.'],\n    'the school': ['11:45 A.M.', '12:00 P.M.', '12:30 P.M.', '1:00 P.M.'],\n    'the playground': ['12:30 P.M.', '12:45 P.M.', '1:15 P.M.', '1:45 P.M.'],\n    'the library': ['1:00 P.M.', '1:15 P.M.', '1:45 P.M.', '2:15 P.M.']\n}\n\n# Jayla's departure time from the mall\nmall_departure_time = '10:30 A.M.'\n\n# Determine the time she arrives at the post office\npost_office_arrival_time = bus_schedule['the post office'][0]  # The first bus after 10:30 A.M. from the mall is at 10:45 A.M.\n\n# Determine the next bus time to the playground after arriving at the post office\n# The next bus from post office after 10:45 A.M. is at 11:00 A.M.\nnext_bus_to_playground_time = bus_schedule['the playground'][0]  # The first bus to the playground is at 12:30 P.M.\n\n# Store the arrival time at the playground\nanswer = next_bus_to_playground_time\n\nprint(answer)", "# Define the bus schedule\nbus_schedule = {\n    'the mall': ['9:45 A.M.', '10:00 A.M.', '10:30 A.M.', '11:00 A.M.'],\n    'the post office': ['10:45 A.M.', '11:00 A.M.', '11:30 A.M.', '12:00 P.M.'],\n    'the school': ['11:45 A.M.', '12:00 P.M.', '12:30 P.M.', '1:00 P.M.'],\n    'the playground': ['12:30 P.M.', '12:45 P.M.', '1:15 P.M.', '1:45 P.M.'],\n    'the library': ['1:00 P.M.', '1:15 P.M.', '1:45 P.M.', '2:15 P.M.']\n}\n\n# Jayla gets on the bus at the mall at 10:30 A.M.\nmall_departure_time = '10:30 A.M.'\n\n# The next bus from the mall after 10:30 A.M. is at 11:00 A.M.\npost_office_departure_time = bus_schedule['the mall'][3]  # 11:00 A.M.\n# The first bus from the post office to the playground is at 12:30 P.M.\nplayground_arrival_time = bus_schedule['the playground'][0]  # 12:30 P.M.\n\n# The time Jayla will get to the playground\nanswer = playground_arrival_time\nprint(answer)"
], "prediction": ["1:15 P.M.", "12:30 P.M.", "12:30 P.M.", "12:30 P.M."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nblackberry jam | $2/kilogram\nmarmalade | $2/kilogram\napple butter | $3/kilogram\nboysenberry jam | $3/kilogram", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nblackberry jam | $2/kilogram\nmarmalade | $2/kilogram\napple butter | $3/kilogram\nboysenberry jam | $3/kilogram\n\nEmmett went to the store and bought 1.4 kilograms of marmalade. How much did he spend?", "answer": "2.80", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \nprice_per_kilogram_marmalade = 2 \nkilograms_bought = 1.4 \n# Calculate total cost\ntotal_cost = price_per_kilogram_marmalade * kilograms_bought\nanswer = total_cost\nprint(answer)", "# Define the price per kilogram of marmalade and the amount bought\nprice_per_kilogram_marmalade = 2  # price in dollars\nkilograms_bought = 1.4  # amount in kilograms\n\n# Calculate the total cost\ntotal_cost_marmalade = price_per_kilogram_marmalade * kilograms_bought\n\n# Assign the result to answer\nanswer = total_cost_marmalade\n\n# Print the result\nprint(f\"The total cost for {kilograms_bought} kilograms of marmalade is: ${answer:.2f}\")", "# Define the price per kilogram of marmalade and the amount bought\nprice_per_kilogram_marmalade = 2  # price in dollars\nkilograms_bought = 1.4  # amount in kilograms\n\n# Calculate the total cost for the marmalade\ntotal_cost_marmalade = price_per_kilogram_marmalade * kilograms_bought\n\n# Store the result in the variable 'answer'\nanswer = total_cost_marmalade\n\n# Output the answer\nprint(answer)", "# Define the price per kilogram for marmalade  \nprice_per_kilogram_marmalade = 2  # price in dollars  \nkilograms_bought = 1.4  # amount in kilograms  \n\n# Calculate the total cost for marmalade  \ntotal_cost_marmalade = price_per_kilogram_marmalade * kilograms_bought  \nanswer = total_cost_marmalade  \n\nprint(answer)  # Output the result"
], "prediction": [2.8, 2.8, 2.8, 2.8], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n7 | 17\n8 | 10\n9 | 5", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n7 | 17\n8 | 10\n9 | 5\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "nonlinear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for equal differences in x-values.\nx_values = [7, 8, 9]\ny_values = [17, 10, 5]\n\n# Calculate the differences\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n# Check if the differences are constant\nis_linear = all(difference == differences[0] for difference in differences)\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values\nx_values = [7, 8, 9]\ny_values = [17, 10, 5]\n\n# Calculate the differences between consecutive y-values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if all differences are the same\nis_linear = all(difference == differences[0] for difference in differences)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values from the table\nx_values = [7, 8, 9]\ny_values = [17, 10, 5]\n\n# Calculate the differences between consecutive y-values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if all differences are the same (indicating a linear function)\nis_linear = all(difference == differences[0] for difference in differences)\n\n# Assign the result to answer based on the linearity check\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values from the table\nx_values = [7, 8, 9]\ny_values = [17, 10, 5]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i + 1] - y_values[i] for i in range(len(y_values) - 1)]\n\n# Check if all differences are the same to determine linearity\nis_linear = all(difference == differences[0] for difference in differences)\n\n# Assign the answer based on the linearity check\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")"]
}
{
  "context": "Read the following table regarding \"Hotel shuttle bus schedule\" and then answer a question.\n\namusement park | 9:45 A.M. | 10:00 A.M. | 10:15 A.M. | 10:30 A.M. | 11:00 A.M.\ncollege campus | 10:45 A.M. | 11:00 A.M. | 11:15 A.M. | 11:30 A.M. | 12:00 P.M.\nart museum | 11:45 A.M. | 12:00 P.M. | 12:15 P.M. | 12:30 P.M. | 1:00 P.M.\nairport | 12:15 P.M. | 12:30 P.M. | 12:45 P.M. | 1:00 P.M. | 1:30 P.M.\npark | 1:00 P.M. | 1:15 P.M. | 1:30 P.M. | 1:45 P.M. | 2:15 P.M.", "question": "Read the following table regarding \"Hotel shuttle bus schedule\" and then write Python code to answer a question.\n\namusement park | 9:45 A.M. | 10:00 A.M. | 10:15 A.M. | 10:30 A.M. | 11:00 A.M.\ncollege campus | 10:45 A.M. | 11:00 A.M. | 11:15 A.M. | 11:30 A.M. | 12:00 P.M.\nart museum | 11:45 A.M. | 12:00 P.M. | 12:15 P.M. | 12:30 P.M. | 1:00 P.M.\nairport | 12:15 P.M. | 12:30 P.M. | 12:45 P.M. | 1:00 P.M. | 1:30 P.M.\npark | 1:00 P.M. | 1:15 P.M. | 1:30 P.M. | 1:45 P.M. | 2:15 P.M.\n\nLook at the following schedule. Rick just missed the 10.00 A.M. bus at the amusement park. How long does he have to wait until the next bus? Choose from the the options: ['45 minutes', '15 minutes', '1 hour', '30 minutes']", "answer": "15 minutes", "ques_type": "multi_choice", "choices": ["45 minutes", "15 minutes", "1 hour", "30 minutes"], "code": [
  "# Python code, return answer \n# Rick just missed the 10:00 A.M. bus, so the next bus is at 10:15 A.M.\nnext_bus_time = \"10:15 A.M.\"\n# Time difference between 10:00 A.M. and 10:15 A.M. is 15 minutes\nwait_time_minutes = 15\nanswer = f\"{wait_time_minutes} minutes\"\nprint(answer)", "# Define the missed bus time and the next bus time\nmissed_bus_time = \"10:00 A.M.\"\nnext_bus_time = \"10:15 A.M.\"\n\n# Convert the times to minutes past midnight for easier calculation\ndef time_to_minutes(time_str):\n    time_parts = time_str.split()\n    time = time_parts[0].split(':')\n    hours = int(time[0])\n    minutes = int(time[1])\n    \n    if time_parts[1] == \"P.M.\" and hours != 12:\n        hours += 12\n    elif time_parts[1] == \"A.M.\" and hours == 12:\n        hours = 0\n        \n    return hours * 60 + minutes\n\n# Calculate the wait time in minutes\nmissed_bus_minutes = time_to_minutes(missed_bus_time)\nnext_bus_minutes = time_to_minutes(next_bus_time)\nwait_time_minutes = next_bus_minutes - missed_bus_minutes\n\nanswer = f\"{wait_time_minutes} minutes\"\nprint(answer)", "# Define the missed bus time and the next bus time\nmissed_bus_time = \"10:00 A.M.\"\nnext_bus_time = \"10:15 A.M.\"\n\n# Function to convert time in string format to total minutes\ndef time_to_minutes(time_str):\n    time_parts = time_str.split()\n    time = time_parts[0].split(':')\n    hours = int(time[0])\n    minutes = int(time[1])\n    if time_parts[1] == \"P.M.\" and hours != 12:\n        hours += 12\n    elif time_parts[1] == \"A.M.\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Calculate the minutes for missed and next bus times\nmissed_bus_minutes = time_to_minutes(missed_bus_time)\nnext_bus_minutes = time_to_minutes(next_bus_time)\n\n# Calculate the wait time in minutes\nwait_time_minutes = next_bus_minutes - missed_bus_minutes\n\n# Store the wait time as a string in the required format\nanswer = f\"{wait_time_minutes} minutes\"\n\nprint(answer)", "# Define the missed bus time and next bus time\nmissed_bus_time = \"10:00 A.M.\"\nnext_bus_time = \"10:15 A.M.\"\n\n# Function to convert time in \"hh:mm A.M./P.M.\" format to minutes since midnight\ndef time_to_minutes(time_str):\n    time_parts = time_str.split()\n    time = time_parts[0].split(':')\n    hours = int(time[0])\n    minutes = int(time[1])\n    if time_parts[1] == \"P.M.\" and hours != 12:\n        hours += 12\n    elif time_parts[1] == \"A.M.\" and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Calculate the missed bus and next bus times in minutes\nmissed_bus_minutes = time_to_minutes(missed_bus_time)\nnext_bus_minutes = time_to_minutes(next_bus_time)\n\n# Calculate the wait time\nwait_time_minutes = next_bus_minutes - missed_bus_minutes\n\n# Ensure wait time is non-negative\nif wait_time_minutes < 0:\n    wait_time_minutes = 0\n\n# Format the answer\nanswer = f\"{wait_time_minutes} minutes\"\nprint(answer)"
], "prediction": ["15 minutes", "15 minutes", "15 minutes", "15 minutes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Trips to the park last week\" and then answer a question.\n\nNumber of trips | Frequency\n0 | 17\n1 | 5\n2 | 16\n3 | 4", "question": "Read the following table regarding \"Trips to the park last week\" and then write Python code to answer a question.\n\nNumber of trips | Frequency\n0 | 17\n1 | 5\n2 | 16\n3 | 4\n\nSome students in a biology class compared how many times they went to the park last week to work on their plant research projects. How many students went to the park fewer than 2 times?", "answer": "22", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of students going to the park\nfrequency = {\n    0: 17,\n    1: 5,\n    2: 16,\n    3: 4\n}\n# Calculate the number of students who went to the park fewer than 2 times\nstudents_fewer_than_2_times = frequency[0] + frequency[1]\nanswer = students_fewer_than_2_times\nprint(answer)", "frequency = {\n    0: 17,\n    1: 5,\n    2: 16,\n    3: 4\n}\nstudents_fewer_than_2_times = frequency[0] + frequency[1]\nanswer = int(students_fewer_than_2_times)  # Ensuring the result is an integer\nprint(answer)", "frequency = {\n    0: 17,\n    1: 5,\n    2: 16,\n    3: 4\n}\nstudents_fewer_than_2_times = frequency[0] + frequency[1]\nanswer = students_fewer_than_2_times  # No need to convert to int, as it's already an integer\nprint(answer)", "frequency = {\n    0: 17,\n    1: 5,\n    2: 16,\n    3: 4\n}\nstudents_fewer_than_2_times = frequency[0] + frequency[1]\nanswer = students_fewer_than_2_times  # This is already an integer\nprint(answer)"], "prediction": [22.0, 22.0, 22.0, 22.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Years of teaching\" and then answer a question.\n\nTeacher | Number of years\nMr. Nakamura | 9\nMiss Torres | 11\nMr. Perez | 11\nMr. Park | 10\nMiss Watson | 9\nMrs. Ramirez | 9\nMs. Chan | 2\nMiss Lim | 11", "question": "Read the following table regarding \"Years of teaching\" and then write Python code to answer a question.\n\nTeacher | Number of years\nMr. Nakamura | 9\nMiss Torres | 11\nMr. Perez | 11\nMr. Park | 10\nMiss Watson | 9\nMrs. Ramirez | 9\nMs. Chan | 2\nMiss Lim | 11\n\nSome teachers compared how many years they have been teaching. What is the mean of the numbers?", "answer": "9", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of years of teaching for each teacher\nyears_of_teaching = [9, 11, 11, 10, 9, 9, 2, 11]\n# Calculate the mean\nmean_years = sum(years_of_teaching) / len(years_of_teaching)\nanswer = mean_years\nprint(answer)", "years_of_teaching = [9, 11, 11, 10, 9, 9, 2, 11]\nmean_years = sum(years_of_teaching) / len(years_of_teaching)\nanswer = round(mean_years, 2)  # rounding to two decimal places for better precision\nprint(answer)", "years_of_teaching = [9, 11, 11, 10, 9, 9, 2, 11]\nmean_years = sum(years_of_teaching) / len(years_of_teaching)\nanswer = round(mean_years, 2)  # rounding to two decimal places for better precision\nprint(answer)", "years_of_teaching = [9, 11, 11, 10, 9, 9, 2, 11]\nmean_years = sum(years_of_teaching) / len(years_of_teaching)\nanswer = round(mean_years, 2)  # rounding to two decimal places for better precision\nprint(answer)"], "prediction": [9.0, 9.0, 9.0, 9.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Smoothies sold\" and then answer a question.\n\nDay | Number of smoothies\nSunday | 69\nMonday | 64\nTuesday | 61\nWednesday | 65", "question": "Read the following table regarding \"Smoothies sold\" and then write Python code to answer a question.\n\nDay | Number of smoothies\nSunday | 69\nMonday | 64\nTuesday | 61\nWednesday | 65\n\nA juice shop tracked how many smoothies it sold in the past 4 days. On which day did the shop sell the most smoothies? Choose from the the options: ['Sunday', 'Monday', 'Tuesday', 'Wednesday']", "answer": "Sunday", "ques_type": "multi_choice", "choices": ["Sunday", "Monday", "Tuesday", "Wednesday"], "code": [
  "# Python code, return answer \nsmoothies_sold = {\n    'Sunday': 69,\n    'Monday': 64,\n    'Tuesday': 61,\n    'Wednesday': 65\n}\n# Find the day with the most smoothies sold\nmost_smoothies_day = max(smoothies_sold, key=smoothies_sold.get)\nanswer = most_smoothies_day\nprint(answer)", "# Store the number of smoothies sold each day in a dictionary\nsmoothies_sold = {\n    'Sunday': 69,\n    'Monday': 64,\n    'Tuesday': 61,\n    'Wednesday': 65\n}\n\n# Find the day with the most smoothies sold\nmost_smoothies_day = max(smoothies_sold, key=smoothies_sold.get)\n\n# Assign the result to the variable 'answer'\nanswer = most_smoothies_day\n\n# Print the answer\nprint(answer)", "# Define the number of smoothies sold each day in a dictionary\nsmoothies_sold = {\n    'Sunday': 69,\n    'Monday': 64,\n    'Tuesday': 61,\n    'Wednesday': 65\n}\n\n# Find the day with the most smoothies sold\nmost_smoothies_day = max(smoothies_sold, key=smoothies_sold.get)\n\n# Store the result in the variable 'answer'\nanswer = most_smoothies_day\n\n# Output the answer\nprint(answer)", "# Store the number of smoothies sold each day in a dictionary\nsmoothies_sold = {\n    'Sunday': 69,\n    'Monday': 64,\n    'Tuesday': 61,\n    'Wednesday': 65\n}\n\n# Find the day with the most smoothies sold\nmost_smoothies_day = max(smoothies_sold, key=smoothies_sold.get)\nanswer = most_smoothies_day\n\nprint(answer)"
], "prediction": ["Sunday", "Sunday", "Sunday", "Sunday"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Test scores\" and then answer a question.\n\nStem | Leaf \n2 | 4, 8\n3 | \n4 | 3\n5 | 1, 2\n6 | \n7 | 0\n8 | 4, 8, 8\n9 | 0", "question": "Read the following table regarding \"Test scores\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 4, 8\n3 | \n4 | 3\n5 | 1, 2\n6 | \n7 | 0\n8 | 4, 8, 8\n9 | 0\n\nPrincipal Crawford reported the state test scores from some students at her school. How many students scored exactly 48 points?", "answer": "0", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# From the stem-and-leaf display, \"4 | 8\" indicates a score of 48 points.\n# Since there is one '8' in the leaf for stem '4', there is exactly one student with a score of 48.\nnumber_of_students_scoring_48 = 1\nanswer = number_of_students_scoring_48\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [4, 8]), (3, []), (4, [3]), (5, [1, 2]), (6, []), (7, [0]), (8, [4, 8, 8]), (9, [0])]  \n\n# Initialize counter for students scoring exactly 48 points  \nnumber_of_students_scoring_48 = 0  \n\n# Iterate through the stem and leaf data structure to count students scoring 48  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        score = stem * 10 + leaf  \n        if score == 48:  \n            number_of_students_scoring_48 += 1  \n\nanswer = number_of_students_scoring_48  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [4, 8]), (3, []), (4, [3]), (5, [1, 2]), (6, []), (7, [0]), (8, [4, 8, 8]), (9, [0])]  \n\n# Initialize counter for students scoring exactly 48 points  \nnumber_of_students_scoring_48 = 0  \n\n# Iterate through the stem and leaf data structure and count relevant scores  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        score = stem * 10 + leaf  \n        if score == 48:  \n            number_of_students_scoring_48 += 1  \n\n# Ensure the answer is an integer  \nanswer = int(number_of_students_scoring_48)  \nprint(answer)", "# Define the stem and leaf data structure  \nstem_and_leaf = [(2, [4, 8]), (3, []), (4, [3]), (5, [1, 2]), (6, []), (7, [0]), (8, [4, 8, 8]), (9, [0])]  \n\n# Initialize counter for students scoring exactly 48  \nnumber_of_students_scoring_48 = 0  \n\n# Iterate through the stem and leaf data structure and count students scoring exactly 48  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        score = stem * 10 + leaf  \n        if score == 48:  \n            number_of_students_scoring_48 += 1  \n\nanswer = number_of_students_scoring_48  \nprint(answer)"
], "prediction": [1.0, 0.0, 0.0, 0.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Straight-A students\" and then answer a question.\n\nYear | Students\n2016 | 12\n2017 | 22\n2018 | 21\n2019 | 25\n2020 | 23", "question": "Read the following table regarding \"Straight-A students\" and then write Python code to answer a question.\n\nYear | Students\n2016 | 12\n2017 | 22\n2018 | 21\n2019 | 25\n2020 | 23\n\nA school administrator who was concerned about grade inflation looked over the number of straight-A students from year to year. According to the table, what was the rate of change between 2019 and 2020?", "answer": "-2", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of straight-A students in 2019 and 2020\nstudents_2019 = 25\nstudents_2020 = 23\n# Calculate the rate of change\nrate_of_change = students_2020 - students_2019\nanswer = rate_of_change\nprint(answer)", "students_2019 = 25\nstudents_2020 = 23\nrate_of_change = (students_2020 - students_2019) / students_2019 * 100  # Calculate percentage change\nanswer = rate_of_change\nprint(answer)", "students_2019 = 25\nstudents_2020 = 23\nrate_of_change = (students_2020 - students_2019) / students_2019 * 100  # Calculate percentage change\nanswer = f\"The rate of change in the number of straight-A students from 2019 to 2020 is {rate_of_change:.2f}%.\"\nprint(answer)", "students_2019 = 25\nstudents_2020 = 23\nrate_of_change = (students_2020 - students_2019) / students_2019 * 100  # Calculate percentage change\nanswer = f\"The rate of change in the number of straight-A students from 2019 to 2020 is {rate_of_change:.2f}%.\""], "prediction": [-2.0, -8.0, "The rate of change in the number of straight-A students from 2019 to 2020 is -8.00%.", "The rate of change in the number of straight-A students from 2019 to 2020 is -8.00%."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nEmployee | Pay period |\nIsabel Jordan | October 1-15 |\nTotal earnings | | $2,100.00\nFederal income tax | $295.00 |\nState income tax | $121.59 |\nOther taxes | $160.60 |\nTotal taxes | | ?\nPay after taxes | | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nEmployee | Pay period |\nIsabel Jordan | October 1-15 |\nTotal earnings | | $2,100.00\nFederal income tax | $295.00 |\nState income tax | $121.59 |\nOther taxes | $160.60 |\nTotal taxes | | ?\nPay after taxes | | ?\n\nLook at Isabel's pay stub. Isabel lives in a state that has state income tax. How much did Isabel make after taxes?", "answer": "1,522.81", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Given amounts\ntotal_earnings = 2100.00\nfederal_income_tax = 295.00\nstate_income_tax = 121.59\nother_taxes = 160.60\n\n# Total taxes calculated by summing individual taxes\ntotal_taxes = federal_income_tax + state_income_tax + other_taxes\n\n# Calculate pay after taxes\npay_after_taxes = total_earnings - total_taxes\nanswer = pay_after_taxes\nprint(answer)", "# Define the earnings and tax amounts\ntotal_earnings = 2100.00\nfederal_income_tax = 295.00\nstate_income_tax = 121.59\nother_taxes = 160.60\n\n# Calculate total taxes and pay after taxes\ntotal_taxes = federal_income_tax + state_income_tax + other_taxes\npay_after_taxes = total_earnings - total_taxes\n\n# Store the final answer\nanswer = round(pay_after_taxes, 2)  # rounding to 2 decimal places for currency format\n\nprint(answer)", "# Define the earnings and taxes\ntotal_earnings = 2100.00\nfederal_income_tax = 295.00\nstate_income_tax = 121.59\nother_taxes = 160.60\n\n# Calculate total taxes and pay after taxes\ntotal_taxes = federal_income_tax + state_income_tax + other_taxes\npay_after_taxes = total_earnings - total_taxes\n\n# Store the result in the variable 'answer' and round to 2 decimal places\nanswer = round(pay_after_taxes, 2)  # rounding to 2 decimal places for currency format\nprint(answer)", "total_earnings = 2100.00\nfederal_income_tax = 295.00\nstate_income_tax = 121.59\nother_taxes = 160.60\ntotal_taxes = federal_income_tax + state_income_tax + other_taxes\npay_after_taxes = total_earnings - total_taxes\nanswer = round(pay_after_taxes, 2)  # rounding to 2 decimal places for currency format\nprint(answer)"
], "prediction": [1522.81, 1522.81, 1522.81, 1522.81], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"School picnic schedule\" and then answer a question.\n\nEvent | Begin | End\nsoftball game | 10:15 A.M. | 11:00 A.M.\npie-eating contest | 11:15 A.M. | 12:10 P.M.\nsoccer game | 12:25 P.M. | 12:55 P.M.\ndance competition | 12:35 P.M. | 1:35 P.M.\nswimming competition | 1:30 P.M. | 2:05 P.M.\nobstacle course | 2:05 P.M. | 2:45 P.M.\nlunch | 2:50 P.M. | 3:15 P.M.", "question": "Read the following table regarding \"School picnic schedule\" and then write Python code to answer a question.\n\nEvent | Begin | End\nsoftball game | 10:15 A.M. | 11:00 A.M.\npie-eating contest | 11:15 A.M. | 12:10 P.M.\nsoccer game | 12:25 P.M. | 12:55 P.M.\ndance competition | 12:35 P.M. | 1:35 P.M.\nswimming competition | 1:30 P.M. | 2:05 P.M.\nobstacle course | 2:05 P.M. | 2:45 P.M.\nlunch | 2:50 P.M. | 3:15 P.M.\n\nLook at the following schedule. Which event ends at 1.35 P.M.? Choose from the the options: ['soccer game', 'dance competition', 'obstacle course', 'swimming competition']", "answer": "dance competition", "ques_type": "multi_choice", "choices": ["soccer game", "dance competition", "obstacle course", "swimming competition"], "code": [
  "# Python code, return answer \n# Define the events and their end times\nevents = {\n    'softball game': '11:00 A.M.',\n    'pie-eating contest': '12:10 P.M.',\n    'soccer game': '12:55 P.M.',\n    'dance competition': '1:35 P.M.',\n    'swimming competition': '2:05 P.M.',\n    'obstacle course': '2:45 P.M.',\n    'lunch': '3:15 P.M.'\n}\n\n# Find the event that ends at 1:35 P.M.\nevent_ending_at_135 = [event for event, end_time in events.items() if end_time == '1:35 P.M.']\nanswer = event_ending_at_135[0]  # there should only be one event\nprint(answer)", "events = {\n    'softball game': '11:00 A.M.',\n    'pie-eating contest': '12:10 P.M.',\n    'soccer game': '12:55 P.M.',\n    'dance competition': '1:35 P.M.',\n    'swimming competition': '2:05 P.M.',\n    'obstacle course': '2:45 P.M.',\n    'lunch': '3:15 P.M.'\n}\n\n# Find the event that ends at 1:35 P.M.\nanswer = next((event for event, end_time in events.items() if end_time == '1:35 P.M.'), None)\n\nprint(answer)", "events = {\n    'softball game': '11:00 A.M.',\n    'pie-eating contest': '12:10 P.M.',\n    'soccer game': '12:55 P.M.',\n    'dance competition': '1:35 P.M.',\n    'swimming competition': '2:05 P.M.',\n    'obstacle course': '2:45 P.M.',\n    'lunch': '3:15 P.M.'\n}\n\n# Initialize variable to store the answer\nanswer = None\n\n# Iterate through the events to find the one that ends at 1:35 P.M.\nfor event, end_time in events.items():\n    if end_time == '1:35 P.M.':\n        answer = event\n        break\n\nprint(answer)", "# Define the events and their end times in a dictionary\nevents = {\n    'softball game': '11:00 A.M.',\n    'pie-eating contest': '12:10 P.M.',\n    'soccer game': '12:55 P.M.',\n    'dance competition': '1:35 P.M.',\n    'swimming competition': '2:05 P.M.',\n    'obstacle course': '2:45 P.M.',\n    'lunch': '3:15 P.M.'\n}\n\n# Directly access the event that ends at 1:35 P.M.\nanswer = next(event for event, end_time in events.items() if end_time == '1:35 P.M.')\n\nprint(answer)"
], "prediction": ["dance competition", "dance competition", "dance competition", "dance competition"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nshiny metal bead | $0.16\ntiny gold bead | $0.15\nbrown cat's eye bead | $0.95\nshiny red bead | $0.77\noval turquoise bead | $0.75", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nshiny metal bead | $0.16\ntiny gold bead | $0.15\nbrown cat's eye bead | $0.95\nshiny red bead | $0.77\noval turquoise bead | $0.75\n\nPedro has $1.00. Does he have enough to buy a tiny gold bead and a brown cat's eye bead? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# Prices of the beads\nprice_tiny_gold_bead = 0.15\nprice_brown_cats_eye_bead = 0.95\n# Total cost of the beads\ntotal_cost = price_tiny_gold_bead + price_brown_cats_eye_bead\n# Pedro's budget\nbudget = 1.00\n# Determine if Pedro has enough money\nif total_cost <= budget:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "# Prices of the beads\nprice_tiny_gold_bead = 0.15\nprice_brown_cats_eye_bead = 0.95\n\n# Total cost of both beads\ntotal_cost = price_tiny_gold_bead + price_brown_cats_eye_bead\n\n# Pedro's budget\nbudget = 1.00\n\n# Check if Pedro has enough money\nif total_cost <= budget:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Prices of the beads\nprice_tiny_gold_bead = 0.15\nprice_brown_cats_eye_bead = 0.95\n\n# Calculate total cost\ntotal_cost = price_tiny_gold_bead + price_brown_cats_eye_bead\n\n# Pedro's budget\nbudget = 1.00\n\n# Determine if Pedro has enough money\nanswer = 'yes' if total_cost <= budget else 'no'\nprint(answer)", "# Define the prices of the beads\nprice_tiny_gold_bead = 0.15\nprice_brown_cats_eye_bead = 0.95\n\n# Calculate the total cost of the beads\ntotal_cost = price_tiny_gold_bead + price_brown_cats_eye_bead\n\n# Define Pedro's budget\nbudget = 1.00\n\n# Determine if Pedro has enough money to buy both beads\nanswer = 'yes' if total_cost <= budget else 'no'\nprint(answer)"
], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Tour bus schedule\" and then answer a question.\n\nskyscraper | 9:30 A.M. | 10:15 A.M. | 10:45 A.M.\ndowntown | 10:30 A.M. | 11:15 A.M. | 11:45 A.M.\ncity hall | 11:15 A.M. | 12:00 P.M. | 12:30 P.M.\nart museum | 12:15 P.M. | 1:00 P.M. | 1:30 P.M.\nthe zoo | 1:15 P.M. | 2:00 P.M. | 2:30 P.M.", "question": "Read the following table regarding \"Tour bus schedule\" and then write Python code to answer a question.\n\nskyscraper | 9:30 A.M. | 10:15 A.M. | 10:45 A.M.\ndowntown | 10:30 A.M. | 11:15 A.M. | 11:45 A.M.\ncity hall | 11:15 A.M. | 12:00 P.M. | 12:30 P.M.\nart museum | 12:15 P.M. | 1:00 P.M. | 1:30 P.M.\nthe zoo | 1:15 P.M. | 2:00 P.M. | 2:30 P.M.\n\nLook at the following schedule. Sharon got on the bus at downtown at 11.45 A.M. What time will she get to the art museum? Choose from the the options: ['1:30 P.M.', '12:30 P.M.', '1:15 P.M.', '12:15 P.M.']", "answer": "1:30 P.M.", "ques_type": "multi_choice", "choices": ["1:30 P.M.", "12:30 P.M.", "1:15 P.M.", "12:15 P.M."], "code": [
  "# Python code, return answer \n# Sharon gets on the bus at downtown at 11:45 A.M. and needs to reach art museum.\n# Based on the schedule:\n# From downtown to city hall: 11:45 A.M. to 12:00 P.M.\n# From city hall to art museum: 12:15 P.M. (next available bus after city hall)\nanswer = '12:15 P.M.'\nprint(answer)", "# Define the bus schedule as a dictionary\nbus_schedule = {\n    'downtown': ['10:30 A.M.', '11:15 A.M.', '11:45 A.M.'],\n    'city hall': ['11:15 A.M.', '12:00 P.M.', '12:30 P.M.'],\n    'art museum': ['12:15 P.M.', '1:00 P.M.', '1:30 P.M.'],\n}\n\n# Determine the time Sharon gets on the bus\nsharon_board_time = '11:45 A.M.'\n\n# Find the next stop after downtown, which is city hall\narrival_time_at_city_hall = bus_schedule['city hall'][0]  # The first bus leaves downtown at 11:45 A.M.\n\n# Now find the time for the next bus from city hall to the art museum\narrival_time_at_art_museum = bus_schedule['art museum'][0]  # The first bus leaves city hall at 12:15 P.M.\n\nanswer = arrival_time_at_art_museum\nprint(answer)", "# Define the bus schedule\nbus_schedule = {\n    'downtown': ['10:30 A.M.', '11:15 A.M.', '11:45 A.M.'],\n    'city hall': ['11:15 A.M.', '12:00 P.M.', '12:30 P.M.'],\n    'art museum': ['12:15 P.M.', '1:00 P.M.', '1:30 P.M.'],\n}\n\n# Sharon boards the bus at downtown at 11:45 A.M.\nsharon_board_time = '11:45 A.M.'\n\n# Find the time she arrives at city hall\narrival_time_at_city_hall = bus_schedule['city hall'][1]  # The bus from downtown arrives at city hall at 12:00 P.M.\n\n# Find the next bus from city hall to the art museum\narrival_time_at_art_museum = bus_schedule['art museum'][0]  # The first bus leaves city hall at 12:15 P.M.\n\n# Since she arrives at city hall at 12:00 P.M., she can take the bus to the art museum at 12:15 P.M.\nanswer = arrival_time_at_art_museum\n\nprint(answer)", "# Define the bus schedule as a dictionary with the times for each stop\nbus_schedule = {\n    'downtown': ['10:30 A.M.', '11:15 A.M.', '11:45 A.M.'],\n    'city hall': ['11:15 A.M.', '12:00 P.M.', '12:30 P.M.'],\n    'art museum': ['12:15 P.M.', '1:00 P.M.', '1:30 P.M.'],\n}\n\n# Sharon boards the bus at downtown at 11:45 A.M.\nsharon_board_time = '11:45 A.M.'\n\n# Determine the time she arrives at city hall\narrival_time_at_city_hall = bus_schedule['city hall'][1]  # The bus from downtown arrives at city hall at 12:00 P.M.\n\n# Determine the time she can leave city hall for the art museum\n# The first bus leaves city hall at 12:15 P.M.\nif arrival_time_at_city_hall <= '12:15 P.M.':\n    arrival_time_at_art_museum = bus_schedule['art museum'][0]  # 12:15 P.M.\nelse:\n    arrival_time_at_art_museum = bus_schedule['art museum'][1]  # 1:00 P.M.\n\nanswer = arrival_time_at_art_museum\nprint(answer)"
], "prediction": ["12:15 P.M.", "12:15 P.M.", "12:15 P.M.", "12:15 P.M."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Time Ronald spent on homework\" and then answer a question.\n\nDay | Minutes\nTuesday | 34\nWednesday | 36\nThursday | 45\nFriday | 40\nSaturday | 41", "question": "Read the following table regarding \"Time Ronald spent on homework\" and then write Python code to answer a question.\n\nDay | Minutes\nTuesday | 34\nWednesday | 36\nThursday | 45\nFriday | 40\nSaturday | 41\n\nRonald kept track of how long it took to finish his homework each day. According to the table, what was the rate of change between Friday and Saturday?", "answer": "1", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Minutes spent on homework\nfriday_minutes = 40\nsaturday_minutes = 41\n\n# Rate of change calculation\nrate_of_change = saturday_minutes - friday_minutes\nanswer = rate_of_change\nprint(answer)", "friday_minutes = 40\nsaturday_minutes = 41\ntime_interval = 1  # days\nrate_of_change = (saturday_minutes - friday_minutes) / time_interval\nanswer = rate_of_change\nprint(answer)", "# Define the minutes spent on homework for Friday and Saturday\nfriday_minutes = 40\nsaturday_minutes = 41\n\n# Calculate the rate of change between Friday and Saturday\ntime_interval = 1  # days\nrate_of_change = (saturday_minutes - friday_minutes) / time_interval\n\n# Store the result in the answer variable\nanswer = rate_of_change\n\n# Output the answer\nprint(answer)", "# Define the minutes spent on homework for each day\nfriday_minutes = 40\nsaturday_minutes = 41\ntime_interval = 1  # days\n\n# Calculate the rate of change\nrate_of_change = (saturday_minutes - friday_minutes) / time_interval\n\n# Store the result in the answer variable\nanswer = rate_of_change\n\n# Print the answer with context\nprint(f\"The rate of change in minutes from Friday to Saturday is {answer} minutes per day.\")"], "prediction": [1.0, 1.0, 1.0, 1.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of ponds | Number of frogs\n1 | 5\n2 | 10\n3 | 15\n4 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of ponds | Number of frogs\n1 | 5\n2 | 10\n3 | 15\n4 | ?\n\nEach pond has 5 frogs. How many frogs are in 4 ponds?", "answer": "20", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of ponds\nnumber_of_ponds = 4\n# Number of frogs per pond\nfrogs_per_pond = 5\n# Calculate the total number of frogs\ntotal_frogs = number_of_ponds * frogs_per_pond\nanswer = total_frogs\nprint(answer)", "number_of_ponds = 4\nfrogs_per_pond = 5\ntotal_frogs = number_of_ponds * frogs_per_pond\nanswer = int(total_frogs)  # Ensure the answer is an integer\nprint(answer)", "number_of_ponds = 4  \nfrogs_per_pond = 5  \ntotal_frogs = number_of_ponds * frogs_per_pond  \nanswer = total_frogs  # This will naturally be an integer  \nprint(answer)", "number_of_ponds = 4  \nfrogs_per_pond = 5  \ntotal_frogs = number_of_ponds * frogs_per_pond  \nanswer = int(total_frogs)  # Convert to integer to ensure the result is an integer  \nprint(answer)"], "prediction": [20.0, 20.0, 20.0, 20.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\noyster mushrooms | $18/pound\ncrimini mushrooms | $5/pound\nchanterelle mushrooms | $16/pound\nportobello mushrooms | $9/pound\nstraw mushrooms | $9/pound", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\noyster mushrooms | $18/pound\ncrimini mushrooms | $5/pound\nchanterelle mushrooms | $16/pound\nportobello mushrooms | $9/pound\nstraw mushrooms | $9/pound\n\nMaya went to the store. She bought 2 pounds of oyster mushrooms and 3 pounds of chanterelle mushrooms. How much did she spend?", "answer": "84", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices per pound\nprice_per_pound_oyster = 18\nprice_per_pound_chanterelle = 16\n\n# Amounts bought\npounds_oyster = 2\npounds_chanterelle = 3\n\n# Total cost calculation\ntotal_cost = (price_per_pound_oyster * pounds_oyster) + (price_per_pound_chanterelle * pounds_chanterelle)\nanswer = total_cost\nprint(answer)", "# Define the prices per pound for the mushrooms\nprice_per_pound_oyster = 18\nprice_per_pound_chanterelle = 16\n\n# Define the pounds purchased\npounds_oyster = 2\npounds_chanterelle = 3\n\n# Calculate the total cost\ntotal_cost = (price_per_pound_oyster * pounds_oyster) + (price_per_pound_chanterelle * pounds_chanterelle)\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Prices per pound of mushrooms\nprice_per_pound_oyster = 18\nprice_per_pound_chanterelle = 16\n\n# Amounts purchased\npounds_oyster = 2\npounds_chanterelle = 3\n\n# Total cost calculation\ntotal_cost = (price_per_pound_oyster * pounds_oyster) + (price_per_pound_chanterelle * pounds_chanterelle)\nanswer = total_cost\n\nprint(answer)", "price_per_pound_oyster = 18\nprice_per_pound_chanterelle = 16\npounds_oyster = 2\npounds_chanterelle = 3\ntotal_cost = (price_per_pound_oyster * pounds_oyster) + (price_per_pound_chanterelle * pounds_chanterelle)\nanswer = int(total_cost)  # Convert to integer for cleaner output\nprint(answer)"
], "prediction": [84.0, 84.0, 84.0, 84.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Games won by the Weston baseball team\" and then answer a question.\n\nYear | Games won\n2011 | 38\n2012 | 46\n2013 | 38\n2014 | 40\n2015 | 39", "question": "Read the following table regarding \"Games won by the Weston baseball team\" and then write Python code to answer a question.\n\nYear | Games won\n2011 | 38\n2012 | 46\n2013 | 38\n2014 | 40\n2015 | 39\n\nFans of the Weston baseball team compared the number of games won by their team each year. According to the table, what was the rate of change between 2013 and 2014?", "answer": "2", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Games won in 2013 and 2014\ngames_won_2013 = 38\ngames_won_2014 = 40\n\n# Rate of change calculation\nrate_of_change = games_won_2014 - games_won_2013\nanswer = rate_of_change\nprint(answer)", "# Number of games won by Weston baseball team in 2013 and 2014\ngames_won_2013 = 38\ngames_won_2014 = 40\n\n# Calculate the change in games won\nchange_in_games_won = games_won_2014 - games_won_2013\n\n# Define the time period over which the change occurred (1 year)\ntime_period = 1  # years\n\n# Calculate the rate of change\nrate_of_change = change_in_games_won / time_period\n\n# Store the result in the variable 'answer'\nanswer = rate_of_change\n\n# Output the answer\nprint(answer)", "```python\n# Define the number of games", "# Define the number of games won for the relevant years\ngames_won_2013 = 38\ngames_won_2014 = 40\n\n# Calculate the change in games won\nchange_in_games_won = games_won_2014 - games_won_2013\n\n# Define the time period over which the change occurred\ntime_period = 1  # years\n\n# Calculate the rate of change\nrate_of_change = change_in_games_won / time_period\n\n# Store the result in the variable 'answer'\nanswer = rate_of_change\n\n# Print the answer\nprint(answer)"], "prediction": [2.0, 2.0, null, 2.0], "report": ["Done", "Done", "SyntaxError('invalid syntax', ('<string>', 1, 1, '```python\\n', 1, 2))", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nranch popcorn | $1.14 per kg\nkettle corn | $1.22 per kg\nchocolate popcorn | $0.45 per kg\nParmesan popcorn | $1.34 per kg\ncheddar popcorn | $1.63 per kg", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nranch popcorn | $1.14 per kg\nkettle corn | $1.22 per kg\nchocolate popcorn | $0.45 per kg\nParmesan popcorn | $1.34 per kg\ncheddar popcorn | $1.63 per kg\n\nWhat is the total cost for 3 kilograms of cheddar popcorn?", "answer": "4.89", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_kilogram_cheddar = 1.63 \nkilograms_bought = 3 \ntotal_cost = price_per_kilogram_cheddar * kilograms_bought\nanswer = total_cost\nprint(answer)", "# Define the price per kilogram for cheddar popcorn\nprice_per_kilogram_cheddar = 1.63  \n\n# Define the number of kilograms bought\nkilograms_bought = 3  \n\n# Calculate the total cost\ntotal_cost = price_per_kilogram_cheddar * kilograms_bought  \n\n# Store the result in the answer variable\nanswer = total_cost  \n\n# Output the answer\nprint(answer)", "# Define the price per kilogram for cheddar popcorn\nprice_per_kilogram_cheddar = 1.63  \n# Define the number of kilograms bought\nkilograms_bought = 3  \n# Calculate the total cost\ntotal_cost = price_per_kilogram_cheddar * kilograms_bought  \n# Store the result in the variable 'answer'\nanswer = total_cost  \n# Print the answer\nprint(answer)", "# Define the price per kilogram for cheddar popcorn\nprice_per_kilogram_cheddar = 1.63  \n# Define the number of kilograms bought\nkilograms_bought = 3  \n# Calculate the total cost\ntotal_cost = price_per_kilogram_cheddar * kilograms_bought  \n# Store the result in the answer variable\nanswer = total_cost  \n# Output the answer\nprint(answer)"], "prediction": [4.89, 4.89, 4.89, 4.89], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Books per shelf\" and then answer a question.\n\nStem | Leaf \n2 | 2\n3 | 0, 1, 3, 3, 5, 6, 8, 8\n4 | 4\n5 | 4, 7, 7\n6 | 6\n7 | 6, 6", "question": "Read the following table regarding \"Books per shelf\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 2\n3 | 0, 1, 3, 3, 5, 6, 8, 8\n4 | 4\n5 | 4, 7, 7\n6 | 6\n7 | 6, 6\n\nThe librarian at the public library counted the number of books on each shelf. What is the largest number of books?", "answer": "76", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number of books corresponds to the largest value in the stem-and-leaf display.\nlargest_books = 76  # From the stem \"7 | 6, 6\", the largest value is 76.\nanswer = largest_books\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [2]), (3, [0, 1, 3, 3, 5, 6, 8, 8]), (4, [4]), (5, [4, 7, 7]), (6, [6]), (7, [6, 6])]  \n  \n# Initialize variable to track the largest number of books  \nlargest_books = 0  \n  \n# Iterate through the stem and leaf data structure to find the largest number of books  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        books_per_shelf = stem * 10 + leaf  \n        if books_per_shelf > largest_books:  \n            largest_books = books_per_shelf  \n  \nanswer = largest_books  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [2]), (3, [0, 1, 3, 3, 5, 6, 8, 8]), (4, [4]), (5, [4, 7, 7]), (6, [6]), (7, [6, 6])]  \n\n# Initialize variable to store the largest number of books  \nlargest_books = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number of books  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        books_per_shelf = stem * 10 + leaf  \n        if books_per_shelf > largest_books:  \n            largest_books = books_per_shelf  \n\n# Store the result as an integer  \nanswer = int(largest_books)  \nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [(2, [2]), (3, [0, 1, 3, 3, 5, 6, 8, 8]), (4, [4]), (5, [4, 7, 7]), (6, [6]), (7, [6, 6])]\n\n# Initialize a variable to track the largest number of books\nlargest_books = 0\n\n# Iterate through the stem and leaf data structure to find the largest number of books\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        books_per_shelf = stem * 10 + leaf\n        if books_per_shelf > largest_books:\n            largest_books = books_per_shelf\n\n# Store the result as an integer\nanswer = largest_books\nprint(answer)"
], "prediction": [76.0, 76.0, 76.0, 76.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Winning relay times\" and then answer a question.\n\nYear | Winning time (minutes)\n2016 | 29\n2017 | 23\n2018 | 26\n2019 | 41\n2020 | 31", "question": "Read the following table regarding \"Winning relay times\" and then write Python code to answer a question.\n\nYear | Winning time (minutes)\n2016 | 29\n2017 | 23\n2018 | 26\n2019 | 41\n2020 | 31\n\nEvery year Greenwood has a citywide relay and reports the winning times. According to the table, what was the rate of change between 2017 and 2018?", "answer": "3", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Winning times for the specified years\ntime_2017 = 23 \ntime_2018 = 26 \n# Calculate the rate of change\nrate_of_change = time_2018 - time_2017\nanswer = rate_of_change\nprint(answer)", "time_2017 = 23 \ntime_2018 = 26 \n\n# Calculate the absolute change\nchange = time_2018 - time_2017\n\n# Calculate the rate of change as a percentage\nrate_of_change = (change / time_2017) * 100\n\nanswer = rate_of_change\nprint(answer)", "time_2017 = 23 \ntime_2018 = 26 \nchange = time_2018 - time_2017  # Calculate the change in time\nanswer = change  # Store the change as the answer\nprint(answer)  # Output the answer", "# Define the winning times for the years 2017 and 2018\ntime_2017 = 23 \ntime_2018 = 26 \n\n# Calculate the change in time\nchange = time_2018 - time_2017  \n\n# Calculate the rate of change as a fraction of the initial time (time in 2017)\nrate_of_change = change / time_2017  \n\n# Store the rate of change as the answer\nanswer = rate_of_change  \n\n# Output the answer\nprint(answer)"], "prediction": [3.0, 13.04348, 3.0, 0.13043], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Games won by Kendra's soccer team\" and then answer a question.\n\nYear | Games won\n2008 | 15\n2009 | 19\n2010 | 18\n2011 | 11\n2012 | 17", "question": "Read the following table regarding \"Games won by Kendra's soccer team\" and then write Python code to answer a question.\n\nYear | Games won\n2008 | 15\n2009 | 19\n2010 | 18\n2011 | 11\n2012 | 17\n\nKendra kept track of the number of games her soccer team won each year. According to the table, what was the rate of change between 2010 and 2011?", "answer": "-7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Games won in 2010 and 2011\ngames_won_2010 = 18\ngames_won_2011 = 11\n\n# Calculate the rate of change\nrate_of_change = games_won_2011 - games_won_2010\nanswer = rate_of_change\nprint(answer)", "# Define the number of games won in 2010 and 2011\ngames_won_2010 = 18\ngames_won_2011 = 11\n\n# Calculate the rate of change\nrate_of_change = games_won_2011 - games_won_2010\n\n# Since the time interval is 1 year, we can directly use the difference\nanswer = rate_of_change\nprint(answer)", "games_won_2010 = 18\ngames_won_2011 = 11\nyear_difference = 2011 - 2010\nrate_of_change = (games_won_2011 - games_won_2010) / year_difference\nanswer = rate_of_change\nprint(answer)", "games_won_2010 = 18\ngames_won_2011 = 11\nyear_difference = 2011 - 2010\nrate_of_change = (games_won_2011 - games_won_2010) / year_difference\nanswer = f\"The rate of change in games won between 2010 and 2011 is {rate_of_change} games per year.\"\nprint(answer)"], "prediction": [-7.0, -7.0, -7.0, "The rate of change in games won between 2010 and 2011 is -7.0 games per year."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of vases | Number of poppies\n1 | 5\n2 | 10\n3 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of vases | Number of poppies\n1 | 5\n2 | 10\n3 | ?\n\nEach vase has 5 poppies. How many poppies are in 3 vases?", "answer": "15", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of vases\nnumber_of_vases = 3\n# Each vase has 5 poppies\npoppies_per_vase = 5\n# Total poppies in 3 vases\ntotal_poppies = number_of_vases * poppies_per_vase\nanswer = total_poppies\nprint(answer)", "number_of_vases = 3\npoppies_per_vase = 5\ntotal_poppies = number_of_vases * poppies_per_vase\nanswer = total_poppies  # This will be an integer\nprint(answer)", "number_of_vases = 3  \npoppies_per_vase = 5  \ntotal_poppies = number_of_vases * poppies_per_vase  \nanswer = int(total_poppies)  # Ensure the result is an integer  \nprint(answer)", "number_of_vases = 3  \npoppies_per_vase = 5  \ntotal_poppies = number_of_vases * poppies_per_vase  \nanswer = total_poppies  # No need for int() conversion, as the result is already an integer  \nprint(answer)"], "prediction": [15.0, 15.0, 15.0, 15.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Photographs taken\" and then answer a question.\n\nDay | Number of photographs\nWednesday | 1\nThursday | 10\nFriday | 10\nSaturday | 8\nSunday | 7", "question": "Read the following table regarding \"Photographs taken\" and then write Python code to answer a question.\n\nDay | Number of photographs\nWednesday | 1\nThursday | 10\nFriday | 10\nSaturday | 8\nSunday | 7\n\nCarla looked at the dates of the digital photos on her computer to find out how many she had taken in the past 5 days. What is the range of the numbers?", "answer": "9", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of photographs taken each day\nphotographs = [1, 10, 10, 8, 7]\n\n# Calculate the range\nrange_photographs = max(photographs) - min(photographs)\nanswer = range_photographs\nprint(answer)", "photographs = [1, 10, 10, 8, 7]\nrange_photographs = max(photographs) - min(photographs)\nanswer = int(range_photographs)  # Convert to integer\nprint(answer)", "photographs = [1, 10, 10, 8, 7]\nrange_photographs = max(photographs) - min(photographs)\nanswer = range_photographs  # No need to convert to integer\nprint(answer)", "photographs = [1, 10, 10, 8, 7]\nrange_photographs = max(photographs) - min(photographs)\nanswer = int(range_photographs)  # Convert to integer for a whole number result\nprint(answer)"], "prediction": [9.0, 9.0, 9.0, 9.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Displeased | Pleased\nA Footlong shoe | 3 | 7\nA Toes Knows shoe | 2 | 6", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Displeased | Pleased\nA Footlong shoe | 3 | 7\nA Toes Knows shoe | 2 | 6\n\nA wilderness retail store asked a consulting company to do an analysis of their hiking shoe customers. The consulting company gathered data from each customer that purchased hiking shoes, and recorded the shoe brand and the customer's level of happiness. What is the probability that a randomly selected customer purchased a Footlong shoe and is pleased? Simplify any fractions.", "answer": "7/18", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total customers who purchased Footlong shoes\nfootlong_pleased = 7\nfootlong_displeased = 3\ntotal_footlong = footlong_pleased + footlong_displeased\n\n# Total customers who purchased shoes of both brands\ntoes_knows_pleased = 6\ntoes_knows_displeased = 2\ntotal_toes_knows = toes_knows_pleased + toes_knows_displeased\n\ntotal_customers = total_footlong + total_toes_knows\n\n# Probability of a randomly selected customer who purchased a Footlong shoe and is pleased\nprobability_footlong_pleased = footlong_pleased / total_customers\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(footlong_pleased, total_customers).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Define the number of pleased and displeased customers for each shoe brand\nfootlong_pleased = 7\nfootlong_displeased = 3\ntoes_knows_pleased = 6\ntoes_knows_displeased = 2\n\n# Calculate totals\ntotal_footlong = footlong_pleased + footlong_displeased\ntotal_toes_knows = toes_knows_pleased + toes_knows_displeased\ntotal_customers = total_footlong + total_toes_knows\n\n# Calculate the probability that a randomly selected customer purchased a Footlong shoe and is pleased\nprobability_footlong_pleased = footlong_pleased / total_customers\n\n# Simplify the probability\nfrom fractions import Fraction\nsimplified_probability = Fraction(footlong_pleased, total_customers).limit_denominator()\n\n# Store the answer\nanswer = simplified_probability\nprint(answer)", "# Define the number of pleased and displeased customers for each shoe brand\nfootlong_pleased = 7\nfootlong_displeased = 3\ntoes_knows_pleased = 6\ntoes_knows_displeased = 2\n\n# Calculate total customers for each shoe brand\ntotal_footlong = footlong_pleased + footlong_displeased\ntotal_toes_knows = toes_knows_pleased + toes_knows_displeased\n\n# Calculate total number of customers\ntotal_customers = total_footlong + total_toes_knows\n\n# Calculate the probability of selecting a pleased Footlong customer\nprobability_footlong_pleased = footlong_pleased / total_customers\n\n# Simplify the probability as a fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(footlong_pleased, total_customers).limit_denominator()\n\n# Store the result in the answer variable\nanswer = simplified_probability\nprint(answer)", "# Define the number of pleased and displeased customers for each shoe brand\nfootlong_pleased = 7\nfootlong_displeased = 3\ntoes_knows_pleased = 6\ntoes_knows_displeased = 2\n\n# Calculate the total number of customers for each shoe brand\ntotal_footlong = footlong_pleased + footlong_displeased\ntotal_toes_knows = toes_knows_pleased + toes_knows_displeased\n\n# Calculate the total number of customers\ntotal_customers = total_footlong + total_toes_knows\n\n# Calculate the probability of a customer purchasing a Footlong shoe and being pleased\nprobability_footlong_pleased = footlong_pleased / total_customers\n\n# Simplify the probability as a fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(footlong_pleased, total_customers).limit_denominator()\n\n# Store the simplified probability in the answer variable\nanswer = simplified_probability\nprint(answer)"
], "prediction": [0.38889, 0.38889, 0.38889, 0.38889], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Vehicle sales\" and then answer a question.\n\nDealership | Number of vehicles\nBen's Used Cars | 856\nTruck City | 392\nLedbetter Auto Mall | 653\nAffordable Cars | 615", "question": "Read the following table regarding \"Vehicle sales\" and then write Python code to answer a question.\n\nDealership | Number of vehicles\nBen's Used Cars | 856\nTruck City | 392\nLedbetter Auto Mall | 653\nAffordable Cars | 615\n\nSome dealerships compared their vehicle sales. In all, how many vehicles did Ben's Used Cars and Affordable Cars sell?", "answer": "1,471", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of vehicles sold by each dealership\nbens_used_cars = 856\naffordable_cars = 615\n# Total vehicles sold by Ben's Used Cars and Affordable Cars\ntotal_vehicles_sold = bens_used_cars + affordable_cars\nanswer = total_vehicles_sold\nprint(answer)", "bens_used_cars = 856\naffordable_cars = 615\ntotal_vehicles_sold = bens_used_cars + affordable_cars\nanswer = total_vehicles_sold  # This will be an integer\nprint(answer)", "bens_used_cars = 856\naffordable_cars = 615\ntotal_vehicles_sold = bens_used_cars + affordable_cars\nanswer = int(total_vehicles_sold)  # Ensuring the result is an integer\nprint(answer)", "bens_used_cars = 856\naffordable_cars = 615\ntotal_vehicles_sold = bens_used_cars + affordable_cars\nanswer = total_vehicles_sold  # No need for int() since the result is already an integer\nprint(answer)"], "prediction": [1471.0, 1471.0, 1471.0, 1471.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Miles driven by truck drivers\" and then answer a question.\n\nName | Miles\nEvelyn | 6,746\nShelby | 2,572\nZoe | 5,207", "question": "Read the following table regarding \"Miles driven by truck drivers\" and then write Python code to answer a question.\n\nName | Miles\nEvelyn | 6,746\nShelby | 2,572\nZoe | 5,207\n\nSome truck drivers wrote down how far they each drove in the past month. How many more miles did Evelyn drive than Zoe?", "answer": "1,539", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nevelyn_miles = 6746\nzoe_miles = 5207\n# Calculate the difference in miles driven by Evelyn and Zoe\ndifference_miles = evelyn_miles - zoe_miles\nanswer = difference_miles\nprint(answer)", "evelyn_miles = 6746\nzoe_miles = 5207\ndifference_miles = evelyn_miles - zoe_miles\nanswer = int(difference_miles)  # Ensure the result is an integer\nprint(answer)", "evelyn_miles = 6746\nzoe_miles = 5207\ndifference_miles = evelyn_miles - zoe_miles\nanswer = difference_miles  # The result is already an integer\nprint(answer)", "evelyn_miles = 6746\nzoe_miles = 5207\ndifference_miles = evelyn_miles - zoe_miles\nanswer = difference_miles  # The result is already an integer\nprint(answer)"], "prediction": [1539.0, 1539.0, 1539.0, 1539.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Technical assistance wait times (minutes)\" and then answer a question.\n\nStem | Leaf \n0 | 3, 5\n1 | 9\n2 | 4, 6\n3 | \n4 | 9\n5 | 6\n6 | 1, 5, 5, 8\n7 | 2, 5, 5, 5, 7\n8 | 6", "question": "Read the following table regarding \"Technical assistance wait times (minutes)\" and then write Python code to answer a question.\n\nStem | Leaf \n0 | 3, 5\n1 | 9\n2 | 4, 6\n3 | \n4 | 9\n5 | 6\n6 | 1, 5, 5, 8\n7 | 2, 5, 5, 5, 7\n8 | 6\n\nA Technical Assistance Manager monitored his customers' wait times. How many people waited for less than 60 minutes?", "answer": "7", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The wait times can be extracted from the stem-and-leaf display.\nwait_times = [3, 5, 19, 24, 26, 49, 56, 61, 65, 65, 68, 72, 75, 75, 75, 77, 86]  # Listing all the wait times based on the stem and leaf.\n# Count how many waited for less than 60 minutes\ncount_less_than_60 = sum(1 for time in wait_times if time < 60)\nanswer = count_less_than_60\nprint(answer)", "wait_times = [3, 5, 19, 24, 26, 49, 56, 61, 65, 65, 68, 72, 75, 75, 75, 77, 86]  # Listing all the wait times based on the stem and leaf.\ncount_less_than_60 = sum(1 for time in wait_times if time < 60)\nanswer = int(count_less_than_60)  # Convert to integer to ensure the output is not a float\nprint(answer)", "# Define the wait times based on the stem and leaf data\nwait_times = [3, 5, 19, 24, 26, 49, 56, 61, 65, 65, 68, 72, 75, 75, 75, 77, 86]\n\n# Count how many people waited for less than 60 minutes\ncount_less_than_60 = sum(1 for time in wait_times if time < 60)\n\n# Store the result as an integer\nanswer = count_less_than_60\n\n# Print the answer\nprint(answer)", "wait_times = [3, 5, 19, 24, 26, 49, 56, 61, 65, 65, 68, 72, 75, 75, 75, 77, 86]\ncount_less_than_60 = sum(1 for time in wait_times if time < 60)\nanswer = int(count_less_than_60)  # Ensure the result is an integer\nprint(answer)"
], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Grocery stores in each town\" and then answer a question.\n\nTown | Number of stores\nMarion | 4\nGreenwood | 4\nMayfield | 3\nColumbia | 6\nChesterton | 6\nRiverside | 6\nSpringfield | 2\nWatertown | 9", "question": "Read the following table regarding \"Grocery stores in each town\" and then write Python code to answer a question.\n\nTown | Number of stores\nMarion | 4\nGreenwood | 4\nMayfield | 3\nColumbia | 6\nChesterton | 6\nRiverside | 6\nSpringfield | 2\nWatertown | 9\n\nA newspaper researched how many grocery stores there are in each town. What is the mean of the numbers?", "answer": "5", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of grocery stores in each town\nstores = [4, 4, 3, 6, 6, 6, 2, 9]\n# Calculate the mean\nmean_stores = sum(stores) / len(stores)\nanswer = mean_stores\nprint(answer)", "# List of the number of grocery stores in each town\nstores = [4, 4, 3, 6, 6, 6, 2, 9]\n\n# Calculate the mean number of grocery stores\nmean_stores = sum(stores) / len(stores)\n\n# Store the result in the variable 'answer'\nanswer = mean_stores\n\n# Output the answer\nprint(answer)", "# List of the number of grocery stores in each town\nstores = [4, 4, 3, 6, 6, 6, 2, 9]\n\n# Calculate the mean number of stores\nmean_stores = sum(stores) / len(stores)\n\n# Store the result in the variable 'answer'\nanswer = mean_stores\n\n# Output the answer\nprint(answer)", "# List of the number of grocery stores in each town\nstores = [4, 4, 3, 6, 6, 6, 2, 9]\n\n# Calculate the mean of the number of stores\nmean_stores = sum(stores) / len(stores)\n\n# Store the result in the variable 'answer'\nanswer = mean_stores\n\n# Output the answer\nprint(answer)"], "prediction": [5.0, 5.0, 5.0, 5.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n18 | 2\n7 | 15\n7 | 16\n7 | 19", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n18 | 2\n7 | 15\n7 | 16\n7 | 19\n\nLook at this table. Is this relation a function? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# A relation is a function if each input (x value) is associated with exactly one output (y value).\n# We will check if any x value is associated with more than one y value.\nx_values = [18, 7, 7, 7]\ny_values = [2, 15, 16, 19]\n\n# Create a dictionary to track unique x to y mappings\nx_to_y = {}\n\nfor x, y in zip(x_values, y_values):\n    if x in x_to_y:\n        x_to_y[x].append(y)\n    else:\n        x_to_y[x] = [y]\n\n# Determine if the relation is a function\nis_function = all(len(y_list) == 1 for y_list in x_to_y.values())\n\nanswer = 'yes' if is_function else 'no'\nprint(answer)", "# Define the pairs of (x, y) values\npairs = [(18, 2), (7, 15), (7, 16), (7, 19)]\n\n# Check if the relation is a function\nx_values = [x for x, y in pairs]\nis_function = len(x_values) != len(set(x_values))  # If there are duplicates, it's not a function\n\nanswer = 'no' if is_function else 'yes'\nprint(answer)", "# Define the pairs of (x, y) values\npairs = [(18, 2), (7, 15), (7, 16), (7, 19)]\n\n# Create a dictionary to track unique x-values and their corresponding y-values\nfunction_map = {}\n\n# Iterate through the pairs to populate the function_map\nfor x, y in pairs:\n    if x in function_map:\n        function_map[x].add(y)  # Use a set to store y-values for each x\n    else:\n        function_map[x] = {y}\n\n# Check if any x-value is associated with more than one y-value\nis_function = any(len(y_values) > 1 for y_values in function_map.values())\n\n# Determine the answer based on the is_function check\nanswer = 'no' if is_function else 'yes'\nprint(answer)", "pairs = [(18, 2), (7, 15), (7, 16), (7, 19)]\nfunction_map = {}\nfor x, y in pairs:\n    if x in function_map:\n        function_map[x].add(y)  # Use a set to store y-values for each x\n    else:\n        function_map[x] = {y}\n\n# Check if any x value has more than one corresponding y value\nis_function = any(len(y_values) > 1 for y_values in function_map.values())\nanswer = 'no' if is_function else 'yes'\nprint(answer)"
], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Train schedule\" and then answer a question.\n\nPleasant River Campground | 2:30 A.M. | 10:15 A.M. | 12:00 A.M.\nMagician Village | 3:15 A.M. | 11:00 A.M. | 12:45 A.M.\nSkyscraper City | 3:45 A.M. | 11:30 A.M. | 1:15 A.M.\nComfy Pillows Resort | 4:30 A.M. | 12:15 P.M. | 2:00 A.M.\nHappy Cow Farm | 5:00 A.M. | 12:45 P.M. | 2:30 A.M.\nSnowy Mountain | 6:00 A.M. | 1:45 P.M. | 3:30 A.M.\nRocky Ravine Town | 6:30 A.M. | 2:15 P.M. | 4:00 A.M.\nCity of Green Trees | 7:00 A.M. | 2:45 P.M. | 4:30 A.M.", "question": "Read the following table regarding \"Train schedule\" and then write Python code to answer a question.\n\nPleasant River Campground | 2:30 A.M. | 10:15 A.M. | 12:00 A.M.\nMagician Village | 3:15 A.M. | 11:00 A.M. | 12:45 A.M.\nSkyscraper City | 3:45 A.M. | 11:30 A.M. | 1:15 A.M.\nComfy Pillows Resort | 4:30 A.M. | 12:15 P.M. | 2:00 A.M.\nHappy Cow Farm | 5:00 A.M. | 12:45 P.M. | 2:30 A.M.\nSnowy Mountain | 6:00 A.M. | 1:45 P.M. | 3:30 A.M.\nRocky Ravine Town | 6:30 A.M. | 2:15 P.M. | 4:00 A.M.\nCity of Green Trees | 7:00 A.M. | 2:45 P.M. | 4:30 A.M.\n\nLook at the following schedule. Tyrone just missed the 3.45 A.M. train at Skyscraper City. What time is the next train? Choose from the the options: ['2:15 P.M.', '3:45 A.M.', '1:15 A.M.', '11:30 A.M.']", "answer": "11:30 A.M.", "ques_type": "multi_choice", "choices": ["2:15 P.M.", "3:45 A.M.", "1:15 A.M.", "11:30 A.M."], "code": [
  "# Python code, return answer \n# The next train after 3:45 A.M. at Skyscraper City is at 11:30 A.M.\nnext_train_time = \"11:30 A.M.\"\nanswer = next_train_time\nprint(answer)", "# Define the train schedule as a dictionary\ntrain_schedule = {\n    'Pleasant River Campground': ['2:30 A.M.', '10:15 A.M.', '12:00 A.M.'],\n    'Magician Village': ['3:15 A.M.', '11:00 A.M.', '12:45 A.M.'],\n    'Skyscraper City': ['3:45 A.M.', '11:30 A.M.', '1:15 A.M.'],\n    'Comfy Pillows Resort': ['4:30 A.M.', '12:15 P.M.', '2:00 A.M.'],\n    'Happy Cow Farm': ['5:00 A.M.', '12:45 P.M.', '2:30 A.M.'],\n    'Snowy Mountain': ['6:00 A.M.', '1:45 P.M.', '3:30 A.M.'],\n    'Rocky Ravine Town': ['6:30 A.M.', '2:15 P.M.', '4:00 A.M.'],\n    'City of Green Trees': ['7:00 A.M.', '2:45 P.M.', '4:30 A.M.']\n}\n\n# The time Tyrone missed the train\nmissed_time = '3:45 A.M.'\n\n# Convert missed_time to a comparable format\ndef time_to_minutes(time_str):\n    time_parts = time_str.split()\n    time = time_parts[0].split(':')\n    hours = int(time[0])\n    minutes = int(time[1])\n    if time_parts[1] == 'P.M.' and hours != 12:\n        hours += 12\n    if time_parts[1] == 'A.M.' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Find the next train time after the missed_time\nnext_train_time = None\nmissed_minutes = time_to_minutes(missed_time)\n\nfor location, times in train_schedule.items():\n    for train_time in times:\n        train_minutes = time_to_minutes(train_time)\n        if train_minutes > missed_minutes:\n            if next_train_time is None or train_minutes < time_to_minutes(next_train_time):\n                next_train_time = train_time\n\nanswer = next_train_time\nprint(answer)", "# Define the train schedule as a dictionary\ntrain_schedule = {\n    'Pleasant River Campground': ['2:30 A.M.', '10:15 A.M.', '12:00 A.M.'],\n    'Magician Village': ['3:15 A.M.', '11:00 A.M.', '12:45 A.M.'],\n    'Skyscraper City': ['3:45 A.M.', '11:30 A.M.', '1:15 A.M.'],\n    'Comfy Pillows Resort': ['4:30 A.M.', '12:15 P.M.', '2:00 A.M.'],\n    'Happy Cow Farm': ['5:00 A.M.', '12:45 P.M.', '2:30 A.M.'],\n    'Snowy Mountain': ['6:00 A.M.', '1:45 P.M.', '3:30 A.M.'],\n    'Rocky Ravine Town': ['6:30 A.M.', '2:15 P.M.', '4:00 A.M.'],\n    'City of Green Trees': ['7:00 A.M.', '2:45 P.M.', '4:30 A.M.']\n}\n\n# The time Tyrone missed\nmissed_time = '3:45 A.M.'\n\n# Function to convert time to minutes for easy comparison\ndef time_to_minutes(time_str):\n    time_parts = time_str.split()\n    time = time_parts[0].split(':')\n    hours = int(time[0])\n    minutes = int(time[1])\n    if time_parts[1] == 'P.M.' and hours != 12:\n        hours += 12\n    if time_parts[1] == 'A.M.' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\n# Find the next train time after the missed time\nnext_train_time = None\nmissed_minutes = time_to_minutes(missed_time)\n\nfor location, times in train_schedule.items():\n    for train_time in times:\n        train_minutes = time_to_minutes(train_time)\n        if train_minutes > missed_minutes:\n            if next_train_time is None or train_minutes < time_to_minutes(next_train_time):\n                next_train_time = train_time\n\nanswer = next_train_time\nprint(answer)", "```python\ntrain_schedule = {\n    'Pleasant River Campground': ['2:30 A.M.', '10:15 A.M.', '12:00 A.M.'],\n    'Magician Village': ['3:15 A.M.', '11:00 A.M.', '12:45 A.M.'],\n    'Skyscraper City': ['3:45 A.M.', '11:30 A.M.', '1:15 A.M.'],\n    'Comfy Pillows Resort': ['4:30 A.M.', '12:15 P.M.', '2:00 A.M.'],\n    'Happy Cow Farm': ['5:00 A.M.', '12:45 P.M.', '2:30 A.M.'],\n    'Snowy Mountain': ['6:00 A.M.', '1:45 P.M.', '3:30 A.M.'],\n    'Rocky Ravine Town': ['6:30 A.M.', '2:15 P.M.', '4:00 A.M.'],\n    'City of Green Trees': ['7:00 A.M.', '2:45 P.M.', '4:30 A.M.']\n}\n\nmissed_time = '3:45 A.M.'\n\ndef time_to_minutes(time_str):\n    time_parts = time_str.split()\n    time = time_parts[0].split(':')\n    hours = int(time[0])\n    minutes = int(time[1])\n    if time_parts[1] == 'P.M.' and hours != 12:\n        hours += 12\n    if time_parts[1] == 'A.M.' and hours == 12:\n        hours = 0\n    return hours * 60 + minutes\n\nmissed_minutes = time_to_minutes(missed_time)\nnext_train_time = None\n\nfor location, times in train_schedule.items():\n    for train_time in times:\n        train_minutes = time_to_minutes(train_time)\n        if train_minutes > missed_minutes:\n            if next_train_time is None or train_minutes < time_to_minutes(next_train_time):\n                next_train_time = train_time\n\nanswer = next_train_time\n"
], "prediction": ["11:30 A.M.", "4:00 A.M.", "4:00 A.M.", null], "report": ["Done", "Done", "Done", "SyntaxError('invalid syntax', ('<string>', 1, 1, '```python\\n', 1, 2))"]
}
{
  "context": "Read the following table regarding \"Midterm exam scores\" and then answer a question.\n\nStem | Leaf \n2 | 2, 4\n3 | 2, 9\n4 | 1, 7\n5 | 3, 4, 6, 7\n6 | 0, 1, 2, 7\n7 | 0\n8 | 1, 4, 9", "question": "Read the following table regarding \"Midterm exam scores\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 2, 4\n3 | 2, 9\n4 | 1, 7\n5 | 3, 4, 6, 7\n6 | 0, 1, 2, 7\n7 | 0\n8 | 1, 4, 9\n\nProfessor Wiley informed his students of their scores on the midterm exam. How many students scored at least 20 points but fewer than 90 points?", "answer": "18", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Constructing the scores from the stem-and-leaf display\nscores = [22, 24, 32, 39, 41, 47, 53, 54, 56, 57, 60, 61, 62, 67, 70, 81, 84, 89]\n# Count how many scored at least 20 but fewer than 90\ncount_students = sum(1 for score in scores if 20 <= score < 90)\nanswer = count_students\nprint(answer)", "# List of midterm exam scores\nscores = [22, 24, 32, 39, 41, 47, 53, 54, 56, 57, 60, 61, 62, 67, 70, 81, 84, 89]\n\n# Count the number of students who scored at least 20 points but fewer than 90 points\ncount_students = sum(1 for score in scores if 20 <= score < 90)\n\n# Store the result as an integer\nanswer = int(count_students)\nprint(answer)", "scores = [22, 24, 32, 39, 41, 47, 53, 54, 56, 57, 60, 61, 62, 67, 70, 81, 84, 89]\ncount_students = sum(1 for score in scores if 20 <= score < 90)\nanswer = count_students  # No need for int() conversion as count_students is already an integer\nprint(answer)", "# List of scores from the midterm exam\nscores = [22, 24, 32, 39, 41, 47, 53, 54, 56, 57, 60, 61, 62, 67, 70, 81, 84, 89]\n\n# Count the number of students who scored at least 20 points but fewer than 90 points\ncount_students = sum(1 for score in scores if 20 <= score < 90)\n\n# Store the result as an integer\nanswer = count_students\n\nprint(answer)  # This will output the count of students"], "prediction": [18.0, 18.0, 18.0, 18.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Hockey games won by Union High\" and then answer a question.\n\nYear | Games won\n2007 | 13\n2008 | 10\n2009 | 20\n2010 | 20\n2011 | 12", "question": "Read the following table regarding \"Hockey games won by Union High\" and then write Python code to answer a question.\n\nYear | Games won\n2007 | 13\n2008 | 10\n2009 | 20\n2010 | 20\n2011 | 12\n\nA pair of Union High School hockey fans counted the number of games won by the school each year. According to the table, what was the rate of change between 2009 and 2010?", "answer": "0", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of games won in 2009 and 2010\ngames_won_2009 = 20\ngames_won_2010 = 20\n\n# Calculate the rate of change between 2009 and 2010\nrate_of_change = games_won_2010 - games_won_2009\nanswer = rate_of_change\nprint(answer)", "games_won_2009 = 20\ngames_won_2010 = 20\n\n# Calculate the rate of change as a percentage\nrate_of_change = ((games_won_2010 - games_won_2009) / games_won_2009) * 100\nanswer = rate_of_change\n\nprint(answer)", "# Number of games won by Union High in 2009 and 2010\ngames_won_2009 = 20\ngames_won_2010 = 20\n\n# Calculate the rate of change as the difference in games won\nrate_of_change = games_won_2010 - games_won_2009\n\n# Store the result in the variable 'answer'\nanswer = rate_of_change\nprint(answer)", "games_won_2009 = 20\ngames_won_2010 = 20\nchange_in_games_won = games_won_2010 - games_won_2009\nchange_in_years = 2010 - 2009\nrate_of_change = change_in_games_won / change_in_years\nanswer = rate_of_change\nprint(answer)"], "prediction": [0.0, 0.0, 0.0, 0.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nsilver coat rack | $88.00\ncrystal sculpture | $85.00\ncrystal vase | $51.00\nchandelier | $50.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nsilver coat rack | $88.00\ncrystal sculpture | $85.00\ncrystal vase | $51.00\nchandelier | $50.00\n\nEmmett has $172.00. Does he have enough to buy a silver coat rack and a crystal sculpture? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \nsilver_coat_rack_price = 88.00\ncrystal_sculpture_price = 85.00\ntotal_cost = silver_coat_rack_price + crystal_sculpture_price\nemmett_money = 172.00\n\nif emmett_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "silver_coat_rack_price = 88.00\ncrystal_sculpture_price = 85.00\ntotal_cost = silver_coat_rack_price + crystal_sculpture_price\nemmett_money = 172.00\n\nif emmett_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Prices of items\nsilver_coat_rack_price = 88.00\ncrystal_sculpture_price = 85.00\n\n# Total cost of items\ntotal_cost = silver_coat_rack_price + crystal_sculpture_price\n\n# Emmett's available money\nemmett_money = 172.00\n\n# Determine if Emmett can afford both items\nif emmett_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the prices of the items\nsilver_coat_rack_price = 88.00\ncrystal_sculpture_price = 85.00\n\n# Calculate the total cost\ntotal_cost = silver_coat_rack_price + crystal_sculpture_price\n\n# Define Emmett's available money\nemmett_money = 172.00\n\n# Determine if Emmett has enough money\nif emmett_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)"], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Fire hydrants\" and then answer a question.\n\nStreet | Number of hydrants\nMaple Street | 6\nCedar Street | 5\nFir Street | 4\nOak Street | 4\nPine Street | 6\nRose Street | 5\nAspen Street | 7", "question": "Read the following table regarding \"Fire hydrants\" and then write Python code to answer a question.\n\nStreet | Number of hydrants\nMaple Street | 6\nCedar Street | 5\nFir Street | 4\nOak Street | 4\nPine Street | 6\nRose Street | 5\nAspen Street | 7\n\nThe city recorded how many fire hydrants there are on each street. What is the median of the numbers?", "answer": "5", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# List of the number of hydrants on each street\nhydrants = [6, 5, 4, 4, 6, 5, 7]\n\n# Sort the list to find the median\nhydrants.sort()\n\n# Calculate the median\nn = len(hydrants)\nif n % 2 == 0:\n    median = (hydrants[n // 2 - 1] + hydrants[n // 2]) / 2\nelse:\n    median = hydrants[n // 2]\n\nanswer = median\nprint(answer)", "# List of the number of fire hydrants on each street\nhydrants = [6, 5, 4, 4, 6, 5, 7]\n\n# Sort the list to find the median\nhydrants.sort()\nn = len(hydrants)\n\n# Calculate the median\nif n % 2 == 0:\n    median = (hydrants[n // 2 - 1] + hydrants[n // 2]) / 2\nelse:\n    median = hydrants[n // 2]\n\n# Store the result in the answer variable\nanswer = median\n\n# Output the answer\nprint(answer)", "hydrants = [6, 5, 4, 4, 6, 5, 7]\nhydrants.sort()  # Sort the list\nn = len(hydrants)  # Get the number of hydrants\nif n % 2 == 0:  # Check if the number of elements is even\n    median = (hydrants[n // 2 - 1] + hydrants[n // 2]) / 2  # Calculate median for even\nelse:\n    median = hydrants[n // 2]  # Calculate median for odd\nanswer = median  # Store the result in 'answer'\nprint(answer)  # Output the answer", "# Define the number of fire hydrants on each street\nhydrants = [6, 5, 4, 4, 6, 5, 7]\n# Sort the list of hydrants\nhydrants.sort()\n\n# Get the number of hydrants\nn = len(hydrants)\n\n# Calculate the median\nif n % 2 == 0:  # Check if the number of elements is even\n    median = (hydrants[n // 2 - 1] + hydrants[n // 2]) / 2  # Median for even\nelse:\n    median = hydrants[n // 2]  # Median for odd\n\n# Store the result in 'answer'\nanswer = median\n\n# Output the answer\nprint(answer)"
], "prediction": [5.0, 5.0, 5.0, 5.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nstandard paper clips | $4.39/lb\nsmall binder clips | $4.37/lb\ncolored paper clips | $5.20/lb\nlarge binder clips | $5.31/lb\nmedium binder clips | $4.25/lb", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nstandard paper clips | $4.39/lb\nsmall binder clips | $4.37/lb\ncolored paper clips | $5.20/lb\nlarge binder clips | $5.31/lb\nmedium binder clips | $4.25/lb\n\nIf Joel buys 5 pounds of large binder clips and 2 pounds of standard paper clips, how much will he spend?", "answer": "35.33", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices per pound\nprice_large_binder_clips = 5.31 \nprice_standard_paper_clips = 4.39 \n\n# Quantities\npounds_large_binder_clips = 5 \npounds_standard_paper_clips = 2 \n\n# Total cost calculation\ntotal_cost = (price_large_binder_clips * pounds_large_binder_clips) + (price_standard_paper_clips * pounds_standard_paper_clips)\nanswer = total_cost\nprint(answer)", "# Define the prices per pound\nprice_large_binder_clips = 5.31 \nprice_standard_paper_clips = 4.39 \n\n# Define the number of pounds\npounds_large_binder_clips = 5 \npounds_standard_paper_clips = 2 \n\n# Calculate the total cost\ntotal_cost = (price_large_binder_clips * pounds_large_binder_clips) + (price_standard_paper_clips * pounds_standard_paper_clips)\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the result\nprint(answer)", "```python\n# Prices per pound\nprice", "# Define the prices per pound and the quantities purchased\nprice_large_binder_clips = 5.31 \nprice_standard_paper_clips = 4.39 \npounds_large_binder_clips = 5 \npounds_standard_paper_clips = 2 \n\n# Calculate total cost\ntotal_cost = (price_large_binder_clips * pounds_large_binder_clips) + (price_standard_paper_clips * pounds_standard_paper_clips)\nanswer = total_cost\n\nprint(answer)  # This will print the correct total cost"], "prediction": [35.33, 35.33, null, 35.33], "report": ["Done", "Done", "SyntaxError('invalid syntax', ('<string>', 1, 1, '```python\\n', 1, 2))", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nOption | Change in phone price\nAdd an upgrade | $60\nBuy a used phone | -$75", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nOption | Change in phone price\nAdd an upgrade | $60\nBuy a used phone | -$75\n\nLena is looking at the price of new cell phones online. Her favorite company, OrangeTech, has a special this weekend. Lena can add an upgrade to a phone for an additional cost, or she can buy a used phone to get a discount. The change in price for each option is shown in the table. Which option results in a greater change in price? Choose from the the options: ['adding an upgrade', 'buying a used phone']", "answer": "buying a used phone", "ques_type": "multi_choice", "choices": ["adding an upgrade", "buying a used phone"], "code": ["# Python code, return answer \nchange_upgrade = 60 \nchange_used_phone = -75 \n# Compare the changes in price (considering the discount)\nif change_upgrade > abs(change_used_phone): \n    answer = 'adding an upgrade'\nelse:\n    answer = 'buying a used phone'\nprint(answer)", "change_upgrade = 60 \nchange_used_phone = -75 \n\n# Since we are looking for the option with the greater change in price,\n# we need to compare the actual changes directly.\nif change_upgrade > abs(change_used_phone): \n    answer = 'adding an upgrade'\nelse:\n    answer = 'buying a used phone'\n\nprint(answer)", "change_upgrade = 60 \nchange_used_phone = -75 \n\nif change_upgrade > change_used_phone: \n    answer = 'adding an upgrade'\nelse:\n    answer = 'buying a used phone'\n\nprint(answer)", "change_upgrade = 60 \nchange_used_phone = -75 \n\n# Compare the absolute values of the changes in price\nif abs(change_upgrade) > abs(change_used_phone): \n    answer = 'adding an upgrade'\nelse:\n    answer = 'buying a used phone'\n\nprint(answer)"], "prediction": ["buying a used phone", "buying a used phone", "adding an upgrade", "buying a used phone"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Zoo ticket prices\" and then answer a question.\n\nZoo | Adult | Child\nAtlanta | $19 | $14\nBronx | $15 | $11\nSouthern Nevada | $8 | $6", "question": "Read the following table regarding \"Zoo ticket prices\" and then write Python code to answer a question.\n\nZoo | Adult | Child\nAtlanta | $19 | $14\nBronx | $15 | $11\nSouthern Nevada | $8 | $6\n\nDr. Brennan, a zoo director, researched ticket prices at other zoos around the country. How much does a child ticket to the Southern Nevada Zoo cost?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# The cost of a child ticket to the Southern Nevada Zoo\nchild_ticket_southern_nevada = 6\nanswer = child_ticket_southern_nevada\nprint(answer)", "# Define the price of a child ticket to the Southern Nevada Zoo\nchild_ticket_southern_nevada = 6.00\n\n# Format the price as currency\nanswer = f\"${child_ticket_southern_nevada:.2f}\"\nprint(answer)", "# Cost of a child ticket to the Southern Nevada Zoo\nchild_ticket_southern_nevada = 6.00  \nanswer = f\"${child_ticket_southern_nevada:.2f}\"  # Format the answer as a string with two decimal places\nprint(answer)  # Output the answer", "# Define the price of a child ticket to the Southern Nevada Zoo\nchild_ticket_southern_nevada = 6.00  \nanswer = child_ticket_southern_nevada  # Store the price as a numeric value\nprint(answer)  # Output the answer"], "prediction": [6.0, "$6.00", "$6.00", 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nsawdust | $4 per lb\nsand | $5 per lb\ncement | $4 per lb\nbark | $5 per lb\nmulch | $4 per lb", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nsawdust | $4 per lb\nsand | $5 per lb\ncement | $4 per lb\nbark | $5 per lb\nmulch | $4 per lb\n\nGwen bought 4 pounds of sawdust and 2 pounds of bark. How much did she spend?", "answer": "26", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \nprice_per_lb_sawdust = 4  # price per pound of sawdust\nprice_per_lb_bark = 5      # price per pound of bark\npounds_sawdust = 4          # pounds of sawdust purchased\npounds_bark = 2             # pounds of bark purchased\n\n# Calculate total cost\ntotal_cost = (price_per_lb_sawdust * pounds_sawdust) + (price_per_lb_bark * pounds_bark)\nanswer = total_cost\nprint(answer)", "# Define the price per pound for sawdust and bark\nprice_per_lb_sawdust = 4  # price per pound of sawdust\nprice_per_lb_bark = 5      # price per pound of bark\n\n# Define the pounds purchased\npounds_sawdust = 4          # pounds of sawdust purchased\npounds_bark = 2             # pounds of bark purchased\n\n# Calculate the total cost\ntotal_cost = (price_per_lb_sawdust * pounds_sawdust) + (price_per_lb_bark * pounds_bark)\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "# Define the prices per pound\nprice_per_lb_sawdust = 4  # price per pound of sawdust\nprice_per_lb_bark = 5      # price per pound of bark\n\n# Define the pounds purchased\npounds_sawdust = 4          # pounds of sawdust purchased\npounds_bark = 2             # pounds of bark purchased\n\n# Calculate the total cost\ntotal_cost = (price_per_lb_sawdust * pounds_sawdust) + (price_per_lb_bark * pounds_bark)\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "# Prices per pound for each item\nprice_per_lb_sawdust = 4  # price per pound of sawdust\nprice_per_lb_bark = 5      # price per pound of bark\n\n# Pounds purchased\npounds_sawdust = 4          # pounds of sawdust purchased\npounds_bark = 2             # pounds of bark purchased\n\n# Calculate total cost\ntotal_cost = (price_per_lb_sawdust * pounds_sawdust) + (price_per_lb_bark * pounds_bark)\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)"
], "prediction": [26.0, 26.0, 26.0, 26.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\norange agate | $0.04\npiece of green slate | $0.02\npiece of copper | $0.09\nyellow tiger's eye | $0.06\npiece of rose quartz | $0.06", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\norange agate | $0.04\npiece of green slate | $0.02\npiece of copper | $0.09\nyellow tiger's eye | $0.06\npiece of rose quartz | $0.06\n\nHow much money does Evelyn need to buy a piece of rose quartz and a piece of copper?", "answer": "0.15", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_rose_quartz = 0.06 \nprice_copper = 0.09 \n# Total cost for both items\ntotal_cost = price_rose_quartz + price_copper\nanswer = total_cost\nprint(answer)", "price_rose_quartz = 0.06 \nprice_copper = 0.09 \ntotal_cost = price_rose_quartz + price_copper\nanswer = \"{:.2f}\".format(total_cost)  # Format the output to two decimal places\nprint(answer)", "# Prices of the items\nprice_rose_quartz = 0.06 \nprice_copper = 0.09 \n\n# Calculate total cost\ntotal_cost = price_rose_quartz + price_copper\n\n# Store the result in the variable 'answer'\nanswer = total_cost  # This will be a float representing the total cost\n\n# Print the answer formatted to two decimal places\nprint(\"{:.2f}\".format(answer))", "# Define the prices of the items\nprice_rose_quartz = 0.06\nprice_copper = 0.09\n\n# Calculate the total cost\ntotal_cost = price_rose_quartz + price_copper\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer formatted to 2 decimal places\nprint(\"{:.2f}\".format(answer))"], "prediction": [0.15, 0.15, 0.15, 0.15], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Gymnastics meet schedule\" and then answer a question.\n\nEvent | Begin | End\nwomen's floor exercise | 10:05 A.M. | 10:45 A.M.\nmen's vault | 10:35 A.M. | 11:20 A.M.\nmen's rings | 11:25 A.M. | 12:20 P.M.\nmen's parallel bars | 12:15 P.M. | 12:55 P.M.\nwomen's balance beam | 12:35 P.M. | 1:05 P.M.\nwomen's uneven bars | 12:50 P.M. | 1:15 P.M.\nmen's high bar | 1:00 P.M. | 1:30 P.M.\nwomen's vault | 1:45 P.M. | 2:10 P.M.\nmen's pommel horse | 2:20 P.M. | 2:45 P.M.\nmen's floor exercise | 2:40 P.M. | 3:30 P.M.", "question": "Read the following table regarding \"Gymnastics meet schedule\" and then write Python code to answer a question.\n\nEvent | Begin | End\nwomen's floor exercise | 10:05 A.M. | 10:45 A.M.\nmen's vault | 10:35 A.M. | 11:20 A.M.\nmen's rings | 11:25 A.M. | 12:20 P.M.\nmen's parallel bars | 12:15 P.M. | 12:55 P.M.\nwomen's balance beam | 12:35 P.M. | 1:05 P.M.\nwomen's uneven bars | 12:50 P.M. | 1:15 P.M.\nmen's high bar | 1:00 P.M. | 1:30 P.M.\nwomen's vault | 1:45 P.M. | 2:10 P.M.\nmen's pommel horse | 2:20 P.M. | 2:45 P.M.\nmen's floor exercise | 2:40 P.M. | 3:30 P.M.\n\nLook at the following schedule. Which event ends at 2.45 P.M.? Choose from the the options: [\"men's vault event\", \"men's parallel bars event\", \"men's pommel horse event\", \"women's vault event\"]", "answer": "men's pommel horse event", "ques_type": "multi_choice", "choices": ["men's vault event", "men's parallel bars event", "men's pommel horse event", "women's vault event"], "code": [
  "# Python code, return answer \n# Check the end times of the events\nevent_end_times = {\n    \"women's floor exercise\": \"10:45 A.M.\",\n    \"men's vault\": \"11:20 A.M.\",\n    \"men's rings\": \"12:20 P.M.\",\n    \"men's parallel bars\": \"12:55 P.M.\",\n    \"women's balance beam\": \"1:05 P.M.\",\n    \"women's uneven bars\": \"1:15 P.M.\",\n    \"men's high bar\": \"1:30 P.M.\",\n    \"women's vault\": \"2:10 P.M.\",\n    \"men's pommel horse\": \"2:45 P.M.\",\n    \"men's floor exercise\": \"3:30 P.M.\"\n}\n\n# Find the event that ends at 2:45 P.M.\nevent_ending_at_245 = [event for event, end_time in event_end_times.items() if end_time == \"2:45 P.M.\"]\nanswer = event_ending_at_245[0] if event_ending_at_245 else None\nprint(answer)", "event_end_times = {\n    \"women's floor exercise\": \"10:45 A.M.\",\n    \"men's vault\": \"11:20 A.M.\",\n    \"men's rings\": \"12:20 P.M.\",\n    \"men's parallel bars\": \"12:55 P.M.\",\n    \"women's balance beam\": \"1:05 P.M.\",\n    \"women's uneven bars\": \"1:15 P.M.\",\n    \"men's high bar\": \"1:30 P.M.\",\n    \"women's vault\": \"2:10 P.M.\",\n    \"men's pommel horse\": \"2:45 P.M.\",\n    \"men's floor exercise\": \"3:30 P.M.\"\n}\n\n# Define the options provided in the question\noptions = [\"men's vault event\", \"men's parallel bars event\", \"men's pommel horse event\", \"women's vault event\"]\n\n# Find which event ends at 2:45 P.M.\nevent_ending_at_245 = [event for event, end_time in event_end_times.items() if end_time == \"2:45 P.M.\"]\n\n# Check if the found event matches any of the options\nanswer = None\nif event_ending_at_245:\n    event_name = event_ending_at_245[0]\n    if \"men's pommel horse\" in event_name:\n        answer = \"men's pommel horse event\"\n\nprint(answer)", "# Define the event end times in a dictionary\nevent_end_times = {\n    \"women's floor exercise\": \"10:45 A.M.\",\n    \"men's vault\": \"11:20 A.M.\",\n    \"men's rings\": \"12:20 P.M.\",\n    \"men's parallel bars\": \"12:55 P.M.\",\n    \"women's balance beam\": \"1:05 P.M.\",\n    \"women's uneven bars\": \"1:15 P.M.\",\n    \"men's high bar\": \"1:30 P.M.\",\n    \"women's vault\": \"2:10 P.M.\",\n    \"men's pommel horse\": \"2:45 P.M.\",\n    \"men's floor exercise\": \"3:30 P.M.\"\n}\n\n# Check which event ends at 2:45 P.M.\nif event_end_times.get(\"men's pommel horse\") == \"2:45 P.M.\":\n    answer = \"men's pommel horse event\"\nelse:\n    answer = None\n\nprint(answer)", "event_end_times = {\n    \"women's floor exercise\": \"10:45 A.M.\",\n    \"men's vault\": \"11:20 A.M.\",\n    \"men's rings\": \"12:20 P.M.\",\n    \"men's parallel bars\": \"12:55 P.M.\",\n    \"women's balance beam\": \"1:05 P.M.\",\n    \"women's uneven bars\": \"1:15 P.M.\",\n    \"men's high bar\": \"1:30 P.M.\",\n    \"women's vault\": \"2:10 P.M.\",\n    \"men's pommel horse\": \"2:45 P.M.\",\n    \"men's floor exercise\": \"3:30 P.M.\"\n}\n\n# Initialize answer variable\nanswer = None\n\n# Check which event ends at 2:45 P.M.\nfor event, end_time in event_end_times.items():\n    if end_time == \"2:45 P.M.\":\n        answer = f\"{event} event\"\n        break\n\nprint(answer)"
], "prediction": ["men's pommel horse", "men's pommel horse event", "men's pommel horse event", "men's pommel horse event"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$230 | 11,700 | 2,600\n$380 | 10,200 | 6,600\n$530 | 8,700 | 10,600\n$680 | 7,200 | 14,600\n$830 | 5,700 | 18,600", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$230 | 11,700 | 2,600\n$380 | 10,200 | 6,600\n$530 | 8,700 | 10,600\n$680 | 7,200 | 14,600\n$830 | 5,700 | 18,600\n\nLook at the table. Then answer the question. At a price of $530, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "surplus", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": ["# Python code, return answer \n# Quantity demanded and supplied at the price of $530\nquantity_demanded = 8700\nquantity_supplied = 10600\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the quantities at the price of $530\nquantity_demanded = 8700\nquantity_supplied = 10600\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\n# Output the result\nprint(answer)", "# Define the quantity demanded and supplied at the price of $530\nquantity_demanded = 8700\nquantity_supplied = 10600\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)  # Output the result", "# Define the quantities demanded and supplied at the price of $530\nquantity_demanded = 8700\nquantity_supplied = 10600\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\n# Output the result\nprint(answer)"], "prediction": ["surplus", "surplus", "surplus", "surplus"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npurple T-shirt | $8\npair of white socks | $6\norange T-shirt | $2\nblack skirt | $3", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npurple T-shirt | $8\npair of white socks | $6\norange T-shirt | $2\nblack skirt | $3\n\nHow much money does Jessica need to buy a purple T-shirt and an orange T-shirt?", "answer": "10", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nprice_purple_tshirt = 8\nprice_orange_tshirt = 2\n# Calculate total cost\ntotal_cost = price_purple_tshirt + price_orange_tshirt\nanswer = total_cost\nprint(answer)", "price_purple_tshirt = 8\nprice_orange_tshirt = 2\ntotal_cost = price_purple_tshirt + price_orange_tshirt\nanswer = total_cost\nprint(int(answer))  # Convert to integer for cleaner output", "price_purple_tshirt = 8\nprice_orange_tshirt = 2\ntotal_cost = price_purple_tshirt + price_orange_tshirt\nanswer = int(total_cost)  # Convert to integer before assigning to answer\nprint(answer)", "price_purple_tshirt = 8.0\nprice_orange_tshirt = 2.0\ntotal_cost = price_purple_tshirt + price_orange_tshirt\nanswer = total_cost  # Keep as float for monetary value\nprint(answer)"], "prediction": [10.0, 10.0, 10.0, 10.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Minutes spent rehearsing\" and then answer a question.\n\nDay | Minutes\nWednesday | 68\nThursday | 66\nFriday | 67\nSaturday | 67\nSunday | 77", "question": "Read the following table regarding \"Minutes spent rehearsing\" and then write Python code to answer a question.\n\nDay | Minutes\nWednesday | 68\nThursday | 66\nFriday | 67\nSaturday | 67\nSunday | 77\n\nFranco recalled how many minutes he had spent at theater rehearsal in the past 5 days. What is the mean of the numbers?", "answer": "69", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Minutes spent rehearsing over the past 5 days\nminutes = [66, 67, 67, 77]  # Exclude Wednesday's 68\n# Calculate the mean\nmean_minutes = sum(minutes) / len(minutes)\nanswer = mean_minutes\nprint(answer)", "# Include all minutes from the past 5 days\nminutes = [68, 66, 67, 67, 77]  \nmean_minutes = sum(minutes) / len(minutes)  \nanswer = mean_minutes  \nprint(answer)", "# List of minutes spent rehearsing over the past 5 days\nminutes = [68, 66, 67, 67, 77]\n\n# Calculate the mean of the minutes\nmean_minutes = sum(minutes) / len(minutes)\n\n# Store the answer in the variable 'answer'\nanswer = round(mean_minutes, 2)  # Rounding to two decimal places for clarity\n\n# Print the answer\nprint(answer)", "# List of minutes spent rehearsing over the past 5 days\nminutes = [68, 66, 67, 67, 77]\n\n# Calculate the mean of the minutes\nmean_minutes = sum(minutes) / len(minutes)\n\n# Store the result in the variable 'answer'\nanswer = round(mean_minutes, 2)  # Rounding to two decimal places for clarity\n\nprint(answer)"], "prediction": [69.25, 69.0, 69.0, 69.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Radio listeners\" and then answer a question.\n\nMonth | Number of listeners\nApril | 6,394\nMay | 1,329\nJune | 2,833\nJuly | 7,560", "question": "Read the following table regarding \"Radio listeners\" and then write Python code to answer a question.\n\nMonth | Number of listeners\nApril | 6,394\nMay | 1,329\nJune | 2,833\nJuly | 7,560\n\nA radio station paid attention to how many listeners it had each month. How many more listeners did the radio station have in July than in June?", "answer": "4,727", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nlisteners_july = 7560\nlisteners_june = 2833\n# Calculate the difference in listeners between July and June\ndifference = listeners_july - listeners_june\nanswer = difference\nprint(answer)", "listeners_july = 7560\nlisteners_june = 2833\ndifference = listeners_july - listeners_june\nanswer = int(difference)  # Convert the result to an integer\nprint(answer)", "listeners_july = 7560\nlisteners_june = 2833\ndifference = listeners_july - listeners_june\nanswer = difference  # No need to convert to int since it's already an integer\nprint(answer)", "listeners_july = 7560\nlisteners_june = 2833\ndifference = listeners_july - listeners_june\nanswer = int(difference)  # Convert to int for clarity\nprint(answer)"], "prediction": [4727.0, 4727.0, 4727.0, 4727.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nphotograph signed by a famous television star | $60\nCD signed by a famous band | $74\nphotograph signed by a famous movie star | $24\nprogram signed by a famous dancer | $35\njersey signed by a famous hockey player | $65", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nphotograph signed by a famous television star | $60\nCD signed by a famous band | $74\nphotograph signed by a famous movie star | $24\nprogram signed by a famous dancer | $35\njersey signed by a famous hockey player | $65\n\nHow much money does Owen need to buy a jersey signed by a famous hockey player and a photograph signed by a famous movie star?", "answer": "89", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices for the items\nprice_jersey = 65 \nprice_photograph_movie_star = 24 \n# Total cost for both items\ntotal_cost = price_jersey + price_photograph_movie_star\nanswer = total_cost\nprint(answer)", "# Prices of the items\nprice_jersey = 65.00  # jersey signed by a famous hockey player\nprice_photograph_movie_star = 24.00  # photograph signed by a famous movie star\n\n# Calculate total cost\ntotal_cost = price_jersey + price_photograph_movie_star\n\n# Format the output as a monetary value\nanswer = f\"${total_cost:.2f}\"\nprint(answer)", "price_jersey = 65.00  # jersey signed by a famous hockey player\nprice_photograph_movie_star = 24.00  # photograph signed by a famous movie star\ntotal_cost = price_jersey + price_photograph_movie_star\nanswer = total_cost  # Store the numerical total cost in 'answer'\nprint(answer)", "# Prices of the items\nprice_jersey = 65.00  # jersey signed by a famous hockey player\nprice_photograph_movie_star = 24.00  # photograph signed by a famous movie star\n\n# Calculate the total cost\ntotal_cost = price_jersey + price_photograph_movie_star\n\n# Store the numerical total cost in 'answer'\nanswer = total_cost  \n\n# Output the answer\nprint(answer)"], "prediction": [89.0, "$89.00", 89.0, 89.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of sheets | Number of stamps\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of sheets | Number of stamps\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | ?\n\nEach sheet has 2 stamps. How many stamps are on 5 sheets?", "answer": "10", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nsheets = 5\nstamps_per_sheet = 2\n# Calculate the total number of stamps for 5 sheets\ntotal_stamps = sheets * stamps_per_sheet\nanswer = total_stamps\nprint(answer)", "sheets = 5\nstamps_per_sheet = 2\ntotal_stamps = sheets * stamps_per_sheet\nanswer = total_stamps  # This will be an integer\nprint(answer)", "sheets = 5\nstamps_per_sheet = 2\ntotal_stamps = sheets * stamps_per_sheet\nanswer = int(total_stamps)  # Ensure the result is an integer\nprint(answer)", "sheets = 5\nstamps_per_sheet = 2\ntotal_stamps = sheets * stamps_per_sheet\nanswer = total_stamps  # No need to convert to int, as the result is already an integer\nprint(answer)"], "prediction": [10.0, 10.0, 10.0, 10.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Hammers sold\" and then answer a question.\n\nDay | Number of hammers\nThursday | 6\nFriday | 2\nSaturday | 10\nSunday | 2\nMonday | 7\nTuesday | 3", "question": "Read the following table regarding \"Hammers sold\" and then write Python code to answer a question.\n\nDay | Number of hammers\nThursday | 6\nFriday | 2\nSaturday | 10\nSunday | 2\nMonday | 7\nTuesday | 3\n\nA hardware store monitored how many hammers it sold in the past 6 days. What is the mean of the numbers?", "answer": "5", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of hammers sold each day\nhammers_sold = [6, 2, 10, 2, 7, 3]\n# Calculate the mean\nmean_hammers = sum(hammers_sold) / len(hammers_sold)\nanswer = mean_hammers\nprint(answer)", "# List of hammers sold over the past 6 days\nhammers_sold = [6, 2, 10, 2, 7, 3]\n\n# Calculate the mean of the hammers sold\nmean_hammers = sum(hammers_sold) / len(hammers_sold)\n\n# Store the result in the variable 'answer'\nanswer = mean_hammers\n\n# Output the answer\nprint(answer)", "# Define the number of hammers sold each day\nhammers_sold = [6, 2, 10, 2, 7, 3]\n\n# Calculate the mean of the numbers\nmean_hammers = sum(hammers_sold) / len(hammers_sold)\n\n# Store the result in the variable 'answer'\nanswer = round(mean_hammers, 2)  # rounding to two decimal places for better presentation\n\n# Output the answer\nprint(answer)", "hammers_sold = [6, 2, 10, 2, 7, 3]\nmean_hammers = sum(hammers_sold) / len(hammers_sold)\nanswer = mean_hammers  # Keep it as a float without rounding\nprint(answer)"], "prediction": [5.0, 5.0, 5.0, 5.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPersian oranges | $1/pound\nblood oranges | $2/pound\nnavel oranges | $5/pound\nValencia oranges | $3/pound\ntangerines | $1/pound\npomelos | $2/pound", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPersian oranges | $1/pound\nblood oranges | $2/pound\nnavel oranges | $5/pound\nValencia oranges | $3/pound\ntangerines | $1/pound\npomelos | $2/pound\n\nMichael buys 1.2 pounds of navel oranges. What is the total cost?", "answer": "6", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \nprice_per_pound_navel_oranges = 5  # price for navel oranges\npounds_bought = 1.2 \n# Calculate the total cost\ntotal_cost = price_per_pound_navel_oranges * pounds_bought\nanswer = total_cost\nprint(answer)", "# Define the price per pound for navel oranges\nprice_per_pound_navel_oranges = 5  # price for navel oranges\n\n# Define the number of pounds bought\npounds_bought = 1.2 \n\n# Calculate the total cost\ntotal_cost = price_per_pound_navel_oranges * pounds_bought\n\n# Store the result in the variable 'answer'\nanswer = f\"The total cost for {pounds_bought} pounds of navel oranges is ${total_cost:.2f}.\"\n\n# Print the answer\nprint(answer)", "# Define the price per pound for navel oranges\nprice_per_pound_navel_oranges = 5  # price for navel oranges\n# Define the amount of pounds bought\npounds_bought = 1.2  \n# Calculate the total cost\ntotal_cost = price_per_pound_navel_oranges * pounds_bought\n# Store the numeric value of the total cost in the answer variable\nanswer = total_cost  \nprint(answer)", "# Define the price per pound for navel oranges\nprice_per_pound_navel_oranges = 5  # price for navel oranges\n\n# Define the number of pounds bought\npounds_bought = 1.2  \n\n# Calculate the total cost\ntotal_cost = price_per_pound_navel_oranges * pounds_bought\n\n# Store the total cost in the answer variable\nanswer = total_cost  \n\n# Print the total cost\nprint(answer)"
], "prediction": [6.0, "The total cost for 1.2 pounds of navel oranges is $6.00.", 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Beautician requests\" and then answer a question.\n\nBeautician | Requests\nTara | 130\nCody | 980\nMackenzie | 410\nLayla | 880", "question": "Read the following table regarding \"Beautician requests\" and then write Python code to answer a question.\n\nBeautician | Requests\nTara | 130\nCody | 980\nMackenzie | 410\nLayla | 880\n\nA beauty salon in Oxford has four beauticians and keeps track of how often clients request each one specifically. What fraction of requests were for Mackenzie? Simplify your answer.", "answer": "41/240", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total requests by all beauticians\ntotal_requests = 130 + 980 + 410 + 880\n# Requests for Mackenzie\nmackenzie_requests = 410\n# Calculate the fraction of requests for Mackenzie\nfraction_mackenzie = mackenzie_requests / total_requests\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_fraction = Fraction(mackenzie_requests, total_requests).limit_denominator()\nanswer = simplified_fraction\nprint(answer)", "# Number of requests for each beautician\ntara_requests = 130\ncody_requests = 980\nmackenzie_requests = 410\nlayla_requests = 880\n\n# Calculate total requests\ntotal_requests = tara_requests + cody_requests + mackenzie_requests + layla_requests\n\n# Calculate the fraction of requests for Mackenzie and simplify it\nfrom fractions import Fraction\nfraction_mackenzie = Fraction(mackenzie_requests, total_requests).limit_denominator()\n\n# Store the result in the answer variable\nanswer = fraction_mackenzie\nprint(answer)", "# Define the requests for each beautician\ntara_requests = 130\ncody_requests = 980\nmackenzie_requests = 410\nlayla_requests = 880\n\n# Calculate the total number of requests\ntotal_requests = tara_requests + cody_requests + mackenzie_requests + layla_requests\n\n# Import Fraction class to simplify the fraction\nfrom fractions import Fraction\n\n# Calculate the fraction of requests for Mackenzie and simplify it\nfraction_mackenzie = Fraction(mackenzie_requests, total_requests).limit_denominator()\n\n# Store the result as a variable named 'answer'\nanswer = fraction_mackenzie\n\n# Print the answer\nprint(answer)", "# Define the number of requests for each beautician\ntara_requests = 130\ncody_requests = 980\nmackenzie_requests = 410\nlayla_requests = 880\n\n# Calculate the total number of requests\ntotal_requests = tara_requests + cody_requests + mackenzie_requests + layla_requests\n\n# Calculate the fraction of requests for Mackenzie and simplify it\nfrom fractions import Fraction\nfraction_mackenzie = Fraction(mackenzie_requests, total_requests).limit_denominator()\n\n# Store the result as 'answer'\nanswer = fraction_mackenzie\nprint(answer)"
], "prediction": [0.17083, 0.17083, 0.17083, 0.17083], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nantique elm coffee table | $1,884.00\nantique rosewood corner cabinet | $4,927.00\nantique pine chest of drawers | $1,174.00\nantique oak writing desk | $4,882.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nantique elm coffee table | $1,884.00\nantique rosewood corner cabinet | $4,927.00\nantique pine chest of drawers | $1,174.00\nantique oak writing desk | $4,882.00\n\nHow much money does Chandler need to buy an antique rosewood corner cabinet, an antique elm coffee table, and an antique pine chest of drawers?", "answer": "7,985", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices of the antique items\nprice_elm_coffee_table = 1884.00\nprice_rosewood_cabinet = 4927.00\nprice_pine_chest = 1174.00\n\n# Total cost for Chandler\ntotal_cost = price_elm_coffee_table + price_rosewood_cabinet + price_pine_chest\nanswer = total_cost\nprint(answer)", "# Define the prices of the items\nprice_elm_coffee_table = 1884.00\nprice_rosewood_cabinet = 4927.00\nprice_pine_chest = 1174.00\n\n# Calculate the total cost\ntotal_cost = price_elm_coffee_table + price_rosewood_cabinet + price_pine_chest\n\n# Format the total cost as currency\nanswer = \"${:,.2f}\".format(total_cost)\nprint(answer)", "# Define the prices of the items\nprice_elm_coffee_table = 1884.00\nprice_rosewood_cabinet = 4927.00\nprice_pine_chest = 1174.00\n\n# Calculate the total cost\ntotal_cost = price_elm_coffee_table + price_rosewood_cabinet + price_pine_chest\n\n# Store the numerical value in the answer variable\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "# Define the prices of the items\nprice_elm_coffee_table = 1884.00\nprice_rosewood_cabinet = 4927.00\nprice_pine_chest = 1174.00\n\n# Calculate the total cost\ntotal_cost = price_elm_coffee_table + price_rosewood_cabinet + price_pine_chest\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)"
], "prediction": [7985.0, "$7,985.00", 7985.0, 7985.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ndog calendar | $13.81\nhistory book | $13.40\nbook of piano music | $13.91\ncookbook | $10.22", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ndog calendar | $13.81\nhistory book | $13.40\nbook of piano music | $13.91\ncookbook | $10.22\n\nBobby has $38.70. How much money will Bobby have left if he buys a cookbook and a history book?", "answer": "15.08", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices of the items Bobby wants to buy\nprice_cookbook = 10.22 \nprice_history_book = 13.40 \n\n# Total cost of the items\ntotal_cost = price_cookbook + price_history_book \n\n# Money Bobby has\ninitial_money = 38.70 \n\n# Money left after the purchase\nmoney_left = initial_money - total_cost\nanswer = money_left\nprint(answer)", "# Prices of the items\nprice_cookbook = 10.22\nprice_history_book = 13.40\n\n# Calculate total cost\ntotal_cost = price_cookbook + price_history_book\n\n# Bobby's initial amount of money\ninitial_money = 38.70\n\n# Calculate money left after purchases\nmoney_left = initial_money - total_cost\n\n# Store the result in 'answer'\nanswer = money_left\n\n# Output the answer\nprint(answer)", "# Define the prices of the items\nprice_cookbook = 10.22\nprice_history_book = 13.40\n\n# Calculate the total cost of the items\ntotal_cost = price_cookbook + price_history_book\n\n# Bobby's initial amount of money\ninitial_money = 38.70\n\n# Calculate how much money Bobby will have left\nmoney_left = initial_money - total_cost\n\n# Store the result in the answer variable\nanswer = money_left\n\n# Output the answer\nprint(answer)", "# Prices of the items\nprice_cookbook = 10.22\nprice_history_book = 13.40\n\n# Calculate total cost\ntotal_cost = price_cookbook + price_history_book\n\n# Bobby's initial amount of money\ninitial_money = 38.70\n\n# Calculate money left after purchases\nmoney_left = initial_money - total_cost\n\n# Store the result as 'answer'\nanswer = money_left\n\n# Print the answer\nprint(answer)"
], "prediction": [15.08, 15.08, 15.08, 15.08], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Convenience store beverage sales\" and then answer a question.\n\nBeverage | Saturday | Sunday\nKickin' Coffee | $9 | $3\nOlde Tyme Cola | $7 | $19\nFizzy Fun | $2 | $9", "question": "Read the following table regarding \"Convenience store beverage sales\" and then write Python code to answer a question.\n\nBeverage | Saturday | Sunday\nKickin' Coffee | $9 | $3\nOlde Tyme Cola | $7 | $19\nFizzy Fun | $2 | $9\n\nAbigail, an employee at Harmon's Convenience Store, looked at the sales of each of its soda products. On Sunday, how much more did the convenience store make from Fizzy Fun sales than from Kickin' Coffee sales?", "answer": "6", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Sales on Sunday for each beverage\nsales_fizzy_fun_sunday = 9\nsales_kickin_coffee_sunday = 3\n# Calculate the difference in sales\ndifference_in_sales = sales_fizzy_fun_sunday - sales_kickin_coffee_sunday\nanswer = difference_in_sales\nprint(answer)", "# Define the sales for each beverage on Sunday\nsales_fizzy_fun_sunday = 9  # sales for Fizzy Fun\nsales_kickin_coffee_sunday = 3  # sales for Kickin' Coffee\n\n# Calculate the difference in sales\ndifference_in_sales = sales_fizzy_fun_sunday - sales_kickin_coffee_sunday\n\n# Store the result in the variable 'answer'\nanswer = difference_in_sales\n\n# Output the answer\nprint(answer)", "# Define the sales for each beverage on Sunday\nsales_fizzy_fun_sunday = 9  # Revenue from Fizzy Fun\nsales_kickin_coffee_sunday = 3  # Revenue from Kickin' Coffee\n\n# Calculate the difference in sales\ndifference_in_sales = sales_fizzy_fun_sunday - sales_kickin_coffee_sunday\n\n# Store the result in the variable 'answer'\nanswer = difference_in_sales\n\n# Print the answer\nprint(answer)", "# Define the sales for each beverage on Sunday\nsales_fizzy_fun_sunday = 9  # Revenue from Fizzy Fun on Sunday\nsales_kickin_coffee_sunday = 3  # Revenue from Kickin' Coffee on Sunday\n\n# Calculate the difference in sales between Fizzy Fun and Kickin' Coffee on Sunday\ndifference_in_sales = sales_fizzy_fun_sunday - sales_kickin_coffee_sunday\n\n# Store the result in the variable 'answer'\nanswer = difference_in_sales\n\n# Output the answer\nprint(answer)"
], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Sticker collections\" and then answer a question.\n\nName | Number of stickers\nTina | 778\nEmma | 796\nRobert | 767\nJamie | 769", "question": "Read the following table regarding \"Sticker collections\" and then write Python code to answer a question.\n\nName | Number of stickers\nTina | 778\nEmma | 796\nRobert | 767\nJamie | 769\n\nSome friends compared the sizes of their sticker collections. Who has the fewest stickers? Choose from the the options: ['Tina', 'Emma', 'Robert', 'Jamie']", "answer": "Robert", "ques_type": "multi_choice", "choices": ["Tina", "Emma", "Robert", "Jamie"], "code": ["# Python code, return answer \nstickers = {\n    'Tina': 778,\n    'Emma': 796,\n    'Robert': 767,\n    'Jamie': 769\n}\n# Find the friend with the fewest stickers\nfewest_stickers_friend = min(stickers, key=stickers.get)\nanswer = fewest_stickers_friend\nprint(answer)", "# Store the names and their corresponding number of stickers in a dictionary  \nstickers = {\n    'Tina': 778,\n    'Emma': 796,\n    'Robert': 767,\n    'Jamie': 769\n}\n\n# Find the friend with the fewest stickers  \nfewest_stickers_friend = min(stickers, key=stickers.get)\n\n# Store the result in the variable 'answer'  \nanswer = fewest_stickers_friend  \n\n# Output the answer  \nprint(answer)", "stickers = {\n    'Tina': 778,\n    'Emma': 796,\n    'Robert': 767,\n    'Jamie': 769\n}\nfewest_stickers_friend = min(stickers, key=stickers.get)\nanswer = fewest_stickers_friend  \nprint(answer)", "stickers = {\n    'Tina': 778,\n    'Emma': 796,\n    'Robert': 767,\n    'Jamie': 769\n}\nfewest_stickers_friend = min(stickers, key=stickers.get)\nanswer = fewest_stickers_friend  \nprint(answer)"], "prediction": ["Robert", "Robert", "Robert", "Robert"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Festival schedule\" and then answer a question.\n\nEvent | Begin | End\ndance performance | 10:15 A.M. | 12:45 P.M.\nchoir concert | 12:55 P.M. | 2:40 P.M.\ndrumming performance | 2:50 P.M. | 3:50 P.M.\naward ceremony | 3:10 P.M. | 4:30 P.M.\nkeynote speech | 4:20 P.M. | 6:00 P.M.", "question": "Read the following table regarding \"Festival schedule\" and then write Python code to answer a question.\n\nEvent | Begin | End\ndance performance | 10:15 A.M. | 12:45 P.M.\nchoir concert | 12:55 P.M. | 2:40 P.M.\ndrumming performance | 2:50 P.M. | 3:50 P.M.\naward ceremony | 3:10 P.M. | 4:30 P.M.\nkeynote speech | 4:20 P.M. | 6:00 P.M.\n\nLook at the following schedule. When does the dance performance begin? Choose from the the options: ['2:50 P.M.', '3:10 P.M.', '10:15 A.M.', '12:55 P.M.']", "answer": "10:15 A.M.", "ques_type": "multi_choice", "choices": ["2:50 P.M.", "3:10 P.M.", "10:15 A.M.", "12:55 P.M."], "code": ["# Python code, return answer \ndance_performance_start = '10:15 A.M.'\nanswer = dance_performance_start\nprint(answer)", "# Define the start time of the dance performance\ndance_performance_start = '10:15 A.M.'\n\n# Store the answer in the variable 'answer'\nanswer = dance_performance_start\n\n# Output the answer\nprint(answer)", "# Define the start time of the dance performance\ndance_performance_start = '10:15 A.M.'\n\n# Define the options\noptions = ['2:50 P.M.', '3:10 P.M.', '10:15 A.M.', '12:55 P.M.']\n\n# Check if the dance performance start time is in the options\nif dance_performance_start in options:\n    answer = dance_performance_start\nelse:\n    answer = None\n\nprint(answer)", "# Define the start time of the dance performance\ndance_performance_start = '10:15 A.M.'\n\n# Directly assign the answer since we know the question\nanswer = dance_performance_start\n\n# Output the answer\nprint(answer)"], "prediction": ["10:15 A.M.", "10:15 A.M.", "10:15 A.M.", "10:15 A.M."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nAndalusian horse | $7,880\nMorgan horse | $5,351\nArabian horse | $1,403\nHanoverian horse | $6,753\nAppaloosa horse | $2,202", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nAndalusian horse | $7,880\nMorgan horse | $5,351\nArabian horse | $1,403\nHanoverian horse | $6,753\nAppaloosa horse | $2,202\n\nFlorence has $12,625. How much money will Florence have left if she buys an Andalusian horse and an Appaloosa horse?", "answer": "2,543", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the horses\nandalusian_horse_price = 7880\nappaloosa_horse_price = 2202\n# Total cost of both horses\ntotal_cost = andalusian_horse_price + appaloosa_horse_price\n# Florence's initial amount\nflorence_money = 12625\n# Remaining money after the purchase\nremaining_money = florence_money - total_cost\nanswer = remaining_money\nprint(answer)", "andalusian_horse_price = 7880\nappaloosa_horse_price = 2202\ntotal_cost = andalusian_horse_price + appaloosa_horse_price\nflorence_money = 12625\nremaining_money = florence_money - total_cost\nanswer = int(remaining_money)  # Convert to integer for monetary representation\nprint(answer)", "andalusian_horse_price = 7880\nappaloosa_horse_price = 2202\ntotal_cost = andalusian_horse_price + appaloosa_horse_price\nflorence_money = 12625\nremaining_money = florence_money - total_cost\nanswer = remaining_money  # Keep it as an integer since all values are whole numbers\nprint(answer)", "andalusian_horse_price = 7880\nappaloosa_horse_price = 2202\ntotal_cost = andalusian_horse_price + appaloosa_horse_price\nflorence_money = 12625\nremaining_money = florence_money - total_cost\nanswer = int(remaining_money)  # Convert to integer since all values are whole numbers\nprint(answer)"], "prediction": [2543.0, 2543.0, 2543.0, 2543.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Miniature golf scores\" and then answer a question.\n\nName | Score\nOmar | 29\nLester | 30\nGordon | 26\nIsabelle | 32\nDarnell | 34\nSteven | 33\nTravis | 35", "question": "Read the following table regarding \"Miniature golf scores\" and then write Python code to answer a question.\n\nName | Score\nOmar | 29\nLester | 30\nGordon | 26\nIsabelle | 32\nDarnell | 34\nSteven | 33\nTravis | 35\n\nSome friends played miniature golf and wrote down their scores. What is the median of the numbers?", "answer": "32", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nscores = [29, 30, 26, 32, 34, 33, 35]\n# Sort the scores to find the median\nscores.sort()\n# Calculate the median\nn = len(scores)\nif n % 2 == 1:  # If the number of scores is odd\n    median = scores[n // 2]\nelse:  # If the number of scores is even\n    median = (scores[n // 2 - 1] + scores[n // 2]) / 2\nanswer = median\nprint(answer)", "scores = [29, 30, 26, 32, 34, 33, 35]\nscores.sort()\nmedian = scores[len(scores) // 2]  # Directly access the middle element for odd length\nanswer = median\nprint(answer)", "scores = [29, 30, 26, 32, 34, 33, 35]\nscores.sort()\n\n# Calculate the median\nn = len(scores)\nif n % 2 == 1:  # odd number of scores\n    median = scores[n // 2]\nelse:  # even number of scores\n    median = (scores[n // 2 - 1] + scores[n // 2]) / 2\n\nanswer = median\nprint(answer)  # Output: 32", "scores = [29, 30, 26, 32, 34, 33, 35]\nscores.sort()  # Sort the scores in ascending order\nn = len(scores)  # Get the number of scores\n\nif n % 2 == 1:  # If the number of scores is odd\n    median = scores[n // 2]  # The median is the middle score\nelse:  # If the number of scores is even\n    median = (scores[n // 2 - 1] + scores[n // 2]) / 2  # The median is the average of the two middle scores\n\nanswer = median  # Store the median in the variable 'answer'\nprint(answer)  # Output the median"], "prediction": [32.0, 32.0, 32.0, 32.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Scores in a card game\" and then answer a question.\n\nScore | Frequency\n4 | 3\n5 | 1\n6 | 10\n7 | 0\n8 | 8\n9 | 2\n10 | 7", "question": "Read the following table regarding \"Scores in a card game\" and then write Python code to answer a question.\n\nScore | Frequency\n4 | 3\n5 | 1\n6 | 10\n7 | 0\n8 | 8\n9 | 2\n10 | 7\n\nAnnie figured out the scores at the end of a card game. How many people scored more than 5?", "answer": "27", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Define the frequency of scores\nscores_frequency = {\n    4: 3,\n    5: 1,\n    6: 10,\n    7: 0,\n    8: 8,\n    9: 2,\n    10: 7\n}\n\n# Calculate how many people scored more than 5\npeople_scored_more_than_5 = sum(frequency for score, frequency in scores_frequency.items() if score > 5)\nanswer = people_scored_more_than_5\nprint(answer)", "scores_frequency = {\n    4: 3,\n    5: 1,\n    6: 10,\n    7: 0,\n    8: 8,\n    9: 2,\n    10: 7\n}\n\npeople_scored_more_than_5 = sum(frequency for score, frequency in scores_frequency.items() if score > 5)\nanswer = int(people_scored_more_than_5)  # Ensure the result is an integer\nprint(answer)", "scores_frequency = {\n    4: 3,\n    5: 1,\n    6: 10,\n    7: 0,\n    8: 8,\n    9: 2,\n    10: 7\n}\n\n# Calculate the total number of people who scored more than 5\npeople_scored_more_than_5 = sum(frequency for score, frequency in scores_frequency.items() if score > 5)\nanswer = people_scored_more_than_5  # No need for int() conversion as the result is already an integer\nprint(answer)", "scores_frequency = {\n    4: 3,\n    5: 1,\n    6: 10,\n    7: 0,\n    8: 8,\n    9: 2,\n    10: 7\n}\n\n# Calculate the number of people who scored more than 5\npeople_scored_more_than_5 = sum(frequency for score, frequency in scores_frequency.items() if score > 5)\nanswer = int(people_scored_more_than_5)  # Ensure the result is an integer\nprint(answer)"
], "prediction": [27.0, 27.0, 27.0, 27.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Yellowtail | Salmon\nNot spicy | 5 | 3\nA little spicy | 6 | 5", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Yellowtail | Salmon\nNot spicy | 5 | 3\nA little spicy | 6 | 5\n\nA customer at a sushi restaurant was examining the types of sushi rolls offered on the menu. Rolls vary by type of fish and level of spiciness. Rolls only contain one type of fish. What is the probability that a randomly selected sushi roll is labeled a little spicy and contains salmon? Simplify any fractions.", "answer": "5/19", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Count of sushi rolls\nnot_spicy_yellowtail = 5\nnot_spicy_salmon = 3\na_little_spicy_yellowtail = 6\na_little_spicy_salmon = 5\n\n# Total number of sushi rolls\ntotal_rolls = (not_spicy_yellowtail + not_spicy_salmon + \n                a_little_spicy_yellowtail + a_little_spicy_salmon)\n\n# Probability of selecting a roll that is a little spicy and contains salmon\nprobability = a_little_spicy_salmon / total_rolls\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(a_little_spicy_salmon, total_rolls).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Define the number of sushi rolls based on spiciness and fish type\nnot_spicy_yellowtail = 5\nnot_spicy_salmon = 3\na_little_spicy_yellowtail = 6\na_little_spicy_salmon = 5\n\n# Calculate the total number of rolls\ntotal_rolls = (not_spicy_yellowtail + not_spicy_salmon + \n                a_little_spicy_yellowtail + a_little_spicy_salmon)\n\n# Calculate the probability of selecting a little spicy salmon roll\nprobability = a_little_spicy_salmon / total_rolls\n\n# Simplify the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(a_little_spicy_salmon, total_rolls).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = simplified_probability\nprint(answer)", "# Define the number of sushi rolls for each category\nnot_spicy_yellowtail = 5\nnot_spicy_salmon = 3\na_little_spicy_yellowtail = 6\na_little_spicy_salmon = 5\n\n# Calculate total rolls\ntotal_rolls = (not_spicy_yellowtail + not_spicy_salmon + \n                a_little_spicy_yellowtail + a_little_spicy_salmon)\n\n# Calculate the probability of selecting a little spicy salmon roll\nprobability = a_little_spicy_salmon / total_rolls\n\n# Simplify the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(a_little_spicy_salmon, total_rolls).limit_denominator()\n\n# Store the result in the answer variable\nanswer = f\"{simplified_probability.numerator}/{simplified_probability.denominator}\"\n\nprint(answer)", "# Define the number of sushi rolls based on spiciness and type of fish\nnot_spicy_yellowtail = 5\nnot_spicy_salmon = 3\na_little_spicy_yellowtail = 6\na_little_spicy_salmon = 5\n\n# Calculate the total number of rolls\ntotal_rolls = (not_spicy_yellowtail + not_spicy_salmon + \n                a_little_spicy_yellowtail + a_little_spicy_salmon)\n\n# Calculate the probability of selecting a roll that is a little spicy and contains salmon\nprobability = a_little_spicy_salmon / total_rolls\n\n# Simplify the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(a_little_spicy_salmon, total_rolls).limit_denominator()\n\n# Store the result in 'answer'\nanswer = f\"{simplified_probability.numerator}/{simplified_probability.denominator}\"\nprint(answer)"
], "prediction": [0.26316, 0.26316, "5/19", "5/19"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n11 | 16\n12 | 9\n13 | 1", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n11 | 16\n12 | 9\n13 | 1\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "nonlinear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for equal differences in x-values.\nx_values = [11, 12, 13]\ny_values = [16, 9, 1]\n\n# Calculate the differences\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n# Check if the differences are constant\nis_linear = all(difference == differences[0] for difference in differences)\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "x_values = [11, 12, 13]\ny_values = [16, 9, 1]\n\n# Calculate the differences in y values\ndifferences = [y_values[i + 1] - y_values[i] for i in range(len(y_values) - 1)]\n\n# Check if all differences are the same to determine if the function is linear\nis_linear = all(difference == differences[0] for difference in differences)\n\n# Assign the answer based on whether the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\n\nprint(answer)", "x_values = [11, 12, 13]\ny_values = [16, 9, 1]\n\n# Calculate the differences in y values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if all differences are the same\nis_linear = all(difference == differences[0] for difference in differences)\n\n# Assign the result based on the linearity check\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values from the table\nx_values = [11, 12, 13]\ny_values = [16, 9, 1]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if all differences are the same to determine if the function is linear\nis_linear = all(difference == differences[0] for difference in differences)\n\n# Assign the result to the answer variable\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nyellow skirt | $10.76\npair of brown pants | $13.56\ngreen dress | $11.44\nred sweater | $26.64", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nyellow skirt | $10.76\npair of brown pants | $13.56\ngreen dress | $11.44\nred sweater | $26.64\n\nEmilia has $40.50. Does she have enough to buy a pair of brown pants and a red sweater? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["", "# Define the prices of the items\nprice_brown_pants = 13.56\nprice_red_sweater = 26.64\n\n# Calculate the total cost\ntotal_cost = price_brown_pants + price_red_sweater\n\n# Define the amount of money Emilia has\nemilia_money = 40.50\n\n# Check if Emilia has enough money\nif emilia_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the prices of the items\nprice_brown_pants = 13.56\nprice_red_sweater = 26.64\n\n# Calculate the total cost\ntotal_cost = price_brown_pants + price_red_sweater\n\n# Define Emilia's total money\nemilia_money = 40.50\n\n# Determine if Emilia has enough money\nanswer = 'yes' if emilia_money >= total_cost else 'no'\n\n# Output the answer\nprint(answer)", "# Define the prices of the items\nprice_brown_pants = 13.56\nprice_red_sweater = 26.64\n\n# Calculate the total cost of the items\ntotal_cost = price_brown_pants + price_red_sweater\n\n# Define the amount of money Emilia has\nemilia_money = 40.50\n\n# Determine if Emilia has enough money and store the result in 'answer'\nanswer = 'yes' if emilia_money >= total_cost else 'no'\n\n# Output the answer\nprint(answer)"], "prediction": [null, "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\njade bracelet | $7,637\nruby bracelet | $1,178\ndiamond ring | $4,767\ntopaz pendant | $9,454\nemerald pendant | $2,858", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\njade bracelet | $7,637\nruby bracelet | $1,178\ndiamond ring | $4,767\ntopaz pendant | $9,454\nemerald pendant | $2,858\n\nHow much more does an emerald pendant cost than a ruby bracelet?", "answer": "1,680", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nemerald_pendant_cost = 2858 \nruby_bracelet_cost = 1178 \n# Calculate the difference in cost\ndifference_in_cost = emerald_pendant_cost - ruby_bracelet_cost\nanswer = difference_in_cost\nprint(answer)", "emerald_pendant_cost = 2858 \nruby_bracelet_cost = 1178 \ndifference_in_cost = emerald_pendant_cost - ruby_bracelet_cost\nanswer = int(difference_in_cost)  # Convert to integer for cleaner output\nprint(answer)", "emerald_pendant_cost = 2858 \nruby_bracelet_cost = 1178 \ndifference_in_cost = emerald_pendant_cost - ruby_bracelet_cost\nanswer = difference_in_cost  # No need to convert to integer\nprint(answer)", "emerald_pendant_cost = 2858 \nruby_bracelet_cost = 1178 \ndifference_in_cost = emerald_pendant_cost - ruby_bracelet_cost\nanswer = int(difference_in_cost)  # Convert to integer\nprint(answer)"], "prediction": [1680.0, 1680.0, 1680.0, 1680.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nteapot | $38.09\nset of forks | $18.08\ncookbook | $13.24\nsoup pot | $50.93", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nteapot | $38.09\nset of forks | $18.08\ncookbook | $13.24\nsoup pot | $50.93\n\nValeria has $52.00. Does she have enough to buy a teapot and a cookbook? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \nteapot_price = 38.09\ncookbook_price = 13.24\ntotal_cost = teapot_price + cookbook_price\nvaleria_budget = 52.00\n\n# Determine if Valeria has enough money\nif total_cost <= valeria_budget:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "teapot_price = 38.09\ncookbook_price = 13.24\ntotal_cost = teapot_price + cookbook_price\nvaleria_budget = 52.00\n\nif total_cost <= valeria_budget:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "teapot_price = 38.09\ncookbook_price = 13.24\ntotal_cost = teapot_price + cookbook_price\nvaleria_budget = 52.00\n\nif total_cost <= valeria_budget:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)  # This line ensures that the answer is printed correctly.", "teapot_price = 38.09  \ncookbook_price = 13.24  \ntotal_cost = teapot_price + cookbook_price  \nvaleria_budget = 52.00  \n\nif total_cost <= valeria_budget:  \n    answer = 'yes'  \nelse:  \n    answer = 'no'  \n\nprint(answer)  # This line ensures that the answer is printed correctly."], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$980 | 11,000 | 7,100\n$1,130 | 9,300 | 8,600\n$1,280 | 7,600 | 10,100\n$1,430 | 5,900 | 11,600\n$1,580 | 4,200 | 13,100", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$980 | 11,000 | 7,100\n$1,130 | 9,300 | 8,600\n$1,280 | 7,600 | 10,100\n$1,430 | 5,900 | 11,600\n$1,580 | 4,200 | 13,100\n\nLook at the table. Then answer the question. At a price of $1,280, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "surplus", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": [
  "# Python code, return answer \nquantity_demanded = 7600  # At price $1,280\nquantity_supplied = 10100  # At price $1,280\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the quantity demanded and supplied at the price of $1,280\nquantity_demanded = 7600  # At price $1,280\nquantity_supplied = 10100  # At price $1,280\n\n# Determine if there is a shortage, surplus, or equilibrium\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelse:\n    answer = 'equilibrium'\n\nprint(answer)", "# Define the quantity demanded and supplied at the price of $1,280\nquantity_demanded = 7600  # At price $1,280\nquantity_supplied = 10100  # At price $1,280\n\n# Determine if there is a shortage, surplus, or equilibrium\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelse:\n    answer = 'equilibrium'\n\nprint(answer)", "# Define the quantities at the price of $1,280\nquantity_demanded = 7600  # At price $1,280\nquantity_supplied = 10100  # At price $1,280\n\n# Determine if there is a shortage or a surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelse:\n    answer = 'equilibrium'\n\nprint(answer)"
], "prediction": ["surplus", "surplus", "surplus", "surplus"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Loaves of leftover bread\" and then answer a question.\n\nDay | Leftover loaves\nTuesday | 16\nWednesday | 8\nThursday | 38\nFriday | 6\nSaturday | 3", "question": "Read the following table regarding \"Loaves of leftover bread\" and then write Python code to answer a question.\n\nDay | Leftover loaves\nTuesday | 16\nWednesday | 8\nThursday | 38\nFriday | 6\nSaturday | 3\n\nA vendor who sold bread at farmers' markets counted the number of leftover loaves at the end of each day. According to the table, what was the rate of change between Thursday and Friday?", "answer": "-32", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nleftover_loaves_thursday = 38\nleftover_loaves_friday = 6\n# Calculate the rate of change\nrate_of_change = leftover_loaves_friday - leftover_loaves_thursday\nanswer = rate_of_change\nprint(answer)", "leftover_loaves_thursday = 38\nleftover_loaves_friday = 6\nrate_of_change = (leftover_loaves_friday - leftover_loaves_thursday) / leftover_loaves_thursday\nanswer = rate_of_change\nprint(answer)", "# Define the leftover loaves for Thursday and Friday\nleftover_loaves_thursday = 38\nleftover_loaves_friday = 6\n\n# Calculate the rate of change\nrate_of_change = (leftover_loaves_friday - leftover_loaves_thursday) / leftover_loaves_thursday * 100\n\n# Store the result in the answer variable, formatted to 2 decimal places\nanswer = round(rate_of_change, 2)\nprint(answer)", "# Define the number of leftover loaves for Thursday and Friday\nleftover_loaves_thursday = 38\nleftover_loaves_friday = 6\n\n# Calculate the rate of change from Thursday to Friday\nrate_of_change = (leftover_loaves_friday - leftover_loaves_thursday) / leftover_loaves_thursday * 100\n\n# Store the answer in a variable and round it\nanswer = round(rate_of_change, 2)\n\n# Print the answer with a message for clarity\nprint(f\"The rate of change in leftover loaves from Thursday to Friday is {answer}%\")"], "prediction": [-32.0, -0.84211, -84.21, -84.21], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Hours spent volunteering\" and then answer a question.\n\nDay | Hours\nSaturday | 10\nSunday | 3\nMonday | 5\nTuesday | 4\nWednesday | 10\nThursday | 5\nFriday | 5", "question": "Read the following table regarding \"Hours spent volunteering\" and then write Python code to answer a question.\n\nDay | Hours\nSaturday | 10\nSunday | 3\nMonday | 5\nTuesday | 4\nWednesday | 10\nThursday | 5\nFriday | 5\n\nTo get credit for meeting his school's community service requirement, Kendrick kept a volunteering log. What is the mean of the numbers?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Hours spent volunteering each day\nvolunteering_hours = [10, 3, 5, 4, 10, 5, 5]\n# Calculate the mean\nmean_hours = sum(volunteering_hours) / len(volunteering_hours)\nanswer = mean_hours\nprint(answer)", "volunteering_hours = [10, 3, 5, 4, 10, 5, 5]\nmean_hours = sum(volunteering_hours) / len(volunteering_hours)\nanswer = round(mean_hours, 2)  # Round to 2 decimal places for clarity\nprint(answer)", "volunteering_hours = [10, 3, 5, 4, 10, 5, 5]\nmean_hours = sum(volunteering_hours) / len(volunteering_hours)\nanswer = \"{:.2f}\".format(mean_hours)  # Format to 2 decimal places for clarity\nprint(answer)", "volunteering_hours = [10, 3, 5, 4, 10, 5, 5]\nmean_hours = sum(volunteering_hours) / len(volunteering_hours)\nanswer = mean_hours  # Keep the answer as a float\nprint(answer)"], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Trees in city parks\" and then answer a question.\n\nPark | Cherry trees | Oak trees\nRoss Park | 10 | 1\nWalt Park | 20 | 7\nGoose Park | 6 | 7\nGlen Park | 14 | 2", "question": "Read the following table regarding \"Trees in city parks\" and then write Python code to answer a question.\n\nPark | Cherry trees | Oak trees\nRoss Park | 10 | 1\nWalt Park | 20 | 7\nGoose Park | 6 | 7\nGlen Park | 14 | 2\n\nJohnny, a park ranger, recorded the number of each type of tree in the Boone County Park District. How many more trees are there in Walt Park than Glen Park?", "answer": "11", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Trees in each park\nwalt_park_cherry = 20\nwalt_park_oak = 7\nglen_park_cherry = 14\nglen_park_oak = 2\n\n# Total trees in each park\ntotal_walt_park = walt_park_cherry + walt_park_oak\ntotal_glen_park = glen_park_cherry + glen_park_oak\n\n# Calculate the difference in the number of trees\ndifference = total_walt_park - total_glen_park\nanswer = difference\nprint(answer)", "walt_park_cherry = 20\nwalt_park_oak = 7\nglen_park_cherry = 14\nglen_park_oak = 2\n\ntotal_walt_park = walt_park_cherry + walt_park_oak\ntotal_glen_park = glen_park_cherry + glen_park_oak\ndifference = total_walt_park - total_glen_park\nanswer = int(difference)  # Convert the result to an integer\nprint(answer)", "# Define the number of cherry and oak trees in each park\nwalt_park_cherry = 20\nwalt_park_oak = 7\nglen_park_cherry = 14\nglen_park_oak = 2\n\n# Calculate the total number of trees in each park\ntotal_walt_park = walt_park_cherry + walt_park_oak\ntotal_glen_park = glen_park_cherry + glen_park_oak\n\n# Calculate the difference in the number of trees between Walt Park and Glen Park\ndifference = total_walt_park - total_glen_park\n\n# Store the result in the variable 'answer'\nanswer = difference  # No need to convert to int as the result is already an integer\n\nprint(answer)", "walt_park_cherry = 20\nwalt_park_oak = 7\nglen_park_cherry = 14\nglen_park_oak = 2\n\ntotal_walt_park = walt_park_cherry + walt_park_oak\ntotal_glen_park = glen_park_cherry + glen_park_oak\n\ndifference = total_walt_park - total_glen_park\nanswer = int(difference)  # Convert to int to ensure the result is a whole number\nprint(answer)"
], "prediction": [11.0, 11.0, 11.0, 11.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nelastic band | $0.08\nbrass clip | $0.09\nfour-inch nail | $0.05\nred thumbtack | $0.09\nsmall metal hook | $0.02\ngold tack | $0.01", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nelastic band | $0.08\nbrass clip | $0.09\nfour-inch nail | $0.05\nred thumbtack | $0.09\nsmall metal hook | $0.02\ngold tack | $0.01\n\nHow much money does Jacob need to buy a gold tack and a red thumbtack?", "answer": "0.10", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nprice_gold_tack = 0.01\nprice_red_thumbtack = 0.09\n# Total cost for buying both items\ntotal_cost = price_gold_tack + price_red_thumbtack\nanswer = total_cost\nprint(answer)", "price_gold_tack = 0.01\nprice_red_thumbtack = 0.09\ntotal_cost = price_gold_tack + price_red_thumbtack\nanswer = f\"${total_cost:.2f}\"  # Format the output to represent currency\nprint(answer)", "# Define the prices of the items\nprice_gold_tack = 0.01\nprice_red_thumbtack = 0.09\n\n# Calculate the total cost\ntotal_cost = price_gold_tack + price_red_thumbtack\n\n# Store the total cost in the variable 'answer' as a numeric value\nanswer = total_cost\n\n# Print the answer formatted as currency for display purposes\nprint(f\"${answer:.2f}\")", "price_gold_tack = 0.01\nprice_red_thumbtack = 0.09\ntotal_cost = price_gold_tack + price_red_thumbtack\nanswer = total_cost\nprint(f\"${answer:.2f}\")"], "prediction": [0.1, "$0.10", 0.1, 0.1], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nred thumbtack | $0.15\nelastic band | $0.64\ngold tack | $0.19\npiece of plastic pipe | $0.53\nflat-head bolt | $0.44", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nred thumbtack | $0.15\nelastic band | $0.64\ngold tack | $0.19\npiece of plastic pipe | $0.53\nflat-head bolt | $0.44\n\nHow much money does Maggie need to buy 9 red thumbtacks?", "answer": "1.35", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_thumbtack = 0.15 \nquantity_needed = 9 \ntotal_cost = price_per_thumbtack * quantity_needed\nanswer = total_cost\nprint(answer)", "# Define the price per thumbtack and the quantity needed\nprice_per_thumbtack = 0.15 \nquantity_needed = 9 \n\n# Calculate the total cost\ntotal_cost = price_per_thumbtack * quantity_needed\n\n# Store the result in the answer variable\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the price per red thumbtack and the quantity needed\nprice_per_thumbtack = 0.15  \nquantity_needed = 9  \n\n# Calculate the total cost\ntotal_cost = price_per_thumbtack * quantity_needed  \n\n# Store the result in the variable 'answer'\nanswer = total_cost  \n\n# Output the answer\nprint(answer)", "# Define the price per red thumbtack and quantity needed\nprice_per_thumbtack = 0.15  \nquantity_needed = 9  \n\n# Calculate the total cost\ntotal_cost = price_per_thumbtack * quantity_needed  \n\n# Store the result in the variable 'answer'\nanswer = total_cost  \n\n# Output the answer\nprint(answer)"], "prediction": [1.35, 1.35, 1.35, 1.35], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nmop | $3\nwrench | $5\nbroom | $8\nwatering can | $5\nbucket | $3", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nmop | $3\nwrench | $5\nbroom | $8\nwatering can | $5\nbucket | $3\n\nRose has $6. Does she have enough to buy a wrench and a bucket? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \nprice_wrench = 5 \nprice_bucket = 3 \ntotal_cost = price_wrench + price_bucket \nrose_money = 6 \n\n# Check if Rose has enough money\nif rose_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "# Prices of the items\nprice_wrench = 5 \nprice_bucket = 3 \n\n# Total cost of the items\ntotal_cost = price_wrench + price_bucket \n\n# Money Rose has\nrose_money = 6 \n\n# Check if Rose has enough money\nanswer = 'yes' if rose_money >= total_cost else 'no'\n\nprint(answer)", "price_wrench = 5 \nprice_bucket = 3 \ntotal_cost = price_wrench + price_bucket \nrose_money = 6 \nanswer = 'yes' if rose_money >= total_cost else 'no'\nprint(answer)", "# Prices of the items\nprice_wrench = 5\nprice_bucket = 3\n\n# Calculate the total cost\ntotal_cost = price_wrench + price_bucket\n\n# Amount of money Rose has\nrose_money = 6\n\n# Determine if Rose has enough money\nanswer = 'yes' if rose_money >= total_cost else 'no'\nprint(answer)"], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Average waiting time at a doctor's office\" and then answer a question.\n\nMonth | Waiting time (minutes)\nMarch | 25\nApril | 24\nMay | 28\nJune | 22\nJuly | 30", "question": "Read the following table regarding \"Average waiting time at a doctor's office\" and then write Python code to answer a question.\n\nMonth | Waiting time (minutes)\nMarch | 25\nApril | 24\nMay | 28\nJune | 22\nJuly | 30\n\nJim, a doctor's office receptionist, tracked the average waiting time at the office each month. According to the table, what was the rate of change between June and July?", "answer": "8", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Waiting times for June and July\nwaiting_time_june = 22\nwaiting_time_july = 30\n\n# Calculate the rate of change\nrate_of_change = waiting_time_july - waiting_time_june\nanswer = rate_of_change\nprint(answer)", "waiting_time_june = 22\nwaiting_time_july = 30\nrate_of_change = waiting_time_july - waiting_time_june\nanswer = f\"The rate of change in waiting time from June to July is {rate_of_change} minutes.\"\nprint(answer)", "# Define waiting times for June and July\nwaiting_time_june = 22\nwaiting_time_july = 30\n\n# Calculate the rate of change\nrate_of_change = waiting_time_july - waiting_time_june\n\n# Store the result in the answer variable\nanswer = rate_of_change\nprint(answer)", "waiting_time_june = 22\nwaiting_time_july = 30\nrate_of_change = waiting_time_july - waiting_time_june\npercentage_change = (rate_of_change / waiting_time_june) * 100  # Calculate percentage change\nanswer = rate_of_change  # You can also store percentage_change if needed\nprint(answer)"], "prediction": [8.0, "The rate of change in waiting time from June to July is 8 minutes.", 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Planet Volume (km3) Primary composition\" and then answer a question.\n\nMercury | 6.08 x | 1010 rock\nVenus | 9.28 x | 1011 rock\nEarth | 1.08 x | 1012 rock\nMars | 1.63 x | 1011 rock\nJupiter | 1.43 x | 1015 gas\nSaturn | 8.27 x | 1014 gas\nUranus | 6.83 x | 1013 ice\nNeptune | 6.25 x | 1013 ice", "question": "Read the following table regarding \"Planet Volume (km3) Primary composition\" and then write Python code to answer a question.\n\nMercury | 6.08 x | 1010 rock\nVenus | 9.28 x | 1011 rock\nEarth | 1.08 x | 1012 rock\nMars | 1.63 x | 1011 rock\nJupiter | 1.43 x | 1015 gas\nSaturn | 8.27 x | 1014 gas\nUranus | 6.83 x | 1013 ice\nNeptune | 6.25 x | 1013 ice\n\nUse the data to answer the question below. Is the following statement about our solar system true or false? Earth is the largest planet that is made mainly of rock. Choose from the the options: ['true', 'false']", "answer": "true", "ques_type": "multi_choice", "choices": ["true", "false"], "code": [
  "# Python code, return answer \n# Comparing the volumes of rocky planets\nearth_volume = 1.08 * 10**12\n# Volumes of other rocky planets\nmercury_volume = 6.08 * 10**10\nvenus_volume = 9.28 * 10**11\nmars_volume = 1.63 * 10**11\n\n# Determine if Earth is the largest rocky planet\nis_largest_rocky_planet = earth_volume > mercury_volume and earth_volume > venus_volume and earth_volume > mars_volume\nanswer = 'true' if is_largest_rocky_planet else 'false'\nprint(answer)", "# Define the volumes of the rocky planets\nearth_volume = 1.08 * 10**12  # Earth\nmercury_volume = 6.08 * 10**10  # Mercury\nvenus_volume = 9.28 * 10**11  # Venus\nmars_volume = 1.63 * 10**11  # Mars\n\n# Determine if Earth is the largest rocky planet\nlargest_rocky_planet_volume = max(mercury_volume, venus_volume, mars_volume)\nis_largest_rocky_planet = earth_volume > largest_rocky_planet_volume\n\n# Set the answer based on the comparison\nanswer = 'true' if is_largest_rocky_planet else 'false'\nprint(answer)", "# Define the volumes of the planets made mainly of rock\nearth_volume = 1.08 * 10**12  # Earth\nmercury_volume = 6.08 * 10**10  # Mercury\nvenus_volume = 9.28 * 10**11  # Venus\nmars_volume = 1.63 * 10**11  # Mars\n\n# Find the largest rocky planet volume\nlargest_rocky_planet_volume = max(mercury_volume, venus_volume, mars_volume)\n\n# Check if Earth is the largest rocky planet\nis_largest_rocky_planet = earth_volume > largest_rocky_planet_volume\n\n# Store the result as 'true' or 'false'\nanswer = 'true' if is_largest_rocky_planet else 'false'\nprint(answer)", "# Define the volumes of the rocky planets\nearth_volume = 1.08 * 10**12  # Earth\nmercury_volume = 6.08 * 10**10  # Mercury\nvenus_volume = 9.28 * 10**11  # Venus\nmars_volume = 1.63 * 10**11  # Mars\n\n# Determine the largest rocky planet volume\nlargest_rocky_planet_volume = max(earth_volume, mercury_volume, venus_volume, mars_volume)\n\n# Check if Earth is the largest rocky planet\nis_largest_rocky_planet = earth_volume == largest_rocky_planet_volume\nanswer = 'true' if is_largest_rocky_planet else 'false'\nprint(answer)"
], "prediction": ["true", "true", "true", "true"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbook about South America | $3.43\nbook about the Olympics | $2.92\nbook about soccer | $6.06\nbook about Antarctica | $7.88\nbook about trains | $4.54\nbook about hiking | $1.84", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbook about South America | $3.43\nbook about the Olympics | $2.92\nbook about soccer | $6.06\nbook about Antarctica | $7.88\nbook about trains | $4.54\nbook about hiking | $1.84\n\nHow much more does a book about South America cost than a book about hiking?", "answer": "1.59", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_south_america = 3.43\ncost_hiking = 1.84\n# Calculate the difference in cost\ndifference_cost = cost_south_america - cost_hiking\nanswer = difference_cost\nprint(answer)", "cost_south_america = 3.43\ncost_hiking = 1.84\ndifference_cost = cost_south_america - cost_hiking\nanswer = format(difference_cost, '.2f')  # Format the output to two decimal places\nprint(answer)", "cost_south_america = 3.43\ncost_hiking = 1.84\ndifference_cost = cost_south_america - cost_hiking\nanswer = round(difference_cost, 2)  # Round the output to two decimal places\nprint(answer)", "cost_south_america = 3.43\ncost_hiking = 1.84\ndifference_cost = cost_south_america - cost_hiking\nanswer = round(difference_cost, 2)  # Round the output to two decimal places\nprint(answer)"], "prediction": [1.59, 1.59, 1.59, 1.59], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Technical assistance wait times (minutes)\" and then answer a question.\n\nStem | Leaf \n2 | 4, 4, 8, 9, 9\n3 | 0, 1, 2, 3, 3, 3, 4, 6, 6, 6\n4 | 0, 4, 5, 6, 9\n5 | 0, 1, 3, 4, 8", "question": "Read the following table regarding \"Technical assistance wait times (minutes)\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 4, 4, 8, 9, 9\n3 | 0, 1, 2, 3, 3, 3, 4, 6, 6, 6\n4 | 0, 4, 5, 6, 9\n5 | 0, 1, 3, 4, 8\n\nA Technical Assistance Manager monitored his customers' wait times. How many people waited for at least 45 minutes but less than 50 minutes?", "answer": "3", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Extracting wait times from the stem-and-leaf display\nwait_times = [\n    24, 24, 28, 29, 29,  # Stem 2\n    30, 31, 32, 33, 33, 33, 34, 36, 36, 36,  # Stem 3\n    40, 44, 45, 46, 49,  # Stem 4\n    50, 51, 53, 54, 58   # Stem 5\n]\n\n# Counting wait times that are at least 45 minutes but less than 50 minutes\ncount_at_least_45_less_than_50 = sum(1 for time in wait_times if 45 <= time < 50)\nanswer = count_at_least_45_less_than_50\nprint(answer)", "wait_times = [\n    24, 24, 28, 29, 29,  # Stem 2\n    30, 31, 32, 33, 33, 33, 34, 36, 36, 36,  # Stem 3\n    40, 44, 45, 46, 49,  # Stem 4\n    50, 51, 53, 54, 58   # Stem 5\n]\ncount_at_least_45_less_than_50 = sum(1 for time in wait_times if 45 <= time < 50)\nanswer = count_at_least_45_less_than_50  # This will be an integer\nprint(answer)", "wait_times = [\n    24, 24, 28, 29, 29,  # Stem 2\n    30, 31, 32, 33, 33, 33, 34, 36, 36, 36,  # Stem 3\n    40, 44, 45, 46, 49,  # Stem 4\n    50, 51, 53, 54, 58   # Stem 5\n]\n\n# Count the number of people who waited at least 45 minutes but less than 50 minutes\ncount_at_least_45_less_than_50 = sum(1 for time in wait_times if 45 <= time < 50)\n\n# Store the result as an integer\nanswer = int(count_at_least_45_less_than_50)  # This will ensure the output is an integer\nprint(answer)", "wait_times = [\n    24, 24, 28, 29, 29,  # Stem 2\n    30, 31, 32, 33, 33, 33, 34, 36, 36, 36,  # Stem 3\n    40, 44, 45, 46, 49,  # Stem 4\n    50, 51, 53, 54, 58   # Stem 5\n]\n\ncount_at_least_45_less_than_50 = sum(1 for time in wait_times if 45 <= time < 50)\nanswer = count_at_least_45_less_than_50  # Directly assign the integer count\nprint(answer)"
], "prediction": [3.0, 3.0, 3.0, 3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Road bike tires | Mountain bike tires\nRed | 4 | 7\nGreen | 5 | 3", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Road bike tires | Mountain bike tires\nRed | 4 | 7\nGreen | 5 | 3\n\nMartina is shopping for a new bicycle. She is most interested in color and type of tires. What is the probability that a randomly selected bike is red and has mountain bike tires? Simplify any fractions.", "answer": "7/19", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total bikes\ntotal_bikes = 4 + 7 + 5 + 3\n\n# Bikes that are red and have mountain bike tires\nred_mountain_bikes = 7\n\n# Calculate the probability\nprobability_red_mountain = red_mountain_bikes / total_bikes\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(red_mountain_bikes, total_bikes).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Define the number of tires for each color and type\nred_road_bikes = 4\nred_mountain_bikes = 0  # There are no red mountain bike tires listed\ngreen_road_bikes = 5\ngreen_mountain_bikes = 3\n\n# Calculate the total number of bikes\ntotal_bikes = red_road_bikes + red_mountain_bikes + green_road_bikes + green_mountain_bikes\n\n# Calculate the number of red mountain bikes (which is 0)\nred_mountain_bikes = 0\n\n# Calculate the probability of selecting a red bike with mountain bike tires\nprobability_red_mountain = red_mountain_bikes / total_bikes\n\n# Simplify the probability using fractions\nfrom fractions import Fraction\nsimplified_probability = Fraction(red_mountain_bikes, total_bikes).limit_denominator()\n\nanswer = simplified_probability\nprint(answer)", "# Define the number of tires for each type and color  \nred_road_bikes = 4  \nred_mountain_bikes = 0  # There are no red mountain bike tires listed  \ngreen_road_bikes = 5  \ngreen_mountain_bikes = 3  \n\n# Calculate the total number of bikes  \ntotal_bikes = red_road_bikes + red_mountain_bikes + green_road_bikes + green_mountain_bikes  \n\n# Calculate the probability of selecting a red bike with mountain bike tires  \nred_mountain_bikes = 0  \nprobability_red_mountain = red_mountain_bikes / total_bikes  \n\n# Since the probability is zero, we can directly assign it to answer  \nanswer = 0  # This could also be represented as Fraction(0, 1) if needed for format  \nprint(answer)", "# Define the number of bikes based on the given data\nred_road_bikes = 4  \nred_mountain_bikes = 0  # There are no red mountain bike tires listed  \ngreen_road_bikes = 5  \ngreen_mountain_bikes = 3  \n\n# Calculate the total number of bikes\ntotal_bikes = red_road_bikes + red_mountain_bikes + green_road_bikes + green_mountain_bikes  \n\n# Calculate the probability of selecting a red bike with mountain bike tires\nprobability_red_mountain = red_mountain_bikes / total_bikes  \n\n# Assign the result to the answer variable\nanswer = probability_red_mountain  \nprint(answer)"
], "prediction": [0.36842, 0.0, 0.0, 0.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npoetry book | $24.00\ncrossword puzzle book | $23.00\nspelling workbook | $20.00\npicture book | $22.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npoetry book | $24.00\ncrossword puzzle book | $23.00\nspelling workbook | $20.00\npicture book | $22.00\n\nHow much more does a crossword puzzle book cost than a spelling workbook?", "answer": "3", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_crossword = 23.00 \ncost_spelling_workbook = 20.00 \n# Calculate the difference in cost\ndifference = cost_crossword - cost_spelling_workbook\nanswer = difference\nprint(answer)", "# Define the costs of the books\ncost_crossword = 23.00 \ncost_spelling_workbook = 20.00 \n\n# Calculate the difference in cost\ndifference = cost_crossword - cost_spelling_workbook\n\n# Store the result in the variable 'answer'\nanswer = difference\n\n# Print the answer\nprint(answer)", "cost_crossword = 23.00 \ncost_spelling_workbook = 20.00 \nanswer = cost_crossword - cost_spelling_workbook\nprint(answer)", "cost_crossword = 23.00 \ncost_spelling_workbook = 20.00 \nanswer = float(cost_crossword - cost_spelling_workbook)\nprint(answer)"], "prediction": [3.0, 3.0, 3.0, 3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Grocery stores in each town\" and then answer a question.\n\nTown | Number of stores\nRichmond | 2\nWatertown | 5\nAshland | 3\nChesterton | 4\nSpringfield | 4\nGreenwood | 5\nMayfield | 3", "question": "Read the following table regarding \"Grocery stores in each town\" and then write Python code to answer a question.\n\nTown | Number of stores\nRichmond | 2\nWatertown | 5\nAshland | 3\nChesterton | 4\nSpringfield | 4\nGreenwood | 5\nMayfield | 3\n\nA newspaper researched how many grocery stores there are in each town. What is the median of the numbers?", "answer": "4", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of grocery stores in each town\nstores = [2, 5, 3, 4, 4, 5, 3]\n\n# Sort the list to find the median\nstores.sort()\n\n# Calculate the median\nn = len(stores)\nif n % 2 == 1:\n    median = stores[n // 2]\nelse:\n    median = (stores[n // 2 - 1] + stores[n // 2]) / 2\n\nanswer = median\nprint(answer)", "# List of the number of grocery stores in each town\nstores = [2, 5, 3, 4, 4, 5, 3]\n\n# Sort the list to find the median\nstores.sort()\nn = len(stores)\n\n# Calculate the median\nif n % 2 == 1:\n    median_value = stores[n // 2]\nelse:\n    median_value = (stores[n // 2 - 1] + stores[n // 2]) / 2\n\n# Store the result in a variable named 'answer'\nanswer = median_value\n\n# Print the answer\nprint(answer)", "stores = [2, 5, 3, 4, 4, 5, 3]  \nstores.sort()  \nn = len(stores)  \nif n % 2 == 1:  \n    answer = stores[n // 2]  \nelse:  \n    answer = (stores[n // 2 - 1] + stores[n // 2]) / 2  \n\nprint(answer)", "stores = [2, 5, 3, 4, 4, 5, 3]  \nstores.sort()  \nn = len(stores)  \nif n % 2 == 1:  \n    answer = stores[n // 2]  \nelse:  \n    answer = (stores[n // 2 - 1] + stores[n // 2]) / 2  \n\n# Convert answer to integer if it is a whole number\nif answer.is_integer():\n    answer = int(answer)\n\nprint(answer)"], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"People interviewed\" and then answer a question.\n\nDay | Number of people\nFriday | 5\nSaturday | 7\nSunday | 5\nMonday | 9\nTuesday | 8\nWednesday | 9\nThursday | 9", "question": "Read the following table regarding \"People interviewed\" and then write Python code to answer a question.\n\nDay | Number of people\nFriday | 5\nSaturday | 7\nSunday | 5\nMonday | 9\nTuesday | 8\nWednesday | 9\nThursday | 9\n\nA reporter looked through her notebook to remember how many people she had interviewed in the past 7 days. What is the range of the numbers?", "answer": "4", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of the number of people interviewed each day\npeople_interviewed = [5, 7, 5, 9, 8, 9, 9]\n# Calculate the range\nrange_value = max(people_interviewed) - min(people_interviewed)\nanswer = range_value\nprint(answer)", "people_interviewed = [5, 7, 5, 9, 8, 9, 9]\nrange_value = max(people_interviewed) - min(people_interviewed)\nanswer = int(range_value)  # Convert to integer\nprint(answer)", "# List of the number of people interviewed each day\npeople_interviewed = [5, 7, 5, 9, 8, 9, 9]\n\n# Calculate the range of the numbers\nrange_value = max(people_interviewed) - min(people_interviewed)\n\n# Store the result as an integer\nanswer = range_value  # No need to convert to int since it's already an integer\n\nprint(answer)", "people_interviewed = [5, 7, 5, 9, 8, 9, 9]\nrange_value = max(people_interviewed) - min(people_interviewed)\nanswer = int(range_value)  # Convert to int to remove decimal point\nprint(answer)"], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nkidney beans | $0.60/kilogram\ngarbanzo beans | $1.00/kilogram\nsoybeans | $0.65/kilogram\nmung beans | $0.51/kilogram", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nkidney beans | $0.60/kilogram\ngarbanzo beans | $1.00/kilogram\nsoybeans | $0.65/kilogram\nmung beans | $0.51/kilogram\n\nAudrey purchased 2 kilograms of garbanzo beans. What was the total cost?", "answer": "2", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_kilogram_garbanzo = 1.00 \nkilograms_bought = 2 \n# Calculate the total cost\ntotal_cost = price_per_kilogram_garbanzo * kilograms_bought\nanswer = total_cost\nprint(answer)", "price_per_kilogram_garbanzo = 1.00  \nkilograms_bought = 2  \ntotal_cost = price_per_kilogram_garbanzo * kilograms_bought  \nanswer = \"{:.2f}\".format(total_cost)  # Format the output to two decimal places  \nprint(answer)", "price_per_kilogram_garbanzo = 1.00  \nkilograms_bought = 2  \ntotal_cost = price_per_kilogram_garbanzo * kilograms_bought  \nanswer = total_cost  # Keep the output as a float\nprint(answer)", "price_per_kilogram_garbanzo = 1.00  \nkilograms_bought = 2  \ntotal_cost = price_per_kilogram_garbanzo * kilograms_bought  \nanswer = f\"${total_cost:.2f}\"  # Format the output as currency with two decimal places\nprint(answer)"], "prediction": [2.0, 2.0, 2.0, "$2.00"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Gym schedule\" and then answer a question.\n\nActivity | Begin | End\ngymnastics | 7:50 A.M. | 8:20 A.M.\nline dancing | 8:25 A.M. | 9:30 A.M.\nyoga | 9:35 A.M. | 10:50 A.M.\nfitness class | 11:00 A.M. | 12:05 P.M.\nfloor hockey | 12:20 P.M. | 1:10 P.M.\nbadminton | 1:15 P.M. | 2:35 P.M.\nindoor soccer | 2:45 P.M. | 4:00 P.M.", "question": "Read the following table regarding \"Gym schedule\" and then write Python code to answer a question.\n\nActivity | Begin | End\ngymnastics | 7:50 A.M. | 8:20 A.M.\nline dancing | 8:25 A.M. | 9:30 A.M.\nyoga | 9:35 A.M. | 10:50 A.M.\nfitness class | 11:00 A.M. | 12:05 P.M.\nfloor hockey | 12:20 P.M. | 1:10 P.M.\nbadminton | 1:15 P.M. | 2:35 P.M.\nindoor soccer | 2:45 P.M. | 4:00 P.M.\n\nLook at the following schedule. Which activity ends at 12.05 P.M.? Choose from the the options: ['badminton', 'fitness class', 'floor hockey', 'indoor soccer']", "answer": "fitness class", "ques_type": "multi_choice", "choices": ["badminton", "fitness class", "floor hockey", "indoor soccer"], "code": [
  "# Python code, return answer \n# Activity that ends at 12:05 P.M.\nactivity_ending_at_1205 = 'fitness class'\nanswer = activity_ending_at_1205\nprint(answer)", "# Define the gym schedule as a dictionary\ngym_schedule = {\n    'gymnastics': ('7:50 A.M.', '8:20 A.M.'),\n    'line dancing': ('8:25 A.M.', '9:30 A.M.'),\n    'yoga': ('9:35 A.M.', '10:50 A.M.'),\n    'fitness class': ('11:00 A.M.', '12:05 P.M.'),\n    'floor hockey': ('12:20 P.M.', '1:10 P.M.'),\n    'badminton': ('1:15 P.M.', '2:35 P.M.'),\n    'indoor soccer': ('2:45 P.M.', '4:00 P.M.')\n}\n\n# Check which activity ends at 12:05 P.M.\nactivity_ending_at_1205 = [activity for activity, times in gym_schedule.items() if times[1] == '12:05 P.M.']\n\n# Since we are asked to choose from specific options, we can directly set the answer\noptions = ['badminton', 'fitness class', 'floor hockey', 'indoor soccer']\nanswer = activity_ending_at_1205[0] if activity_ending_at_1205 and activity_ending_at_1205[0] in options else None\n\nprint(answer)", "# Define the gym schedule as a dictionary\ngym_schedule = {\n    'gymnastics': ('7:50 A.M.', '8:20 A.M.'),\n    'line dancing': ('8:25 A.M.', '9:30 A.M.'),\n    'yoga': ('9:35 A.M.', '10:50 A.M.'),\n    'fitness class': ('11:00 A.M.', '12:05 P.M.'),\n    'floor hockey': ('12:20 P.M.', '1:10 P.M.'),\n    'badminton': ('1:15 P.M.', '2:35 P.M.'),\n    'indoor soccer': ('2:45 P.M.', '4:00 P.M.')\n}\n\n# List of options to check against\noptions = ['badminton', 'fitness class', 'floor hockey', 'indoor soccer']\n\n# Find all activities that end at 12:05 P.M. and are in the options\nactivities_ending_at_1205 = [activity for activity, times in gym_schedule.items() if times[1] == '12:05 P.M.']\n\n# Filter to get only those activities that are in the provided options\nvalid_activities = [activity for activity in activities_ending_at_1205 if activity in options]\n\n# Assign the first valid activity or None if there are none\nanswer = valid_activities[0] if valid_activities else None\n\nprint(answer)", "# Define the gym schedule as a dictionary\ngym_schedule = {\n    'gymnastics': ('7:50 A.M.', '8:20 A.M.'),\n    'line dancing': ('8:25 A.M.', '9:30 A.M.'),\n    'yoga': ('9:35 A.M.', '10:50 A.M.'),\n    'fitness class': ('11:00 A.M.', '12:05 P.M.'),\n    'floor hockey': ('12:20 P.M.', '1:10 P.M.'),\n    'badminton': ('1:15 P.M.', '2:35 P.M.'),\n    'indoor soccer': ('2:45 P.M.', '4:00 P.M.')\n}\n\n# Options to choose from\noptions = ['badminton', 'fitness class', 'floor hockey', 'indoor soccer']\n\n# Check which activity ends at 12:05 P.M. and is in the options\nanswer = next((activity for activity, times in gym_schedule.items() if times[1] == '12:05 P.M.' and activity in options), None)\n\nprint(answer)"
], "prediction": ["fitness class", "fitness class", "fitness class", null], "report": ["Done", "Done", "Done", "NameError(\"name 'options' is not defined\")"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbag of peanuts | $0.79\nice cream cone | $0.95\nbag of pretzels | $0.96\nglass of lemonade | $0.51\npickle | $0.67\ncup of coffee | $0.77", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbag of peanuts | $0.79\nice cream cone | $0.95\nbag of pretzels | $0.96\nglass of lemonade | $0.51\npickle | $0.67\ncup of coffee | $0.77\n\nDeb has $1.66. Does she have enough to buy a pickle and an ice cream cone? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \n# Prices of items\npickle_price = 0.67\nice_cream_cone_price = 0.95\n\n# Total cost of a pickle and an ice cream cone\ntotal_cost = pickle_price + ice_cream_cone_price\n\n# Amount of money Deb has\ndeb_money = 1.66\n\n# Determine if Deb has enough money\nif deb_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Prices of items\npickle_price = 0.67\nice_cream_cone_price = 0.95\n\n# Total cost of items\ntotal_cost = pickle_price + ice_cream_cone_price\n\n# Amount of money Deb has\ndeb_money = 1.66\n\n# Check if Deb has enough money\nif deb_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "pickle_price = 0.67\nice_cream_cone_price = 0.95\ntotal_cost = pickle_price + ice_cream_cone_price\ndeb_money = 1.66\n\nanswer = 'yes' if deb_money >= total_cost else 'no'\n\nprint(answer)", "pickle_price = 0.67\nice_cream_cone_price = 0.95\ntotal_cost = pickle_price + ice_cream_cone_price\ndeb_money = 1.66\n\n# Determine if Deb has enough money\nif deb_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)"], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of apartments | Number of doors\n1 | 10\n2 | 20\n3 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of apartments | Number of doors\n1 | 10\n2 | 20\n3 | ?\n\nEach apartment has 10 doors. How many doors are in 3 apartments?", "answer": "30", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Each apartment has 10 doors\ndoors_per_apartment = 10\n# Calculate the number of doors in 3 apartments\nnumber_of_apartments = 3\ntotal_doors = doors_per_apartment * number_of_apartments\nanswer = total_doors\nprint(answer)", "doors_per_apartment = 10\nnumber_of_apartments = 3\ntotal_doors = doors_per_apartment * number_of_apartments\nanswer = total_doors  # This will be an integer\nprint(answer)", "doors_per_apartment = 10\nnumber_of_apartments = 3\ntotal_doors = doors_per_apartment * number_of_apartments\nanswer = int(total_doors)  # Convert to integer to ensure the output is an integer\nprint(answer)", "doors_per_apartment = 10\nnumber_of_apartments = 3\ntotal_doors = doors_per_apartment * number_of_apartments\nanswer = total_doors  # No need to convert to integer as total_doors is already an integer\nprint(answer)"], "prediction": [30.0, 30.0, 30.0, 30.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Quiz show scores\" and then answer a question.\n\nName | Score\nColette | 81\nVijay | 89\nKeenan | 88\nStefan | 82", "question": "Read the following table regarding \"Quiz show scores\" and then write Python code to answer a question.\n\nName | Score\nColette | 81\nVijay | 89\nKeenan | 88\nStefan | 82\n\nThe players on a quiz show received the following scores. Who had the lowest score? Choose from the the options: ['Colette', 'Vijay', 'Keenan', 'Stefan']", "answer": "Colette", "ques_type": "multi_choice", "choices": ["Colette", "Vijay", "Keenan", "Stefan"], "code": ["# Python code, return answer \nscores = {\n    'Colette': 81,\n    'Vijay': 89,\n    'Keenan': 88,\n    'Stefan': 82\n}\n# Find the player with the lowest score\nlowest_score_player = min(scores, key=scores.get)\nanswer = lowest_score_player\nprint(answer)", "# Store the scores in a dictionary\nscores = {\n    'Colette': 81,\n    'Vijay': 89,\n    'Keenan': 88,\n    'Stefan': 82\n}\n\n# Find the player with the lowest score\nlowest_score_player = min(scores, key=scores.get)\n\n# Store the result in the variable 'answer'\nanswer = lowest_score_player\n\n# Output the answer\nprint(answer)", "# Store the quiz show scores in a dictionary\nscores = {\n    'Colette': 81,\n    'Vijay': 89,\n    'Keenan': 88,\n    'Stefan': 82\n}\n\n# Find the player with the lowest score\nlowest_score_player = min(scores, key=scores.get)\n\n# Store the result in the variable 'answer'\nanswer = lowest_score_player\n\n# Output the answer\nprint(answer)", "# Define the scores of the players in a dictionary\nscores = {\n    'Colette': 81,\n    'Vijay': 89,\n    'Keenan': 88,\n    'Stefan': 82\n}\n\n# Find the player with the lowest score using the min function\nlowest_score_player = min(scores, key=scores.get)\n\n# Store the result in the variable 'answer'\nanswer = lowest_score_player\n\n# Output the answer\nprint(answer)"], "prediction": ["Colette", "Colette", "Colette", "Colette"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Games won by the Westminster baseball team\" and then answer a question.\n\nYear | Games won\n2013 | 34\n2014 | 42\n2015 | 42\n2016 | 33\n2017 | 42", "question": "Read the following table regarding \"Games won by the Westminster baseball team\" and then write Python code to answer a question.\n\nYear | Games won\n2013 | 34\n2014 | 42\n2015 | 42\n2016 | 33\n2017 | 42\n\nFans of the Westminster baseball team compared the number of games won by their team each year. According to the table, what was the rate of change between 2016 and 2017?", "answer": "9", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Games won in 2016 and 2017\ngames_won_2016 = 33\ngames_won_2017 = 42\n\n# Rate of change calculation\nrate_of_change = games_won_2017 - games_won_2016\nanswer = rate_of_change\nprint(answer)", "games_won_2016 = 33\ngames_won_2017 = 42\n\n# Calculate the rate of change as a difference\nrate_of_change_difference = games_won_2017 - games_won_2016\n\n# Calculate the rate of change as a percentage\nrate_of_change_percentage = (rate_of_change_difference / games_won_2016) * 100\n\n# Store the percentage change as the answer\nanswer = rate_of_change_percentage\nprint(answer)", "games_won_2016 = 33\ngames_won_2017 = 42\nrate_of_change_difference = games_won_2017 - games_won_2016\nrate_of_change_percentage = (rate_of_change_difference / games_won_2016) * 100\nanswer = round(rate_of_change_percentage, 2)  # Round to 2 decimal places\nprint(answer)", "# Define the number of games won in 2016 and 2017\ngames_won_2016 = 33\ngames_won_2017 = 42\n\n# Calculate the rate of change as the difference in games won\nrate_of_change_difference = games_won_2017 - games_won_2016\n\n# Store the result in the answer variable\nanswer = rate_of_change_difference\n\nprint(answer)"], "prediction": [9.0, 27.27273, 27.27, 9.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Pages read\" and then answer a question.\n\nDay | Number of pages\nFriday | 118\nSaturday | 138\nSunday | 131\nMonday | 189", "question": "Read the following table regarding \"Pages read\" and then write Python code to answer a question.\n\nDay | Number of pages\nFriday | 118\nSaturday | 138\nSunday | 131\nMonday | 189\n\nMaddie wrote down how many pages she read over the past 4 days. On which day did Maddie read the fewest pages? Choose from the the options: ['Friday', 'Saturday', 'Sunday', 'Monday']", "answer": "Friday", "ques_type": "multi_choice", "choices": ["Friday", "Saturday", "Sunday", "Monday"], "code": ["# Python code, return answer \npages_read = {\n    'Friday': 118,\n    'Saturday': 138,\n    'Sunday': 131,\n    'Monday': 189\n}\n# Find the day with the fewest pages read\nfewest_pages_day = min(pages_read, key=pages_read.get)\nanswer = fewest_pages_day\nprint(answer)", "# Store the number of pages read each day in a dictionary\npages_read = {\n    'Friday': 118,\n    'Saturday': 138,\n    'Sunday': 131,\n    'Monday': 189\n}\n\n# Find the day with the fewest pages read\nfewest_pages_day = min(pages_read, key=pages_read.get)\nanswer = fewest_pages_day\n\nprint(answer)  # This will output the day with the fewest pages read", "# Define the number of pages read each day in a dictionary\npages_read = {\n    'Friday': 118,\n    'Saturday': 138,\n    'Sunday': 131,\n    'Monday': 189\n}\n\n# Find the day with the fewest pages read\nfewest_pages_day = min(pages_read, key=pages_read.get)\nanswer = fewest_pages_day\n\n# Output the answer\nprint(answer)", "# Store the number of pages read each day in a dictionary\npages_read = {\n    'Friday': 118,\n    'Saturday': 138,\n    'Sunday': 131,\n    'Monday': 189\n}\n\n# Find the day with the fewest pages read\nfewest_pages_day = min(pages_read, key=pages_read.get)\n\n# Store the result in the answer variable\nanswer = fewest_pages_day\n\n# Output the answer\nprint(answer)"], "prediction": ["Friday", "Friday", "Friday", "Friday"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npiece of rose quartz | $0.07\npiece of copper | $0.05\nquartz crystal | $0.03\npiece of black mica | $0.09\npiece of black obsidian | $0.06\npiece of green slate | $0.09", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npiece of rose quartz | $0.07\npiece of copper | $0.05\nquartz crystal | $0.03\npiece of black mica | $0.09\npiece of black obsidian | $0.06\npiece of green slate | $0.09\n\nHow much money does Nolan need to buy a piece of green slate and a piece of copper?", "answer": "0.14", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nprice_green_slate = 0.09 \nprice_copper = 0.05 \n# Total cost for Nolan\ntotal_cost = price_green_slate + price_copper\nanswer = total_cost\nprint(answer)", "# Correct prices for the items\nprice_green_slate = 0.09  # Price of a piece of green slate\nprice_copper = 0.05        # Price of a piece of copper\n\n# Calculate total cost\ntotal_cost = price_green_slate + price_copper\nanswer = total_cost\n\nprint(answer)", "# Define the prices of the items\nprice_green_slate = 0.09  # Price of a piece of green slate\nprice_copper = 0.05        # Price of a piece of copper\n\n# Calculate the total cost\ntotal_cost = price_green_slate + price_copper\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the prices of the items\nprice_green_slate = 0.09  # Price of a piece of green slate\nprice_copper = 0.05        # Price of a piece of copper\n\n# Calculate the total cost\ntotal_cost = price_green_slate + price_copper\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)"], "prediction": [0.14, 0.14, 0.14, 0.14], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Ferry fares\" and then answer a question.\n\nFerry | Bicycle | Car\nSeattle-Bremerton | $8 | $12\nSouthport-Fort Fisher | $2 | $5\nFauntleroy-Vashon | $5 | $15\nMukilteu-Clinton | $5 | $7\nOcracoke | $3 | $15", "question": "Read the following table regarding \"Ferry fares\" and then write Python code to answer a question.\n\nFerry | Bicycle | Car\nSeattle-Bremerton | $8 | $12\nSouthport-Fort Fisher | $2 | $5\nFauntleroy-Vashon | $5 | $15\nMukilteu-Clinton | $5 | $7\nOcracoke | $3 | $15\n\nFor an economics project, Kate determined the cost of ferry rides for bicycles and cars. Of the ferries shown, which charges the least for a bicycle? Choose from the the options: ['Seattle-Bremerton', 'Ocracoke', 'Southport-Fort Fisher', 'Fauntleroy-Vashon']", "answer": "Southport-Fort Fisher", "ques_type": "multi_choice", "choices": ["Seattle-Bremerton", "Ocracoke", "Southport-Fort Fisher", "Fauntleroy-Vashon"], "code": [
  "# Python code, return answer \nferry_fares = {\n    'Seattle-Bremerton': {'bicycle': 8, 'car': 12},\n    'Southport-Fort Fisher': {'bicycle': 2, 'car': 5},\n    'Fauntleroy-Vashon': {'bicycle': 5, 'car': 15},\n    'Mukilteu-Clinton': {'bicycle': 5, 'car': 7},\n    'Ocracoke': {'bicycle': 3, 'car': 15}\n}\n\n# Find the ferry that charges the least for a bicycle\nleast_bicycle_fare_ferry = min(ferry_fares, key=lambda x: ferry_fares[x]['bicycle'])\nanswer = least_bicycle_fare_ferry\nprint(answer)", "# Define the ferry fares in a dictionary\nferry_fares = {\n    'Seattle-Bremerton': {'bicycle': 8, 'car': 12},\n    'Southport-Fort Fisher': {'bicycle': 2, 'car': 5},\n    'Fauntleroy-Vashon': {'bicycle': 5, 'car': 15},\n    'Mukilteu-Clinton': {'bicycle': 5, 'car': 7},\n    'Ocracoke': {'bicycle': 3, 'car': 15}\n}\n\n# Find the ferry that charges the least for a bicycle\nleast_bicycle_fare_ferry = min(ferry_fares, key=lambda x: ferry_fares[x]['bicycle'])\nanswer = least_bicycle_fare_ferry\n\nprint(answer)", "# Define the ferry fares in a dictionary\nferry_fares = {\n    'Seattle-Bremerton': {'bicycle': 8, 'car': 12},\n    'Southport-Fort Fisher': {'bicycle': 2, 'car': 5},\n    'Fauntleroy-Vashon': {'bicycle': 5, 'car': 15},\n    'Mukilteu-Clinton': {'bicycle': 5, 'car': 7},\n    'Ocracoke': {'bicycle': 3, 'car': 15}\n}\n\n# Find the ferry that charges the least for a bicycle\nleast_bicycle_fare_ferry = min(ferry_fares, key=lambda x: ferry_fares[x]['bicycle'])\nanswer = least_bicycle_fare_ferry\n\nprint(answer)", "# Define the ferry fares in a dictionary\nferry_fares = {\n    'Seattle-Bremerton': {'bicycle': 8, 'car': 12},\n    'Southport-Fort Fisher': {'bicycle': 2, 'car': 5},\n    'Fauntleroy-Vashon': {'bicycle': 5, 'car': 15},\n    'Mukilteu-Clinton': {'bicycle': 5, 'car': 7},\n    'Ocracoke': {'bicycle': 3, 'car': 15}\n}\n\n# Find the ferry that charges the least for a bicycle\nleast_bicycle_fare_ferry = min(ferry_fares, key=lambda x: ferry_fares[x]['bicycle'])\nanswer = least_bicycle_fare_ferry\n\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'ferry_fares' is not defined\")", "NameError(\"name 'ferry_fares' is not defined\")", "NameError(\"name 'ferry_fares' is not defined\")", "NameError(\"name 'ferry_fares' is not defined\")"]
}
{
  "context": "Read the following table regarding \"Flower garden\" and then answer a question.\n\nColor | Roses | Daisies\nPink | 16 | 9\nOrange | 3 | 3\nWhite | 6 | 5\nYellow | 1 | 7", "question": "Read the following table regarding \"Flower garden\" and then write Python code to answer a question.\n\nColor | Roses | Daisies\nPink | 16 | 9\nOrange | 3 | 3\nWhite | 6 | 5\nYellow | 1 | 7\n\nGardeners at the Henderson estate counted the number of flowers growing there. How many orange flowers are in the garden?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of orange flowers\norange_roses = 3\norange_daisies = 3\n# Total orange flowers\ntotal_orange_flowers = orange_roses + orange_daisies\nanswer = total_orange_flowers\nprint(answer)", "# Define the number of orange roses and daisies\norange_roses = 3\norange_daisies = 3\n\n# Calculate the total number of orange flowers\ntotal_orange_flowers = orange_roses + orange_daisies\n\n# Store the result in the variable 'answer'\nanswer = total_orange_flowers\n\n# Output the answer\nprint(answer)", "orange_roses = 3\norange_daisies = 3\ntotal_orange_flowers = orange_roses + orange_daisies\nanswer = total_orange_flowers  # This will be an integer\nprint(answer)", "# Define the number of orange roses and daisies\norange_roses = 3\norange_daisies = 3\n\n# Calculate the total number of orange flowers\ntotal_orange_flowers = orange_roses + orange_daisies\n\n# Store the result as an integer\nanswer = int(total_orange_flowers)  # Ensuring the result is an integer\nprint(answer)  # Output the answer"], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Average waiting time at the DMV\" and then answer a question.\n\nMonth | Waiting time (minutes)\nMarch | 29\nApril | 33\nMay | 33\nJune | 36\nJuly | 29", "question": "Read the following table regarding \"Average waiting time at the DMV\" and then write Python code to answer a question.\n\nMonth | Waiting time (minutes)\nMarch | 29\nApril | 33\nMay | 33\nJune | 36\nJuly | 29\n\nAn administrator at the Department of Motor Vehicles (DMV) tracked the average wait time from month to month. According to the table, what was the rate of change between June and July?", "answer": "-7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nwaiting_time_june = 36\nwaiting_time_july = 29\n\n# Calculate the rate of change between June and July\nrate_of_change = waiting_time_july - waiting_time_june\nanswer = rate_of_change\nprint(answer)", "waiting_time_june = 36\nwaiting_time_july = 29\nrate_of_change = waiting_time_july - waiting_time_june\nanswer = f\"The rate of change in waiting time from June to July is {rate_of_change} minutes.\"\nprint(answer)", "waiting_time_june = 36\nwaiting_time_july = 29\nrate_of_change = waiting_time_july - waiting_time_june\nanswer = rate_of_change\nprint(answer)", "waiting_time_june = 36\nwaiting_time_july = 29\nchange_in_waiting_time = waiting_time_july - waiting_time_june\nrate_of_change_per_month = change_in_waiting_time  # Since it's a one-month change\nanswer = rate_of_change_per_month\nprint(answer)"], "prediction": [-7.0, "The rate of change in waiting time from June to July is -7 minutes.", -7.0, -7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of bunches | Number of balloons\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of bunches | Number of balloons\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | ?\n\nEach bunch has 5 balloons. How many balloons are in 5 bunches?", "answer": "25", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nnumber_of_bunches = 5\nballoons_per_bunch = 5\n# Calculate the total number of balloons in 5 bunches\ntotal_balloons = number_of_bunches * balloons_per_bunch\nanswer = total_balloons\nprint(answer)", "number_of_bunches = 5\nballoons_per_bunch = 5\ntotal_balloons = number_of_bunches * balloons_per_bunch\nanswer = total_balloons  # This will be an integer\nprint(answer)", "number_of_bunches = 5\nballoons_per_bunch = 5\ntotal_balloons = number_of_bunches * balloons_per_bunch\nanswer = int(total_balloons)  # Explicitly convert to integer\nprint(answer)", "number_of_bunches = 5\nballoons_per_bunch = 5\ntotal_balloons = number_of_bunches * balloons_per_bunch\nanswer = total_balloons  # No need for explicit conversion to int\nprint(answer)"], "prediction": [25.0, 25.0, 25.0, 25.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ngrilled eggplant | $10.38\neggplant parmesan | $16.73\ncheese pizza | $11.68\ngrilled steak | $15.77\nravioli | $11.09", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ngrilled eggplant | $10.38\neggplant parmesan | $16.73\ncheese pizza | $11.68\ngrilled steak | $15.77\nravioli | $11.09\n\nHow much money does Jake need to buy eggplant parmesan and a grilled steak?", "answer": "32.50", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nprice_eggplant_parmesan = 16.73\nprice_grilled_steak = 15.77\n# Total cost for Jake\ntotal_cost = price_eggplant_parmesan + price_grilled_steak\nanswer = total_cost\nprint(answer)", "from decimal import Decimal\n\n# Prices of the items\nprice_eggplant_parmesan = Decimal('16.73')\nprice_grilled_steak = Decimal('15.77')\n\n# Calculate total cost\ntotal_cost = price_eggplant_parmesan + price_grilled_steak\nanswer = total_cost\n\nprint(answer)", "from decimal import Decimal\n\n# Define the prices using the Decimal class for accurate monetary representation\nprice_eggplant_parmesan = Decimal('16.73')\nprice_grilled_steak = Decimal('15.77')\n\n# Calculate the total cost\ntotal_cost = price_eggplant_parmesan + price_grilled_steak\n\n# Format the answer to two decimal places\nanswer = f\"{total_cost:.2f}\"\nprint(answer)", "from decimal import Decimal\n\nprice_eggplant_parmesan = Decimal('16.73')\nprice_grilled_steak = Decimal('15.77')\ntotal_cost = price_eggplant_parmesan + price_grilled_steak\nanswer = f\"{total_cost:.2f}\"\nprint(answer)"], "prediction": [32.5, 32.5, 32.5, 32.5], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Passengers per train\" and then answer a question.\n\nStem | Leaf \n1 | 6, 7\n2 | 5\n3 | \n4 | 1, 4\n5 | 0, 4, 9\n6 | 4, 7, 7\n7 | 7, 8\n8 | 8, 8", "question": "Read the following table regarding \"Passengers per train\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 6, 7\n2 | 5\n3 | \n4 | 1, 4\n5 | 0, 4, 9\n6 | 4, 7, 7\n7 | 7, 8\n8 | 8, 8\n\nThe train conductor made sure to count the number of passengers on each train. How many trains had at least 50 passengers but fewer than 90 passengers?", "answer": "10", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Counting the number of trains within the specified range: at least 50 but fewer than 90\npassenger_counts = [\n    16, 17,  # Stem 1\n    25,      # Stem 2\n    # Stem 3 has no values\n    41, 44,  # Stem 4\n    50, 54, 59,  # Stem 5\n    64, 67, 67,  # Stem 6\n    77, 78,  # Stem 7\n    88, 88   # Stem 8\n]\n\n# Counting trains with passengers between 50 and 89 (inclusive of 50, exclusive of 90)\ncount_trains = sum(1 for count in passenger_counts if 50 <= count < 90)\nanswer = count_trains\nprint(answer)", "# Define the passenger counts based on the stem and leaf data structure\npassenger_counts = [\n    16, 17,  # Stem 1\n    25,      # Stem 2\n    # Stem 3 has no values\n    41, 44,  # Stem 4\n    50, 54, 59,  # Stem 5\n    64, 67, 67,  # Stem 6\n    77, 78,  # Stem 7\n    88, 88   # Stem 8\n]\n\n# Count how many trains had at least 50 passengers but fewer than 90 passengers\ncount_trains = sum(1 for count in passenger_counts if 50 <= count < 90)\n\n# Ensure the count is an integer\nanswer = int(count_trains)\nprint(answer)", "passenger_counts = [\n    16, 17,  # Stem 1\n    25,      # Stem 2\n    # Stem 3 has no values\n    41, 44,  # Stem 4\n    50, 54, 59,  # Stem 5\n    64, 67, 67,  # Stem 6\n    77, 78,  # Stem 7\n    88, 88   # Stem 8\n]\n\n# Count the number of trains with at least 50 passengers but fewer than 90 passengers\ncount_trains = sum(1 for count in passenger_counts if 50 <= count < 90)\nanswer = count_trains  # No need to convert to int, it's already an integer\nprint(answer)", "# Define the passenger counts based on the stem and leaf data\npassenger_counts = [\n    16, 17,  # Stem 1\n    25,      # Stem 2\n    # Stem 3 has no values\n    41, 44,  # Stem 4\n    50, 54, 59,  # Stem 5\n    64, 67, 67,  # Stem 6\n    77, 78,  # Stem 7\n    88, 88   # Stem 8\n]\n\n# Count the number of trains with at least 50 passengers but fewer than 90 passengers\ncount_trains = sum(1 for count in passenger_counts if 50 <= count < 90)\n\n# Store the result in the variable 'answer'\nanswer = count_trains\n\n# Output the answer\nprint(answer)"
], "prediction": [10.0, 10.0, 10.0, 10.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Bricks per building\" and then answer a question.\n\nStem | Leaf \n1 | 0, 8\n2 | \n3 | \n4 | 5\n5 | \n6 | 1, 6\n7 | \n8 | 7", "question": "Read the following table regarding \"Bricks per building\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 0, 8\n2 | \n3 | \n4 | 5\n5 | \n6 | 1, 6\n7 | \n8 | 7\n\nThe architecture student counted the number of bricks in each building in her neighborhood. How many buildings have at least 13 bricks but fewer than 72 bricks?", "answer": "4", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Representing the data from the stem-and-leaf plot\nbricks_counts = [10, 18, 45, 61, 66, 87]  # Translated from the stem-and-leaf plot\n# Count buildings with at least 13 bricks and fewer than 72 bricks\nbuildings_count = sum(1 for count in bricks_counts if 13 <= count < 72)\nanswer = buildings_count\nprint(answer)", "# Define the number of bricks in each building based on the stem-and-leaf plot\nbricks_counts = [10, 18, 45, 61, 66, 87]  # Translated from the stem-and-leaf plot\n\n# Count the number of buildings with at least 13 bricks but fewer than 72 bricks\nbuildings_count = sum(1 for count in bricks_counts if 13 <= count < 72)\n\n# Store the result as an integer\nanswer = buildings_count\n\n# Output the answer\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\n# Stem represents the tens place and leaf represents the units place\nbricks_counts = [\n    10, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n    36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n    54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\n    72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,\n    90, 91, 92, 93, 94, 95, 96, 97, 98, 99\n]  # This represents the bricks based on the stem-and-leaf plot\n\n# Count buildings with at least 13 bricks but fewer than 72 bricks\nbuildings_count = sum(1 for count in bricks_counts if 13 <= count < 72)\nanswer = buildings_count\nprint(answer)", "bricks_counts = [\n    10, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n    36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n    54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\n    72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,\n    90, 91, 92, 93, 94, 95, 96, 97, 98, 99\n]  # This represents the bricks based on the stem-and-leaf plot\n\n# Count the number of buildings with at least 13 bricks but fewer than 72 bricks\nbuildings_count = sum(1 for count in bricks_counts if 13 <= count < 72)\nanswer = int(buildings_count)  # Convert to integer to avoid float output\nprint(answer)"
], "prediction": [4.0, 4.0, 53.0, 53.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nLocation | Elevation (m)\nTop of the skyscraper | 275\nBottom of the mine | -260", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nLocation | Elevation (m)\nTop of the skyscraper | 275\nBottom of the mine | -260\n\nEve likes watching the show Engineering Marvels. In last night's episode, the engineering team visited a tall skyscraper and a deep mine. A banner at the bottom of the screen showed the elevation of each location the team visited. Which location is closer to sea level? Choose from the the options: ['top of the skyscraper', 'bottom of the mine']", "answer": "bottom of the mine", "ques_type": "multi_choice", "choices": ["top of the skyscraper", "bottom of the mine"], "code": [
  "# Python code, return answer \n# Elevation of each location\ntop_of_skyscraper_elevation = 275  # in meters\nbottom_of_mine_elevation = -260      # in meters\n\n# Determine which location is closer to sea level\nif top_of_skyscraper_elevation > abs(bottom_of_mine_elevation):\n    answer = 'top of the skyscraper'\nelse:\n    answer = 'bottom of the mine'\n\nprint(answer)", "top_of_skyscraper_elevation = 275  # in meters\nbottom_of_mine_elevation = -260      # in meters\n\n# Calculate the distance from sea level for both locations\ndistance_from_sea_level_skyscraper = abs(top_of_skyscraper_elevation)\ndistance_from_sea_level_mine = abs(bottom_of_mine_elevation)\n\n# Determine which location is closer to sea level\nif distance_from_sea_level_skyscraper < distance_from_sea_level_mine:\n    answer = 'top of the skyscraper'\nelse:\n    answer = 'bottom of the mine'\n\nprint(answer)", "top_of_skyscraper_elevation = 275  # in meters\nbottom_of_mine_elevation = -260      # in meters\n\n# Calculate distances from sea level\ndistance_from_sea_level_skyscraper = top_of_skyscraper_elevation  # Positive value\ndistance_from_sea_level_mine = abs(bottom_of_mine_elevation)       # Positive value\n\n# Determine which location is closer to sea level\nif distance_from_sea_level_skyscraper < distance_from_sea_level_mine:\n    answer = 'top of the skyscraper'\nelse:\n    answer = 'bottom of the mine'\n\nprint(answer)", "top_of_skyscraper_elevation = 275  # in meters\nbottom_of_mine_elevation = -260      # in meters\n\n# Calculate the absolute distances from sea level\ndistance_from_sea_level_skyscraper = abs(top_of_skyscraper_elevation)\ndistance_from_sea_level_mine = abs(bottom_of_mine_elevation)\n\n# Determine which location is closer to sea level\nif distance_from_sea_level_skyscraper < distance_from_sea_level_mine:\n    answer = 'top of the skyscraper'\nelse:\n    answer = 'bottom of the mine'\n\nprint(answer)"
], "prediction": ["top of the skyscraper", "bottom of the mine", "bottom of the mine", "bottom of the mine"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Sledding last winter\" and then answer a question.\n\nNumber of times | Frequency\n0 | 13\n1 | 5\n2 | 18\n3 | 4", "question": "Read the following table regarding \"Sledding last winter\" and then write Python code to answer a question.\n\nNumber of times | Frequency\n0 | 13\n1 | 5\n2 | 18\n3 | 4\n\nThe Rockport Ski Resort asked its guests how many times they went sledding last winter. How many guests went sledding fewer than 2 times?", "answer": "18", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of guests who went sledding 0 times\nfrequency_0 = 13\n# Frequency of guests who went sledding 1 time\nfrequency_1 = 5\n# Total guests who went sledding fewer than 2 times\nguests_fewer_than_2 = frequency_0 + frequency_1\nanswer = guests_fewer_than_2\nprint(answer)", "frequency_0 = 13\nfrequency_1 = 5\nguests_fewer_than_2 = frequency_0 + frequency_1\nanswer = int(guests_fewer_than_2)  # Ensure the output is an integer\nprint(answer)", "frequency_0 = 13\nfrequency_1 = 5\nguests_fewer_than_2 = frequency_0 + frequency_1\nanswer = guests_fewer_than_2  # No need to cast to int, as the result is already an integer\nprint(answer)", "# Define the frequency of guests based on the number of times they went sledding\nfrequency_0 = 13  # Guests who went sledding 0 times\nfrequency_1 = 5   # Guests who went sledding 1 time\n\n# Calculate the total number of guests who went sledding fewer than 2 times\nguests_fewer_than_2 = frequency_0 + frequency_1\n\n# Store the result in the answer variable\nanswer = guests_fewer_than_2\n\n# Print the answer\nprint(answer)"], "prediction": [18.0, 18.0, 18.0, 18.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Cherries sold\" and then answer a question.\n\nDay | Kilograms\nSunday | 8\nMonday | 10\nTuesday | 8\nWednesday | 10\nThursday | 8", "question": "Read the following table regarding \"Cherries sold\" and then write Python code to answer a question.\n\nDay | Kilograms\nSunday | 8\nMonday | 10\nTuesday | 8\nWednesday | 10\nThursday | 8\n\nA farmer wrote down how many kilograms of cherries were sold in the past 5 days. What is the mode of the numbers?", "answer": "8", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nfrom statistics import mode\n\n# List of kilograms sold over the days\ncherries_sold = [8, 10, 8, 10, 8]\n\n# Calculate the mode\nmode_cherries = mode(cherries_sold)\nanswer = mode_cherries\nprint(answer)", "from statistics import mode\n\ncherries_sold = [8, 10, 8, 10, 8]\nmode_cherries = mode(cherries_sold)\nanswer = int(mode_cherries)  # Convert to integer for proper representation\nprint(answer)", "from statistics import mode\n\ncherries_sold = [8, 10, 8, 10, 8]\nmode_cherries = mode(cherries_sold)\nanswer = mode_cherries  # Directly assign the mode without conversion\nprint(answer)", "from statistics import mode\n\ncherries_sold = [8, 10, 8, 10, 8]\nmode_cherries = mode(cherries_sold)\nanswer = int(mode_cherries)  # Convert the mode to an integer\nprint(answer)"], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nAfrican safari vacation package | $3,174\nJamaican vacation package | $4,060\nHawaiian vacation package | $2,228\nCaribbean vacation package | $6,657\nEuropean vacation package | $6,856", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nAfrican safari vacation package | $3,174\nJamaican vacation package | $4,060\nHawaiian vacation package | $2,228\nCaribbean vacation package | $6,657\nEuropean vacation package | $6,856\n\nHow much more does a Caribbean vacation package cost than a Jamaican vacation package?", "answer": "2,597", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncaribbean_vacation_cost = 6657 \njamaican_vacation_cost = 4060 \n# Calculate the difference in cost\ndifference_cost = caribbean_vacation_cost - jamaican_vacation_cost\nanswer = difference_cost\nprint(answer)", "# Define the costs of the vacation packages\ncaribbean_vacation_cost = 6657 \njamaican_vacation_cost = 4060 \n\n# Calculate the difference in cost\ndifference_cost = caribbean_vacation_cost - jamaican_vacation_cost\n\n# Store the result in the answer variable\nanswer = difference_cost\n\n# Print the answer\nprint(answer)", "caribbean_vacation_cost = 6657 \njamaican_vacation_cost = 4060 \ndifference_cost = jamaican_vacation_cost - caribbean_vacation_cost\nanswer = difference_cost\nprint(answer)", "# Define the costs of the vacation packages\ncaribbean_vacation_cost = 6657 \njamaican_vacation_cost = 4060 \n\n# Calculate the difference in cost\ndifference_cost = caribbean_vacation_cost - jamaican_vacation_cost\n\n# Store the result in the variable 'answer'\nanswer = difference_cost\n\n# Output the answer\nprint(answer)"], "prediction": [2597.0, 2597.0, -2597.0, 2597.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\noil painting | $95.07\nrug | $24.82\ncrystal vase | $91.93\nlamp | $74.21\nceramic vase | $87.53\nchandelier | $52.99", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\noil painting | $95.07\nrug | $24.82\ncrystal vase | $91.93\nlamp | $74.21\nceramic vase | $87.53\nchandelier | $52.99\n\nHow much money does Jenna need to buy a lamp and a crystal vase?", "answer": "166.14", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nlamp_price = 74.21\ncrystal_vase_price = 91.93\n# Total cost for buying both items\ntotal_cost = lamp_price + crystal_vase_price\nanswer = total_cost\nprint(answer)", "lamp_price = 74.21\ncrystal_vase_price = 91.93\ntotal_cost = lamp_price + crystal_vase_price\nanswer = total_cost\nprint(answer)  # This will output the total cost correctly", "lamp_price = 74.21\ncrystal_vase_price = 91.93\ntotal_cost = lamp_price + crystal_vase_price\nanswer = total_cost\nprint(answer)  # This will output the total cost correctly", "# Define the prices of the items in a dictionary\nprices = {\n    'lamp': 74.21,\n    'crystal vase': 91.93\n}\n\n# Calculate the total cost of buying a lamp and a crystal vase\ntotal_cost = prices['lamp'] + prices['crystal vase']\nanswer = total_cost\n\nprint(answer)  # This will output the total cost correctly"], "prediction": [166.14, 166.14, 166.14, 166.14], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Pets\" and then answer a question.\n\nName | Number of pets\nRob | 2\nZane | 5\nKiera | 1\nColette | 1\nEllie | 10\nDirk | 9\nGabe | 7", "question": "Read the following table regarding \"Pets\" and then write Python code to answer a question.\n\nName | Number of pets\nRob | 2\nZane | 5\nKiera | 1\nColette | 1\nEllie | 10\nDirk | 9\nGabe | 7\n\nSome students compared how many pets they have. What is the mean of the numbers?", "answer": "5", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of pets for each student\npets = [2, 5, 1, 1, 10, 9, 7]\n# Calculate the mean\nmean_pets = sum(pets) / len(pets)\nanswer = mean_pets\nprint(answer)", "# List of the number of pets owned by each student\npets = [2, 5, 1, 1, 10, 9, 7]\n\n# Calculate the mean number of pets\nmean_pets = sum(pets) / len(pets)\n\n# Store the result in the variable 'answer'\nanswer = mean_pets\n\n# Output the result\nprint(answer)", "# List of number of pets for each student\npets = [2, 5, 1, 1, 10, 9, 7]\n\n# Calculate the mean of the numbers\nmean_pets = sum(pets) / len(pets)\n\n# Store the result in the variable 'answer'\nanswer = mean_pets\n\n# Print the result\nprint(answer)", "# Define the number of pets each student has\npets = [2, 5, 1, 1, 10, 9, 7]\n\n# Calculate the mean number of pets\nmean_pets = sum(pets) / len(pets)\n\n# Store the result in the variable 'answer'\nanswer = mean_pets\n\n# Print the answer\nprint(answer)"], "prediction": [5.0, 5.0, 5.0, 5.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Weight of winning dog at a dog show\" and then answer a question.\n\nYear | Weight (kg)\n2013 | 31\n2014 | 37\n2015 | 36\n2016 | 37\n2017 | 18", "question": "Read the following table regarding \"Weight of winning dog at a dog show\" and then write Python code to answer a question.\n\nYear | Weight (kg)\n2013 | 31\n2014 | 37\n2015 | 36\n2016 | 37\n2017 | 18\n\nA dog show enthusiast recorded the weight of the winning dog at recent dog shows. According to the table, what was the rate of change between 2013 and 2014?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nweight_2013 = 31  # weight in kg for the year 2013\nweight_2014 = 37  # weight in kg for the year 2014\n\n# Calculate the rate of change\nrate_of_change = weight_2014 - weight_2013\nanswer = rate_of_change\nprint(answer)", "```python\nweight_2013 =", "weight_2013 = 31  # weight in kg for the year 2013\nweight_2014 = 37  # weight in kg for the year 2014\n\n# Calculate the change in weight\nchange_in_weight = weight_2014 - weight_2013\n\n# Calculate the rate of change as a percentage\nrate_of_change_percentage = (change_in_weight / weight_2013) * 100\n\nanswer = rate_of_change_percentage\nprint(answer)", "weight_2013 = 31  # weight in kg for the year 2013\nweight_2014 = 37  # weight in kg for the year 2014\nchange_in_weight = weight_2014 - weight_2013\nrate_of_change_percentage = (change_in_weight / weight_2013) * 100\nanswer = round(rate_of_change_percentage, 2)  # rounding to 2 decimal places\nprint(f\"Rate of change from 2013 to 2014: {answer}%\")"], "prediction": [6.0, null, 19.35484, 19.35], "report": ["Done", "SyntaxError('invalid syntax', ('<string>', 1, 1, '```python\\n', 1, 2))", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Math teachers\" and then answer a question.\n\nHigh school | Number of math teachers\nHillview High | 8\nGreen High | 6\nThompson High | 10\nWestside High | 7\nCentral High | 9\nNorthside High | 9\nLincoln High | 7", "question": "Read the following table regarding \"Math teachers\" and then write Python code to answer a question.\n\nHigh school | Number of math teachers\nHillview High | 8\nGreen High | 6\nThompson High | 10\nWestside High | 7\nCentral High | 9\nNorthside High | 9\nLincoln High | 7\n\nThe school district compared how many math teachers each high school has. What is the mean of the numbers?", "answer": "8", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of the number of math teachers at each high school\nmath_teachers = [8, 6, 10, 7, 9, 9, 7]\n# Calculate the mean\nmean_math_teachers = sum(math_teachers) / len(math_teachers)\nanswer = mean_math_teachers\nprint(answer)", "# List of the number of math teachers at each high school  \nmath_teachers = [8, 6, 10, 7, 9, 9, 7]  \n\n# Calculate the mean number of math teachers  \nmean_math_teachers = sum(math_teachers) / len(math_teachers)  \n\n# Store the result in the answer variable  \nanswer = mean_math_teachers  \n\n# Print the result  \nprint(answer)", "math_teachers = [8, 6, 10, 7, 9, 9, 7]  \nmean_math_teachers = sum(math_teachers) / len(math_teachers)  \nanswer = round(mean_math_teachers)  # Round to the nearest integer\nprint(answer)", "math_teachers = [8, 6, 10, 7, 9, 9, 7]  \nmean_math_teachers = sum(math_teachers) / len(math_teachers)  \nanswer = mean_math_teachers  # Keep the decimal value for the mean\nprint(answer)"], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Science articles read\" and then answer a question.\n\nName | Number of science articles\nQuincy | 9\nCarly | 4\nKinsley | 9\nAlexandra | 9\nDuncan | 7\nTerrell | 7\nRussell | 10\nShawn | 10", "question": "Read the following table regarding \"Science articles read\" and then write Python code to answer a question.\n\nName | Number of science articles\nQuincy | 9\nCarly | 4\nKinsley | 9\nAlexandra | 9\nDuncan | 7\nTerrell | 7\nRussell | 10\nShawn | 10\n\nQuincy's classmates revealed how many science articles they read. What is the mode of the numbers?", "answer": "9", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of articles read by each student\narticles_read = [9, 4, 9, 9, 7, 7, 10, 10]\n\n# Finding the mode\nfrom statistics import mode\nmode_value = mode(articles_read)\nanswer = mode_value\nprint(answer)", "from statistics import mode\n\narticles_read = [9, 4, 9, 9, 7, 7, 10, 10]\nmode_value = mode(articles_read)\nanswer = int(mode_value)  # Convert to integer for the final answer\nprint(answer)", "from statistics import mode\n\n# List of the number of science articles read by Quincy and his classmates\narticles_read = [9, 4, 9, 9, 7, 7, 10, 10]\n\n# Calculate the mode of the articles read\nmode_value = mode(articles_read)\n\n# Store the mode as an integer in the answer variable\nanswer = int(mode_value)  # Convert to integer for the final answer\nprint(answer)", "from statistics import mode\n\n# List of the number of science articles read by Quincy and his classmates\narticles_read = [9, 4, 9, 9, 7, 7, 10, 10]\n\n# Calculate the mode of the articles read\nmode_value = mode(articles_read)\n\n# Store the mode as an integer in the answer variable\nanswer = int(mode_value)\n\n# Output the answer\nprint(answer)"], "prediction": [9.0, 9.0, 9.0, 9.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nflannel sheet | $13\nquilt | $24\nbeach towel | $11\npillow | $14\nbeach blanket | $11", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nflannel sheet | $13\nquilt | $24\nbeach towel | $11\npillow | $14\nbeach blanket | $11\n\nWendy has $27. Does she have enough to buy a beach blanket and a pillow? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \nbeach_blanket_price = 11\npillow_price = 14\ntotal_cost = beach_blanket_price + pillow_price\nwendy_budget = 27\n\n# Check if Wendy has enough money\nif wendy_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Prices of items\nbeach_blanket_price = 11\npillow_price = 14\n\n# Wendy's budget\nwendy_budget = 27\n\n# Calculate total cost\ntotal_cost = beach_blanket_price + pillow_price\n\n# Determine if Wendy has enough money\nanswer = 'yes' if wendy_budget >= total_cost else 'no'\n\nprint(answer)", "beach_blanket_price = 11\npillow_price = 14\nwendy_budget = 27\ntotal_cost = beach_blanket_price + pillow_price\nanswer = 'yes' if wendy_budget >= total_cost else 'no'\nprint(answer)", "beach_blanket_price = 11  \npillow_price = 14  \nwendy_budget = 27  \ntotal_cost = beach_blanket_price + pillow_price  \nanswer = 'yes' if wendy_budget >= total_cost else 'no'  \nprint(answer)"], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Chocolate consumption per capita (kg)\" and then answer a question.\n\nCountry | 2002 | 2005\nNorway | 8 | 9\nDenmark | 9 | 8\nAustria | 8 | 9\nGermany | 10 | 11", "question": "Read the following table regarding \"Chocolate consumption per capita (kg)\" and then write Python code to answer a question.\n\nCountry | 2002 | 2005\nNorway | 8 | 9\nDenmark | 9 | 8\nAustria | 8 | 9\nGermany | 10 | 11\n\nRuth's Candies has been studying how much chocolate people have been eating in different countries. Which country consumed less chocolate per capita in 2005, Austria or Germany? Choose from the the options: ['Austria', 'Germany']", "answer": "Austria", "ques_type": "multi_choice", "choices": ["Austria", "Germany"], "code": [
  "# Python code, return answer \n# Chocolate consumption per capita in 2005\nconsumption_2005 = {\n    'Austria': 9,\n    'Germany': 11\n}\n# Determine which country consumed less chocolate in 2005\nif consumption_2005['Austria'] < consumption_2005['Germany']:\n    answer = 'Austria'\nelse:\n    answer = 'Germany'\nprint(answer)", "# Define chocolate consumption per capita for 2005\nconsumption_2005 = {\n    'Austria': 9,\n    'Germany': 11\n}\n\n# Determine which country consumed less chocolate per capita in 2005\nif consumption_2005['Austria'] < consumption_2005['Germany']:\n    answer = 'Austria'\nelse:\n    answer = 'Germany'\n\n# Print the answer\nprint(answer)", "# Define chocolate consumption per capita in 2005 for Austria and Germany\nconsumption_2005 = {\n    'Austria': 9,\n    'Germany': 11\n}\n\n# Determine which country consumed less chocolate per capita in 2005\nif consumption_2005['Austria'] < consumption_2005['Germany']:\n    answer = 'Austria'\nelse:\n    answer = 'Germany'\n\nprint(answer)", "# Define the chocolate consumption per capita for the year 2005\nconsumption_2005 = {\n    'Austria': 9,\n    'Germany': 11\n}\n\n# Determine which country consumed less chocolate per capita in 2005\nanswer = 'Austria' if consumption_2005['Austria'] < consumption_2005['Germany'] else 'Germany'\n\nprint(answer)"
], "prediction": ["Austria", "Austria", "Austria", "Austria"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nking snake | $97.00\npot-bellied pig | $51.00\ntarantula | $35.00\nchinchilla | $57.00\ncockatoo | $11.00\nscorpion | $67.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nking snake | $97.00\npot-bellied pig | $51.00\ntarantula | $35.00\nchinchilla | $57.00\ncockatoo | $11.00\nscorpion | $67.00\n\nHannah has $179.00. How much money will Hannah have left if she buys a scorpion and a chinchilla?", "answer": "55", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices of the animals\nprice_scorpion = 67.00\nprice_chinchilla = 57.00\n# Total cost for scorpion and chinchilla\ntotal_cost = price_scorpion + price_chinchilla\n# Amount of money Hannah will have left\nhannah_money = 179.00\nmoney_left = hannah_money - total_cost\nanswer = money_left\nprint(answer)", "# Define the prices of the scorpion and chinchilla\nprice_scorpion = 67.00\nprice_chinchilla = 57.00\n\n# Calculate the total cost of the scorpion and chinchilla\ntotal_cost = price_scorpion + price_chinchilla\n\n# Hannah's initial amount of money\nhannah_money = 179.00\n\n# Calculate how much money Hannah will have left\nmoney_left = hannah_money - total_cost\n\n# Store the result in the variable 'answer'\nanswer = money_left\n\n# Output the answer\nprint(answer)", "# Define the prices of the scorpion and chinchilla\nprice_scorpion = 67.00\nprice_chinchilla = 57.00\n\n# Calculate the total cost of the purchases\ntotal_cost = price_scorpion + price_chinchilla\n\n# Define the amount of money Hannah has\nhannah_money = 179.00\n\n# Calculate the amount of money Hannah will have left after her purchases\nmoney_left = hannah_money - total_cost\n\n# Store the result in the variable 'answer'\nanswer = money_left\n\n# Print the result\nprint(answer)", "# Prices of the animals\nprice_scorpion = 67.00\nprice_chinchilla = 57.00\n\n# Total cost of scorpion and chinchilla\ntotal_cost = price_scorpion + price_chinchilla\n\n# Hannah's initial amount of money\nhannah_money = 179.00\n\n# Calculate the remaining money after the purchase\nmoney_left = hannah_money - total_cost\n\n# Store the result in the variable 'answer'\nanswer = money_left\n\n# Output the answer\nprint(answer)"
], "prediction": [55.0, 55.0, 55.0, 55.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Participants per race\" and then answer a question.\n\nStem | Leaf \n1 | 2\n2 | 4, 8\n3 | \n4 | 2, 8\n5 | 5, 8, 9\n6 | 8\n7 | 3", "question": "Read the following table regarding \"Participants per race\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 2\n2 | 4, 8\n3 | \n4 | 2, 8\n5 | 5, 8, 9\n6 | 8\n7 | 3\n\nA volunteer for the local running club counted the number of participants at each race. How many races had at least 41 participants?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of the number of participants derived from the stem-and-leaf display\nparticipants = [12, 24, 28, 42, 48, 55, 58, 59, 68, 73]  # Each number corresponds to the stem and leaves\n# Count how many races had at least 41 participants\ncount_at_least_41 = sum(1 for p in participants if p >= 41)\nanswer = count_at_least_41\nprint(answer)", "participants = [12, 24, 28, 42, 48, 55, 58, 59, 68, 73]  # Each number corresponds to the stem and leaves\ncount_at_least_41 = sum(1 for p in participants if p >= 41)\nanswer = int(count_at_least_41)  # Convert to integer\nprint(answer)", "participants = [12, 24, 28, 42, 48, 55, 58, 59, 68, 73]  # Each number corresponds to the stem and leaves\ncount_at_least_41 = sum(1 for p in participants if p >= 41)\nanswer = count_at_least_41  # No need to convert to integer as it's already an integer\nprint(answer)", "participants = [12, 24, 28, 42, 48, 55, 58, 59, 68, 73]  # Each number corresponds to the stem and leaves\ncount_at_least_41 = sum(1 for p in participants if p >= 41)\nanswer = int(count_at_least_41)  # Ensure the result is an integer\nprint(answer)"], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Participants per race\" and then answer a question.\n\nStem | Leaf \n1 | 1, 2\n2 | 4\n3 | 1, 5, 7\n4 | 8\n5 | 4, 7, 8\n6 | 3\n7 | 6", "question": "Read the following table regarding \"Participants per race\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 1, 2\n2 | 4\n3 | 1, 5, 7\n4 | 8\n5 | 4, 7, 8\n6 | 3\n7 | 6\n\nA volunteer for the local running club counted the number of participants at each race. How many races had at least 50 participants but fewer than 80 participants?", "answer": "5", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Count the number of races with participants between 50 and 79 (inclusive)\n# The stems 5, 6, and 7 are relevant since 50 to 79 falls in those ranges.\nraces_with_participants = {\n    51: 4,   # 54, 57, 58 from stem 5\n    60: 3,   # 63 from stem 6\n    70: 1    # 76 from stem 7\n}\n\n# Participants per race represented by the stem-and-leaf display:\n# Stem 5: 54, 57, 58 (3 races)\n# Stem 6: 63 (1 race)\n# Stem 7: 76 (1 race)\n\n# Total count of races with at least 50 and fewer than 80 participants\nnumber_of_races = 3 + 1 + 1  # 3 from stem 5, 1 from stem 6, 1 from stem 7\nanswer = number_of_races\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [1, 2]), (2, [4]), (3, [1, 5, 7]), (4, [8]), (5, [4, 7, 8]), (6, [3]), (7, [6])]  \n  \n# Initialize counter for races with at least 50 participants but fewer than 80 participants  \nraces_with_50_to_79_participants = 0  \n  \n# Iterate through the stem and leaf data structure and count relevant races  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        participants_per_race = stem * 10 + leaf  \n        if 50 <= participants_per_race < 80:  \n            races_with_50_to_79_participants += 1  \n  \nanswer = races_with_50_to_79_participants  \nprint(answer)", "# Define the stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [1, 2]), (2, [4]), (3, [1, 5, 7]), (4, [8]), (5, [4, 7, 8]), (6, [3]), (7, [6])]  \n\n# Initialize counter for races with at least 50 participants but fewer than 80 participants  \nraces_with_50_to_79_participants = 0  \n\n# Iterate through the stem and leaf data structure and count relevant races  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        participants_per_race = stem * 10 + leaf  \n        if 50 <= participants_per_race < 80:  \n            races_with_50_to_79_participants += 1  \n\nanswer = races_with_50_to_79_participants  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [1, 2]), (2, [4]), (3, [1, 5, 7]), (4, [8]), (5, [4, 7, 8]), (6, [3]), (7, [6])]  \n\n# Initialize counter for races with at least 50 participants but fewer than 80 participants  \nraces_with_50_to_79_participants = 0  \n\n# Iterate through the stem and leaf data structure and count relevant races  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        participants_per_race = stem * 10 + leaf  \n        if 50 <= participants_per_race < 80:  \n            races_with_50_to_79_participants += 1  \n\n# Store the result as an integer  \nanswer = races_with_50_to_79_participants  \nprint(answer)"
], "prediction": [5.0, 5.0, 5.0, 5.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Not spicy | A little spicy\nYellowtail | 1 | 3\nSalmon | 4 | 3", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Not spicy | A little spicy\nYellowtail | 1 | 3\nSalmon | 4 | 3\n\nA customer at a sushi restaurant was examining the types of sushi rolls offered on the menu. Rolls vary by type of fish and level of spiciness. Rolls only contain one type of fish. What is the probability that a randomly selected sushi roll contains salmon and is labeled not spicy? Simplify any fractions.", "answer": "4/11", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Count of sushi rolls\nnot_spicy_yellowtail = 1\na_little_spicy_yellowtail = 3\nnot_spicy_salmon = 4\na_little_spicy_salmon = 3\n\n# Total rolls\ntotal_rolls = not_spicy_yellowtail + a_little_spicy_yellowtail + not_spicy_salmon + a_little_spicy_salmon\n\n# Probability of selecting a not spicy salmon roll\nprobability_not_spicy_salmon = not_spicy_salmon / total_rolls\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(not_spicy_salmon, total_rolls).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "not_spicy_yellowtail = 1\na_little_spicy_yellowtail = 3\nnot_spicy_salmon = 4\na_little_spicy_salmon = 3\n\n# Calculate the total number of sushi rolls\ntotal_rolls = not_spicy_yellowtail + a_little_spicy_yellowtail + not_spicy_salmon + a_little_spicy_salmon\n\n# Calculate the probability of selecting a not spicy salmon roll\nprobability_not_spicy_salmon = not_spicy_salmon / total_rolls\n\n# Simplify the probability to a fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(not_spicy_salmon, total_rolls).limit_denominator()\n\n# Store the final answer\nanswer = simplified_probability\nprint(answer)", "# Define the number of sushi rolls by type and spiciness\nnot_spicy_yellowtail = 1\na_little_spicy_yellowtail = 3\nnot_spicy_salmon = 4\na_little_spicy_salmon = 3\n\n# Calculate the total number of rolls\ntotal_rolls = not_spicy_yellowtail + a_little_spicy_yellowtail + not_spicy_salmon + a_little_spicy_salmon\n\n# Calculate the probability of selecting a not spicy salmon roll\nprobability_not_spicy_salmon = not_spicy_salmon / total_rolls\n\n# Simplify the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(not_spicy_salmon, total_rolls).limit_denominator()\n\n# Store the simplified fraction as the answer\nanswer = simplified_probability\nprint(answer)", "# Define the number of sushi rolls by type and spiciness\nnot_spicy_yellowtail = 1\na_little_spicy_yellowtail = 3\nnot_spicy_salmon = 4\na_little_spicy_salmon = 3\n\n# Calculate the total number of sushi rolls\ntotal_rolls = (not_spicy_yellowtail + a_little_spicy_yellowtail + \n                not_spicy_salmon + a_little_spicy_salmon)\n\n# Calculate the probability of selecting a not spicy salmon roll\nprobability_not_spicy_salmon = not_spicy_salmon / total_rolls\n\n# Simplifying the probability using Fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(not_spicy_salmon, total_rolls).limit_denominator()\n\n# Store the result in the answer variable\nanswer = simplified_probability\nprint(answer)"
], "prediction": [0.36364, 0.36364, 0.36364, 0.36364], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Phone calls received\" and then answer a question.\n\nDay | Number of calls\nMonday | 4,560\nTuesday | 4,279\nWednesday | 2,988\nThursday | 1,406\nFriday | 1,192", "question": "Read the following table regarding \"Phone calls received\" and then write Python code to answer a question.\n\nDay | Number of calls\nMonday | 4,560\nTuesday | 4,279\nWednesday | 2,988\nThursday | 1,406\nFriday | 1,192\n\nA technical support line tracked how many calls it received each day. How many calls total did the support line receive on Tuesday and Thursday?", "answer": "5,685", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Calls received on Tuesday and Thursday\ncalls_tuesday = 4279\ncalls_thursday = 1406\n# Total calls on Tuesday and Thursday\ntotal_calls = calls_tuesday + calls_thursday\nanswer = total_calls\nprint(answer)", "calls_tuesday = 4279\ncalls_thursday = 1406\ntotal_calls = calls_tuesday + calls_thursday\nanswer = total_calls  # Store as an integer\nprint(answer)", "calls_tuesday = 4279  # Define Tuesday's calls as an integer\ncalls_thursday = 1406  # Define Thursday's calls as an integer\ntotal_calls = calls_tuesday + calls_thursday  # Calculate total calls\nanswer = int(total_calls)  # Ensure the result is stored as an integer\nprint(answer)  # Output the answer", "# Define the number of calls received on Tuesday and Thursday\ncalls_tuesday = 4279  # Tuesday's calls\ncalls_thursday = 1406  # Thursday's calls\n\n# Calculate total calls received on Tuesday and Thursday\ntotal_calls = calls_tuesday + calls_thursday\n\n# Store the result in the variable 'answer'\nanswer = total_calls\n\n# Output the answer\nprint(answer)"], "prediction": [5685.0, 5685.0, 5685.0, 5685.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Beautician requests\" and then answer a question.\n\nBeautician | Requests\nShelley | 560\nLexi | 600\nElise | 630\nKamal | 860\nJoe | 630", "question": "Read the following table regarding \"Beautician requests\" and then write Python code to answer a question.\n\nBeautician | Requests\nShelley | 560\nLexi | 600\nElise | 630\nKamal | 860\nJoe | 630\n\nA beauty salon in Richmond has five beauticians and keeps track of how often clients request each one specifically. What fraction of requests were for Shelley? Simplify your answer.", "answer": "7/41", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total requests made to all beauticians\ntotal_requests = 560 + 600 + 630 + 860 + 630\n# Requests for Shelley\nshelley_requests = 560\n# Calculate the fraction of requests for Shelley\nfraction_shelley = shelley_requests / total_requests\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_fraction = Fraction(shelley_requests, total_requests).limit_denominator()\nanswer = simplified_fraction\nprint(answer)", "# Define the number of requests for each beautician\nshelley_requests = 560\nlexi_requests = 600\nelise_requests = 630\nkamal_requests = 860\njoe_requests = 630\n\n# Calculate the total number of requests\ntotal_requests = shelley_requests + lexi_requests + elise_requests + kamal_requests + joe_requests\n\n# Calculate the fraction of requests for Shelley\nfrom fractions import Fraction\nfraction_shelley = Fraction(shelley_requests, total_requests).limit_denominator()\n\n# Store the simplified fraction in the answer variable\nanswer = fraction_shelley\nprint(answer)", "shelley_requests = 560\nlexi_requests = 600\nelise_requests = 630\nkamal_requests = 860\njoe_requests = 630\n\n# Calculate total requests\ntotal_requests = shelley_requests + lexi_requests + elise_requests + kamal_requests + joe_requests\n\n# Use the Fraction class to calculate the fraction of requests for Shelley\nfrom fractions import Fraction\nfraction_shelley = Fraction(shelley_requests, total_requests).limit_denominator()\n\n# Store the result as 'answer'\nanswer = fraction_shelley\n\n# Print the answer\nprint(answer)", "shelley_requests = 560\nlexi_requests = 600\nelise_requests = 630\nkamal_requests = 860\njoe_requests = 630\n\ntotal_requests = shelley_requests + lexi_requests + elise_requests + kamal_requests + joe_requests\n\nfrom fractions import Fraction\nfraction_shelley = Fraction(shelley_requests, total_requests).limit_denominator()\nanswer = str(fraction_shelley)  # Convert to string to display as a fraction\n\nprint(answer)"
], "prediction": [0.17073, 0.17073, 0.17073, "7/41"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Couches sold\" and then answer a question.\n\nDay | Number of couches\nWednesday | 8\nThursday | 14\nFriday | 11\nSaturday | 4\nSunday | 5", "question": "Read the following table regarding \"Couches sold\" and then write Python code to answer a question.\n\nDay | Number of couches\nWednesday | 8\nThursday | 14\nFriday | 11\nSaturday | 4\nSunday | 5\n\nA furniture store kept a record of how many couches it sold each day. What is the range of the numbers?", "answer": "10", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of couches sold each day\ncouches_sold = [8, 14, 11, 4, 5]\n# Calculate the range\nrange_couches = max(couches_sold) - min(couches_sold)\nanswer = range_couches\nprint(answer)", "couches_sold = [8, 14, 11, 4, 5]\nrange_couches = max(couches_sold) - min(couches_sold)\nanswer = int(range_couches)  # Convert to integer\nprint(answer)", "couches_sold = [8, 14, 11, 4, 5]\nrange_couches = max(couches_sold) - min(couches_sold)\nanswer = range_couches  # No need to convert to integer\nprint(answer)", "couches_sold = [8, 14, 11, 4, 5]\nrange_couches = max(couches_sold) - min(couches_sold)\nanswer = int(range_couches)  # Convert to integer for clarity\nprint(answer)"], "prediction": [10.0, 10.0, 10.0, 10.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Doing pull-ups\" and then answer a question.\n\nNumber of pull-ups | Frequency\n0 | 0\n1 | 6\n2 | 4\n3 | 2", "question": "Read the following table regarding \"Doing pull-ups\" and then write Python code to answer a question.\n\nNumber of pull-ups | Frequency\n0 | 0\n1 | 6\n2 | 4\n3 | 2\n\nJackson, a fitness counselor, counted the number of pull-ups completed by each bootcamp participant. How many participants did exactly 1 pull-up?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# From the table, the frequency of participants who completed exactly 1 pull-up\nparticipants_one_pullup = 6\nanswer = participants_one_pullup\nprint(answer)", "participants_one_pullup = 6\nanswer = participants_one_pullup  # This is already an integer\nprint(answer)", "participants_one_pullup = 6\nanswer = participants_one_pullup  # This is already an integer\nprint(answer)", "participants_one_pullup = 6\nanswer = participants_one_pullup  # This is already an integer\nprint(answer)  # This will correctly output the integer value"], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Boxes of Girl Scout cookies sold\" and then answer a question.\n\nDay | Boxes of cookies\nSunday | 42\nMonday | 34\nTuesday | 31\nWednesday | 32\nThursday | 31", "question": "Read the following table regarding \"Boxes of Girl Scout cookies sold\" and then write Python code to answer a question.\n\nDay | Boxes of cookies\nSunday | 42\nMonday | 34\nTuesday | 31\nWednesday | 32\nThursday | 31\n\nA Girl Scout troop recorded how many boxes of cookies they sold each day for a week. According to the table, what was the rate of change between Wednesday and Thursday?", "answer": "-1", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Boxes sold on Wednesday and Thursday\nboxes_wednesday = 32\nboxes_thursday = 31\n\n# Calculate the rate of change from Wednesday to Thursday\nrate_of_change = boxes_thursday - boxes_wednesday\nanswer = rate_of_change\nprint(answer)", "boxes_wednesday = 32\nboxes_thursday = 31\n\n# Calculate the rate of change\nrate_of_change = boxes_thursday - boxes_wednesday\n\n# Calculate percentage change\npercentage_change = (rate_of_change / boxes_wednesday) * 100\n\nanswer = {\n    \"rate_of_change\": rate_of_change,\n    \"percentage_change\": percentage_change\n}\n\nprint(answer)", "# Define the number of boxes sold on Wednesday and Thursday\nboxes_wednesday = 32\nboxes_thursday = 31\n\n# Calculate the rate of change\nrate_of_change = boxes_thursday - boxes_wednesday\n\n# Calculate the percentage change\npercentage_change = (rate_of_change / boxes_wednesday) * 100\n\n# Store the results in a clearer format\nanswer = f\"Rate of change from Wednesday to Thursday: {rate_of_change}, Percentage change: {percentage_change:.2f}%\"\nprint(answer)", "# Define the number of boxes sold on Wednesday and Thursday\nboxes_wednesday = 32\nboxes_thursday = 31\n\n# Calculate the rate of change\nrate_of_change = boxes_thursday - boxes_wednesday\n\n# Store the result in the answer variable\nanswer = rate_of_change\nprint(answer)"
], "prediction": [-1.0, -1, "Rate of change from Wednesday to Thursday: -1, Percentage change: -3.12%", -1.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Shells Kendra found\" and then answer a question.\n\nDay | Number of shells\nTuesday | 6\nWednesday | 3\nThursday | 6\nFriday | 2\nSaturday | 0", "question": "Read the following table regarding \"Shells Kendra found\" and then write Python code to answer a question.\n\nDay | Number of shells\nTuesday | 6\nWednesday | 3\nThursday | 6\nFriday | 2\nSaturday | 0\n\nKendra spent a week at the beach and recorded the number of shells she found each day. According to the table, what was the rate of change between Wednesday and Thursday?", "answer": "3", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of shells found on Wednesday and Thursday\nshells_wednesday = 3\nshells_thursday = 6\n\n# Calculate the rate of change\nrate_of_change = shells_thursday - shells_wednesday\nanswer = rate_of_change\nprint(answer)", "shells_wednesday = 3\nshells_thursday = 6\n# Calculate the rate of change\nchange_in_shells = shells_thursday - shells_wednesday\nchange_in_days = 1  # from Wednesday to Thursday\nrate_of_change = change_in_shells / change_in_days\nanswer = rate_of_change\nprint(answer)", "shells_wednesday = 3\nshells_thursday = 6\nchange_in_shells = shells_thursday - shells_wednesday\nchange_in_days = 1  # from Wednesday to Thursday\nrate_of_change = change_in_shells / change_in_days\nanswer = f\"The rate of change in the number of shells found from Wednesday to Thursday is {rate_of_change} shells per day.\"\nprint(answer)", "shells_wednesday = 3\nshells_thursday = 6\nchange_in_shells = shells_thursday - shells_wednesday\n\n# Since the change occurs over one day, we can directly state the change\nanswer = f\"The change in the number of shells found from Wednesday to Thursday is {change_in_shells} shells.\"\nprint(answer)"], "prediction": [3.0, 3.0, "The rate of change in the number of shells found from Wednesday to Thursday is 3.0 shells per day.", "The change in the number of shells found from Wednesday to Thursday is 3 shells."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Salem arts education budget\" and then answer a question.\n\nYear | Per-student budget\n2007 | $17\n2008 | $21\n2009 | $29\n2010 | $22\n2011 | $21", "question": "Read the following table regarding \"Salem arts education budget\" and then write Python code to answer a question.\n\nYear | Per-student budget\n2007 | $17\n2008 | $21\n2009 | $29\n2010 | $22\n2011 | $21\n\nIn hopes of raising more funds for arts education, some parents in the Salem School District publicized the current per-student arts education budget. According to the table, what was the rate of change between 2008 and 2009?", "answer": "8", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Per-student budgets for the years 2008 and 2009\nbudget_2008 = 21\nbudget_2009 = 29\n\n# Rate of change calculation\nrate_of_change = budget_2009 - budget_2008\nanswer = rate_of_change\nprint(answer)", "budget_2008 = 21\nbudget_2009 = 29\nchange = budget_2009 - budget_2008\nrate_of_change_percentage = (change / budget_2008) * 100\nanswer = rate_of_change_percentage\nprint(answer)", "# Define the budgets for 2008 and 2009\nbudget_2008 = 21\nbudget_2009 = 29\n\n# Calculate the change in budget\nchange = budget_2009 - budget_2008\n\n# Calculate the rate of change as a percentage\nrate_of_change_percentage = (change / budget_2008) * 100\n\n# Round the percentage for better readability\nrate_of_change_percentage_rounded = round(rate_of_change_percentage, 2)\n\n# Store the result in the answer variable\nanswer = f\"The rate of change between 2008 and 2009 was {rate_of_change_percentage_rounded}%.\"\nprint(answer)", "# Define the per-student budgets for 2008 and 2009\nbudget_2008 = 21\nbudget_2009 = 29\n\n# Calculate the change in budget\nchange = budget_2009 - budget_2008\n\n# Calculate the rate of change as a percentage\nrate_of_change_percentage = (change / budget_2008) * 100\n\n# Round the result to two decimal places\nrate_of_change_percentage_rounded = round(rate_of_change_percentage, 2)\n\n# Format the answer for clarity\nanswer = f\"The rate of change between 2008 and 2009 was {rate_of_change_percentage_rounded}%.\"\nprint(answer)"], "prediction": [8.0, 38.09524, "The rate of change between 2008 and 2009 was 38.1%.", "The rate of change between 2008 and 2009 was 38.1%."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Dog food consumption\" and then answer a question.\n\nDog | Kilograms of food\nLucky | 50\nPepper | 44\nTaffy | 28\nSparky | 40", "question": "Read the following table regarding \"Dog food consumption\" and then write Python code to answer a question.\n\nDog | Kilograms of food\nLucky | 50\nPepper | 44\nTaffy | 28\nSparky | 40\n\nGabby owns four dogs and monitors how much food they eat in a month. What fraction of the food was eaten by Pepper? Simplify your answer.", "answer": "22/81", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total kilograms of food consumed by all dogs\ntotal_food = 50 + 44 + 28 + 40\n# Kilograms of food consumed by Pepper\npepper_food = 44\n# Calculate the fraction of food eaten by Pepper\nfraction_pepper = pepper_food / total_food\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_fraction = Fraction(pepper_food, total_food).limit_denominator()\nanswer = simplified_fraction\nprint(answer)", "# Define the amount of food consumed by each dog\nfood_consumption = {\n    'Lucky': 50,\n    'Pepper': 44,\n    'Taffy': 28,\n    'Sparky': 40\n}\n\n# Calculate the total food consumed\ntotal_food = sum(food_consumption.values())\n\n# Get the food consumed by Pepper\npepper_food = food_consumption['Pepper']\n\n# Calculate the fraction of food eaten by Pepper and simplify it\nfrom fractions import Fraction\nfraction_pepper = Fraction(pepper_food, total_food).limit_denominator()\n\n# Store the simplified fraction in the answer variable\nanswer = fraction_pepper\n\nprint(answer)", "food_consumption = {\n    'Lucky': 50,\n    'Pepper': 44,\n    'Taffy': 28,\n    'Sparky': 40\n}\ntotal_food = sum(food_consumption.values())\npepper_food = food_consumption['Pepper']\nfrom fractions import Fraction\nfraction_pepper = Fraction(pepper_food, total_food).limit_denominator()\nanswer = fraction_pepper\nprint(answer)", "food_consumption = {\n    'Lucky': 50,\n    'Pepper': 44,\n    'Taffy': 28,\n    'Sparky': 40\n}\ntotal_food = sum(food_consumption.values())\npepper_food = food_consumption['Pepper']\nfrom fractions import Fraction\nfraction_pepper = Fraction(pepper_food, total_food).limit_denominator()\nanswer = fraction_pepper\nprint(answer)"
], "prediction": [0.2716, 0.2716, 0.2716, 0.2716], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Lancaster School District sports budget\" and then answer a question.\n\nYear | Per-student budget\n2013 | $49\n2014 | $50\n2015 | $42\n2016 | $45\n2017 | $50", "question": "Read the following table regarding \"Lancaster School District sports budget\" and then write Python code to answer a question.\n\nYear | Per-student budget\n2013 | $49\n2014 | $50\n2015 | $42\n2016 | $45\n2017 | $50\n\nEach year the Lancaster School District publishes its annual budget, which includes information on the sports program's per-student spending. According to the table, what was the rate of change between 2016 and 2017?", "answer": "5", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Per-student budgets for the years\nbudget_2016 = 45 \nbudget_2017 = 50 \n# Calculate the rate of change\nrate_of_change = budget_2017 - budget_2016\nanswer = rate_of_change\nprint(answer)", "budget_2016 = 45 \nbudget_2017 = 50 \nrate_of_change = ((budget_2017 - budget_2016) / budget_2016) * 100\nanswer = rate_of_change\nprint(answer)", "budget_2016 = 45 \nbudget_2017 = 50 \nrate_of_change = ((budget_2017 - budget_2016) / budget_2016) * 100\nanswer = round(rate_of_change, 2)  # Round to 2 decimal places for better readability\nprint(answer)", "# Define the budgets for 2016 and 2017 as numerical values\nbudget_2016 = 45  # Per-student budget for 2016\nbudget_2017 = 50  # Per-student budget for 2017\n\n# Calculate the rate of change between 2016 and 2017\nrate_of_change = ((budget_2017 - budget_2016) / budget_2016) * 100\n\n# Store the result in the variable 'answer' rounded to 2 decimal places for better readability\nanswer = round(rate_of_change, 2)\n\nprint(answer)"], "prediction": [5.0, 11.11111, 11.11, 11.11], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"People on the bus\" and then answer a question.\n\nDay | Number of people\nSunday | 68\nMonday | 63\nTuesday | 83\nWednesday | 65\nThursday | 77\nFriday | 63\nSaturday | 64", "question": "Read the following table regarding \"People on the bus\" and then write Python code to answer a question.\n\nDay | Number of people\nSunday | 68\nMonday | 63\nTuesday | 83\nWednesday | 65\nThursday | 77\nFriday | 63\nSaturday | 64\n\nA bus driver paid attention to how many passengers his bus had each day. What is the median of the numbers?", "answer": "65", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# List of the number of people on the bus each day\npeople = [68, 63, 83, 65, 77, 63, 64]\n\n# Sort the list to find the median\nsorted_people = sorted(people)\n\n# Calculate the median\nn = len(sorted_people)\nif n % 2 == 0:  # even number of elements\n    median = (sorted_people[n//2 - 1] + sorted_people[n//2]) / 2\nelse:  # odd number of elements\n    median = sorted_people[n//2]\n\nanswer = median\nprint(answer)", "# List of number of people on the bus each day\npeople = [68, 63, 83, 65, 77, 63, 64]\n\n# Sort the list to find the median\nsorted_people = sorted(people)\nn = len(sorted_people)\n\n# Calculate the median\nif n % 2 == 0:  # even number of elements\n    median = (sorted_people[n//2 - 1] + sorted_people[n//2]) / 2\nelse:  # odd number of elements\n    median = sorted_people[n//2]\n\n# Store the median as an integer if it's a whole number\nanswer = int(median) if median.is_integer() else median\n\nprint(answer)", "people = [68, 63, 83, 65, 77, 63, 64]\nsorted_people = sorted(people)\nn = len(sorted_people)\n\nif n % 2 == 0:  # even number of elements\n    median = (sorted_people[n//2 - 1] + sorted_people[n//2]) / 2\nelse:  # odd number of elements\n    median = sorted_people[n//2]\n\nanswer = median  # keep the median as a float\nprint(answer)", "people = [68, 63, 83, 65, 77, 63, 64]\nsorted_people = sorted(people)\nn = len(sorted_people)\nif n % 2 == 0:  # even number of elements\n    median = (sorted_people[n//2 - 1] + sorted_people[n//2]) / 2\nelse:  # odd number of elements\n    median = sorted_people[n//2]\nanswer = median  # keep the median as a float\nprint(answer)"
], "prediction": [65.0, 65.0, 65.0, 65.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ngumball | $0.11\npeanut butter cup | $0.15\ncaramel | $0.13\ngrape lollipop | $0.40", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ngumball | $0.11\npeanut butter cup | $0.15\ncaramel | $0.13\ngrape lollipop | $0.40\n\nHow much money does Dan need to buy a grape lollipop and a caramel?", "answer": "0.53", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_grape_lollipop = 0.40 \nprice_caramel = 0.13 \n# Total cost for a grape lollipop and a caramel\ntotal_cost = price_grape_lollipop + price_caramel\nanswer = total_cost\nprint(answer)", "# Define the prices of the items  \nprice_grape_lollipop = 0.40  \nprice_caramel = 0.13  \n  \n# Calculate the total cost  \ntotal_cost = price_grape_lollipop + price_caramel  \nanswer = total_cost  \n\nprint(answer)", "# Prices of the items\nprice_grape_lollipop = 0.40  \nprice_caramel = 0.13  \n\n# Calculate total cost\ntotal_cost = price_grape_lollipop + price_caramel  \n\n# Store the result in the variable 'answer'\nanswer = total_cost  \n\n# Print the answer\nprint(answer)", "# Define the prices of the items\nprice_grape_lollipop = 0.40  \nprice_caramel = 0.13  \n\n# Calculate the total cost\ntotal_cost = price_grape_lollipop + price_caramel  \n\n# Store the result in the variable 'answer'\nanswer = total_cost  \n\n# Print the answer\nprint(answer)"], "prediction": [0.53, 0.53, 0.53, 0.53], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Restaurant ratings\" and then answer a question.\n\nStem | Leaf \n1 | 2, 6, 7\n2 | 1, 3, 8, 9\n3 | 5, 8\n4 | 0, 0, 2, 4, 5, 7, 7, 9\n5 | 0", "question": "Read the following table regarding \"Restaurant ratings\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 2, 6, 7\n2 | 1, 3, 8, 9\n3 | 5, 8\n4 | 0, 0, 2, 4, 5, 7, 7, 9\n5 | 0\n\nA food magazine published a listing of local restaurant ratings. What is the highest rating?", "answer": "50", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The highest rating corresponds to the largest value in the stem-and-leaf display.\nhighest_rating = 50  # From the stem \"5 | 0\", the value is 50.\nanswer = highest_rating\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [2, 6, 7]), (2, [1, 3, 8, 9]), (3, [5, 8]), (4, [0, 0, 2, 4, 5, 7, 7, 9]), (5, [0])]  \n\n# Initialize variable to track the highest rating  \nhighest_rating = 0  \n\n# Iterate through the stem and leaf data structure to find the highest rating  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        rating = stem * 10 + leaf  \n        if rating > highest_rating:  \n            highest_rating = rating  \n\nanswer = highest_rating  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [2, 6, 7]), (2, [1, 3, 8, 9]), (3, [5, 8]), (4, [0, 0, 2, 4, 5, 7, 7, 9]), (5, [0])]  \n\n# Initialize variable to store the highest rating  \nhighest_rating = 0  \n\n# Iterate through the stem and leaf data structure and find the highest rating  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        rating = stem * 10 + leaf  \n        if rating > highest_rating:  \n            highest_rating = rating  \n\nanswer = highest_rating  \nprint(answer)  # This will output the highest rating as an integer", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [2, 6, 7]), (2, [1, 3, 8, 9]), (3, [5, 8]), (4, [0, 0, 2, 4, 5, 7, 7, 9]), (5, [0])]  \n\n# Initialize highest rating as an integer  \nhighest_rating = 0  \n\n# Iterate through the stem and leaf data structure to find the highest rating  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        rating = stem * 10 + leaf  \n        if rating > highest_rating:  \n            highest_rating = rating  \n\nanswer = highest_rating  \nprint(answer)  # This will output the highest rating as an integer"
], "prediction": [50.0, 50.0, 50.0, 50.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nspool of metallic cord | $0.62\nfake red rose | $0.77\ntube of paste | $0.54\nspool of gold wire | $0.18\nspool of thread | $0.74", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nspool of metallic cord | $0.62\nfake red rose | $0.77\ntube of paste | $0.54\nspool of gold wire | $0.18\nspool of thread | $0.74\n\nHow much more does a spool of thread cost than a tube of paste?", "answer": "0.20", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_thread = 0.74 \ncost_paste = 0.54 \n# Calculate the difference in cost\ndifference_cost = cost_thread - cost_paste\nanswer = difference_cost\nprint(answer)", "cost_thread = 0.74 \ncost_paste = 0.54 \ndifference_cost = cost_thread - cost_paste\nanswer = round(difference_cost, 2)  # rounding to 2 decimal places for currency\nprint(answer)", "# Define the costs of the items\ncost_thread = 0.74 \ncost_paste = 0.54 \n\n# Calculate the difference in cost\ndifference_cost = cost_thread - cost_paste\n\n# Round the difference to 2 decimal places\nanswer = round(difference_cost, 2)  # rounding to 2 decimal places for currency\n\nprint(answer)", "cost_thread = 0.74 \ncost_paste = 0.54 \ndifference_cost = cost_thread - cost_paste\nanswer = format(difference_cost, '.2f')  # formatting to 2 decimal places for currency\nprint(answer)"], "prediction": [0.2, 0.2, 0.2, 0.2], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Toys per bin\" and then answer a question.\n\nStem | Leaf \n4 | 3, 3, 3, 3, 7, 8\n5 | 2, 2, 2, 4, 6\n6 | 2, 4, 6, 6\n7 | 2, 3\n8 | 0, 0, 2, 4, 5, 5", "question": "Read the following table regarding \"Toys per bin\" and then write Python code to answer a question.\n\nStem | Leaf \n4 | 3, 3, 3, 3, 7, 8\n5 | 2, 2, 2, 4, 6\n6 | 2, 4, 6, 6\n7 | 2, 3\n8 | 0, 0, 2, 4, 5, 5\n\nA toy store employee counted the number of toys in each bin in the sale section. How many bins had exactly 43 toys?", "answer": "4", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The stem-and-leaf display indicates the following number of toys in the bins:\ntoys_per_bin = [43, 43, 43, 43, 47, 48, \n                 52, 52, 52, 54, 56, \n                 62, 64, 66, 66, \n                 72, 73, \n                 80, 80, 82, 84, 85, 85]\n\n# Count how many bins had exactly 43 toys\nbins_with_43_toys = toys_per_bin.count(43)\nanswer = bins_with_43_toys\nprint(answer)", "toys_per_bin = [43, 43, 43, 43, 47, 48, \n                 52, 52, 52, 54, 56, \n                 62, 64, 66, 66, \n                 72, 73, \n                 80, 80, 82, 84, 85, 85]\nbins_with_43_toys = toys_per_bin.count(43)\nanswer = bins_with_43_toys\nprint(int(answer))  # Ensuring the output is an integer", "toys_per_bin = [43, 43, 43, 43, 47, 48, \n                 52, 52, 52, 54, 56, \n                 62, 64, 66, 66, \n                 72, 73, \n                 80, 80, 82, 84, 85, 85]\n\nbins_with_43_toys = toys_per_bin.count(43)\nanswer = bins_with_43_toys  # Store the count directly\nprint(answer)  # This will output: 4", "toys_per_bin = [43, 43, 43, 43, 47, 48, \n                 52, 52, 52, 54, 56, \n                 62, 64, 66, 66, \n                 72, 73, \n                 80, 80, 82, 84, 85, 85]\nbins_with_43_toys = toys_per_bin.count(43)\nanswer = int(bins_with_43_toys)  # Ensure the count is stored as an integer\nprint(answer)  # This will output: 4"
], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Balloons sold\" and then answer a question.\n\nDay | Number of balloons\nSunday | 564\nMonday | 193\nTuesday | 142\nWednesday | 251", "question": "Read the following table regarding \"Balloons sold\" and then write Python code to answer a question.\n\nDay | Number of balloons\nSunday | 564\nMonday | 193\nTuesday | 142\nWednesday | 251\n\nThe manager of a party supply store researched how many balloons it sold in the past 4 days. How many balloons in total did the store sell on Monday and Tuesday?", "answer": "335", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of balloons sold on Monday and Tuesday\nballoons_monday = 193\nballoons_tuesday = 142\n# Calculate the total balloons sold on Monday and Tuesday\ntotal_balloons_monday_tuesday = balloons_monday + balloons_tuesday\nanswer = total_balloons_monday_tuesday\nprint(answer)", "balloons_monday = 193\nballoons_tuesday = 142\ntotal_balloons_monday_tuesday = balloons_monday + balloons_tuesday\nanswer = total_balloons_monday_tuesday  # This will be an integer\nprint(answer)", "balloons_monday = 193\nballoons_tuesday = 142\ntotal_balloons_monday_tuesday = balloons_monday + balloons_tuesday\nanswer = total_balloons_monday_tuesday  # This will be an integer\nprint(answer)", "balloons_monday = 193\nballoons_tuesday = 142\ntotal_balloons_monday_tuesday = balloons_monday + balloons_tuesday\nanswer = total_balloons_monday_tuesday  # This will be an integer\nprint(answer)"], "prediction": [335.0, 335.0, 335.0, 335.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbottle of ketchup | $0.78\nbottle of hot sauce | $0.90\nbottle of mustard | $0.80\nbottle of soy sauce | $0.85\njar of tomato sauce | $0.63\njar of salsa | $0.96", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbottle of ketchup | $0.78\nbottle of hot sauce | $0.90\nbottle of mustard | $0.80\nbottle of soy sauce | $0.85\njar of tomato sauce | $0.63\njar of salsa | $0.96\n\nHow much money does Finn need to buy 2 bottles of mustard?", "answer": "1.60", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_bottle_mustard = 0.80 \nbottles_needed = 2 \n# Calculate the total cost\ntotal_cost = price_per_bottle_mustard * bottles_needed\nanswer = total_cost\nprint(answer)", "# Define the price per bottle of mustard and the number of bottles needed\nprice_per_bottle_mustard = 0.80\nbottles_needed = 2\n\n# Calculate the total cost\ntotal_cost = price_per_bottle_mustard * bottles_needed\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "price_per_bottle_mustard = 0.80\nbottles_needed = 2\ntotal_cost = price_per_bottle_mustard * bottles_needed\nanswer = f\"${total_cost:.2f}\"  # Format the total cost to two decimal places\nprint(answer)", "# Define the price per bottle of mustard and the number of bottles needed\nprice_per_bottle_mustard = 0.80\nbottles_needed = 2\n\n# Calculate the total cost\ntotal_cost = price_per_bottle_mustard * bottles_needed\n\n# Format the total cost to two decimal places and store it in the variable 'answer'\nanswer = f\"${total_cost:.2f}\"\n\n# Output the answer\nprint(answer)"], "prediction": [1.6, 1.6, "$1.60", "$1.60"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nromaine lettuce | $0.46/kilogram\nsummer crisp lettuce | $1.38/kilogram\nChinese lettuce | $1.19/kilogram\nbutterhead lettuce | $0.40/kilogram", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nromaine lettuce | $0.46/kilogram\nsummer crisp lettuce | $1.38/kilogram\nChinese lettuce | $1.19/kilogram\nbutterhead lettuce | $0.40/kilogram\n\nIf Isaiah buys 1 kilogram of romaine lettuce, how much will he spend?", "answer": "0.46", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_kilogram_romaine = 0.46 \nkilograms_bought = 1 \nanswer = price_per_kilogram_romaine * kilograms_bought\nprint(answer)", "# Define the price per kilogram of romaine lettuce  \nprice_per_kilogram_romaine = 0.46  \n\n# Define the number of kilograms bought  \nkilograms_bought = 1  \n\n# Calculate the total cost  \nanswer = price_per_kilogram_romaine * kilograms_bought  \n\n# Output the result  \nprint(answer)", "price_per_kilogram_romaine = 0.46  \nkilograms_bought = 1  \nanswer = price_per_kilogram_romaine * kilograms_bought  \nprint(answer)", "# Define the price per kilogram of romaine lettuce  \nprice_per_kilogram_romaine = 0.46  \n# Define the number of kilograms bought  \nkilograms_bought = 1  \n# Calculate the total cost  \nanswer = price_per_kilogram_romaine * kilograms_bought  \n# Output the answer  \nprint(answer)"], "prediction": [0.46, 0.46, 0.46, 0.46], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Trivia game scores\" and then answer a question.\n\nName | Score\nXavier | 2\nNatalie | 4\nBrendan | 7\nDalton | 2\nHazel | 7\nVictor | 7\nWinston | 4\nLillian | 7", "question": "Read the following table regarding \"Trivia game scores\" and then write Python code to answer a question.\n\nName | Score\nXavier | 2\nNatalie | 4\nBrendan | 7\nDalton | 2\nHazel | 7\nVictor | 7\nWinston | 4\nLillian | 7\n\nSome friends played a trivia game and recorded their scores. What is the mode of the numbers?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nfrom statistics import mode\n\n# List of scores\nscores = [2, 4, 7, 2, 7, 7, 4, 7]\n\n# Calculate the mode\nanswer = mode(scores)\nprint(answer)", "from statistics import mode\n\nscores = [2, 4, 7, 2, 7, 7, 4, 7]\nanswer = int(mode(scores))  # Convert the mode to an integer\nprint(answer)", "from statistics import mode\n\n# List of scores from the trivia game\nscores = [2, 4, 7, 2, 7, 7, 4, 7]\n\n# Calculate the mode of the scores\nanswer = mode(scores)  # mode function returns the mode directly as an integer\n\nprint(answer)", "from statistics import mode\n\nscores = [2, 4, 7, 2, 7, 7, 4, 7]\nanswer = int(mode(scores))  # Convert the mode result to an integer\nprint(answer)"], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Doing pull-ups\" and then answer a question.\n\nNumber of pull-ups | Frequency\n0 | 18\n1 | 7\n2 | 5\n3 | 13", "question": "Read the following table regarding \"Doing pull-ups\" and then write Python code to answer a question.\n\nNumber of pull-ups | Frequency\n0 | 18\n1 | 7\n2 | 5\n3 | 13\n\nMolly, a fitness counselor, counted the number of pull-ups completed by each bootcamp participant. How many participants did more than 1 pull-up?", "answer": "18", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of participants doing more than 1 pull-up\nparticipants_more_than_1 = 5 + 13  # 2 pull-ups and 3 pull-ups\nanswer = participants_more_than_1\nprint(answer)", "# Define the frequency of participants for each number of pull-ups\nfrequency = {0: 18, 1: 7, 2: 5, 3: 13}\n\n# Calculate the number of participants who did more than 1 pull-up\nparticipants_more_than_1 = frequency[2] + frequency[3]\nanswer = participants_more_than_1\nprint(answer)", "frequency = {0: 18, 1: 7, 2: 5, 3: 13}\nparticipants_more_than_1 = frequency[2] + frequency[3]\nanswer = int(participants_more_than_1)  # Ensure the answer is an integer\nprint(answer)", "# Define the frequency of pull-ups completed by participants\nfrequency = {0: 18, 1: 7, 2: 5, 3: 13}\n\n# Calculate the number of participants who did more than 1 pull-up\nparticipants_more_than_1 = frequency[2] + frequency[3]\n\n# Store the result in the variable 'answer'\nanswer = participants_more_than_1\n\n# Output the answer\nprint(answer)"], "prediction": [18.0, 18.0, 18.0, 18.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nshapes stencil | $0.07\nwooden block | $0.01\nred kazoo | $0.03\ngreen bouncy ball | $0.06", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nshapes stencil | $0.07\nwooden block | $0.01\nred kazoo | $0.03\ngreen bouncy ball | $0.06\n\nHow much money does Jasmine need to buy a wooden block, a shapes stencil, and a green bouncy ball?", "answer": "0.14", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nprice_shapes_stencil = 0.07\nprice_wooden_block = 0.01\nprice_green_bouncy_ball = 0.06\n\n# Total cost\ntotal_cost = price_shapes_stencil + price_wooden_block + price_green_bouncy_ball\nanswer = total_cost\nprint(answer)", "# Define the prices of the items\nprice_shapes_stencil = 0.07\nprice_wooden_block = 0.01\nprice_green_bouncy_ball = 0.06\n\n# Calculate the total cost\ntotal_cost = price_shapes_stencil + price_wooden_block + price_green_bouncy_ball\nanswer = total_cost\n\nprint(answer)", "# Prices of the items Jasmine wants to buy\nprice_shapes_stencil = 0.07\nprice_wooden_block = 0.01\nprice_green_bouncy_ball = 0.06\n\n# Calculate the total cost\ntotal_cost = price_shapes_stencil + price_wooden_block + price_green_bouncy_ball\nanswer = total_cost\n\nprint(answer)", "# Define the prices of the items\nprice_shapes_stencil = 0.07\nprice_wooden_block = 0.01\nprice_green_bouncy_ball = 0.06\n\n# Calculate the total cost for the specified items\ntotal_cost = price_shapes_stencil + price_wooden_block + price_green_bouncy_ball\nanswer = total_cost\n\nprint(answer)  # Output the answer"], "prediction": [0.14, 0.14, 0.14, 0.14], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npiece of pink paper | $0.55\nsheet of green paper | $0.43\npiece of floral stationery | $0.42\npiece of polka-dotted paper | $0.10\nsheet of shiny silver paper | $0.78\npiece of elegant stationery | $0.10", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npiece of pink paper | $0.55\nsheet of green paper | $0.43\npiece of floral stationery | $0.42\npiece of polka-dotted paper | $0.10\nsheet of shiny silver paper | $0.78\npiece of elegant stationery | $0.10\n\nHow much money does Polly need to buy a piece of elegant stationery and a piece of polka-dotted paper?", "answer": "0.20", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices of the items\nprice_elegant_stationery = 0.10 \nprice_polka_dotted_paper = 0.10 \n\n# Total cost for Polly to buy both items\ntotal_cost = price_elegant_stationery + price_polka_dotted_paper\nanswer = total_cost\nprint(answer)", "# Define the prices for the items Polly wants to buy\nprice_elegant_stationery = 0.10  # Price of a piece of elegant stationery\nprice_polka_dotted_paper = 0.10    # Price of a piece of polka-dotted paper\n\n# Calculate the total cost\ntotal_cost = price_elegant_stationery + price_polka_dotted_paper\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the correct prices for the items\nprice_elegant_stationery = 0.10  # Price of a piece of elegant stationery\nprice_polka_dotted_paper = 0.10    # Price of a piece of polka-dotted paper\n\n# Calculate the total cost\ntotal_cost = price_elegant_stationery + price_polka_dotted_paper\nanswer = total_cost\n\nprint(answer)", "# Prices of the items from the table\nprice_elegant_stationery = 0.10  # Price of a piece of elegant stationery\nprice_polka_dotted_paper = 0.10    # Price of a piece of polka-dotted paper\n\n# Calculate total cost\ntotal_cost = price_elegant_stationery + price_polka_dotted_paper\nanswer = total_cost\n\nprint(answer)  # This will correctly output 0.2"
], "prediction": [0.2, 0.2, 0.2, 0.2], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Restaurant ratings\" and then answer a question.\n\nStem | Leaf \n1 | 6, 6\n2 | 3\n3 | 4, 6\n4 | \n5 | 0", "question": "Read the following table regarding \"Restaurant ratings\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 6, 6\n2 | 3\n3 | 4, 6\n4 | \n5 | 0\n\nA food magazine published a listing of local restaurant ratings. What is the highest rating?", "answer": "50", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The highest rating corresponds to the largest value in the stem-and-leaf display.\nhighest_rating = 50  # From the stem \"5 | 0\", the value is 50.\nanswer = highest_rating\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(1, [6, 6]), (2, [3]), (3, [4, 6]), (4, []), (5, [0])]\n\n# Initialize variable to keep track of the highest rating\nhighest_rating = 0\n\n# Iterate through the stem and leaf data structure to find the highest rating\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        rating = stem * 10 + leaf\n        if rating > highest_rating:\n            highest_rating = rating\n\n# Also consider the case where leaves are empty\nfor stem in stem_and_leaf:\n    if stem[0] == 5:  # The stem '5' corresponds to the highest potential rating\n        highest_rating = max(highest_rating, stem[0] * 10)  # This corresponds to 50\n\nanswer = highest_rating\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [6, 6]), (2, [3]), (3, [4, 6]), (4, []), (5, [0])]  \n\n# Initialize highest rating variable  \nhighest_rating = 0  \n\n# Iterate through the stem and leaf data structure to find the highest rating  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        rating = stem * 10 + leaf  \n        if rating > highest_rating:  \n            highest_rating = rating  \n    # Check for leaves in stem 5 to determine if there's a higher rating  \n    if stem == 5:  \n        for leaf in leaf_list:  \n            rating = stem * 10 + leaf  \n            if rating > highest_rating:  \n                highest_rating = rating  \n\nanswer = highest_rating  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [6, 6]), (2, [3]), (3, [4, 6]), (4, []), (5, [0])]  \n\n# Initialize variable to keep track of the highest rating  \nhighest_rating = 0  \n\n# Iterate through the stem and leaf data structure and find the highest rating  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        rating = stem * 10 + leaf  \n        if rating > highest_rating:  \n            highest_rating = rating  \n\nanswer = highest_rating  \nprint(answer)"
], "prediction": [50.0, 50.0, 50.0, 50.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"New cable customers\" and then answer a question.\n\nDay | Number of new customers\nWednesday | 131\nThursday | 114\nFriday | 141\nSaturday | 134", "question": "Read the following table regarding \"New cable customers\" and then write Python code to answer a question.\n\nDay | Number of new customers\nWednesday | 131\nThursday | 114\nFriday | 141\nSaturday | 134\n\nA cable company analyst paid attention to how many new customers it had each day. On which day did the cable company have the fewest new customers? Choose from the the options: ['Wednesday', 'Thursday', 'Friday', 'Saturday']", "answer": "Thursday", "ques_type": "multi_choice", "choices": ["Wednesday", "Thursday", "Friday", "Saturday"], "code": ["# Python code, return answer \nnew_customers = {\n    'Wednesday': 131,\n    'Thursday': 114,\n    'Friday': 141,\n    'Saturday': 134\n}\n# Find the day with the fewest new customers\nfewest_customers_day = min(new_customers, key=new_customers.get)\nanswer = fewest_customers_day\nprint(answer)", "new_customers = {\n    'Wednesday': 131,\n    'Thursday': 114,\n    'Friday': 141,\n    'Saturday': 134\n}\nfewest_customers_day = min(new_customers, key=new_customers.get)\nanswer = fewest_customers_day\nprint(answer)  # This will output the day with the fewest new customers", "# Define the number of new customers for each day in a dictionary\nnew_customers = {\n    'Wednesday': 131,\n    'Thursday': 114,\n    'Friday': 141,\n    'Saturday': 134\n}\n\n# Find the day with the fewest new customers\nfewest_customers_day = min(new_customers, key=new_customers.get)\nanswer = fewest_customers_day\n\nprint(answer)  # This will output the day with the fewest new customers", "# Define the dictionary with the number of new customers for each day\nnew_customers = {\n    'Wednesday': 131,\n    'Thursday': 114,\n    'Friday': 141,\n    'Saturday': 134\n}\n\n# Find the day with the fewest new customers\nfewest_customers_day = min(new_customers, key=new_customers.get)\n\n# Store the result in the variable 'answer'\nanswer = fewest_customers_day\n\n# Output the answer\nprint(answer)  # This will output the day with the fewest new customers"], "prediction": ["Thursday", "Thursday", "Thursday", "Thursday"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n11 | 6\n5 | 13\n20 | 15", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n11 | 6\n5 | 13\n20 | 15\n\nLook at this table. Is this relation a function? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# A relation is a function if each input (x) maps to exactly one output (y).\n# In this case, the x-values are 11, 5, and 20. All x-values are unique.\nx_values = [11, 5, 20]\ny_values = [6, 13, 15]\n\n# Checking if each x-value is unique\nis_function = len(x_values) == len(set(x_values))\nanswer = 'yes' if is_function else 'no'\nprint(answer)", "# Define the relation as a list of tuples (x, y)  \nrelation = [(11, 6), (5, 13), (20, 15)]  \n\n# Create a set to track unique x-values  \nx_values = set()  \nis_function = True  \n\nfor x, y in relation:  \n    if x in x_values:  \n        is_function = False  # If x is already in the set, it's not a function  \n        break  \n    x_values.add(x)  # Add x to the set  \n\nanswer = 'yes' if is_function else 'no'  \nprint(answer)", "# Define the relation as a list of tuples\nrelation = [(11, 6), (5, 13), (20, 15)]\n\n# Check if the relation is a function\nx_values = set()\nis_function = True\n\nfor x, y in relation:\n    if x in x_values:\n        is_function = False  # If x is already in the set, it's not a function\n        break\n    x_values.add(x)  # Add x to the set\n\n# Since all x-values are unique, the relation is a function\nanswer = 'yes' if is_function else 'no'\nprint(answer)", "relation = [(11, 6), (5, 13), (20, 15)]\nx_values = set()\nis_function = True\n\nfor x, y in relation:\n    if x in x_values:\n        is_function = False  # If x is already in the set, it's not a function\n        break\n    x_values.add(x)  # Add x to the set\n\nanswer = 'yes' if is_function else 'no'\nprint(answer)"
], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Weight of winning dog at a dog show\" and then answer a question.\n\nYear | Weight (kg)\n2009 | 25\n2010 | 24\n2011 | 32\n2012 | 30\n2013 | 38", "question": "Read the following table regarding \"Weight of winning dog at a dog show\" and then write Python code to answer a question.\n\nYear | Weight (kg)\n2009 | 25\n2010 | 24\n2011 | 32\n2012 | 30\n2013 | 38\n\nA dog show enthusiast recorded the weight of the winning dog at recent dog shows. According to the table, what was the rate of change between 2011 and 2012?", "answer": "-2", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nweight_2011 = 32  # weight in kg for the year 2011\nweight_2012 = 30  # weight in kg for the year 2012\n\n# Calculate the rate of change\nrate_of_change = weight_2012 - weight_2011\nanswer = rate_of_change\nprint(answer)", "weight_2011 = 32  # weight in kg for the year 2011\nweight_2012 = 30  # weight in kg for the year 2012\nyear_2011 = 2011\nyear_2012 = 2012\n\n# Calculate the rate of change\nrate_of_change = (weight_2012 - weight_2011) / (year_2012 - year_2011)\nanswer = rate_of_change\nprint(answer)", "weight_2011 = 32  # weight in kg for the year 2011\nweight_2012 = 30  # weight in kg for the year 2012\nyear_2011 = 2011\nyear_2012 = 2012\nrate_of_change = (weight_2012 - weight_2011) / (year_2012 - year_2011)\nanswer = rate_of_change\nprint(answer)", "weight_2011 = 32  # weight in kg for the year 2011\nweight_2012 = 30  # weight in kg for the year 2012\nyear_2011 = 2011\nyear_2012 = 2012\n\n# Calculate the rate of change\nrate_of_change = (weight_2012 - weight_2011) / (year_2012 - year_2011)\n\n# Prepare a more informative answer\nanswer = f\"The rate of change in weight of the winning dog from 2011 to 2012 is {rate_of_change} kg/year.\"\nprint(answer)"], "prediction": [-2.0, -2.0, -2.0, "The rate of change in weight of the winning dog from 2011 to 2012 is -2.0 kg/year."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ndark chocolate chips | $3.34/kg\nsemisweet chocolate chips | $1.51/kg\npeanut butter chips | $2.25/kg\nmilk chocolate chips | $1.53/kg\nbutterscotch chips | $3.25/kg", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ndark chocolate chips | $3.34/kg\nsemisweet chocolate chips | $1.51/kg\npeanut butter chips | $2.25/kg\nmilk chocolate chips | $1.53/kg\nbutterscotch chips | $3.25/kg\n\nCharlotte went to the store. She bought 2 kilograms of semisweet chocolate chips and 2 kilograms of butterscotch chips. How much did she spend?", "answer": "9.52", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices per kilogram\nprice_semisweet = 1.51\nprice_butterscotch = 3.25\n\n# Kilograms bought\nkilograms_bought = 2\n\n# Total cost calculation\ntotal_cost = (price_semisweet * kilograms_bought) + (price_butterscotch * kilograms_bought)\nanswer = total_cost\nprint(answer)", "# Define the prices per kilogram for each type of chocolate chip\nprice_semisweet = 1.51\nprice_butterscotch = 3.25\n\n# Define the quantity bought for each type\nkilograms_semisweet = 2\nkilograms_butterscotch = 2\n\n# Calculate the total cost for each type of chocolate chip\ntotal_cost_semisweet = price_semisweet * kilograms_semisweet\ntotal_cost_butterscotch = price_butterscotch * kilograms_butterscotch\n\n# Calculate the total cost spent by Charlotte\ntotal_cost = total_cost_semisweet + total_cost_butterscotch\nanswer = total_cost\n\nprint(answer)", "# Prices per kilogram\nprice_semisweet = 1.51  # semisweet chocolate chips\nprice_butterscotch = 3.25  # butterscotch chips\n\n# Quantity purchased in kilograms\nkilograms_semisweet = 2\nkilograms_butterscotch = 2\n\n# Calculate total cost for each type of chip\ntotal_cost_semisweet = price_semisweet * kilograms_semisweet\ntotal_cost_butterscotch = price_butterscotch * kilograms_butterscotch\n\n# Calculate total cost\ntotal_cost = total_cost_semisweet + total_cost_butterscotch\n\n# Store result in answer variable\nanswer = total_cost\nprint(answer)", "# Prices per kilogram\nprice_semisweet_chips = 1.51  # semisweet chocolate chips\nprice_butterscotch_chips = 3.25  # butterscotch chips\n\n# Quantities purchased\nkilograms_semisweet = 2\nkilograms_butterscotch = 2\n\n# Calculate total costs\ntotal_cost_semisweet = price_semisweet_chips * kilograms_semisweet\ntotal_cost_butterscotch = price_butterscotch_chips * kilograms_butterscotch\n\n# Total cost\ntotal_cost = total_cost_semisweet + total_cost_butterscotch\nanswer = total_cost\n\nprint(answer)"
], "prediction": [9.52, 9.52, 9.52, 9.52], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nred wagon | $32\nmodel airplane | $41\nmodel railroad set | $98\ntrivia game | $34\nremote control car | $27", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nred wagon | $32\nmodel airplane | $41\nmodel railroad set | $98\ntrivia game | $34\nremote control car | $27\n\nHow much money does Lara need to buy a red wagon and a model railroad set?", "answer": "130", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nprice_red_wagon = 32 \nprice_model_railroad_set = 98 \n# Total cost for both items\ntotal_cost = price_red_wagon + price_model_railroad_set\nanswer = total_cost\nprint(answer)", "price_red_wagon = 32 \nprice_model_railroad_set = 98 \ntotal_cost = price_red_wagon + price_model_railroad_set\nanswer = int(total_cost)  # Convert to integer if needed\nprint(answer)", "# Define the prices of the items\nprice_red_wagon = 32 \nprice_model_railroad_set = 98 \n\n# Calculate the total cost\ntotal_cost = price_red_wagon + price_model_railroad_set\n\n# Store the result in the variable 'answer'\nanswer = total_cost  \n\n# Print the answer\nprint(answer)", "# Prices of the items\nprice_red_wagon = 32.00\nprice_model_railroad_set = 98.00\n\n# Calculate the total cost\ntotal_cost = price_red_wagon + price_model_railroad_set\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer formatted as a monetary value\nprint(f\"${answer:.2f}\")"], "prediction": [130.0, 130.0, 130.0, 130.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npeanut butter cookie dough | $3 per kilogram\nsnickerdoodle cookie dough | $3 per kilogram\ndouble chocolate cookie dough | $2 per kilogram\ngingersnap cookie dough | $3 per kilogram\nchocolate chip cookie dough | $2 per kilogram", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npeanut butter cookie dough | $3 per kilogram\nsnickerdoodle cookie dough | $3 per kilogram\ndouble chocolate cookie dough | $2 per kilogram\ngingersnap cookie dough | $3 per kilogram\nchocolate chip cookie dough | $2 per kilogram\n\nDillon purchased 5 kilograms of chocolate chip cookie dough, 1 kilogram of gingersnap cookie dough, and 5 kilograms of peanut butter cookie dough. What was the total cost?", "answer": "28", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices per kilogram\nprice_chocolate_chip = 2 \nprice_gingersnap = 3 \nprice_peanut_butter = 3 \n\n# Quantities purchased\nkg_chocolate_chip = 5 \nkg_gingersnap = 1 \nkg_peanut_butter = 5 \n\n# Total cost calculation\ntotal_cost = (kg_chocolate_chip * price_chocolate_chip) + (kg_gingersnap * price_gingersnap) + (kg_peanut_butter * price_peanut_butter)\nanswer = total_cost\nprint(answer)", "# Define the prices per kilogram for each type of cookie dough\nprice_per_kg = {\n    'chocolate chip': 2,\n    'gingersnap': 3,\n    'peanut butter': 3\n}\n\n# Define the quantities purchased in kilograms\nquantities = {\n    'chocolate chip': 5,\n    'gingersnap': 1,\n    'peanut butter': 5\n}\n\n# Calculate the total cost\ntotal_cost = sum(quantities[cookie] * price_per_kg[cookie] for cookie in quantities)\nanswer = total_cost\n\nprint(answer)", "# Define the prices per kilogram\nprice_chocolate_chip = 2  # $2 per kilogram\nprice_gingersnap = 3      # $3 per kilogram\nprice_peanut_butter = 3   # $3 per kilogram\n\n# Define the quantities purchased\nkg_chocolate_chip = 5    # 5 kilograms\nkg_gingersnap = 1        # 1 kilogram\nkg_peanut_butter = 5     # 5 kilograms\n\n# Calculate the total cost\ntotal_cost = (kg_chocolate_chip * price_chocolate_chip) + (kg_gingersnap * price_gingersnap) + (kg_peanut_butter * price_peanut_butter)\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "# Prices per kilogram\nprice_chocolate_chip = 2  # $2 per kilogram\nprice_gingersnap = 3      # $3 per kilogram\nprice_peanut_butter = 3   # $3 per kilogram\n\n# Quantities purchased\nkg_chocolate_chip = 5    # 5 kilograms\nkg_gingersnap = 1        # 1 kilogram\nkg_peanut_butter = 5     # 5 kilograms\n\n# Calculate total cost\ntotal_cost = (kg_chocolate_chip * price_chocolate_chip) + (kg_gingersnap * price_gingersnap) + (kg_peanut_butter * price_peanut_butter)\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)"
], "prediction": [28.0, null, 28.0, 28.0], "report": ["Done", "NameError(\"name 'quantities' is not defined\")", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Stop signs\" and then answer a question.\n\nStreet | Number of stop signs\nWatson Street | 10\nWalker Street | 4\nMason Street | 9\nPeabody Street | 5\nSpring Street | 7\nSmith Street | 7\nJackson Street | 9\nMarshall Street | 5", "question": "Read the following table regarding \"Stop signs\" and then write Python code to answer a question.\n\nStreet | Number of stop signs\nWatson Street | 10\nWalker Street | 4\nMason Street | 9\nPeabody Street | 5\nSpring Street | 7\nSmith Street | 7\nJackson Street | 9\nMarshall Street | 5\n\nThe town council reported on how many stop signs there are on each street. What is the mean of the numbers?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of stop signs on each street\nstop_signs = [10, 4, 9, 5, 7, 7, 9, 5]\n# Calculate the mean\nmean_stop_signs = sum(stop_signs) / len(stop_signs)\nanswer = mean_stop_signs\nprint(answer)", "", "stop_signs = [10, 4, 9, 5, 7, 7, 9, 5]\nmean_stop_signs = sum(stop_signs) / len(stop_signs)\nanswer = round(mean_stop_signs, 2)  # Round to two decimal places for clarity\nprint(answer)", "stop_signs = [10, 4, 9, 5, 7, 7, 9, 5]\nmean_stop_signs = sum(stop_signs) / len(stop_signs)\nanswer = mean_stop_signs  # Assign the mean directly to answer\nprint(answer)"], "prediction": [7.0, null, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Cars sold\" and then answer a question.\n\nMonth | Number of cars\nMay | 249\nJune | 245\nJuly | 254\nAugust | 225", "question": "Read the following table regarding \"Cars sold\" and then write Python code to answer a question.\n\nMonth | Number of cars\nMay | 249\nJune | 245\nJuly | 254\nAugust | 225\n\nA car dealership tracked the number of cars sold each month. In which month did the dealership sell the fewest cars? Choose from the the options: ['May', 'June', 'July', 'August']", "answer": "August", "ques_type": "multi_choice", "choices": ["May", "June", "July", "August"], "code": ["# Python code, return answer \ncars_sold = {\n    'May': 249,\n    'June': 245,\n    'July': 254,\n    'August': 225\n}\n# Find the month with the fewest cars sold\nfewest_cars_month = min(cars_sold, key=cars_sold.get)\nanswer = fewest_cars_month\nprint(answer)", "# Store the number of cars sold each month in a dictionary\ncars_sold = {\n    'May': 249,\n    'June': 245,\n    'July': 254,\n    'August': 225\n}\n\n# Find the month with the fewest cars sold\nfewest_cars_month = min(cars_sold, key=cars_sold.get)\nanswer = fewest_cars_month\nprint(answer)  # This will correctly output the month with the fewest cars sold", "# Store the number of cars sold each month in a dictionary\ncars_sold = {\n    'May': 249,\n    'June': 245,\n    'July': 254,\n    'August': 225\n}\n\n# Determine the month with the fewest cars sold\nfewest_cars_month = min(cars_sold, key=cars_sold.get)\n\n# Assign the result to the variable 'answer'\nanswer = fewest_cars_month\n\n# Output the answer\nprint(answer)", "# Store the number of cars sold each month in a dictionary\ncars_sold = {\n    'May': 249,\n    'June': 245,\n    'July': 254,\n    'August': 225\n}\n\n# Find the month with the fewest cars sold\nfewest_cars_month = min(cars_sold, key=cars_sold.get)\n\n# Store the result in the variable 'answer'\nanswer = fewest_cars_month\n\n# Print the answer\nprint(answer)"], "prediction": ["August", "August", "August", "August"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of toy bins | Number of yellow blocks\n1 | 10\n2 | 20\n3 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of toy bins | Number of yellow blocks\n1 | 10\n2 | 20\n3 | ?\n\nEach toy bin has 10 yellow blocks. How many yellow blocks are in 3 toy bins?", "answer": "30", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of yellow blocks per toy bin\nyellow_blocks_per_bin = 10\n# Calculate total yellow blocks in 3 toy bins\nnumber_of_bins = 3\nanswer = yellow_blocks_per_bin * number_of_bins\nprint(answer)", "yellow_blocks_per_bin = 10\nnumber_of_bins = 3\nanswer = int(yellow_blocks_per_bin * number_of_bins)  # Convert to integer\nprint(answer)", "yellow_blocks_per_bin = 10\nnumber_of_bins = 3\nanswer = yellow_blocks_per_bin * number_of_bins  # This will naturally be an integer\nprint(answer)", "yellow_blocks_per_bin = 10\nnumber_of_bins = 3\nanswer = yellow_blocks_per_bin * number_of_bins  # This will naturally be an integer\nprint(int(answer))  # Convert the result to an integer for a cleaner output"], "prediction": [30.0, 30.0, 30.0, 30.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ngreen colored pencil | $0.76\nthick black marker | $0.45\npackage of pencil lead | $0.71\nmechanical pencil | $0.42\npurple colored pencil | $0.94", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ngreen colored pencil | $0.76\nthick black marker | $0.45\npackage of pencil lead | $0.71\nmechanical pencil | $0.42\npurple colored pencil | $0.94\n\nHow much money does Brennan need to buy a green colored pencil and a purple colored pencil?", "answer": "1.70", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_green_colored_pencil = 0.76 \nprice_purple_colored_pencil = 0.94 \n# Total cost for both colored pencils\ntotal_cost = price_green_colored_pencil + price_purple_colored_pencil\nanswer = total_cost\nprint(answer)", "price_green_colored_pencil = 0.76 \nprice_purple_colored_pencil = 0.94 \ntotal_cost = price_green_colored_pencil + price_purple_colored_pencil\nanswer = \"{:.2f}\".format(total_cost)  # Format the total cost to two decimal places\nprint(answer)", "# Define the prices of the colored pencils\nprice_green_colored_pencil = 0.76 \nprice_purple_colored_pencil = 0.94 \n\n# Calculate the total cost\ntotal_cost = price_green_colored_pencil + price_purple_colored_pencil\n\n# Format the total cost to two decimal places and store it in 'answer'\nanswer = \"{:.2f}\".format(total_cost)\n\n# Output the answer\nprint(answer)", "price_green_colored_pencil = 0.76\nprice_purple_colored_pencil = 0.94\ntotal_cost = price_green_colored_pencil + price_purple_colored_pencil\nanswer = \"{:.2f}\".format(total_cost)\nprint(answer)"], "prediction": [1.7, 1.7, 1.7, 1.7], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Train schedule\" and then answer a question.\n\nLocation | Arrive | Depart\nHillsboro | 9:55 A.M. | 10:20 A.M.\nCampbell | 11:20 A.M. | 11:50 A.M.\nLexington | 1:30 P.M. | 1:45 P.M.\nWestminster | 3:00 P.M. | 3:30 P.M.\nWinchester | 5:05 P.M. | 5:25 P.M.\nDayton | 6:40 P.M. | 6:55 P.M.\nKensington | 8:30 P.M. | 8:55 P.M.\nManchester | 10:35 P.M. | 10:55 P.M.\nLowell | 12:15 A.M. | 12:40 A.M.\nWeston | 1:35 A.M. | 2:05 A.M.", "question": "Read the following table regarding \"Train schedule\" and then write Python code to answer a question.\n\nLocation | Arrive | Depart\nHillsboro | 9:55 A.M. | 10:20 A.M.\nCampbell | 11:20 A.M. | 11:50 A.M.\nLexington | 1:30 P.M. | 1:45 P.M.\nWestminster | 3:00 P.M. | 3:30 P.M.\nWinchester | 5:05 P.M. | 5:25 P.M.\nDayton | 6:40 P.M. | 6:55 P.M.\nKensington | 8:30 P.M. | 8:55 P.M.\nManchester | 10:35 P.M. | 10:55 P.M.\nLowell | 12:15 A.M. | 12:40 A.M.\nWeston | 1:35 A.M. | 2:05 A.M.\n\nLook at the following schedule. When does the train depart from Winchester? Choose from the the options: ['8:55 P.M.', '5:05 P.M.', '5:25 P.M.', '3:30 P.M.']", "answer": "5:25 P.M.", "ques_type": "multi_choice", "choices": ["8:55 P.M.", "5:05 P.M.", "5:25 P.M.", "3:30 P.M."], "code": [
  "# Python code, return answer \n# Departure time from Winchester\ndepart_winchester = '5:25 P.M.'\nanswer = depart_winchester\nprint(answer)", "# Define the train schedule using a dictionary\ntrain_schedule = {\n    'Hillsboro': {'Arrive': '9:55 A.M.', 'Depart': '10:20 A.M.'},\n    'Campbell': {'Arrive': '11:20 A.M.', 'Depart': '11:50 A.M.'},\n    'Lexington': {'Arrive': '1:30 P.M.', 'Depart': '1:45 P.M.'},\n    'Westminster': {'Arrive': '3:00 P.M.', 'Depart': '3:30 P.M.'},\n    'Winchester': {'Arrive': '5:05 P.M.', 'Depart': '5:25 P.M.'},\n    'Dayton': {'Arrive': '6:40 P.M.', 'Depart': '6:55 P.M.'},\n    'Kensington': {'Arrive': '8:30 P.M.', 'Depart': '8:55 P.M.'},\n    'Manchester': {'Arrive': '10:35 P.M.', 'Depart': '10:55 P.M.'},\n    'Lowell': {'Arrive': '12:15 A.M.', 'Depart': '12:40 A.M.'},\n    'Weston': {'Arrive': '1:35 A.M.', 'Depart': '2:05 A.M.'}\n}\n\n# Retrieve the departure time for Winchester\ndepart_winchester = train_schedule['Winchester']['Depart']\nanswer = depart_winchester\nprint(answer)", "# Define the train schedule as a dictionary\ntrain_schedule = {\n    'Hillsboro': {'Arrive': '9:55 A.M.', 'Depart': '10:20 A.M.'},\n    'Campbell': {'Arrive': '11:20 A.M.', 'Depart': '11:50 A.M.'},\n    'Lexington': {'Arrive': '1:30 P.M.', 'Depart': '1:45 P.M.'},\n    'Westminster': {'Arrive': '3:00 P.M.', 'Depart': '3:30 P.M.'},\n    'Winchester': {'Arrive': '5:05 P.M.', 'Depart': '5:25 P.M.'},\n    'Dayton': {'Arrive': '6:40 P.M.', 'Depart': '6:55 P.M.'},\n    'Kensington': {'Arrive': '8:30 P.M.', 'Depart': '8:55 P.M.'},\n    'Manchester': {'Arrive': '10:35 P.M.', 'Depart': '10:55 P.M.'},\n    'Lowell': {'Arrive': '12:15 A.M.', 'Depart': '12:40 A.M.'},\n    'Weston': {'Arrive': '1:35 A.M.', 'Depart': '2:05 A.M.'}\n}\n\n# Retrieve the departure time for Winchester\ndepart_winchester = train_schedule['Winchester']['Depart']\nanswer = depart_winchester\n\nprint(answer)", "train_schedule = {\n    'Hillsboro': {'Arrive': '9:55 A.M.', 'Depart': '10:20 A.M.'},\n    'Campbell': {'Arrive': '11:20 A.M.', 'Depart': '11:50 A.M.'},\n    'Lexington': {'Arrive': '1:30 P.M.', 'Depart': '1:45 P.M.'},\n    'Westminster': {'Arrive': '3:00 P.M.', 'Depart': '3:30 P.M.'},\n    'Winchester': {'Arrive': '5:05 P.M.', 'Depart': '5:25 P.M.'},\n    'Dayton': {'Arrive': '6:40 P.M.', 'Depart': '6:55 P.M.'},\n    'Kensington': {'Arrive': '8:30 P.M.', 'Depart': '8:55 P.M.'},\n    'Manchester': {'Arrive': '10:35 P.M.', 'Depart': '10:55 P.M.'},\n    'Lowell': {'Arrive': '12:15 A.M.', 'Depart': '12:40 A.M.'},\n    'Weston': {'Arrive': '1:35 A.M.', 'Depart': '2:05 A.M.'}\n}\n\n# Retrieve the departure time from Winchester\ndepart_winchester = train_schedule['Winchester']['Depart']\nanswer = f\"The train departs from Winchester at {depart_winchester}.\"\nprint(answer)"
], "prediction": ["5:25 P.M.", "5:25 P.M.", "5:25 P.M.", "The train departs from Winchester at 5:25 P.M.."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Amount Felipe spent on lunch\" and then answer a question.\n\nDay | Amount spent\nMonday | $5\nTuesday | $5\nWednesday | $3\nThursday | $7\nFriday | $8", "question": "Read the following table regarding \"Amount Felipe spent on lunch\" and then write Python code to answer a question.\n\nDay | Amount spent\nMonday | $5\nTuesday | $5\nWednesday | $3\nThursday | $7\nFriday | $8\n\nIn trying to calculate how much money could be saved by packing lunch, Felipe recorded the amount he spent on lunch each day. According to the table, what was the rate of change between Wednesday and Thursday?", "answer": "4", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Amount spent on lunch\nwednesday_amount = 3  # Wednesday\nthursday_amount = 7    # Thursday\n\n# Calculate the rate of change between Wednesday and Thursday\nrate_of_change = thursday_amount - wednesday_amount\nanswer = rate_of_change\nprint(answer)", "wednesday_amount = 3  # Amount spent on Wednesday\nthursday_amount = 7    # Amount spent on Thursday\nrate_of_change = thursday_amount - wednesday_amount\nanswer = rate_of_change\nprint(answer)", "# Amount spent on lunch each day\nwednesday_amount = 3  # Amount spent on Wednesday\nthursday_amount = 7    # Amount spent on Thursday\n\n# Calculate the rate of change from Wednesday to Thursday\nrate_of_change = thursday_amount - wednesday_amount\n\n# Store the result in an answer variable\nanswer = f\"The rate of change in amount spent on lunch from Wednesday to Thursday is ${rate_of_change}.\"\nprint(answer)", "wednesday_amount = 3  # Amount spent on Wednesday\nthursday_amount = 7    # Amount spent on Thursday\n\n# Calculate the rate of change\nrate_of_change = thursday_amount - wednesday_amount\n\n# Calculate the percentage change relative to Wednesday's spending\npercentage_change = (rate_of_change / wednesday_amount) * 100 if wednesday_amount != 0 else 0\n\nanswer = f\"The rate of change in amount spent on lunch from Wednesday to Thursday is ${rate_of_change}, which is a {percentage_change:.2f}% increase.\"\nprint(answer)"], "prediction": [4.0, 4.0, "The rate of change in amount spent on lunch from Wednesday to Thursday is $4.", "The rate of change in amount spent on lunch from Wednesday to Thursday is $4, which is a 133.33% increase."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Making finger puppets\" and then answer a question.\n\nFinger puppets made | Frequency\n0 | 12\n1 | 16\n2 | 14\n3 | 2\n4 | 9", "question": "Read the following table regarding \"Making finger puppets\" and then write Python code to answer a question.\n\nFinger puppets made | Frequency\n0 | 12\n1 | 16\n2 | 14\n3 | 2\n4 | 9\n\nThe Kingwood Art Museum recorded how many finger puppets the children made at last Sunday's art workshop. How many children made exactly 1 finger puppet?", "answer": "16", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# From the table, we can directly see the frequency of children who made 1 finger puppet.\nchildren_made_one_puppet = 16\nanswer = children_made_one_puppet\nprint(answer)", "# Store the frequency of children making finger puppets in a dictionary\nfinger_puppet_counts = {\n    0: 12,\n    1: 16,\n    2: 14,\n    3: 2,\n    4: 9\n}\n\n# Get the number of children who made exactly 1 finger puppet\nchildren_made_one_puppet = finger_puppet_counts[1]\n\n# Store the result in the variable 'answer'\nanswer = children_made_one_puppet\n\n# Print the answer\nprint(answer)", "finger_puppet_counts = {\n    0: 12,\n    1: 16,\n    2: 14,\n    3: 2,\n    4: 9\n}\nchildren_made_one_puppet = finger_puppet_counts[1]\nanswer = int(children_made_one_puppet)  # Cast to int to ensure it outputs as an integer\nprint(answer)", "# Define the frequency of finger puppets made by children\nfinger_puppet_counts = {\n    0: 12,\n    1: 16,\n    2: 14,\n    3: 2,\n    4: 9\n}\n\n# Retrieve the number of children who made exactly 1 finger puppet\nchildren_made_one_puppet = finger_puppet_counts[1]\nanswer = children_made_one_puppet  # No need to cast to int as it's already an integer\n\n# Output the answer\nprint(answer)"], "prediction": [16.0, 16.0, 16.0, 16.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nfarfalle pasta | $2.49 per kg\nrotini pasta | $2.86 per kg\nspirali pasta | $2.96 per kg\npenne pasta | $2.25 per kg", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nfarfalle pasta | $2.49 per kg\nrotini pasta | $2.86 per kg\nspirali pasta | $2.96 per kg\npenne pasta | $2.25 per kg\n\nEmmy went to the store. She bought 4 kilograms of rotini pasta and 4 kilograms of spirali pasta. How much did she spend?", "answer": "23.28", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \nprice_per_kg_rotini = 2.86 \nprice_per_kg_spirali = 2.96 \nkilograms_rotini = 4 \nkilograms_spirali = 4 \n\n# Calculate total cost\ntotal_cost_rotini = price_per_kg_rotini * kilograms_rotini\ntotal_cost_spirali = price_per_kg_spirali * kilograms_spirali\ntotal_cost = total_cost_rotini + total_cost_spirali\n\nanswer = total_cost\nprint(answer)", "# Prices per kilogram for each type of pasta\nprice_per_kg_rotini = 2.86 \nprice_per_kg_spirali = 2.96 \n\n# Amount of pasta bought in kilograms\nkilograms_rotini = 4 \nkilograms_spirali = 4 \n\n# Calculate total costs for each type of pasta\ntotal_cost_rotini = price_per_kg_rotini * kilograms_rotini\ntotal_cost_spirali = price_per_kg_spirali * kilograms_spirali\n\n# Calculate total cost\ntotal_cost = total_cost_rotini + total_cost_spirali\n\n# Store the result in the answer variable\nanswer = total_cost\nprint(answer)", "price_per_kg_rotini = 2.86 \nprice_per_kg_spirali = 2.96 \nkilograms_rotini = 4 \nkilograms_spirali = 4 \n\n# Calculate total costs\ntotal_cost_rotini = price_per_kg_rotini * kilograms_rotini\ntotal_cost_spirali = price_per_kg_spirali * kilograms_spirali\n\n# Calculate total cost\ntotal_cost = total_cost_rotini + total_cost_spirali\n\n# Store the result in 'answer' variable\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "price_per_kg_rotini = 2.86 \nprice_per_kg_spirali = 2.96 \nkilograms_rotini = 4 \nkilograms_spirali = 4 \n\ntotal_cost_rotini = price_per_kg_rotini * kilograms_rotini\ntotal_cost_spirali = price_per_kg_spirali * kilograms_spirali\ntotal_cost = total_cost_rotini + total_cost_spirali\n\nanswer = round(total_cost, 2)  # Round to two decimal places for currency representation\nprint(answer)"
], "prediction": [23.28, 23.28, 23.28, 23.28], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Light rail train schedule\" and then answer a question.\n\ncity hall | 10:15 A.M. | 10:45 A.M. | 11:00 A.M.\nshopping mall | 10:30 A.M. | 11:00 A.M. | 11:15 A.M.\nswimming pool | 11:00 A.M. | 11:30 A.M. | 11:45 A.M.\nart museum | 11:15 A.M. | 11:45 A.M. | 12:00 P.M.\nhospital | 11:30 A.M. | 12:00 P.M. | 12:15 P.M.\nlibrary | 11:45 A.M. | 12:15 P.M. | 12:30 P.M.\npost office | 12:00 P.M. | 12:30 P.M. | 12:45 P.M.\nsoccer field | 12:30 P.M. | 1:00 P.M. | 1:15 P.M.\nuniversity | 1:00 P.M. | 1:30 P.M. | 1:45 P.M.", "question": "Read the following table regarding \"Light rail train schedule\" and then write Python code to answer a question.\n\ncity hall | 10:15 A.M. | 10:45 A.M. | 11:00 A.M.\nshopping mall | 10:30 A.M. | 11:00 A.M. | 11:15 A.M.\nswimming pool | 11:00 A.M. | 11:30 A.M. | 11:45 A.M.\nart museum | 11:15 A.M. | 11:45 A.M. | 12:00 P.M.\nhospital | 11:30 A.M. | 12:00 P.M. | 12:15 P.M.\nlibrary | 11:45 A.M. | 12:15 P.M. | 12:30 P.M.\npost office | 12:00 P.M. | 12:30 P.M. | 12:45 P.M.\nsoccer field | 12:30 P.M. | 1:00 P.M. | 1:15 P.M.\nuniversity | 1:00 P.M. | 1:30 P.M. | 1:45 P.M.\n\nLook at the following schedule. How long does it take to get from the shopping mall to the hospital? Choose from the the options: ['1 hour', '15 minutes', '45 minutes', '30 minutes']", "answer": "1 hour", "ques_type": "multi_choice", "choices": ["1 hour", "15 minutes", "45 minutes", "30 minutes"], "code": [
  "# Python code, return answer \n# From the schedule, identify the departure and arrival times\ndeparture_time = \"11:00 A.M.\"  # Departure from shopping mall\narrival_time = \"11:30 A.M.\"     # Arrival at hospital\n\n# Convert times to minutes past midnight for easier calculation\ndef time_to_minutes(time_str):\n    if 'P.M.' in time_str:\n        hours, minutes = map(int, time_str[:-5].split(':'))\n        hours += 12 if hours != 12 else 0\n    else:\n        hours, minutes = map(int, time_str[:-5].split(':'))\n        hours = 0 if hours == 12 else hours\n    return hours * 60 + minutes\n\n# Calculate travel time in minutes\ndeparture_minutes = time_to_minutes(departure_time)\narrival_minutes = time_to_minutes(arrival_time)\ntravel_time = arrival_minutes - departure_minutes\n\n# Determine the answer based on travel time\nif travel_time == 60:\n    answer = '1 hour'\nelif travel_time == 15:\n    answer = '15 minutes'\nelif travel_time == 45:\n    answer = '45 minutes'\nelif travel_time == 30:\n    answer = '30 minutes'\n\nprint(answer)", "# Define the departure and arrival times\ndeparture_time = \"11:00 A.M.\"  # Departure from shopping mall\narrival_time = \"11:30 A.M.\"     # Arrival at hospital\n\n# Function to convert time string to minutes\ndef time_to_minutes(time_str):\n    if 'P.M.' in time_str:\n        hours, minutes = map(int, time_str[:-5].split(':'))\n        hours += 12 if hours != 12 else 0\n    else:\n        hours, minutes = map(int, time_str[:-5].split(':'))\n        hours = 0 if hours == 12 else hours\n    return hours * 60 + minutes\n\n# Calculate departure and arrival minutes\ndeparture_minutes = time_to_minutes(departure_time)\narrival_minutes = time_to_minutes(arrival_time)\n\n# Calculate travel time in minutes\ntravel_time = arrival_minutes - departure_minutes\n\n# Determine the travel time in hours or minutes\nif travel_time == 60:\n    answer = '1 hour'\nelif travel_time == 15:\n    answer = '15 minutes'\nelif travel_time == 45:\n    answer = '45 minutes'\nelif travel_time == 30:\n    answer = '30 minutes'\n\nprint(answer)", "# Define departure and arrival times\ndeparture_time = \"11:00 A.M.\"  # Departure from shopping mall\narrival_time = \"11:30 A.M.\"     # Arrival at hospital\n\n# Function to convert time to minutes\ndef time_to_minutes(time_str):\n    if 'P.M.' in time_str:\n        hours, minutes = map(int, time_str[:-5].split(':'))\n        hours += 12 if hours != 12 else 0\n    else:\n        hours, minutes = map(int, time_str[:-5].split(':'))\n        hours = 0 if hours == 12 else hours\n    return hours * 60 + minutes\n\n# Calculate departure and arrival times in minutes\ndeparture_minutes = time_to_minutes(departure_time)\narrival_minutes = time_to_minutes(arrival_time)\n\n# Calculate travel time\ntravel_time = arrival_minutes - departure_minutes\n\n# Determine the answer based on travel time\nif travel_time == 60:\n    answer = '1 hour'\nelif travel_time == 15:\n    answer = '15 minutes'\nelif travel_time == 45:\n    answer = '45 minutes'\nelif travel_time == 30:\n    answer = '30 minutes'\n\n# Output the answer\nprint(answer)", "departure_time = \"11:00 A.M.\"  # Departure from shopping mall\narrival_time = \"11:30 A.M.\"     # Arrival at hospital\n\ndef time_to_minutes(time_str):\n    if 'P.M.' in time_str:\n        hours, minutes = map(int, time_str[:-5].split(':'))\n        hours += 12 if hours != 12 else 0\n    else:\n        hours, minutes = map(int, time_str[:-5].split(':'))\n        hours = 0 if hours == 12 else hours\n    return hours * 60 + minutes\n\ndeparture_minutes = time_to_minutes(departure_time)\narrival_minutes = time_to_minutes(arrival_time)\ntravel_time = arrival_minutes - departure_minutes\n\n# Calculate the duration in hours and minutes\nhours = travel_time // 60\nminutes = travel_time % 60\n\nif hours == 1:\n    answer = '1 hour'\nelif hours == 0 and minutes == 15:\n    answer = '15 minutes'\nelif hours == 0 and minutes == 45:\n    answer = '45 minutes'\nelif hours == 0 and minutes == 30:\n    answer = '30 minutes'\n\nprint(answer)"
], "prediction": ["30 minutes", "30 minutes", "30 minutes", "30 minutes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of bouquets | Number of lilies\n1 | 5\n2 | 10\n3 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of bouquets | Number of lilies\n1 | 5\n2 | 10\n3 | ?\n\nEach bouquet has 5 lilies. How many lilies are in 3 bouquets?", "answer": "15", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nlilies_per_bouquet = 5\nnumber_of_bouquets = 3\n# Calculate the total number of lilies in 3 bouquets\ntotal_lilies = lilies_per_bouquet * number_of_bouquets\nanswer = total_lilies\nprint(answer)", "lilies_per_bouquet = 5\nnumber_of_bouquets = 3\ntotal_lilies = lilies_per_bouquet * number_of_bouquets\nanswer = total_lilies\nprint(int(answer))  # Convert the answer to an integer before printing", "lilies_per_bouquet = 5\nnumber_of_bouquets = 3\ntotal_lilies = lilies_per_bouquet * number_of_bouquets\nanswer = total_lilies\nprint(answer)  # This will print the result as an integer", "lilies_per_bouquet = 5\nnumber_of_bouquets = 3\ntotal_lilies = lilies_per_bouquet * number_of_bouquets\nanswer = int(total_lilies)  # Cast the result to an integer\nprint(answer)  # This will print the result as an integer"], "prediction": [15.0, 15.0, 15.0, 15.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Subway riders\" and then answer a question.\n\nDay | Number of riders\nMonday | 2,651\nTuesday | 2,206\nWednesday | 2,706\nThursday | 3,194", "question": "Read the following table regarding \"Subway riders\" and then write Python code to answer a question.\n\nDay | Number of riders\nMonday | 2,651\nTuesday | 2,206\nWednesday | 2,706\nThursday | 3,194\n\nA city recorded how many people rode the subway each day. How many people in total rode the subway on Tuesday and Wednesday?", "answer": "4,912", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of riders on Tuesday and Wednesday\ntuesday_riders = 2206\nwednesday_riders = 2706\n# Calculate total riders on Tuesday and Wednesday\ntotal_riders_tuesday_wednesday = tuesday_riders + wednesday_riders\nanswer = total_riders_tuesday_wednesday\nprint(answer)", "tuesday_riders = 2206\nwednesday_riders = 2706\ntotal_riders_tuesday_wednesday = tuesday_riders + wednesday_riders\nanswer = int(total_riders_tuesday_wednesday)  # Ensure the result is an integer\nprint(answer)", "tuesday_riders = 2206\nwednesday_riders = 2706\ntotal_riders_tuesday_wednesday = tuesday_riders + wednesday_riders\nanswer = total_riders_tuesday_wednesday  # No need to convert to int since it's already an integer\nprint(answer)", "tuesday_riders = 2206\nwednesday_riders = 2706\ntotal_riders_tuesday_wednesday = tuesday_riders + wednesday_riders\nanswer = total_riders_tuesday_wednesday  # This will naturally be an integer\nprint(answer)"], "prediction": [4912.0, 4912.0, 4912.0, 4912.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Going to the library last month\" and then answer a question.\n\nNumber of trips | Frequency\n1 | 1\n2 | 8\n3 | 20\n4 | 9\n5 | 2", "question": "Read the following table regarding \"Going to the library last month\" and then write Python code to answer a question.\n\nNumber of trips | Frequency\n1 | 1\n2 | 8\n3 | 20\n4 | 9\n5 | 2\n\nIn considering whether to open a new branch, the city council examined the number of times some typical residents went to the library last month. How many people are there in all?", "answer": "40", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Calculate total number of people based on the trips and their frequencies\ntrips_data = {\n    1: 1,\n    2: 8,\n    3: 20,\n    4: 9,\n    5: 2\n}\n\ntotal_people = sum(frequency for frequency in trips_data.values())\nanswer = total_people\nprint(answer)", "trips_data = {\n    1: 1,\n    2: 8,\n    3: 20,\n    4: 9,\n    5: 2\n}\n\ntotal_people = sum(trips * frequency for trips, frequency in trips_data.items())\nanswer = total_people\nprint(answer)", "trips_data = {\n    1: 1,\n    2: 8,\n    3: 20,\n    4: 9,\n    5: 2\n}\ntotal_people = sum(trips_data.values())\nanswer = total_people\nprint(answer)", "trips_data = {\n    1: 1,\n    2: 8,\n    3: 20,\n    4: 9,\n    5: 2\n}\n\ntotal_people = sum(trips * frequency for trips, frequency in trips_data.items())\nanswer = total_people\nprint(answer)"], "prediction": [40.0, 123.0, 40.0, 123.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nairplane ride | $787.00\nspeedboat ride | $403.00\nhelicopter ride | $250.00\nsailboat ride | $245.00\nhot air balloon ride | $543.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nairplane ride | $787.00\nspeedboat ride | $403.00\nhelicopter ride | $250.00\nsailboat ride | $245.00\nhot air balloon ride | $543.00\n\nHow much money does Valentina need to buy a speedboat ride and an airplane ride?", "answer": "1,190", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the rides\nprice_airplane_ride = 787.00\nprice_speedboat_ride = 403.00\n# Total cost for both rides\ntotal_cost = price_airplane_ride + price_speedboat_ride\nanswer = total_cost\nprint(answer)", "# Define the prices for the rides\nprice_airplane_ride = 787.00\nprice_speedboat_ride = 403.00\n\n# Calculate the total cost for the rides\ntotal_cost = price_airplane_ride + price_speedboat_ride\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the prices of the rides\nprice_airplane_ride = 787.00\nprice_speedboat_ride = 403.00\n\n# Calculate the total cost for Valentina\ntotal_cost = price_airplane_ride + price_speedboat_ride\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Prices for the rides\nprice_airplane_ride = 787.00\nprice_speedboat_ride = 403.00\n\n# Calculate total cost for both rides\ntotal_cost = price_airplane_ride + price_speedboat_ride\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the total cost\nprint(answer)"], "prediction": [1190.0, 1190.0, 1190.0, 1190.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Cars sold\" and then answer a question.\n\nMonth | Number of cars\nMarch | 12\nApril | 18\nMay | 11\nJune | 14\nJuly | 20\nAugust | 16\nSeptember | 19\nOctober | 18", "question": "Read the following table regarding \"Cars sold\" and then write Python code to answer a question.\n\nMonth | Number of cars\nMarch | 12\nApril | 18\nMay | 11\nJune | 14\nJuly | 20\nAugust | 16\nSeptember | 19\nOctober | 18\n\nA car dealership tracked the number of cars sold each month. What is the mean of the numbers?", "answer": "16", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of cars sold each month\ncars_sold = [12, 18, 11, 14, 20, 16, 19, 18]\n\n# Calculate the mean\nmean_cars_sold = sum(cars_sold) / len(cars_sold)\nanswer = mean_cars_sold\nprint(answer)", "# List of cars sold each month\ncars_sold = [12, 18, 11, 14, 20, 16, 19, 18]\n\n# Calculate the mean of the numbers\nmean_cars_sold = sum(cars_sold) / len(cars_sold)\n\n# Store the result in the variable 'answer'\nanswer = mean_cars_sold\n\n# Output the answer\nprint(answer)", "cars_sold = [12, 18, 11, 14, 20, 16, 19, 18]\nmean_cars_sold = sum(cars_sold) / len(cars_sold)\nanswer = round(mean_cars_sold, 2)  # Round to 2 decimal places for clarity\nprint(answer)", "cars_sold = [12, 18, 11, 14, 20, 16, 19, 18]\nmean_cars_sold = sum(cars_sold) / len(cars_sold)\nanswer = round(mean_cars_sold, 2)  # Round to 2 decimal places for clarity\nprint(answer)"], "prediction": [16.0, 16.0, 16.0, 16.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbran flakes | $5.96 per lb\nshredded wheat | $4.74 per lb\ngranola | $3.32 per lb\npuffed wheat | $4.46 per lb", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbran flakes | $5.96 per lb\nshredded wheat | $4.74 per lb\ngranola | $3.32 per lb\npuffed wheat | $4.46 per lb\n\nTurner buys 1 pound of shredded wheat. What is the total cost?", "answer": "4.74", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \nprice_per_pound_shredded_wheat = 4.74 \npounds_bought = 1 \n# Calculate total cost\ntotal_cost = price_per_pound_shredded_wheat * pounds_bought\nanswer = total_cost\nprint(answer)", "# Define the price per pound for shredded wheat  \nprice_per_pound_shredded_wheat = 4.74  \n# Define the number of pounds bought  \npounds_bought = 1  \n# Calculate the total cost  \ntotal_cost = price_per_pound_shredded_wheat * pounds_bought  \n# Store the result as 'answer'  \nanswer = total_cost  \n\n# Output the result with a context message  \nprint(f\"The total cost for {pounds_bought} pound of shredded wheat is ${answer:.2f}.\")", "# Define the price per pound of shredded wheat  \nprice_per_pound_shredded_wheat = 4.74  \n# Define the number of pounds bought  \npounds_bought = 1  \n# Calculate the total cost  \ntotal_cost = price_per_pound_shredded_wheat * pounds_bought  \n# Store the result in the variable 'answer'  \nanswer = total_cost  \n\nprint(answer)  # Output the answer", "price_per_pound_shredded_wheat = 4.74  \npounds_bought = 1  \ntotal_cost = price_per_pound_shredded_wheat * pounds_bought  \nanswer = f\"${total_cost:.2f}\"  # Format as a monetary value\nprint(answer)  # Output the answer"
], "prediction": [4.74, 4.74, 4.74, "$4.74"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\noatmeal raisin cookie dough | $7 per pound\nchocolate chip cookie dough | $5 per pound\nsnickerdoodle cookie dough | $5 per pound\ndouble chocolate cookie dough | $6 per pound\npeanut butter cookie dough | $6 per pound\ngingersnap cookie dough | $4 per pound", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\noatmeal raisin cookie dough | $7 per pound\nchocolate chip cookie dough | $5 per pound\nsnickerdoodle cookie dough | $5 per pound\ndouble chocolate cookie dough | $6 per pound\npeanut butter cookie dough | $6 per pound\ngingersnap cookie dough | $4 per pound\n\nChad went to the store and bought 3/4 of a pound of oatmeal raisin cookie dough. How much did he spend?", "answer": "5.25", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_oatmeal_raisin = 7 \npounds_bought = 0.75 \n# Calculate the total cost\ntotal_cost = price_per_pound_oatmeal_raisin * pounds_bought\nanswer = total_cost\nprint(answer)", "# Define the price per pound for oatmeal raisin cookie dough\nprice_per_pound_oatmeal_raisin = 7  \n# Define the amount of cookie dough purchased in pounds\npounds_bought = 0.75  \n# Calculate the total cost\ntotal_cost = price_per_pound_oatmeal_raisin * pounds_bought  \n# Store the total cost in the answer variable\nanswer = total_cost  \n\nprint(answer)  # Output the answer", "# Define the price per pound for oatmeal raisin cookie dough\nprice_per_pound_oatmeal_raisin = 7  \n\n# Define the amount of pounds bought\npounds_bought = 0.75  \n\n# Calculate the total cost\ntotal_cost = price_per_pound_oatmeal_raisin * pounds_bought  \n\n# Store the result in the variable answer\nanswer = total_cost  \n\n# Output the answer\nprint(answer)  # Output: 5.25", "# Define the price per pound for oatmeal raisin cookie dough  \nprice_per_pound_oatmeal_raisin = 7  \n\n# Define the amount of dough purchased in pounds  \npounds_bought = 0.75  \n\n# Calculate the total cost  \ntotal_cost = price_per_pound_oatmeal_raisin * pounds_bought  \n\n# Store the result in the variable 'answer'  \nanswer = total_cost  \n\nprint(answer)  # Output: 5.25"], "prediction": [5.25, 5.25, 5.25, 5.25], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Race results\" and then answer a question.\n\nRunner | Time (minutes)\nOliver | 23\nRosanne | 39\nAshley | 33\nWarren | 35\nMaria | 42\nHazel | 38\nBaldwin | 35\nLacey | 43", "question": "Read the following table regarding \"Race results\" and then write Python code to answer a question.\n\nRunner | Time (minutes)\nOliver | 23\nRosanne | 39\nAshley | 33\nWarren | 35\nMaria | 42\nHazel | 38\nBaldwin | 35\nLacey | 43\n\nSeveral students participated in a race. What is the mean of the numbers?", "answer": "36", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Race times in minutes\ntimes = [23, 39, 33, 35, 42, 38, 35, 43]\n# Calculate the mean\nmean_time = sum(times) / len(times)\nanswer = mean_time\nprint(answer)", "times = [23, 39, 33, 35, 42, 38, 35, 43]\nmean_time = sum(times) / len(times)\nanswer = round(mean_time, 2)  # rounding to two decimal places for clarity\nprint(f\"The mean race time is {answer} minutes.\")", "# List of race times in minutes\ntimes = [23, 39, 33, 35, 42, 38, 35, 43]\n\n# Calculate the mean time\nmean_time = sum(times) / len(times)\n\n# Store the result in the variable 'answer'\nanswer = round(mean_time, 2)  # rounding to two decimal places for clarity\n\n# Print the answer\nprint(answer)", "# List of race times in minutes\ntimes = [23, 39, 33, 35, 42, 38, 35, 43]\n\n# Calculate the mean time\nmean_time = sum(times) / len(times)\n\n# Store the rounded mean time in the variable 'answer'\nanswer = round(mean_time, 2)  # rounding to two decimal places for clarity\n\n# Output the answer\nprint(answer)"], "prediction": [36.0, 36.0, 36.0, 36.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nstar-shaped beads | $2/kg\nspherical beads | $2/kg\noval beads | $3/kg\nheart-shaped beads | $3/kg\nsquare beads | $3/kg\nflower-shaped beads | $2/kg\nrectangular beads | $3/kg", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nstar-shaped beads | $2/kg\nspherical beads | $2/kg\noval beads | $3/kg\nheart-shaped beads | $3/kg\nsquare beads | $3/kg\nflower-shaped beads | $2/kg\nrectangular beads | $3/kg\n\nHow much would it cost to buy 4+9/10 kilograms of heart-shaped beads?", "answer": "14.70", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_kg_heart_shape = 3  # cost of heart-shaped beads per kilogram\nkilograms_to_buy = 4 + 9/10  # total kilograms to buy\n\n# Calculate total cost\ntotal_cost = price_per_kg_heart_shape * kilograms_to_buy\nanswer = total_cost\nprint(answer)", "price_per_kg_heart_shape = 3  # cost of heart-shaped beads per kilogram\nkilograms_to_buy = 4 + 9/10  # total kilograms to buy\ntotal_cost = price_per_kg_heart_shape * kilograms_to_buy\nanswer = round(total_cost, 2)  # rounding to two decimal places for better formatting\nprint(answer)", "price_per_kg_heart_shape = 3  # cost of heart-shaped beads per kilogram\nkilograms_to_buy = 4 + 9/10  # total kilograms to buy\ntotal_cost = price_per_kg_heart_shape * kilograms_to_buy\nanswer = f\"${total_cost:.2f}\"  # formatting the output as currency\nprint(answer)", "price_per_kg_heart_shape = 3  # cost of heart-shaped beads per kilogram\nkilograms_to_buy = 4 + 9/10  # total kilograms to buy\ntotal_cost = price_per_kg_heart_shape * kilograms_to_buy\nanswer = f\"${total_cost:.2f}\"  # formatting the output as currency\n\n# Printing the answer\nprint(answer)"], "prediction": [14.7, 14.7, "$14.70", "$14.70"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npoetry book | $15\nhistory book | $15\ngeography book | $11\nspelling workbook | $10\npicture book | $10\ncoloring book | $18", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npoetry book | $15\nhistory book | $15\ngeography book | $11\nspelling workbook | $10\npicture book | $10\ncoloring book | $18\n\nHow much money does Nate need to buy a history book and a spelling workbook?", "answer": "25", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_history_book = 15\nprice_spelling_workbook = 10\n# Total cost for a history book and a spelling workbook\ntotal_cost = price_history_book + price_spelling_workbook\nanswer = total_cost\nprint(answer)", "# Define the prices of the books\nprice_history_book = 15\nprice_spelling_workbook = 10\n\n# Calculate the total cost for Nate\ntotal_cost = price_history_book + price_spelling_workbook\n\n# Store the result in the answer variable\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "price_history_book = 15\nprice_spelling_workbook = 10\ntotal_cost = price_history_book + price_spelling_workbook\nanswer = int(total_cost)  # Convert to integer if needed\nprint(answer)", "price_history_book = 15\nprice_spelling_workbook = 10\ntotal_cost = price_history_book + price_spelling_workbook\nanswer = total_cost  # No need to convert to integer as it's already a whole number\nprint(answer)"], "prediction": [25.0, 25.0, 25.0, 25.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nquartz crystal | $0.05\nsmooth piece of marble | $0.06\npiece of fool's gold | $0.03\norange agate | $0.05\npiece of polished granite | $0.08\npiece of green slate | $0.09", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nquartz crystal | $0.05\nsmooth piece of marble | $0.06\npiece of fool's gold | $0.03\norange agate | $0.05\npiece of polished granite | $0.08\npiece of green slate | $0.09\n\nKendra has $0.19. How much money will Kendra have left if she buys a piece of green slate and a piece of fool's gold?", "answer": "0.07", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices of the items Kendra wants to buy\nprice_green_slate = 0.09 \nprice_fools_gold = 0.03 \n# Total cost of the items\ntotal_cost = price_green_slate + price_fools_gold\n# Kendra's initial amount of money\ninitial_amount = 0.19 \n# Calculate the remaining amount after purchase\nremaining_amount = initial_amount - total_cost\nanswer = remaining_amount\nprint(answer)", "# Define prices for the items Kendra wants to buy\nprice_green_slate = 0.09 \nprice_fools_gold = 0.03 \n\n# Calculate total cost of the items\ntotal_cost = price_green_slate + price_fools_gold\n\n# Define Kendra's initial amount of money\ninitial_amount = 0.19 \n\n# Calculate remaining amount after purchases\nremaining_amount = initial_amount - total_cost\n\n# Store the result in the variable 'answer'\nanswer = remaining_amount\n\n# Print the answer\nprint(answer)", "# Define the prices of the items\nprice_green_slate = 0.09 \nprice_fools_gold = 0.03 \n\n# Calculate total cost of the items\ntotal_cost = price_green_slate + price_fools_gold\n\n# Kendra's initial amount\ninitial_amount = 0.19 \n\n# Calculate remaining amount after the purchase\nremaining_amount = initial_amount - total_cost\n\n# Store the result in 'answer'\nanswer = remaining_amount\n\n# Output the answer\nprint(answer)", "# Prices of the items Kendra wants to buy\nprice_green_slate = 0.09 \nprice_fools_gold = 0.03 \n\n# Calculate total cost of the items\ntotal_cost = price_green_slate + price_fools_gold\n\n# Initial amount Kendra has\ninitial_amount = 0.19 \n\n# Calculate remaining amount after purchases\nremaining_amount = initial_amount - total_cost\n\n# Store the result in the answer variable\nanswer = remaining_amount\n\n# Output the answer\nprint(answer)"
], "prediction": [0.07, 0.07, 0.07, 0.07], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Writing poems\" and then answer a question.\n\nPoems written | Frequency\n1 | 1\n2 | 4\n3 | 12\n4 | 7\n5 | 11\n6 | 2", "question": "Read the following table regarding \"Writing poems\" and then write Python code to answer a question.\n\nPoems written | Frequency\n1 | 1\n2 | 4\n3 | 12\n4 | 7\n5 | 11\n6 | 2\n\nStudents at Lexington Middle School wrote and submitted poems for a district-wide writing contest. How many students wrote at least 4 poems?", "answer": "20", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of students who wrote at least 4 poems\nstudents_4_or_more_poems = 7 + 11 + 2  # 4 poems, 5 poems, and 6 poems\nanswer = students_4_or_more_poems\nprint(answer)", "# Define the frequency of students writing a certain number of poems\npoem_frequencies = {\n    1: 1,\n    2: 4,\n    3: 12,\n    4: 7,\n    5: 11,\n    6: 2\n}\n\n# Calculate the number of students who wrote at least 4 poems\nstudents_4_or_more_poems = poem_frequencies[4] + poem_frequencies[5] + poem_frequencies[6]\nanswer = students_4_or_more_poems\nprint(answer)", "poem_frequencies = {\n    1: 1,\n    2: 4,\n    3: 12,\n    4: 7,\n    5: 11,\n    6: 2\n}\nstudents_4_or_more_poems = poem_frequencies[4] + poem_frequencies[5] + poem_frequencies[6]\nanswer = students_4_or_more_poems  # This will be an integer\nprint(answer)", "poem_frequencies = {\n    1: 1,\n    2: 4,\n    3: 12,\n    4: 7,\n    5: 11,\n    6: 2\n}\n\n# Calculate the number of students who wrote at least 4 poems\nstudents_4_or_more_poems = poem_frequencies[4] + poem_frequencies[5] + poem_frequencies[6]\nanswer = students_4_or_more_poems  # This will be an integer\n\nprint(answer)"], "prediction": [20.0, 20.0, 20.0, 20.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nshiny gold shell | $0.01\nwhole sand dollar | $0.08\nscallop shell | $0.05\nbeautiful yellow shell | $0.05\nwhite spindle shell | $0.06", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nshiny gold shell | $0.01\nwhole sand dollar | $0.08\nscallop shell | $0.05\nbeautiful yellow shell | $0.05\nwhite spindle shell | $0.06\n\nDonald has $0.07. Does he have enough to buy a scallop shell and a shiny gold shell? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \n# Prices of the items\nprice_scallop_shell = 0.05 \nprice_shiny_gold_shell = 0.01 \ntotal_cost = price_scallop_shell + price_shiny_gold_shell\ndonald_money = 0.07\n\n# Check if Donald has enough money\nif donald_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "# Define the prices of the shells\nprice_scallop_shell = 0.05 \nprice_shiny_gold_shell = 0.01 \n\n# Calculate the total cost\ntotal_cost = price_scallop_shell + price_shiny_gold_shell\n\n# Amount of money Donald has\ndonald_money = 0.07\n\n# Check if Donald has enough money to buy both shells\nif donald_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "price_scallop_shell = 0.05 \nprice_shiny_gold_shell = 0.01 \ndonald_money = 0.07\n\ntotal_cost = price_scallop_shell + price_shiny_gold_shell\nanswer = 'yes' if donald_money >= total_cost else 'no'\nprint(answer)", "price_scallop_shell = 0.05 \nprice_shiny_gold_shell = 0.01 \ndonald_money = 0.07\ntotal_cost = price_scallop_shell + price_shiny_gold_shell\nanswer = 'yes' if donald_money >= total_cost else 'no'\nprint(answer)"], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Computers in classrooms\" and then answer a question.\n\nTeacher | Number of computers\nMs. Cohen | 6\nMr. Schmidt | 5\nMr. Lim | 5\nMrs. Rossi | 5\nMiss Murphy | 6\nMrs. Jansen | 8", "question": "Read the following table regarding \"Computers in classrooms\" and then write Python code to answer a question.\n\nTeacher | Number of computers\nMs. Cohen | 6\nMr. Schmidt | 5\nMr. Lim | 5\nMrs. Rossi | 5\nMiss Murphy | 6\nMrs. Jansen | 8\n\nThe teachers at a middle school counted how many computers they had in their classrooms. What is the range of the numbers?", "answer": "3", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of computers for each teacher\ncomputers = [6, 5, 5, 5, 6, 8]\n# Calculate the range\nrange_of_computers = max(computers) - min(computers)\nanswer = range_of_computers\nprint(answer)", "computers = [6, 5, 5, 5, 6, 8]\nrange_of_computers = max(computers) - min(computers)\nanswer = int(range_of_computers)  # Convert to integer\nprint(answer)", "computers = [6, 5, 5, 5, 6, 8]\nrange_of_computers = max(computers) - min(computers)\nanswer = range_of_computers  # No need to convert to integer since it's already an integer\nprint(answer)", "computers = [6, 5, 5, 5, 6, 8]\nrange_of_computers = max(computers) - min(computers)\nanswer = int(range_of_computers)  # Convert the result to an integer\nprint(answer)"], "prediction": [3.0, 3.0, 3.0, 3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Apples per tree\" and then answer a question.\n\nStem | Leaf \n3 | 5, 5, 8, 9\n4 | 0, 3, 5, 7\n5 | \n6 | \n7 | 1, 3\n8 | \n9 | 0", "question": "Read the following table regarding \"Apples per tree\" and then write Python code to answer a question.\n\nStem | Leaf \n3 | 5, 5, 8, 9\n4 | 0, 3, 5, 7\n5 | \n6 | \n7 | 1, 3\n8 | \n9 | 0\n\nA farmer counted the number of apples on each tree in her orchard. How many trees have exactly 35 apples?", "answer": "2", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The stem-and-leaf plot indicates the number of apples on each tree.\n# The stem '3' with leaf '5' indicates 35 apples.\n# Count how many times 35 appears.\ntrees_with_35_apples = 1  # From the stem \"3 | 5\", there is 1 tree with exactly 35 apples.\nanswer = trees_with_35_apples\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(3, [5, 5, 8, 9]), (4, [0, 3, 5, 7]), (5, []), (6, []), (7, [1, 3]), (8, []), (9, [0])]\n\n# Initialize counter for trees with exactly 35 apples\ntrees_with_35_apples = 0\n\n# Iterate through the stem and leaf data structure and count relevant trees\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        apples_per_tree = stem * 10 + leaf\n        if apples_per_tree == 35:\n            trees_with_35_apples += 1\n\nanswer = trees_with_35_apples\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(3, [5, 5, 8, 9]), (4, [0, 3, 5, 7]), (5, []), (6, []), (7, [1, 3]), (8, []), (9, [0])]  \n  \n# Initialize counter for trees with exactly 35 apples  \ntrees_with_35_apples = 0  \n  \n# Iterate through the stem and leaf data structure and count relevant trees  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        apples_per_tree = stem * 10 + leaf  \n        if apples_per_tree == 35:  \n            trees_with_35_apples += 1  \n  \n# Store the result as an integer  \nanswer = trees_with_35_apples  \nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [(3, [5, 5, 8, 9]), (4, [0, 3, 5, 7]), (5, []), (6, []), (7, [1, 3]), (8, []), (9, [0])]\n\n# Initialize counter for trees with exactly 35 apples\ntrees_with_35_apples = 0\n\n# Iterate through the stem and leaf data structure and count relevant trees\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        apples_per_tree = stem * 10 + leaf\n        if apples_per_tree == 35:\n            trees_with_35_apples += 1\n\n# Store the result in the answer variable\nanswer = trees_with_35_apples\nprint(answer)"
], "prediction": [1.0, 2.0, 2.0, 2.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Books per shelf\" and then answer a question.\n\nStem | Leaf \n1 | 8\n2 | 1, 5, 6, 9\n3 | 9\n4 | \n5 | 2, 7\n6 | 1, 2, 4, 6, 7, 9\n7 | 6\n8 | \n9 | 0", "question": "Read the following table regarding \"Books per shelf\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 8\n2 | 1, 5, 6, 9\n3 | 9\n4 | \n5 | 2, 7\n6 | 1, 2, 4, 6, 7, 9\n7 | 6\n8 | \n9 | 0\n\nThe librarian at the public library counted the number of books on each shelf. What is the smallest number of books?", "answer": "18", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The smallest number of books corresponds to the smallest value in the stem-and-leaf display.\nsmallest_books = 18  # From the stem \"1 | 8\", the value is 18 books.\nanswer = smallest_books\nprint(answer)", "# Define the stem and leaf data structure as a list of tuples\nstem_and_leaf = [(1, [8]), (2, [1, 5, 6, 9]), (3, [9]), (4, []), \n                 (5, [2, 7]), (6, [1, 2, 4, 6, 7, 9]), (7, [6]), \n                 (8, []), (9, [0])]\n\n# Initialize variable to store the smallest number of books\nsmallest_books = float('inf')\n\n# Iterate through the stem and leaf data structure to find the smallest number of books\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        books_per_shelf = stem * 10 + leaf\n        if books_per_shelf < smallest_books:\n            smallest_books = books_per_shelf\n\nanswer = smallest_books\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [8]), (2, [1, 5, 6, 9]), (3, [9]), (4, []), \n                 (5, [2, 7]), (6, [1, 2, 4, 6, 7, 9]), (7, [6]), \n                 (8, []), (9, [0])]  \n  \n# Initialize variable for the smallest number of books  \nsmallest_books = float('inf')  \n  \n# Iterate through the stem and leaf data structure  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        books_per_shelf = stem * 10 + leaf  \n        if books_per_shelf < smallest_books:  \n            smallest_books = books_per_shelf  \n  \n# Check if the smallest_books was updated, if not, handle empty shelves  \nif smallest_books == float('inf'):\n    smallest_books = None  # No books found at all\n  \nanswer = smallest_books  \nprint(answer)", "stem_and_leaf = [(1, [8]), (2, [1, 5, 6, 9]), (3, [9]), (4, []), \n                 (5, [2, 7]), (6, [1, 2, 4, 6, 7, 9]), (7, [6]), \n                 (8, []), (9, [0])]  \n\nsmallest_books = float('inf')  \n\nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        books_per_shelf = stem * 10 + leaf  \n        if books_per_shelf < smallest_books:  \n            smallest_books = books_per_shelf  \n\nif smallest_books == float('inf'):\n    smallest_books = None  # No books found at all\n\nanswer = int(smallest_books) if smallest_books is not None else None  \nprint(answer)"
], "prediction": [18.0, 18.0, 18.0, 18.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Scores on a quiz show\" and then answer a question.\n\nScore | Frequency\n5 | 17\n6 | 14\n7 | 1\n8 | 4\n9 | 12\n10 | 8", "question": "Read the following table regarding \"Scores on a quiz show\" and then write Python code to answer a question.\n\nScore | Frequency\n5 | 17\n6 | 14\n7 | 1\n8 | 4\n9 | 12\n10 | 8\n\nA game show program recorded the scores of its contestants. How many contestants scored more than 8?", "answer": "20", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of scores greater than 8\nfrequency_scores_more_than_8 = 12 + 8  # Scores of 9 and 10\nanswer = frequency_scores_more_than_8\nprint(answer)", "# Store the scores and their corresponding frequencies in a dictionary\nscores_frequency = {\n    5: 17,\n    6: 14,\n    7: 1,\n    8: 4,\n    9: 12,\n    10: 8\n}\n\n# Calculate the total number of contestants who scored more than 8\ncontestants_more_than_8 = scores_frequency[9] + scores_frequency[10]\nanswer = contestants_more_than_8\n\nprint(answer)", "# Define the scores and their frequencies in a dictionary\nscores_frequency = {\n    5: 17,\n    6: 14,\n    7: 1,\n    8: 4,\n    9: 12,\n    10: 8\n}\n\n# Calculate the number of contestants who scored more than 8\ncontestants_more_than_8 = scores_frequency[9] + scores_frequency[10]\n\n# Store the result as an integer\nanswer = contestants_more_than_8\nprint(answer)", "scores_frequency = {\n    5: 17,\n    6: 14,\n    7: 1,\n    8: 4,\n    9: 12,\n    10: 8\n}\n\n# Calculate the number of contestants who scored more than 8\ncontestants_more_than_8 = scores_frequency[9] + scores_frequency[10]\nanswer = contestants_more_than_8\n\nprint(answer)"], "prediction": [20.0, 20.0, 20.0, 20.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\noyster shell | $0.31\nwhole sand dollar | $0.57\npink and white striped shell | $0.79\npolished silver top shell | $0.29", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\noyster shell | $0.31\nwhole sand dollar | $0.57\npink and white striped shell | $0.79\npolished silver top shell | $0.29\n\nHow much more does a pink and white striped shell cost than a polished silver top shell?", "answer": "0.50", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_pink_white_striped_shell = 0.79 \ncost_polished_silver_top_shell = 0.29 \n# Calculate the difference in cost\ndifference_cost = cost_pink_white_striped_shell - cost_polished_silver_top_shell\nanswer = difference_cost\nprint(answer)", "cost_pink_white_striped_shell = 0.79 \ncost_polished_silver_top_shell = 0.29 \ndifference_cost = cost_pink_white_striped_shell - cost_polished_silver_top_shell\nanswer = f\"{difference_cost:.2f}\"  # Format the output to two decimal places\nprint(answer)", "cost_pink_white_striped_shell = 0.79 \ncost_polished_silver_top_shell = 0.29 \ndifference_cost = cost_pink_white_striped_shell - cost_polished_silver_top_shell\nanswer = round(difference_cost, 2)  # Round the difference to two decimal places\nprint(answer)", "cost_pink_white_striped_shell = 0.79 \ncost_polished_silver_top_shell = 0.29 \ndifference_cost = cost_pink_white_striped_shell - cost_polished_silver_top_shell\nanswer = difference_cost  # No need to round as it is already in the correct format\nprint(answer)"], "prediction": [0.5, 0.5, 0.5, 0.5], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbook of crossword puzzles | $5\nmap of the United States | $2\nmap of the world | $7\nbook of brainteasers | $5\nairplane calendar | $6\ncoloring book | $4", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbook of crossword puzzles | $5\nmap of the United States | $2\nmap of the world | $7\nbook of brainteasers | $5\nairplane calendar | $6\ncoloring book | $4\n\nHow much money does Layla need to buy a coloring book and a book of crossword puzzles?", "answer": "9", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_coloring_book = 4 \nprice_crossword_puzzles = 5 \n# Total money needed\ntotal_cost = price_coloring_book + price_crossword_puzzles\nanswer = total_cost\nprint(answer)", "# Prices of the items\nprice_coloring_book = 4  # price of coloring book\nprice_crossword_puzzles = 5  # price of book of crossword puzzles\n\n# Calculate total cost\ntotal_cost = price_coloring_book + price_crossword_puzzles\n\n# Store the result in 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "# Define the prices of the items Layla wants to buy\nprice_coloring_book = 4  # price of coloring book\nprice_crossword_puzzles = 5  # price of book of crossword puzzles\n\n# Calculate the total cost\ntotal_cost = price_coloring_book + price_crossword_puzzles\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the prices of the items\nprice_coloring_book = 4  # price of coloring book\nprice_crossword_puzzles = 5  # price of book of crossword puzzles\n\n# Calculate the total cost\ntotal_cost = price_coloring_book + price_crossword_puzzles\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the result\nprint(answer)"], "prediction": [9.0, 9.0, 9.0, 9.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Minutes spent rehearsing\" and then answer a question.\n\nDay | Minutes\nThursday | 172\nFriday | 127\nSaturday | 117\nSunday | 122", "question": "Read the following table regarding \"Minutes spent rehearsing\" and then write Python code to answer a question.\n\nDay | Minutes\nThursday | 172\nFriday | 127\nSaturday | 117\nSunday | 122\n\nLogan recalled how many minutes he had spent at theater rehearsal in the past 4 days. On which day did Logan rehearse the most? Choose from the the options: ['Thursday', 'Friday', 'Saturday', 'Sunday']", "answer": "Thursday", "ques_type": "multi_choice", "choices": ["Thursday", "Friday", "Saturday", "Sunday"], "code": [
  "# Python code, return answer \nrehearsal_minutes = {\n    'Thursday': 172,\n    'Friday': 127,\n    'Saturday': 117,\n    'Sunday': 122\n}\n\n# Find the day with the most minutes rehearsed\nmost_minutes_day = max(rehearsal_minutes, key=rehearsal_minutes.get)\nanswer = most_minutes_day\nprint(answer)", "# Define the rehearsal minutes for each day in a dictionary\nrehearsal_minutes = {\n    'Thursday': 172,\n    'Friday': 127,\n    'Saturday': 117,\n    'Sunday': 122\n}\n\n# Find the day with the most rehearsal minutes\nmost_minutes_day = max(rehearsal_minutes, key=rehearsal_minutes.get)\n\n# Store the result in the variable 'answer'\nanswer = most_minutes_day\n\n# Print the answer\nprint(answer)", "# Define the rehearsal minutes for each day in a dictionary\nrehearsal_minutes = {\n    'Thursday': 172,\n    'Friday': 127,\n    'Saturday': 117,\n    'Sunday': 122\n}\n\n# Find the day with the most rehearsal minutes\nmost_minutes_day = max(rehearsal_minutes, key=rehearsal_minutes.get)\n\n# Store the result in the variable 'answer'\nanswer = most_minutes_day\n\n# Print the answer\nprint(answer)", "rehearsal_minutes = {\n    'Thursday': 172,\n    'Friday': 127,\n    'Saturday': 117,\n    'Sunday': 122\n}\nmost_minutes_day = max(rehearsal_minutes, key=rehearsal_minutes.get)\nanswer = most_minutes_day\nprint(answer)"
], "prediction": ["Thursday", "Thursday", "Thursday", "Thursday"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Spinning a wheel numbered 1 through 5\" and then answer a question.\n\nNumber spun | Frequency\n1 | 17\n2 | 12\n3 | 10\n4 | 0\n5 | 20", "question": "Read the following table regarding \"Spinning a wheel numbered 1 through 5\" and then write Python code to answer a question.\n\nNumber spun | Frequency\n1 | 17\n2 | 12\n3 | 10\n4 | 0\n5 | 20\n\nA game show viewer monitors how often a wheel numbered 1 through 5 stops at each number. How many people spun a number greater than 3?", "answer": "20", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Frequency of numbers greater than 3\nfrequency_4 = 0  # Number 4\nfrequency_5 = 20  # Number 5\n# Total number of people who spun a number greater than 3\npeople_spun_greater_than_3 = frequency_4 + frequency_5\nanswer = people_spun_greater_than_3\nprint(answer)", "# Define the frequencies for each number spun\nfrequency_1 = 17  # Number 1\nfrequency_2 = 12  # Number 2\nfrequency_3 = 10  # Number 3\nfrequency_4 = 0   # Number 4\nfrequency_5 = 20  # Number 5\n\n# Calculate the total number of people who spun a number greater than 3\npeople_spun_greater_than_3 = frequency_4 + frequency_5\n\n# Store the result in the answer variable\nanswer = people_spun_greater_than_3\n\n# Print the result\nprint(answer)", "# Define the frequencies for each number\nfrequency_1 = 17  # Number 1\nfrequency_2 = 12  # Number 2\nfrequency_3 = 10  # Number 3\nfrequency_4 = 0   # Number 4\nfrequency_5 = 20  # Number 5\n\n# Count the number of people who spun a number greater than 3\npeople_spun_greater_than_3 = frequency_5\nanswer = people_spun_greater_than_3\nprint(answer)", "frequency_1 = 17  # Number 1\nfrequency_2 = 12  # Number 2\nfrequency_3 = 10  # Number 3\nfrequency_4 = 0   # Number 4\nfrequency_5 = 20  # Number 5\n\n# Count the number of people who spun a number greater than 3\npeople_spun_greater_than_3 = frequency_4 + frequency_5\nanswer = people_spun_greater_than_3\nprint(answer)"
], "prediction": [20.0, 20.0, 20.0, 20.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Distribution of plant types\" and then answer a question.\n\nType | Number of plants\nAnnuals | 57\nPerennials | 66\nBiennials | 63", "question": "Read the following table regarding \"Distribution of plant types\" and then write Python code to answer a question.\n\nType | Number of plants\nAnnuals | 57\nPerennials | 66\nBiennials | 63\n\nA plant nursery in Greenville keeps records of how many of its plants are annuals, biennials, and perennials. What fraction of the plants are biennials? Simplify your answer.", "answer": "21/62", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total number of plants\ntotal_plants = 57 + 66 + 63\n# Number of biennial plants\nbiennials = 63\n# Calculate the fraction of plants that are biennials\nfraction_biennials = biennials / total_plants\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_fraction = Fraction(biennials, total_plants).limit_denominator()\nanswer = simplified_fraction\nprint(answer)", "# Define the number of plants for each type\nannuals = 57\nperennials = 66\nbiennials = 63\n\n# Calculate the total number of plants\ntotal_plants = annuals + perennials + biennials\n\n# Calculate the fraction of biennials and simplify it\nfrom fractions import Fraction\nfraction_biennials = Fraction(biennials, total_plants).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = fraction_biennials\nprint(answer)", "annuals = 57\nperennials = 66\nbiennials = 63\ntotal_plants = annuals + perennials + biennials\nfrom fractions import Fraction\nfraction_biennials = Fraction(biennials, total_plants).limit_denominator()\nanswer = fraction_biennials\nprint(answer)", "annuals = 57\nperennials = 66\nbiennials = 63\ntotal_plants = annuals + perennials + biennials\nfrom fractions import Fraction\nfraction_biennials = Fraction(biennials, total_plants).limit_denominator()\nanswer = str(fraction_biennials)  # Convert the fraction to a string for clear output\nprint(answer)"
], "prediction": [0.33871, 0.33871, 0.33871, "21/62"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Running miles\" and then answer a question.\n\nName | Miles\nRuben | 4\nPam | 10\nAdriana | 3\nDeion | 4\nJaylen | 3\nHazel | 6", "question": "Read the following table regarding \"Running miles\" and then write Python code to answer a question.\n\nName | Miles\nRuben | 4\nPam | 10\nAdriana | 3\nDeion | 4\nJaylen | 3\nHazel | 6\n\nThe members of the track team compared how many miles they ran last week. What is the mean of the numbers?", "answer": "5", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of miles run by each member\nmiles = [4, 10, 3, 4, 3, 6]\n# Calculate the mean\nmean_miles = sum(miles) / len(miles)\nanswer = mean_miles\nprint(answer)", "miles = [4, 10, 3, 4, 3, 6]\n\n# Check if the list is not empty to avoid division by zero\nif miles:\n    mean_miles = sum(miles) / len(miles)\nelse:\n    mean_miles = 0  # or handle it as appropriate\n\nanswer = mean_miles\nprint(answer)", "# Define the miles run by each team member\nmiles = [4, 10, 3, 4, 3, 6]\n\n# Calculate the mean of the miles\nif miles:\n    mean_miles = sum(miles) / len(miles)\nelse:\n    mean_miles = 0  # or handle it as appropriate\n\n# Store the result in the variable 'answer'\nanswer = mean_miles\n\n# Print the answer\nprint(answer)", "# Define the miles run by each team member\nmiles = [4, 10, 3, 4, 3, 6]\n\n# Calculate the mean of the miles\nmean_miles = sum(miles) / len(miles) if miles else 0\n\n# Store the result in the variable 'answer'\nanswer = mean_miles\n\n# Print the answer\nprint(answer)"], "prediction": [5.0, 5.0, 5.0, 5.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Pieces of pepperoni per pizza\" and then answer a question.\n\nStem | Leaf \n0 | 9\n1 | 3, 5\n2 | 1, 1, 3, 8\n3 | 8\n4 | 9", "question": "Read the following table regarding \"Pieces of pepperoni per pizza\" and then write Python code to answer a question.\n\nStem | Leaf \n0 | 9\n1 | 3, 5\n2 | 1, 1, 3, 8\n3 | 8\n4 | 9\n\nTina counted the number of pieces of pepperoni on each pizza she made. What is the largest number of pieces of pepperoni?", "answer": "49", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number of pieces of pepperoni corresponds to the largest value in the stem-and-leaf display.\nlargest_pepperoni = 49  # From the stem \"4 | 9\", the value is 49 pieces.\nanswer = largest_pepperoni\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(0, [9]), (1, [3, 5]), (2, [1, 1, 3, 8]), (3, [8]), (4, [9])]  \n  \n# Initialize variable for the largest number of pieces of pepperoni  \nlargest_pepperoni = 0  \n  \n# Iterate through the stem and leaf data structure to find the largest value  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        pieces_of_pepperoni = stem * 10 + leaf  \n        if pieces_of_pepperoni > largest_pepperoni:  \n            largest_pepperoni = pieces_of_pepperoni  \n  \nanswer = largest_pepperoni  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(0, [9]), (1, [3, 5]), (2, [1, 1, 3, 8]), (3, [8]), (4, [9])]  \n\n# Initialize variable to track the largest number of pieces of pepperoni  \nlargest_pepperoni = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number of pieces  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        pieces_of_pepperoni = stem * 10 + leaf  \n        if pieces_of_pepperoni > largest_pepperoni:  \n            largest_pepperoni = pieces_of_pepperoni  \n\n# Store the result in the answer variable  \nanswer = largest_pepperoni  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(0, [9]), (1, [3, 5]), (2, [1, 1, 3, 8]), (3, [8]), (4, [9])]  \n\n# Initialize the variable for the largest number of pieces of pepperoni  \nlargest_pepperoni = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        pieces_of_pepperoni = stem * 10 + leaf  \n        if pieces_of_pepperoni > largest_pepperoni:  \n            largest_pepperoni = pieces_of_pepperoni  \n\nanswer = largest_pepperoni  \nprint(answer)"
], "prediction": [49.0, 49.0, 49.0, 49.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nfleece blanket | $13.00\npillow | $12.00\nyellow bath towel | $18.00\nflannel sheet | $17.00\nquilt | $17.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nfleece blanket | $13.00\npillow | $12.00\nyellow bath towel | $18.00\nflannel sheet | $17.00\nquilt | $17.00\n\nJudy has $66.00. How much money will Judy have left if she buys a yellow bath towel and a fleece blanket?", "answer": "35", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices of the items Judy wants to buy\nprice_yellow_bath_towel = 18.00\nprice_fleece_blanket = 13.00\n# Total cost of the items\ntotal_cost = price_yellow_bath_towel + price_fleece_blanket\n# Judy's initial amount\ninitial_amount = 66.00\n# Calculate the remaining amount\nmoney_left = initial_amount - total_cost\nanswer = money_left\nprint(answer)", "# Define the prices of the items\nprice_yellow_bath_towel = 18.00\nprice_fleece_blanket = 13.00\n\n# Calculate total cost of the items\ntotal_cost = price_yellow_bath_towel + price_fleece_blanket\n\n# Initial amount of money Judy has\ninitial_amount = 66.00\n\n# Calculate how much money Judy will have left\nmoney_left = initial_amount - total_cost\n\n# Store the result in the variable 'answer'\nanswer = money_left\n\n# Output the answer\nprint(answer)", "# Define the prices of the items\nprice_yellow_bath_towel = 18.00\nprice_fleece_blanket = 13.00\n\n# Calculate the total cost of the items\ntotal_cost = price_yellow_bath_towel + price_fleece_blanket\n\n# Define Judy's initial amount of money\ninitial_amount = 66.00\n\n# Calculate the amount of money left after the purchase\nmoney_left = initial_amount - total_cost\n\n# Store the result in the variable 'answer'\nanswer = money_left\n\n# Output the result\nprint(answer)", "# Define the prices of the items\nprice_yellow_bath_towel = 18.00\nprice_fleece_blanket = 13.00\n\n# Calculate the total cost of the items\ntotal_cost = price_yellow_bath_towel + price_fleece_blanket\n\n# Define the initial amount of money Judy has\ninitial_amount = 66.00\n\n# Calculate the amount of money left after the purchase\nmoney_left = initial_amount - total_cost\n\n# Store the result in the variable 'answer'\nanswer = money_left\n\n# Print the answer\nprint(answer)"
], "prediction": [35.0, 35.0, 35.0, 35.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n8 | 20\n9 | 10\n10 | 0", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n8 | 20\n9 | 10\n10 | 0\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "linear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the slope between consecutive points\npoints = [(8, 20), (9, 10), (10, 0)]\n\n# Calculate slopes between each pair of points\nslopes = []\nfor i in range(len(points) - 1):\n    x1, y1 = points[i]\n    x2, y2 = points[i + 1]\n    slope = (y2 - y1) / (x2 - x1)\n    slopes.append(slope)\n\n# Check if all slopes are the same\nis_linear = all(slope == slopes[0] for slope in slopes)\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the points from the table\npoints = [(8, 20), (9, 10), (10, 0)]\n\n# Calculate the slopes between consecutive points\nslopes = []\nfor i in range(len(points) - 1):\n    x1, y1 = points[i]\n    x2, y2 = points[i + 1]\n    slope = (y2 - y1) / (x2 - x1)\n    slopes.append(slope)\n\n# Check if all slopes are equal to determine if the function is linear\nis_linear = all(slope == slopes[0] for slope in slopes)\n\n# Assign the answer based on whether the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\n\nprint(answer)", "points = [(8, 20), (9, 10), (10, 0)]\nslopes = []\nfor i in range(len(points) - 1):\n    x1, y1 = points[i]\n    x2, y2 = points[i + 1]\n    slope = (y2 - y1) / (x2 - x1)\n    slopes.append(slope)\n\n# Check if all slopes are equal\nis_linear = all(slope == slopes[0] for slope in slopes)\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the points from the table\npoints = [(8, 20), (9, 10), (10, 0)]\n\n# Initialize a list to store slopes\nslopes = []\n\n# Calculate the slopes between consecutive points\nfor i in range(len(points) - 1):\n    x1, y1 = points[i]\n    x2, y2 = points[i + 1]\n    slope = (y2 - y1) / (x2 - x1)\n    slopes.append(slope)\n\n# Check if all slopes are equal to determine if the function is linear\nis_linear = all(slope == slopes[0] for slope in slopes)\n\n# Assign the result to the answer variable\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'slopes' is not defined\")", "NameError(\"name 'slopes' is not defined\")", "NameError(\"name 'slopes' is not defined\")", "NameError(\"name 'slopes' is not defined\")"]
}
{
  "context": "Read the following table regarding \"Dance studio schedule\" and then answer a question.\n\nClass | Begin | End\nsalsa dance | 9:05 A.M. | 9:35 A.M.\nwestern dance | 9:45 A.M. | 11:05 A.M.\nbeginning ballet | 11:15 A.M. | 11:55 A.M.\nintermediate ballet | 12:00 P.M. | 1:10 P.M.\nhip hop dance | 1:25 P.M. | 2:05 P.M.\nswing dance | 2:10 P.M. | 3:15 P.M.", "question": "Read the following table regarding \"Dance studio schedule\" and then write Python code to answer a question.\n\nClass | Begin | End\nsalsa dance | 9:05 A.M. | 9:35 A.M.\nwestern dance | 9:45 A.M. | 11:05 A.M.\nbeginning ballet | 11:15 A.M. | 11:55 A.M.\nintermediate ballet | 12:00 P.M. | 1:10 P.M.\nhip hop dance | 1:25 P.M. | 2:05 P.M.\nswing dance | 2:10 P.M. | 3:15 P.M.\n\nLook at the following schedule. Which class begins at 2.10 P.M.? Choose from the the options: ['swing dance class', 'hip hop dance class', 'beginning ballet class', 'western dance class']", "answer": "swing dance class", "ques_type": "multi_choice", "choices": ["swing dance class", "hip hop dance class", "beginning ballet class", "western dance class"], "code": [
  "# Python code, return answer \n# Checking the schedule for the class that begins at 2:10 P.M.\nclass_schedule = {\n    'salsa dance': ('9:05 A.M.', '9:35 A.M.'),\n    'western dance': ('9:45 A.M.', '11:05 A.M.'),\n    'beginning ballet': ('11:15 A.M.', '11:55 A.M.'),\n    'intermediate ballet': ('12:00 P.M.', '1:10 P.M.'),\n    'hip hop dance': ('1:25 P.M.', '2:05 P.M.'),\n    'swing dance': ('2:10 P.M.', '3:15 P.M.')\n}\n\n# Identify the class that starts at 2:10 P.M.\nfor dance_class, timings in class_schedule.items():\n    if timings[0] == '2:10 P.M.':\n        answer = dance_class\n        break\n\nprint(answer)", "class_schedule = {\n    'salsa dance': ('9:05 A.M.', '9:35 A.M.'),\n    'western dance': ('9:45 A.M.', '11:05 A.M.'),\n    'beginning ballet': ('11:15 A.M.', '11:55 A.M.'),\n    'intermediate ballet': ('12:00 P.M.', '1:10 P.M.'),\n    'hip hop dance': ('1:25 P.M.', '2:05 P.M.'),\n    'swing dance': ('2:10 P.M.', '3:15 P.M.')\n}\n\n# Initialize the answer variable\nanswer = None\n\n# Iterate through the class schedule to find the class that begins at 2:10 P.M.\nfor dance_class, timings in class_schedule.items():\n    if timings[0] == '2:10 P.M.':\n        answer = dance_class + ' class'  # Format the answer to match the options\n        break\n\nprint(answer)", "class_schedule = {\n    'salsa dance': ('9:05 A.M.', '9:35 A.M.'),\n    'western dance': ('9:45 A.M.', '11:05 A.M.'),\n    'beginning ballet': ('11:15 A.M.', '11:55 A.M.'),\n    'intermediate ballet': ('12:00 P.M.', '1:10 P.M.'),\n    'hip hop dance': ('1:25 P.M.', '2:05 P.M.'),\n    'swing dance': ('2:10 P.M.', '3:15 P.M.')\n}\n\nanswer = None\nfor dance_class, timings in class_schedule.items():\n    if timings[0] == '2:10 P.M.':\n        answer = dance_class  # No need to add ' class' since options don't include it\n        break\n\nprint(answer)", "class_schedule = {\n    'salsa dance': ('9:05 A.M.', '9:35 A.M.'),\n    'western dance': ('9:45 A.M.', '11:05 A.M.'),\n    'beginning ballet': ('11:15 A.M.', '11:55 A.M.'),\n    'intermediate ballet': ('12:00 P.M.', '1:10 P.M.'),\n    'hip hop dance': ('1:25 P.M.', '2:05 P.M.'),\n    'swing dance': ('2:10 P.M.', '3:15 P.M.')\n}\n\n# Initialize answer variable\nanswer = None\n\n# Check the class that begins at 2:10 P.M.\nfor dance_class, timings in class_schedule.items():\n    if timings[0] == '2:10 P.M.':\n        answer = dance_class + ' class'  # Append ' class' to match the options\n        break\n\nprint(answer)"
], "prediction": ["swing dance", "swing dance class", "swing dance", "swing dance class"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nplane ticket to Tokyo | $971.00\nplane ticket to New York City | $454.00\nplane ticket to San Francisco | $716.00\nplane ticket to London | $599.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nplane ticket to Tokyo | $971.00\nplane ticket to New York City | $454.00\nplane ticket to San Francisco | $716.00\nplane ticket to London | $599.00\n\nHow much more does a plane ticket to Tokyo cost than a plane ticket to New York City?", "answer": "517", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_tokyo = 971.00 \ncost_nyc = 454.00 \n# Calculate the difference\ndifference = cost_tokyo - cost_nyc\nanswer = difference\nprint(answer)", "cost_tokyo = 971.00 \ncost_nyc = 454.00 \ndifference = cost_tokyo - cost_nyc\nanswer = f\"The plane ticket to Tokyo costs ${difference:.2f} more than the plane ticket to New York City.\"\nprint(answer)", "cost_tokyo = 971.00 \ncost_nyc = 454.00 \ndifference = cost_tokyo - cost_nyc\nanswer = difference  # Store the numerical difference\nprint(answer)  # Output the numerical difference", "cost_tokyo = 971.00 \ncost_nyc = 454.00 \ndifference = cost_tokyo - cost_nyc\nanswer = f\"The difference in cost between a plane ticket to Tokyo and a plane ticket to New York City is ${difference:.2f}.\"\nprint(answer)  # Output the formatted difference"], "prediction": [517.0, "The plane ticket to Tokyo costs $517.00 more than the plane ticket to New York City.", 517.0, "The difference in cost between a plane ticket to Tokyo and a plane ticket to New York City is $517.00."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Birds per flock\" and then answer a question.\n\nStem | Leaf \n2 | 0, 0, 0\n3 | 2, 3, 5, 5, 8\n4 | 2, 5, 5, 5\n5 | 0, 2, 3, 6, 6, 7, 9\n6 | 0, 4, 5, 6, 9\n7 | 5", "question": "Read the following table regarding \"Birds per flock\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 0, 0, 0\n3 | 2, 3, 5, 5, 8\n4 | 2, 5, 5, 5\n5 | 0, 2, 3, 6, 6, 7, 9\n6 | 0, 4, 5, 6, 9\n7 | 5\n\nThe bird watcher counted the number of birds in each flock that passed overhead. What is the largest number of birds?", "answer": "75", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number of birds corresponds to the largest value in the stem-and-leaf display.\nlargest_bird_count = 75  # From the stem \"7 | 5\", the value is 75 birds.\nanswer = largest_bird_count\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [0, 0, 0]), (3, [2, 3, 5, 5, 8]), (4, [2, 5, 5, 5]), (5, [0, 2, 3, 6, 6, 7, 9]), (6, [0, 4, 5, 6, 9]), (7, [5])]  \n\n# Initialize variable to hold the largest bird count  \nlargest_bird_count = 0  \n\n# Iterate through the stem and leaf data structure to find the largest bird count  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        bird_count = stem * 10 + leaf  # Calculate the actual bird count  \n        if bird_count > largest_bird_count:  \n            largest_bird_count = bird_count  # Update largest bird count if current is greater  \n\nanswer = largest_bird_count  \nprint(answer)", "stem_and_leaf = [(2, [0, 0, 0]), (3, [2, 3, 5, 5, 8]), (4, [2, 5, 5, 5]), (5, [0, 2, 3, 6, 6, 7, 9]), (6, [0, 4, 5, 6, 9]), (7, [5])]  \nlargest_bird_count = 0  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        bird_count = stem * 10 + leaf  # Calculate the actual bird count  \n        if bird_count > largest_bird_count:  \n            largest_bird_count = bird_count  # Update largest bird count if current is greater  \nanswer = largest_bird_count  \nprint(answer)", "stem_and_leaf = [(2, [0, 0, 0]), (3, [2, 3, 5, 5, 8]), (4, [2, 5, 5, 5]), (5, [0, 2, 3, 6, 6, 7, 9]), (6, [0, 4, 5, 6, 9]), (7, [5])]  \nlargest_bird_count = 0  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        bird_count = stem * 10 + leaf  # Calculate the actual bird count  \n        if bird_count > largest_bird_count:  \n            largest_bird_count = bird_count  # Update largest bird count if current is greater  \nanswer = int(largest_bird_count)  # Ensure the result is stored as an integer  \nprint(answer)"
], "prediction": [75.0, 75.0, 75.0, 75.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Train tickets sold\" and then answer a question.\n\nDay | Number of tickets\nMonday | 42\nTuesday | 35\nWednesday | 38\nThursday | 43\nFriday | 36\nSaturday | 43\nSunday | 45", "question": "Read the following table regarding \"Train tickets sold\" and then write Python code to answer a question.\n\nDay | Number of tickets\nMonday | 42\nTuesday | 35\nWednesday | 38\nThursday | 43\nFriday | 36\nSaturday | 43\nSunday | 45\n\nThe transportation company tracked the number of train tickets sold in the past 7 days. What is the median of the numbers?", "answer": "42", "ques_type": "free_text", "choices": null, "code": ["", "# Define the number of tickets sold each day\ntickets_sold = [42, 35, 38, 43, 36, 43, 45]\n\n# Sort the list of tickets sold\nsorted_tickets = sorted(tickets_sold)\n\n# Calculate the median\nn = len(sorted_tickets)\nif n % 2 == 0:  # If even number of elements\n    median = (sorted_tickets[n//2 - 1] + sorted_tickets[n//2]) / 2\nelse:  # If odd number of elements\n    median = sorted_tickets[n//2]\n\nanswer = median\nprint(answer)", "tickets_sold = [42, 35, 38, 43, 36, 43, 45]\nsorted_tickets = sorted(tickets_sold)\nn = len(sorted_tickets)\n\nif n % 2 == 0:  # If even number of elements\n    median = (sorted_tickets[n//2 - 1] + sorted_tickets[n//2]) / 2\nelse:  # If odd number of elements\n    median = sorted_tickets[n//2]\n\nanswer = median\nprint(answer)", "# List of tickets sold for each day of the week\ntickets_sold = [42, 35, 38, 43, 36, 43, 45]\n\n# Sort the list of tickets sold\nsorted_tickets = sorted(tickets_sold)\n\n# Calculate the number of elements\nn = len(sorted_tickets)\n\n# Calculate the median\nif n % 2 == 0:  # If even number of elements\n    median = (sorted_tickets[n//2 - 1] + sorted_tickets[n//2]) / 2\nelse:  # If odd number of elements\n    median = sorted_tickets[n//2]\n\n# Store the result in the variable 'answer'\nanswer = median\n\n# Output the answer\nprint(answer)"], "prediction": [null, 42.0, 42.0, 42.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Broken lights per string\" and then answer a question.\n\nStem | Leaf \n2 | 2, 3, 4, 6, 9\n3 | 3, 8, 9\n4 | 0, 2, 7, 9\n5 | 0, 6, 6, 7\n6 | 0, 0, 1, 8, 9\n7 | 3, 8", "question": "Read the following table regarding \"Broken lights per string\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 2, 3, 4, 6, 9\n3 | 3, 8, 9\n4 | 0, 2, 7, 9\n5 | 0, 6, 6, 7\n6 | 0, 0, 1, 8, 9\n7 | 3, 8\n\nWhile hanging Christmas lights for neighbors, Evan counted the number of broken lights on each string. How many strings had at least 50 broken lights but less than 80 broken lights?", "answer": "11", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Analyzing the stem-and-leaf display to count strings with broken lights between 50 and 79.\nbroken_lights_counts = [\n    22, 23, 24, 26, 29,  # 2 | 2, 3, 4, 6, 9\n    33, 38, 39,          # 3 | 3, 8, 9\n    40, 42, 47, 49,      # 4 | 0, 2, 7, 9\n    50, 56, 56, 57,      # 5 | 0, 6, 6, 7\n    60, 60, 61, 68, 69,  # 6 | 0, 0, 1, 8, 9\n    73, 78               # 7 | 3, 8\n]\n\n# Counting strings with at least 50 but less than 80 broken lights\ncount = sum(1 for lights in broken_lights_counts if 50 <= lights < 80)\nanswer = count\nprint(answer)", "broken_lights_counts = [\n    22, 23, 24, 26, 29,  # 2 | 2, 3, 4, 6, 9\n    33, 38, 39,          # 3 | 3, 8, 9\n    40, 42, 47, 49,      # 4 | 0, 2, 7, 9\n    50, 56, 56, 57,      # 5 | 0, 6, 6, 7\n    60, 60, 61, 68, 69,  # 6 | 0, 0, 1, 8, 9\n    73, 78               # 7 | 3, 8\n]\ncount = sum(1 for lights in broken_lights_counts if 50 <= lights < 80)\nanswer = int(count)  # Convert to integer to avoid floating-point representation\nprint(answer)", "broken_lights_counts = [\n    22, 23, 24, 26, 29,  # 2 | 2, 3, 4, 6, 9\n    33, 38, 39,          # 3 | 3, 8, 9\n    40, 42, 47, 49,      # 4 | 0, 2, 7, 9\n    50, 56, 56, 57,      # 5 | 0, 6, 6, 7\n    60, 60, 61, 68, 69,  # 6 | 0, 0, 1, 8, 9\n    73, 78               # 7 | 3, 8\n]\ncount = sum(1 for lights in broken_lights_counts if 50 <= lights < 80)\nanswer = count  # No need for conversion, count is already an integer\nprint(answer)", "broken_lights_counts = [\n    22, 23, 24, 26, 29,  # 2 | 2, 3, 4, 6, 9\n    33, 38, 39,          # 3 | 3, 8, 9\n    40, 42, 47, 49,      # 4 | 0, 2, 7, 9\n    50, 56, 56, 57,      # 5 | 0, 6, 6, 7\n    60, 60, 61, 68, 69,  # 6 | 0, 0, 1, 8, 9\n    73, 78               # 7 | 3, 8\n]\n\n# Count the number of strings with at least 50 but less than 80 broken lights\ncount = sum(1 for lights in broken_lights_counts if 50 <= lights < 80)\nanswer = count  # This will be an integer\n\nprint(answer)  # Output will be 11"
], "prediction": [11.0, 11.0, 11.0, 11.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"People on the bus\" and then answer a question.\n\nDay | Number of people\nSaturday | 97\nSunday | 94\nMonday | 91\nTuesday | 93", "question": "Read the following table regarding \"People on the bus\" and then write Python code to answer a question.\n\nDay | Number of people\nSaturday | 97\nSunday | 94\nMonday | 91\nTuesday | 93\n\nA bus driver paid attention to how many passengers her bus had each day. On which day did the bus have the most passengers? Choose from the the options: ['Saturday', 'Sunday', 'Monday', 'Tuesday']", "answer": "Saturday", "ques_type": "multi_choice", "choices": ["Saturday", "Sunday", "Monday", "Tuesday"], "code": ["# Python code, return answer \npassenger_counts = {\n    'Saturday': 97,\n    'Sunday': 94,\n    'Monday': 91,\n    'Tuesday': 93\n}\n# Find the day with the most passengers\nmost_passengers_day = max(passenger_counts, key=passenger_counts.get)\nanswer = most_passengers_day\nprint(answer)", "passenger_counts = {\n    'Saturday': 97,\n    'Sunday': 94,\n    'Monday': 91,\n    'Tuesday': 93\n}\n\n# Determine the day with the most passengers\nmost_passengers_day = max(passenger_counts, key=passenger_counts.get)\nanswer = most_passengers_day\n\nprint(answer)", "# Define the passenger counts for each day\npassenger_counts = {\n    'Saturday': 97,\n    'Sunday': 94,\n    'Monday': 91,\n    'Tuesday': 93\n}\n\n# Find the day with the most passengers\nmost_passengers_day = max(passenger_counts, key=passenger_counts.get)\nanswer = most_passengers_day\n\nprint(answer)", "passenger_counts = {\n    'Saturday': 97,\n    'Sunday': 94,\n    'Monday': 91,\n    'Tuesday': 93\n}\nmost_passengers_day = max(passenger_counts, key=passenger_counts.get)\nanswer = most_passengers_day\nprint(answer)"], "prediction": ["Saturday", "Saturday", "Saturday", "Saturday"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Taking photographs\" and then answer a question.\n\nPhotographs taken | Frequency\n0 | 9\n1 | 0\n2 | 16\n3 | 1\n4 | 18\n5 | 4\n6 | 12", "question": "Read the following table regarding \"Taking photographs\" and then write Python code to answer a question.\n\nPhotographs taken | Frequency\n0 | 9\n1 | 0\n2 | 16\n3 | 1\n4 | 18\n5 | 4\n6 | 12\n\nWhile compiling photos for an album, Maureen noted the number of photographs taken by each of her friends and family. How many people took more than 1 photograph?", "answer": "51", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Frequency of photographs taken\nfrequency = {\n    0: 9,\n    1: 0,\n    2: 16,\n    3: 1,\n    4: 18,\n    5: 4,\n    6: 12\n}\n\n# Calculate the number of people who took more than 1 photograph\npeople_more_than_one = sum(frequency[i] for i in range(2, 7))\nanswer = people_more_than_one\nprint(answer)", "# Define the frequency of photographs taken\nfrequency = {\n    0: 9,\n    1: 0,\n    2: 16,\n    3: 1,\n    4: 18,\n    5: 4,\n    6: 12\n}\n\n# Calculate the number of people who took more than 1 photograph\npeople_more_than_one = sum(frequency[i] for i in range(2, 7))\nanswer = people_more_than_one\n\nprint(answer)", "# Define the frequency of photographs taken\nfrequency = {\n    0: 9,\n    1: 0,\n    2: 16,\n    3: 1,\n    4: 18,\n    5: 4,\n    6: 12\n}\n\n# Calculate the number of people who took more than 1 photograph\npeople_more_than_one = sum(count for photos, count in frequency.items() if photos > 1)\nanswer = people_more_than_one\nprint(answer)", "frequency = {\n    0: 9,\n    1: 0,\n    2: 16,\n    3: 1,\n    4: 18,\n    5: 4,\n    6: 12\n}\n\n# Count the number of people who took more than 1 photograph\npeople_more_than_one = sum(count for photos, count in frequency.items() if photos > 1)\nanswer = int(people_more_than_one)  # Ensure the result is an integer\nprint(answer)"
], "prediction": [null, null, 51.0, 51.0], "report": ["NameError(\"name 'frequency' is not defined\")", "NameError(\"name 'frequency' is not defined\")", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Spinning a wheel numbered 1 through 5\" and then answer a question.\n\nNumber spun | Frequency\n1 | 3\n2 | 14\n3 | 4\n4 | 9\n5 | 0", "question": "Read the following table regarding \"Spinning a wheel numbered 1 through 5\" and then write Python code to answer a question.\n\nNumber spun | Frequency\n1 | 3\n2 | 14\n3 | 4\n4 | 9\n5 | 0\n\nA game show viewer monitors how often a wheel numbered 1 through 5 stops at each number. How many people spun a number less than 3?", "answer": "17", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of numbers less than 3\nfrequency_1 = 3  # Number spun 1\nfrequency_2 = 14 # Number spun 2\n# Total frequency for numbers less than 3\ntotal_spun_less_than_3 = frequency_1 + frequency_2\nanswer = total_spun_less_than_3\nprint(answer)", "frequency_1 = 3  # Number spun 1\nfrequency_2 = 14 # Number spun 2\ntotal_spun_less_than_3 = frequency_1 + frequency_2\nanswer = total_spun_less_than_3  # This will be an integer\nprint(answer)", "frequency_1 = 3  # Number spun 1\nfrequency_2 = 14 # Number spun 2\ntotal_spun_less_than_3 = frequency_1 + frequency_2\nanswer = int(total_spun_less_than_3)  # Convert to integer\nprint(answer)", "# Define the frequency of each number spun on the wheel\nfrequency_1 = 3  # Number spun 1\nfrequency_2 = 14 # Number spun 2\n\n# Calculate the total number of spins for numbers less than 3\ntotal_spun_less_than_3 = frequency_1 + frequency_2\n\n# Store the result in the variable 'answer'\nanswer = total_spun_less_than_3\n\n# Output the answer\nprint(answer)"], "prediction": [17.0, 17.0, 17.0, 17.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Scarf lengths (centimeters)\" and then answer a question.\n\nStem | Leaf \n6 | 9\n7 | 0, 1, 1, 2, 3, 3, 7, 9\n8 | 0, 0, 3, 6, 7, 9\n9 | 0, 0", "question": "Read the following table regarding \"Scarf lengths (centimeters)\" and then write Python code to answer a question.\n\nStem | Leaf \n6 | 9\n7 | 0, 1, 1, 2, 3, 3, 7, 9\n8 | 0, 0, 3, 6, 7, 9\n9 | 0, 0\n\nStefan measured the length of each scarf in the clothing store where he works. How many scarves are at least 60 centimeters but less than 80 centimeters?", "answer": "9", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Counting scarves with lengths between 60 cm (inclusive) and 80 cm (exclusive).\nscarf_lengths = [69, 70, 71, 71, 72, 73, 73, 77, 79, 80, 80, 83, 86, 87, 89, 90, 90]  # Converted from stem-and-leaf\nscarf_count = sum(1 for length in scarf_lengths if 60 <= length < 80)\nanswer = scarf_count\nprint(answer)", "# Define the scarf lengths based on the stem-and-leaf representation\nscarf_lengths = [69, 70, 71, 71, 72, 73, 73, 77, 79]  # Lengths between 60 and 80 centimeters\n\n# Count the number of scarves that are at least 60 centimeters but less than 80 centimeters\nscarf_count = sum(1 for length in scarf_lengths if 60 <= length < 80)\n\n# Store the result in the variable 'answer'\nanswer = scarf_count\n\n# Print the answer\nprint(answer)", "scarf_lengths = [69, 70, 71, 71, 72, 73, 73, 77, 79]  # Lengths between 60 and 80 centimeters\nscarf_count = sum(1 for length in scarf_lengths if 60 <= length < 80)\nanswer = int(scarf_count)  # Ensure the count is stored as an integer\nprint(answer)", "# Define the scarf lengths based on the stem and leaf data structure\nscarf_lengths = [69, 70, 71, 71, 72, 73, 73, 77, 79]  # Lengths between 60 and 80 centimeters\n\n# Count the number of scarves that are at least 60 centimeters but less than 80 centimeters\nscarf_count = sum(1 for length in scarf_lengths if 60 <= length < 80)\n\n# Store the count as an integer in the variable 'answer'\nanswer = scarf_count\n\n# Print the answer\nprint(answer)"
], "prediction": [9.0, 9.0, 9.0, 9.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nflute | $472\nclarinet | $494\nbanjo | $343\ntrombone | $204\ndrum set | $208\nguitar | $584", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nflute | $472\nclarinet | $494\nbanjo | $343\ntrombone | $204\ndrum set | $208\nguitar | $584\n\nHow much more does a guitar cost than a clarinet?", "answer": "90", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_guitar = 584 \ncost_clarinet = 494 \n# Calculate the difference in cost\ncost_difference = cost_guitar - cost_clarinet\nanswer = cost_difference\nprint(answer)", "cost_guitar = 584 \ncost_clarinet = 494 \ncost_difference = cost_guitar - cost_clarinet\nanswer = int(cost_difference)  # Convert to integer for cleaner output\nprint(answer)", "cost_guitar = 584 \ncost_clarinet = 494 \ncost_difference = cost_guitar - cost_clarinet\nanswer = cost_difference  # No need to convert to integer as it's already a whole number\nprint(answer)", "cost_guitar = 584 \ncost_clarinet = 494 \ncost_difference = cost_guitar - cost_clarinet\nanswer = int(cost_difference)  # Convert to integer to ensure the output is a whole number\nprint(answer)"], "prediction": [90.0, 90.0, 90.0, 90.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbrisket | $3/lb\nround | $8/lb\nchuck | $10/lb\nshank | $10/lb\nloin | $8/lb\nrib | $5/lb", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbrisket | $3/lb\nround | $8/lb\nchuck | $10/lb\nshank | $10/lb\nloin | $8/lb\nrib | $5/lb\n\nEthan wants to buy 3+1/4 pounds of rib. How much will he spend?", "answer": "16.25", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Price per pound of rib\nprice_per_pound_rib = 5 \n# Amount of rib in pounds\npounds_of_rib = 3 + 1/4 \n# Calculate the total cost\ntotal_cost = price_per_pound_rib * pounds_of_rib\nanswer = total_cost\nprint(answer)", "from fractions import Fraction\n\nprice_per_pound_rib = 5\npounds_of_rib = 3 + Fraction(1, 4)  # Using Fraction for clarity\ntotal_cost = price_per_pound_rib * float(pounds_of_rib)  # Convert to float for multiplication\nanswer = total_cost\nprint(answer)", "from fractions import Fraction\n\n# Price per pound of rib\nprice_per_pound_rib = 5  \n\n# Amount of rib in pounds (using Fraction for clarity)\npounds_of_rib = 3 + Fraction(1, 4)  \n\n# Calculate total cost without converting to float\ntotal_cost = price_per_pound_rib * pounds_of_rib  \n\n# Store the result in the answer variable\nanswer = total_cost  \n\nprint(answer)", "# Define the price per pound of rib and the total weight in pounds\nprice_per_pound_rib = 5  \npounds_of_rib = 3.25  # 3 + 1/4 pounds as a float\n\n# Calculate the total cost\ntotal_cost = price_per_pound_rib * pounds_of_rib  \nanswer = total_cost  \nprint(answer)"], "prediction": [16.25, 16.25, 16.25, 16.25], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Vacant apartments\" and then answer a question.\n\nApartment complex | August | September\nAlameda Apartments | 11 | 17\nCity Apartments | 16 | 20\nDowntown Apartments | 14 | 13\nShadyside Apartments | 5 | 5\nUniversity Apartments | 9 | 12", "question": "Read the following table regarding \"Vacant apartments\" and then write Python code to answer a question.\n\nApartment complex | August | September\nAlameda Apartments | 11 | 17\nCity Apartments | 16 | 20\nDowntown Apartments | 14 | 13\nShadyside Apartments | 5 | 5\nUniversity Apartments | 9 | 12\n\nLivingston Property Management reviewed the number of vacant apartments at each its apartment complexes over time. In September, which complex had the most vacant apartments? Choose from the the options: ['City Apartments', 'Downtown Apartments', 'University Apartments', 'Alameda Apartments']", "answer": "City Apartments", "ques_type": "multi_choice", "choices": ["City Apartments", "Downtown Apartments", "University Apartments", "Alameda Apartments"], "code": [
  "# Python code, return answer \nvacant_apartments_september = {\n    'Alameda Apartments': 17,\n    'City Apartments': 20,\n    'Downtown Apartments': 13,\n    'Shadyside Apartments': 5,\n    'University Apartments': 12\n}\n# Find the complex with the most vacant apartments in September\nmost_vacant_complex = max(vacant_apartments_september, key=vacant_apartments_september.get)\nanswer = most_vacant_complex\nprint(answer)", "# Store the number of vacant apartments for each complex in September\nvacant_apartments_september = {\n    'Alameda Apartments': 17,\n    'City Apartments': 20,\n    'Downtown Apartments': 13,\n    'Shadyside Apartments': 5,\n    'University Apartments': 12\n}\n\n# Find the apartment complex with the most vacant apartments in September\nmost_vacant_complex = max(vacant_apartments_september, key=vacant_apartments_september.get)\n\n# Store the answer\nanswer = most_vacant_complex\n\n# Output the answer\nprint(answer)", "# Define a dictionary containing the number of vacant apartments in September for each complex\nvacant_apartments_september = {\n    'Alameda Apartments': 17,\n    'City Apartments': 20,\n    'Downtown Apartments': 13,\n    'Shadyside Apartments': 5,\n    'University Apartments': 12\n}\n\n# Find the apartment complex with the most vacant apartments in September\nmost_vacant_complex = max(vacant_apartments_september, key=vacant_apartments_september.get)\n\n# Store the result in the variable 'answer'\nanswer = most_vacant_complex\n\n# Output the answer\nprint(answer)", "# Define the number of vacant apartments in September for each complex\nvacant_apartments_september = {\n    'Alameda Apartments': 17,\n    'City Apartments': 20,\n    'Downtown Apartments': 13,\n    'Shadyside Apartments': 5,\n    'University Apartments': 12\n}\n\n# Find the complex with the most vacant apartments in September\nmost_vacant_complex = max(vacant_apartments_september, key=vacant_apartments_september.get)\nanswer = most_vacant_complex\n\n# Output the answer\nprint(answer)"
], "prediction": ["City Apartments", "City Apartments", "City Apartments", "City Apartments"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Temperature at noon\" and then answer a question.\n\nDay | Temperature (\u00c2\u00b0C)\nSunday | 4\nMonday | 4\nTuesday | 6\nWednesday | 5\nThursday | 6\nFriday | 4\nSaturday | 5", "question": "Read the following table regarding \"Temperature at noon\" and then write Python code to answer a question.\n\nDay | Temperature (\u00c2\u00b0C)\nSunday | 4\nMonday | 4\nTuesday | 6\nWednesday | 5\nThursday | 6\nFriday | 4\nSaturday | 5\n\nErin graphed the temperature at noon for 7 days. What is the mode of the numbers?", "answer": "4", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nfrom statistics import mode\n\n# List of temperatures for the week\ntemperatures = [4, 4, 6, 5, 6, 4, 5]\n\n# Calculate the mode\nmode_temperature = mode(temperatures)\nanswer = mode_temperature\nprint(answer)", "from statistics import mode\n\ntemperatures = [4, 4, 6, 5, 6, 4, 5]\nmode_temperature = mode(temperatures)\nanswer = int(mode_temperature)  # Convert to integer for expected output format\nprint(answer)", "from statistics import mode\n\n# List of temperatures recorded over the week\ntemperatures = [4, 4, 6, 5, 6, 4, 5]\n\n# Calculate the mode of the temperatures\nmode_temperature = mode(temperatures)\n\n# Store the result as an integer\nanswer = int(mode_temperature)\n\n# Print the answer\nprint(answer)", "from statistics import mode\n\ntemperatures = [4, 4, 6, 5, 6, 4, 5]\nmode_temperature = mode(temperatures)\nanswer = mode_temperature  # This will be an integer\nprint(answer)"], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nrabbit | $21.88\npot-bellied pig | $50.88\ntarantula | $25.55\nbearded dragon | $74.21", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nrabbit | $21.88\npot-bellied pig | $50.88\ntarantula | $25.55\nbearded dragon | $74.21\n\nHow much more does a pot-bellied pig cost than a rabbit?", "answer": "29", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_rabbit = 21.88\ncost_pot_bellied_pig = 50.88\n# Calculate the difference in cost\ndifference_cost = cost_pot_bellied_pig - cost_rabbit\nanswer = difference_cost\nprint(answer)", "cost_rabbit = 21.88\ncost_pot_bellied_pig = 50.88\ndifference_cost = cost_pot_bellied_pig - cost_rabbit\nanswer = round(difference_cost, 2)  # Round to two decimal places for monetary value\nprint(answer)", "cost_rabbit = 21.88\ncost_pot_bellied_pig = 50.88\ndifference_cost = cost_pot_bellied_pig - cost_rabbit\nanswer = \"${:.2f}\".format(difference_cost)  # Format as a monetary value with two decimal places\nprint(answer)", "cost_rabbit = 21.88\ncost_pot_bellied_pig = 50.88\ndifference_cost = cost_pot_bellied_pig - cost_rabbit\nanswer = difference_cost  # Store the numerical difference\nprint(answer)"], "prediction": [29.0, 29.0, "$29.00", 29.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Silver beads per bracelet\" and then answer a question.\n\nStem | Leaf \n2 | 1, 3, 5, 5, 6, 6, 9\n3 | 0, 1, 2, 5, 6, 7, 8\n4 | 0, 2, 6, 6, 8, 9, 9, 9\n5 | 6, 8, 9", "question": "Read the following table regarding \"Silver beads per bracelet\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 1, 3, 5, 5, 6, 6, 9\n3 | 0, 1, 2, 5, 6, 7, 8\n4 | 0, 2, 6, 6, 8, 9, 9, 9\n5 | 6, 8, 9\n\nSandeep counted the number of silver beads on each bracelet at Booneville Jewelry, the store where he works. How many bracelets had at least 47 silver beads?", "answer": "7", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Analyzing the stem-and-leaf display to count the number of bracelets with at least 47 silver beads.\n# The values are interpreted as follows:\n# 2 | 1, 3, 5, 5, 6, 6, 9  => 21, 23, 25, 25, 26, 26, 29 (7 values)\n# 3 | 0, 1, 2, 5, 6, 7, 8  => 30, 31, 32, 35, 36, 37, 38 (7 values)\n# 4 | 0, 2, 6, 6, 8, 9, 9, 9  => 40, 42, 46, 46, 48, 49, 49, 49 (8 values)\n# 5 | 6, 8, 9  => 56, 58, 59 (3 values)\n\n# Count the number of values that are at least 47\nbead_counts = [21, 23, 25, 25, 26, 26, 29, \n               30, 31, 32, 35, 36, 37, 38,\n               40, 42, 46, 46, 48, 49, 49, 49,\n               56, 58, 59]\n\n# Count the number of bracelets with at least 47 silver beads\ncount_at_least_47 = sum(1 for count in bead_counts if count >= 47)\nanswer = count_at_least_47\nprint(answer)", "# List of bead counts on each bracelet\nbead_counts = [21, 23, 25, 25, 26, 26, 29, \n               30, 31, 32, 35, 36, 37, 38,\n               40, 42, 46, 46, 48, 49, 49, 49,\n               56, 58, 59]\n\n# Count the number of bracelets with at least 47 silver beads\ncount_at_least_47 = sum(1 for count in bead_counts if count >= 47)\n\n# Store the result in the variable 'answer'\nanswer = count_at_least_47\n\n# Output the answer\nprint(answer)", "# List of silver bead counts on bracelets\nbead_counts = [21, 23, 25, 25, 26, 26, 29, \n               30, 31, 32, 35, 36, 37, 38,\n               40, 42, 46, 46, 48, 49, 49, 49,\n               56, 58, 59]\n\n# Count the number of bracelets with at least 47 silver beads\ncount_at_least_47 = sum(1 for count in bead_counts if count >= 47)\nanswer = int(count_at_least_47)  # Ensure the answer is an integer\n\nprint(answer)", "# List of silver beads on each bracelet\nbead_counts = [21, 23, 25, 25, 26, 26, 29, \n               30, 31, 32, 35, 36, 37, 38,\n               40, 42, 46, 46, 48, 49, 49, 49,\n               56, 58, 59]\n\n# Count the number of bracelets with at least 47 silver beads\ncount_at_least_47 = sum(1 for count in bead_counts if count >= 47)\n\n# Store the result as an integer\nanswer = count_at_least_47  \nprint(answer)"
], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | A Footlong shoe | A Toes Knows shoe\nDispleased | 3 | 2\nPleased | 2 | 4", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | A Footlong shoe | A Toes Knows shoe\nDispleased | 3 | 2\nPleased | 2 | 4\n\nA wilderness retail store asked a consulting company to do an analysis of their hiking shoe customers. The consulting company gathered data from each customer that purchased hiking shoes, and recorded the shoe brand and the customer's level of happiness. What is the probability that a randomly selected customer is pleased and purchased a Footlong shoe? Simplify any fractions.", "answer": "2/11", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total customers in the survey\ndispleased_footlong = 3\npleased_footlong = 2\ndispleased_toes_knows = 2\npleased_toes_knows = 4\n\ntotal_customers = (displeased_footlong + pleased_footlong + \n                   displeased_toes_knows + pleased_toes_knows)\n\n# Customers that are pleased and purchased a Footlong shoe\npleased_footlong_customers = pleased_footlong\n\n# Calculate the probability\nprobability_pleased_footlong = pleased_footlong_customers / total_customers\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(pleased_footlong_customers, total_customers).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Define the number of customers based on their shoe brand and happiness level\ndispleased_footlong = 3\npleased_footlong = 2\ndispleased_toes_knows = 2\npleased_toes_knows = 4\n\n# Calculate the total number of customers\ntotal_customers = (displeased_footlong + pleased_footlong + \n                   displeased_toes_knows + pleased_toes_knows)\n\n# Customers who are pleased and purchased a Footlong shoe\npleased_footlong_customers = pleased_footlong\n\n# Calculate the probability of being pleased and purchasing a Footlong shoe\nfrom fractions import Fraction\nprobability_pleased_footlong = Fraction(pleased_footlong_customers, total_customers).limit_denominator()\n\n# Store the result in the variable answer\nanswer = probability_pleased_footlong\nprint(answer)", "displeased_footlong = 3\npleased_footlong = 2\ndispleased_toes_knows = 2\npleased_toes_knows = 4\n\n# Calculate the total number of customers\ntotal_customers = (displeased_footlong + pleased_footlong + \n                   displeased_toes_knows + pleased_toes_knows)\n\n# Calculate the number of pleased customers who purchased a Footlong shoe\npleased_footlong_customers = pleased_footlong\n\n# Use the Fraction class to calculate the probability\nfrom fractions import Fraction\nprobability_pleased_footlong = Fraction(pleased_footlong_customers, total_customers).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = probability_pleased_footlong\nprint(answer)", "displeased_footlong = 3\npleased_footlong = 2\ndispleased_toes_knows = 2\npleased_toes_knows = 4\n\ntotal_customers = (displeased_footlong + pleased_footlong + \n                   displeased_toes_knows + pleased_toes_knows)\n\npleased_footlong_customers = pleased_footlong\n\nfrom fractions import Fraction\nprobability_pleased_footlong = Fraction(pleased_footlong_customers, total_customers).limit_denominator()\n\nanswer = probability_pleased_footlong\nprint(answer)"
], "prediction": [0.18182, 0.18182, 0.18182, 0.18182], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Restaurant ratings\" and then answer a question.\n\nStem | Leaf \n0 | 3, 3, 5\n1 | \n2 | 0\n3 | \n4 | 8\n5 | 0", "question": "Read the following table regarding \"Restaurant ratings\" and then write Python code to answer a question.\n\nStem | Leaf \n0 | 3, 3, 5\n1 | \n2 | 0\n3 | \n4 | 8\n5 | 0\n\nA food magazine published a listing of local restaurant ratings. How many restaurants were rated exactly 4 points?", "answer": "0", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# From the stem-and-leaf display, the ratings are represented as follows:\n# The stem '4' has one leaf '8', meaning there is one restaurant rated 4 points.\n\n# Count the number of restaurants rated exactly 4 points\nratings_count = 1  # Since the leaf is '8' there is 1 restaurant rated 4 points.\nanswer = ratings_count\nprint(answer)", "# Define the stem and leaf data structure for restaurant ratings\nratings = {0: [3, 3, 5], 1: [], 2: [0], 3: [], 4: [8], 5: [0]}\n\n# Initialize counter for restaurants rated exactly 4 points\nratings_count = 0\n\n# Check the leaf for stem 4 to count restaurants rated exactly 4 points\nif 4 in ratings:\n    ratings_count += len(ratings[4])\n\nanswer = ratings_count\nprint(answer)", "ratings = {0: [3, 3, 5], 1: [], 2: [0], 3: [], 4: [8], 5: [0]}\nratings_count = 0\nif 4 in ratings:\n    ratings_count += len(ratings[4])\nanswer = ratings_count  # This will be an integer\nprint(answer)", "ratings = {0: [3, 3, 5], 1: [], 2: [0], 3: [], 4: [8], 5: [0]}\nratings_count = 0\nif 4 in ratings:\n    ratings_count += len(ratings[4])\nanswer = int(ratings_count)  # Ensure the result is an integer\nprint(answer)"], "prediction": [1.0, 1.0, 1.0, 1.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nstrawberry ice cream | $2.30 per kg\ncherry ice cream | $1.79 per kg\nmint ice cream | $0.95 per kg\ncoffee ice cream | $1.99 per kg", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nstrawberry ice cream | $2.30 per kg\ncherry ice cream | $1.79 per kg\nmint ice cream | $0.95 per kg\ncoffee ice cream | $1.99 per kg\n\nKenny bought 4 kilograms of strawberry ice cream and 2 kilograms of cherry ice cream. How much did he spend?", "answer": "12.78", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices per kilogram\nprice_strawberry = 2.30 \nprice_cherry = 1.79 \n\n# Quantities bought\nkg_strawberry = 4 \nkg_cherry = 2 \n\n# Calculate total cost\ntotal_cost = (price_strawberry * kg_strawberry) + (price_cherry * kg_cherry)\nanswer = total_cost\nprint(answer)", "price_strawberry = 2.30 \nprice_cherry = 1.79 \nkg_strawberry = 4 \nkg_cherry = 2 \n\n# Calculate the total cost for each type of ice cream\ncost_strawberry = price_strawberry * kg_strawberry\ncost_cherry = price_cherry * kg_cherry\n\n# Sum the costs to get the total amount spent\ntotal_cost = cost_strawberry + cost_cherry\nanswer = total_cost\nprint(answer)", "# Define the prices and quantities for the ice creams\nprice_strawberry = 2.30 \nprice_cherry = 1.79 \nkg_strawberry = 4 \nkg_cherry = 2 \n\n# Calculate the cost for each type of ice cream\ncost_strawberry = price_strawberry * kg_strawberry\ncost_cherry = price_cherry * kg_cherry\n\n# Calculate the total cost\ntotal_cost = cost_strawberry + cost_cherry\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Prices per kilogram of ice cream\nprice_strawberry = 2.30 \nprice_cherry = 1.79 \n\n# Quantities purchased\nkg_strawberry = 4 \nkg_cherry = 2 \n\n# Calculate the cost for each type of ice cream\ncost_strawberry = price_strawberry * kg_strawberry\ncost_cherry = price_cherry * kg_cherry\n\n# Calculate total cost\ntotal_cost = cost_strawberry + cost_cherry\nanswer = total_cost\n\nprint(answer)"
], "prediction": [12.78, 12.78, 12.78, 12.78], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npiece of black obsidian | $0.59\norange agate | $0.74\npiece of black mica | $0.26\npumice stone | $0.72", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npiece of black obsidian | $0.59\norange agate | $0.74\npiece of black mica | $0.26\npumice stone | $0.72\n\nHow much money does Anthony need to buy 2 pieces of black obsidian and 7 pumice stones?", "answer": "6.22", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_black_obsidian = 0.59 \nprice_pumice_stone = 0.72 \n# Calculate the total cost\ntotal_cost = (2 * price_black_obsidian) + (7 * price_pumice_stone)\nanswer = total_cost\nprint(answer)", "# Prices of the items\nprice_black_obsidian = 0.59 \nprice_pumice_stone = 0.72 \n\n# Calculate total cost\ntotal_cost = (2 * price_black_obsidian) + (7 * price_pumice_stone)\n\n# Assign the result to the variable answer\nanswer = round(total_cost, 2)  # Rounding to 2 decimal places for currency format\nprint(answer)", "# Prices of items\nprice_black_obsidian = 0.59 \nprice_pumice_stone = 0.72 \n\n# Calculate total cost for 2 pieces of black obsidian and 7 pumice stones\ntotal_cost = (2 * price_black_obsidian) + (7 * price_pumice_stone)\n\n# Round the total cost to 2 decimal places for currency format\nanswer = round(total_cost, 2)\n\n# Print the answer\nprint(answer)", "# Define the prices of the items\nprice_black_obsidian = 0.59 \nprice_pumice_stone = 0.72 \n\n# Calculate the total cost for 2 pieces of black obsidian and 7 pumice stones\ntotal_cost = (2 * price_black_obsidian) + (7 * price_pumice_stone)\n\n# Store the result in the variable 'answer'\nanswer = round(total_cost, 2)\n\n# Output the answer\nprint(answer)"], "prediction": [6.22, 6.22, 6.22, 6.22], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nfootball ticket | $83.53\ntennis ticket | $66.87\nsoccer ticket | $89.27\nhockey ticket | $38.10\nbasketball ticket | $92.75", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nfootball ticket | $83.53\ntennis ticket | $66.87\nsoccer ticket | $89.27\nhockey ticket | $38.10\nbasketball ticket | $92.75\n\nHow much money does Kinsley need to buy a basketball ticket and a football ticket?", "answer": "176.28", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nfootball_ticket_price = 83.53 \nbasketball_ticket_price = 92.75 \n# Total cost for both tickets\ntotal_cost = football_ticket_price + basketball_ticket_price\nanswer = total_cost\nprint(answer)", "football_ticket_price = 83.53 \nbasketball_ticket_price = 92.75 \ntotal_cost = football_ticket_price + basketball_ticket_price\nanswer = total_cost\nprint(answer)", "# Define the prices of the tickets\nfootball_ticket_price = 83.53\nbasketball_ticket_price = 92.75\n\n# Calculate the total cost for Kinsley\ntotal_cost = football_ticket_price + basketball_ticket_price\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the result\nprint(answer)", "# Define the prices of the tickets\nfootball_ticket_price = 83.53\nbasketball_ticket_price = 92.75\n\n# Calculate the total cost for Kinsley to buy both tickets\ntotal_cost = football_ticket_price + basketball_ticket_price\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)"], "prediction": [176.28, 176.28, 176.28, 176.28], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Club membership\" and then answer a question.\n\nClub | Number of members\ngeology club | 185\nphotography club | 118\nart club | 158\nSpanish club | 159", "question": "Read the following table regarding \"Club membership\" and then write Python code to answer a question.\n\nClub | Number of members\ngeology club | 185\nphotography club | 118\nart club | 158\nSpanish club | 159\n\nThe local high school found out how many members each club had. Which club has the fewest members? Choose from the the options: ['geology club', 'photography club', 'art club', 'Spanish club']", "answer": "photography club", "ques_type": "multi_choice", "choices": ["geology club", "photography club", "art club", "Spanish club"], "code": ["# Python code, return answer \nclubs = {\n    'geology club': 185,\n    'photography club': 118,\n    'art club': 158,\n    'Spanish club': 159\n}\n# Find the club with the fewest members\nfewest_members_club = min(clubs, key=clubs.get)\nanswer = fewest_members_club\nprint(answer)", "# Store the club names and their corresponding number of members in a dictionary  \nclubs = {\n    'geology club': 185,\n    'photography club': 118,\n    'art club': 158,\n    'Spanish club': 159\n}\n\n# Find the club with the fewest members  \nfewest_members_club = min(clubs, key=clubs.get)\n\n# Store the result in the answer variable\nanswer = fewest_members_club\n\n# Output the answer\nprint(answer)", "clubs = {\n    'geology club': 185,\n    'photography club': 118,\n    'art club': 158,\n    'Spanish club': 159\n}\nfewest_members_club = min(clubs, key=clubs.get)\nanswer = fewest_members_club\nprint(answer)", "# Store the club names and their corresponding number of members in a dictionary\nclubs = {\n    'geology club': 185,\n    'photography club': 118,\n    'art club': 158,\n    'Spanish club': 159\n}\n\n# Find the club with the fewest members\nfewest_members_club = min(clubs, key=clubs.get)\n\n# Store the result in the answer variable\nanswer = fewest_members_club\n\n# Print the answer\nprint(answer)"], "prediction": ["photography club", "photography club", "photography club", "photography club"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$140 | 16,900 | 12,400\n$190 | 13,000 | 13,600\n$240 | 9,100 | 14,800\n$290 | 5,200 | 16,000\n$340 | 1,300 | 17,200", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$140 | 16,900 | 12,400\n$190 | 13,000 | 13,600\n$240 | 9,100 | 14,800\n$290 | 5,200 | 16,000\n$340 | 1,300 | 17,200\n\nLook at the table. Then answer the question. At a price of $190, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "surplus", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": ["# Python code, return answer \nquantity_demanded_at_190 = 13000\nquantity_supplied_at_190 = 13600\n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_190 < quantity_supplied_at_190:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the quantity demanded and supplied at the price of $190\nquantity_demanded_at_190 = 13000\nquantity_supplied_at_190 = 13600\n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_190 < quantity_supplied_at_190:\n    answer = 'surplus'  # More supply than demand indicates a surplus\nelse:\n    answer = 'shortage'  # More demand than supply indicates a shortage\n\nprint(answer)", "# Define the quantities at a price of $190\nquantity_demanded_at_190 = 13000\nquantity_supplied_at_190 = 13600\n\n# Determine if there is a shortage or surplus\nanswer = 'surplus' if quantity_demanded_at_190 < quantity_supplied_at_190 else 'shortage'\n\nprint(answer)", "# Define the quantities demanded and supplied at the price of $190\nquantity_demanded_at_190 = 13000\nquantity_supplied_at_190 = 13600\n\n# Determine if there is a shortage or surplus\nanswer = 'surplus' if quantity_demanded_at_190 < quantity_supplied_at_190 else 'shortage'\n\n# Output the answer\nprint(answer)"], "prediction": ["surplus", "surplus", "surplus", "surplus"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Lemon-flavored candies per bag\" and then answer a question.\n\nStem | Leaf \n6 | 1, 2, 3, 9\n7 | 8\n8 | 3, 5\n9 | 0", "question": "Read the following table regarding \"Lemon-flavored candies per bag\" and then write Python code to answer a question.\n\nStem | Leaf \n6 | 1, 2, 3, 9\n7 | 8\n8 | 3, 5\n9 | 0\n\nA machine at the candy factory dispensed different numbers of lemon-flavored candies into various bags. What is the smallest number of lemon-flavored candies?", "answer": "61", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The smallest number of candies corresponds to the smallest value in the stem-and-leaf display.\nsmallest_candies = 61  # From the stem \"6 | 1\", the value is 61 candies.\nanswer = smallest_candies\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(6, [1, 2, 3, 9]), (7, [8]), (8, [3, 5]), (9, [0])]  \n  \n# Initialize a variable to hold the smallest number of candies  \nsmallest_candies = float('inf')  \n  \n# Iterate through the stem and leaf data structure to find the smallest number of candies  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        candies_per_bag = stem * 10 + leaf  \n        if candies_per_bag < smallest_candies:  \n            smallest_candies = candies_per_bag  \n  \nanswer = smallest_candies  \nprint(answer)", "# Define the stem and leaf data structure  \nstem_and_leaf = [(6, [1, 2, 3, 9]), (7, [8]), (8, [3, 5]), (9, [0])]  \n\n# Initialize variable for the smallest number of candies  \nsmallest_candies = float('inf')  \n\n# Iterate through the stem and leaf data structure to find the smallest number of candies  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        candies_per_bag = stem * 10 + leaf  \n        if candies_per_bag < smallest_candies:  \n            smallest_candies = candies_per_bag  \n\n# Store the result as an integer  \nanswer = int(smallest_candies)  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(6, [1, 2, 3, 9]), (7, [8]), (8, [3, 5]), (9, [0])]  \n\n# Initialize variable to store the smallest number of candies  \nsmallest_candies = float('inf')  \n\n# Iterate through the stem and leaf data structure to find the smallest number of candies  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        candies_per_bag = stem * 10 + leaf  \n        if candies_per_bag < smallest_candies:  \n            smallest_candies = candies_per_bag  \n\n# Assign the smallest number of candies to answer  \nanswer = smallest_candies  \n\nprint(answer)  # Output will be the smallest number of lemon-flavored candies"
], "prediction": [61.0, 61.0, 61.0, 61.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Characters per book\" and then answer a question.\n\nStem | Leaf \n1 | 3, 3, 8, 9\n2 | 1, 2, 3, 3, 7\n3 | 2, 5, 5\n4 | 0, 7\n5 | 0, 2, 2, 5, 9", "question": "Read the following table regarding \"Characters per book\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 3, 3, 8, 9\n2 | 1, 2, 3, 3, 7\n3 | 2, 5, 5\n4 | 0, 7\n5 | 0, 2, 2, 5, 9\n\nHelen kept track of the number of characters in each book she read. How many books had at least 30 characters but fewer than 40 characters?", "answer": "3", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Extracting the number of characters from the stem-and-leaf display\ncharacters = [13, 13, 18, 19, 21, 22, 23, 23, 27, 32, 35, 35, 40, 47, 50, 52, 52, 55, 59]\n\n# Count the number of books with at least 30 characters but fewer than 40\ncount_books = sum(1 for char in characters if 30 <= char < 40)\nanswer = count_books\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(1, [3, 3, 8, 9]), (2, [1, 2, 3, 3, 7]), (3, [2, 5, 5]), (4, [0, 7]), (5, [0, 2, 2, 5, 9])]\n\n# Initialize counter for books with at least 30 characters but fewer than 40 characters\nbooks_with_30_to_39_chars = 0\n\n# Iterate through the stem and leaf data structure and count relevant books\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        characters_per_book = stem * 10 + leaf\n        if 30 <= characters_per_book < 40:\n            books_with_30_to_39_chars += 1\n\nanswer = books_with_30_to_39_chars\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [3, 3, 8, 9]), (2, [1, 2, 3, 3, 7]), (3, [2, 5, 5]), (4, [0, 7]), (5, [0, 2, 2, 5, 9])]  \n\n# Initialize counter for books with at least 30 characters but fewer than 40 characters  \nbooks_with_30_to_39_chars = 0  \n\n# Iterate through the stem and leaf data structure and count relevant books  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        characters_per_book = stem * 10 + leaf  \n        if 30 <= characters_per_book < 40:  \n            books_with_30_to_39_chars += 1  \n\nanswer = books_with_30_to_39_chars  # Ensure answer is an integer\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [3, 3, 8, 9]), (2, [1, 2, 3, 3, 7]), (3, [2, 5, 5]), (4, [0, 7]), (5, [0, 2, 2, 5, 9])]  \n\n# Initialize counter for books with at least 30 characters but fewer than 40 characters  \nbooks_with_30_to_39_chars = 0  \n\n# Iterate through the stem and leaf data structure and count relevant books  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        characters_per_book = stem * 10 + leaf  \n        if 30 <= characters_per_book < 40:  \n            books_with_30_to_39_chars += 1  \n\n# Ensure answer is an integer  \nanswer = int(books_with_30_to_39_chars)  \nprint(answer)"
], "prediction": [3.0, 3.0, 3.0, 3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Balloons sold\" and then answer a question.\n\nDay | Number of balloons\nSaturday | 74\nSunday | 78\nMonday | 74\nTuesday | 71\nWednesday | 72\nThursday | 75", "question": "Read the following table regarding \"Balloons sold\" and then write Python code to answer a question.\n\nDay | Number of balloons\nSaturday | 74\nSunday | 78\nMonday | 74\nTuesday | 71\nWednesday | 72\nThursday | 75\n\nThe manager of a party supply store researched how many balloons it sold in the past 6 days. What is the mean of the numbers?", "answer": "74", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of balloons sold each day\nballoons_sold = [74, 78, 74, 71, 72, 75]\n# Calculate the mean\nmean_balloons = sum(balloons_sold) / len(balloons_sold)\nanswer = mean_balloons\nprint(answer)", "balloons_sold = [74, 78, 74, 71, 72, 75]\nmean_balloons = sum(balloons_sold) / len(balloons_sold)\nanswer = round(mean_balloons, 2)  # Rounding to 2 decimal places for clarity\nprint(answer)", "balloons_sold = [74, 78, 74, 71, 72, 75]\nmean_balloons = sum(balloons_sold) / len(balloons_sold)\nanswer = \"{:.2f}\".format(mean_balloons)  # Formatting to 2 decimal places\nprint(answer)", "balloons_sold = [74, 78, 74, 71, 72, 75]\nmean_balloons = sum(balloons_sold) / len(balloons_sold)\nanswer = \"{:.2f}\".format(mean_balloons)  # Formatting to 2 decimal places\nprint(answer)"], "prediction": [74.0, 74.0, 74.0, 74.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | 2010 | 2011\nSpruce wood | 3 | 6\nAsh wood | 3 | 6", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | 2010 | 2011\nSpruce wood | 3 | 6\nAsh wood | 3 | 6\n\nEvery summer, Josiah goes on a week-long canoe trip with his childhood camp friends. After the trip, he usually purchases some oars from the destination city. His collection of oars is organized by year and type of wood. What is the probability that a randomly selected oar was made from spruce wood and was purchased in 2010? Simplify any fractions.", "answer": "1/6", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total number of oars purchased in each year\nspruce_2010 = 3\nash_2010 = 3\nspruce_2011 = 6\nash_2011 = 6\n\n# Total oars purchased in 2010\ntotal_2010 = spruce_2010 + ash_2010\n# Probability of selecting an oar made from spruce wood purchased in 2010\nprobability_spruce_2010 = spruce_2010 / total_2010\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(spruce_2010, total_2010).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Define the number of oars made from each type of wood in each year\nspruce_2010 = 3\nash_2010 = 3\nspruce_2011 = 6\nash_2011 = 6\n\n# Calculate the total number of oars purchased in 2010\ntotal_2010 = spruce_2010 + ash_2010\n\n# Calculate the probability of selecting an oar made from spruce wood purchased in 2010\nprobability_spruce_2010 = spruce_2010 / total_2010\n\n# Simplify the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(spruce_2010, total_2010).limit_denominator()\n\n# Store the simplified probability in the answer variable\nanswer = simplified_probability\nprint(answer)", "# Define the number of oars made from spruce and ash wood for 2010 and 2011\nspruce_2010 = 3\nash_2010 = 3\nspruce_2011 = 6\nash_2011 = 6\n\n# Calculate the total number of oars purchased\ntotal_oars = spruce_2010 + ash_2010 + spruce_2011 + ash_2011\n\n# Calculate the probability of selecting an oar made from spruce wood purchased in 2010\nprobability_spruce_2010 = spruce_2010 / total_oars\n\n# Simplify the probability fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(spruce_2010, total_oars).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = simplified_probability\n\nprint(answer)", "from fractions import Fraction\n\n# Define the number of oars made from different types of wood in different years\nspruce_2010 = 3\nash_2010 = 3\nspruce_2011 = 6\nash_2011 = 6\n\n# Calculate total number of oars\ntotal_oars = spruce_2010 + ash_2010 + spruce_2011 + ash_2011\n\n# Calculate the probability as a fraction\nprobability_spruce_2010 = Fraction(spruce_2010, total_oars)\n\n# Store the simplified probability as the answer\nanswer = probability_spruce_2010\nprint(answer)"
], "prediction": [0.5, 0.5, 0.16667, 0.16667], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Average waiting time at the DMV\" and then answer a question.\n\nMonth | Waiting time (minutes)\nJune | 36\nJuly | 41\nAugust | 34\nSeptember | 28\nOctober | 36", "question": "Read the following table regarding \"Average waiting time at the DMV\" and then write Python code to answer a question.\n\nMonth | Waiting time (minutes)\nJune | 36\nJuly | 41\nAugust | 34\nSeptember | 28\nOctober | 36\n\nAn administrator at the Department of Motor Vehicles (DMV) tracked the average wait time from month to month. According to the table, what was the rate of change between July and August?", "answer": "-7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Average waiting times\nwaiting_time_july = 41\nwaiting_time_august = 34\n\n# Calculate the rate of change between July and August\nrate_of_change = waiting_time_august - waiting_time_july\nanswer = rate_of_change\nprint(answer)", "waiting_time_july = 41\nwaiting_time_august = 34\nrate_of_change = waiting_time_august - waiting_time_july\nanswer = f\"The rate of change in waiting time from July to August is {rate_of_change} minutes.\"\nprint(answer)", "waiting_time_july = 41\nwaiting_time_august = 34\nrate_of_change = waiting_time_august - waiting_time_july\nanswer = f\"The rate of change in waiting time from July to August is {rate_of_change} minutes, indicating a decrease in waiting time.\"\nprint(answer)", "waiting_time_july = 41\nwaiting_time_august = 34\nrate_of_change = waiting_time_august - waiting_time_july\nanswer = f\"The rate of change in waiting time from July to August is {rate_of_change} minutes, indicating a decrease in waiting time.\"\nprint(answer)"], "prediction": [-7.0, "The rate of change in waiting time from July to August is -7 minutes.", "The rate of change in waiting time from July to August is -7 minutes, indicating a decrease in waiting time.", "The rate of change in waiting time from July to August is -7 minutes, indicating a decrease in waiting time."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Soccer tournament schedule\" and then answer a question.\n\nGame | Begin | End\nWaves versus Alligators | 10:00 A.M. | 11:30 A.M.\nDolphins versus Bears | 10:40 A.M. | 12:10 P.M.\nThunder versus Eagles | 11:15 A.M. | 12:45 P.M.\nSharks versus Storm | 11:30 A.M. | 1:00 P.M.\nLions versus Blue Jays | 11:45 A.M. | 1:15 P.M.\nLightning versus Coyotes | 12:10 P.M. | 1:40 P.M.\nFire versus Blizzard | 1:05 P.M. | 2:35 P.M.\nHawks versus Jaguars | 1:30 P.M. | 3:00 P.M.\nCardinals versus Cobras | 2:25 P.M. | 3:55 P.M.", "question": "Read the following table regarding \"Soccer tournament schedule\" and then write Python code to answer a question.\n\nGame | Begin | End\nWaves versus Alligators | 10:00 A.M. | 11:30 A.M.\nDolphins versus Bears | 10:40 A.M. | 12:10 P.M.\nThunder versus Eagles | 11:15 A.M. | 12:45 P.M.\nSharks versus Storm | 11:30 A.M. | 1:00 P.M.\nLions versus Blue Jays | 11:45 A.M. | 1:15 P.M.\nLightning versus Coyotes | 12:10 P.M. | 1:40 P.M.\nFire versus Blizzard | 1:05 P.M. | 2:35 P.M.\nHawks versus Jaguars | 1:30 P.M. | 3:00 P.M.\nCardinals versus Cobras | 2:25 P.M. | 3:55 P.M.\n\nLook at the following schedule. Which game ends at 11.30 A.M.? Choose from the the options: ['Waves versus Alligators game', 'Fire versus Blizzard game', 'Thunder versus Eagles game', 'Dolphins versus Bears game']", "answer": "Waves versus Alligators game", "ques_type": "multi_choice", "choices": ["Waves versus Alligators game", "Fire versus Blizzard game", "Thunder versus Eagles game", "Dolphins versus Bears game"], "code": [
  "# Python code, return answer \n# The game that ends at 11:30 A.M. is the one that we will look for in the schedule.\nend_time_1130 = '11:30 A.M.'\ngames_schedule = {\n    'Waves versus Alligators': ('10:00 A.M.', '11:30 A.M.'),\n    'Dolphins versus Bears': ('10:40 A.M.', '12:10 P.M.'),\n    'Thunder versus Eagles': ('11:15 A.M.', '12:45 P.M.'),\n    'Sharks versus Storm': ('11:30 A.M.', '1:00 P.M.'),\n    'Lions versus Blue Jays': ('11:45 A.M.', '1:15 P.M.'),\n    'Lightning versus Coyotes': ('12:10 P.M.', '1:40 P.M.'),\n    'Fire versus Blizzard': ('1:05 P.M.', '2:35 P.M.'),\n    'Hawks versus Jaguars': ('1:30 P.M.', '3:00 P.M.'),\n    'Cardinals versus Cobras': ('2:25 P.M.', '3:55 P.M.'),\n}\n\n# Find which game ends at 11:30 A.M.\nanswer = [game for game, times in games_schedule.items() if times[1] == end_time_1130]\nanswer = answer[0] if answer else None\nprint(answer)", "end_time_1130 = '11:30 A.M.'\ngames_schedule = {\n    'Waves versus Alligators': ('10:00 A.M.', '11:30 A.M.'),\n    'Dolphins versus Bears': ('10:40 A.M.', '12:10 P.M.'),\n    'Thunder versus Eagles': ('11:15 A.M.', '12:45 P.M.'),\n    'Sharks versus Storm': ('11:30 A.M.', '1:00 P.M.'),\n    'Lions versus Blue Jays': ('11:45 A.M.', '1:15 P.M.'),\n    'Lightning versus Coyotes': ('12:10 P.M.', '1:40 P.M.'),\n    'Fire versus Blizzard': ('1:05 P.M.', '2:35 P.M.'),\n    'Hawks versus Jaguars': ('1:30 P.M.', '3:00 P.M.'),\n    'Cardinals versus Cobras': ('2:25 P.M.', '3:55 P.M.'),\n}\n\n# List of options provided in the question\noptions = ['Waves versus Alligators game', 'Fire versus Blizzard game', \n           'Thunder versus Eagles game', 'Dolphins versus Bears game']\n\n# Check which game ends at 11:30 A.M. and if it is in the options\nending_games = [game for game, times in games_schedule.items() if times[1] == end_time_1130]\n\n# Filter the result to match the options provided\nanswer = [game for game in ending_games if f\"{game} game\" in options]\n\n# Select the first valid answer or None if not found\nanswer = answer[0] if answer else None\nprint(answer)", "end_time_1130 = '11:30 A.M.'\ngames_schedule = {\n    'Waves versus Alligators': ('10:00 A.M.', '11:30 A.M.'),\n    'Dolphins versus Bears': ('10:40 A.M.', '12:10 P.M.'),\n    'Thunder versus Eagles': ('11:15 A.M.', '12:45 P.M.'),\n    'Sharks versus Storm': ('11:30 A.M.', '1:00 P.M.'),\n    'Lions versus Blue Jays': ('11:45 A.M.', '1:15 P.M.'),\n    'Lightning versus Coyotes': ('12:10 P.M.', '1:40 P.M.'),\n    'Fire versus Blizzard': ('1:05 P.M.', '2:35 P.M.'),\n    'Hawks versus Jaguars': ('1:30 P.M.', '3:00 P.M.'),\n    'Cardinals versus Cobras': ('2:25 P.M.', '3:55 P.M.'),\n}\noptions = ['Waves versus Alligators game', 'Fire versus Blizzard game', \n           'Thunder versus Eagles game', 'Dolphins versus Bears game']\n\n# Find the game that ends at 11:30 A.M.\nending_games = [game for game, times in games_schedule.items() if times[1] == end_time_1130]\n\n# Check if the found game matches any of the options\nanswer = [f\"{game} game\" for game in ending_games if f\"{game} game\" in options]\n\n# Get the first match if exists\nanswer = answer[0] if answer else None\nprint(answer)", "end_time_1130 = '11:30 A.M.'\ngames_schedule = {\n    'Waves versus Alligators': ('10:00 A.M.', '11:30 A.M.'),\n    'Dolphins versus Bears': ('10:40 A.M.', '12:10 P.M.'),\n    'Thunder versus Eagles': ('11:15 A.M.', '12:45 P.M.'),\n    'Sharks versus Storm': ('11:30 A.M.', '1:00 P.M.'),\n    'Lions versus Blue Jays': ('11:45 A.M.', '1:15 P.M.'),\n    'Lightning versus Coyotes': ('12:10 P.M.', '1:40 P.M.'),\n    'Fire versus Blizzard': ('1:05 P.M.', '2:35 P.M.'),\n    'Hawks versus Jaguars': ('1:30 P.M.', '3:00 P.M.'),\n    'Cardinals versus Cobras': ('2:25 P.M.', '3:55 P.M.'),\n}\n\noptions = ['Waves versus Alligators game', 'Fire versus Blizzard game', \n           'Thunder versus Eagles game', 'Dolphins versus Bears game']\n\n# Find the game that ends at 11:30 A.M.\nending_games = [game for game, times in games_schedule.items() if times[1] == end_time_1130]\n\n# Check if the identified game matches any option\nanswer = [f\"{game} game\" for game in ending_games if f\"{game} game\" in options]\nanswer = answer[0] if answer else None\n\nprint(answer)"
], "prediction": ["Waves versus Alligators", "Waves versus Alligators", "Waves versus Alligators game", "Waves versus Alligators game"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of branches | Number of flowers\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | 25\n6 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of branches | Number of flowers\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | 25\n6 | ?\n\nEach branch has 5 flowers. How many flowers are on 6 branches?", "answer": "30", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nflowers_per_branch = 5 \nnumber_of_branches = 6 \n# Calculate the total number of flowers on 6 branches\ntotal_flowers = flowers_per_branch * number_of_branches\nanswer = total_flowers\nprint(answer)", "flowers_per_branch = 5 \nnumber_of_branches = 6 \ntotal_flowers = flowers_per_branch * number_of_branches\nanswer = total_flowers  # This will be an integer\nprint(answer)", "flowers_per_branch = 5  # Define as an integer\nnumber_of_branches = 6  \ntotal_flowers = flowers_per_branch * number_of_branches  # This will also be an integer\nanswer = total_flowers  # Store the result as an integer\nprint(answer)  # This will output an integer", "flowers_per_branch = 5  # Define as an integer\nnumber_of_branches = 6  \ntotal_flowers = flowers_per_branch * number_of_branches  # This will also be an integer\nanswer = total_flowers  # Store the result as an integer\nprint(answer)  # This will output an integer"], "prediction": [30.0, 30.0, 30.0, 30.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Eating ice cream last month\" and then answer a question.\n\nTimes eaten | Frequency\n0 | 8\n1 | 17\n2 | 9\n3 | 20\n4 | 0", "question": "Read the following table regarding \"Eating ice cream last month\" and then write Python code to answer a question.\n\nTimes eaten | Frequency\n0 | 8\n1 | 17\n2 | 9\n3 | 20\n4 | 0\n\nLiz's Treats counted how many times its most frequent customers ate ice cream last month. How many customers are there in all?", "answer": "54", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Calculate total number of customers based on frequency table\nfrequency_counts = {\n    0: 8,\n    1: 17,\n    2: 9,\n    3: 20,\n    4: 0\n}\n\ntotal_customers = sum(frequency_counts.values())\nanswer = total_customers\nprint(answer)", "frequency_counts = {\n    0: 8,\n    1: 17,\n    2: 9,\n    3: 20,\n    4: 0\n}\ntotal_customers = sum(frequency_counts.values())\nanswer = total_customers  # This will already be an integer since all values are integers.\nprint(answer)", "frequency_counts = {\n    0: 8,\n    1: 17,\n    2: 9,\n    3: 20,\n    4: 0\n}\ntotal_customers = sum(frequency_counts.values())\nanswer = int(total_customers)  # Ensure the output is an integer\nprint(answer)", "frequency_counts = {\n    0: 8,\n    1: 17,\n    2: 9,\n    3: 20,\n    4: 0\n}\ntotal_customers = sum(frequency_counts.values())\nanswer = total_customers  # No need to convert to int since sum already returns an integer\nprint(answer)"], "prediction": [54.0, 54.0, 54.0, 54.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nAfrican rice | $4/lb\nbasmati rice | $5/lb\nwhite rice | $7/lb\nbrown rice | $8/lb\nsticky rice | $5/lb", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nAfrican rice | $4/lb\nbasmati rice | $5/lb\nwhite rice | $7/lb\nbrown rice | $8/lb\nsticky rice | $5/lb\n\nValeria buys 3.2 pounds of African rice. What is the total cost?", "answer": "12.80", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_african_rice = 4  # $4 per pound\npounds_bought = 3.2  # 3.2 pounds\n# Calculate total cost\ntotal_cost = price_per_pound_african_rice * pounds_bought\nanswer = total_cost\nprint(answer)", "# Define the price per pound for African rice  \nprice_per_pound_african_rice = 4  # $4 per pound  \npounds_bought = 3.2  # 3.2 pounds  \n\n# Calculate total cost  \ntotal_cost = price_per_pound_african_rice * pounds_bought  \nanswer = total_cost  \n\nprint(answer)  # Output the answer", "price_per_pound_african_rice = 4  # $4 per pound  \npounds_bought = 3.2  # 3.2 pounds  \ntotal_cost = price_per_pound_african_rice * pounds_bought  \nanswer = total_cost  \nprint(answer)  # Output the answer", "# Define the price per pound of African rice  \nprice_per_pound_african_rice = 4  # $4 per pound  \npounds_bought = 3.2  # 3.2 pounds  \n\n# Calculate the total cost  \ntotal_cost = price_per_pound_african_rice * pounds_bought  \nanswer = total_cost  \n\nprint(answer)  # Output the answer"], "prediction": [12.8, 12.8, 12.8, 12.8], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Football touchdowns scored last season\" and then answer a question.\n\nTouchdowns scored | Frequency\n0 | 8\n1 | 20\n2 | 15\n3 | 10\n4 | 0\n5 | 1", "question": "Read the following table regarding \"Football touchdowns scored last season\" and then write Python code to answer a question.\n\nTouchdowns scored | Frequency\n0 | 8\n1 | 20\n2 | 15\n3 | 10\n4 | 0\n5 | 1\n\nJosie, a fantasy football fan, carefully studied the number of touchdowns completed by her favorite players last season. How many players scored at least 1 touchdown last season?", "answer": "46", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total players who scored at least 1 touchdown\nplayers_scoring_at_least_1 = 20 + 15 + 10 + 1  # Adding frequency of touchdowns 1, 2, 3, and 5\nanswer = players_scoring_at_least_1\nprint(answer)", "# Frequency of touchdowns scored by players\nfrequency = {\n    0: 8,\n    1: 20,\n    2: 15,\n    3: 10,\n    4: 0,\n    5: 1\n}\n\n# Calculate the number of players who scored at least 1 touchdown\nplayers_scoring_at_least_1 = frequency[1] + frequency[2] + frequency[3] + frequency[5]  # Adding frequency of touchdowns 1, 2, 3, and 5\nanswer = players_scoring_at_least_1  # This will be an integer\nprint(answer)", "# Define the frequency of touchdowns scored\nfrequency = {\n    0: 8,\n    1: 20,\n    2: 15,\n    3: 10,\n    4: 0,\n    5: 1\n}\n\n# Calculate the number of players who scored at least 1 touchdown\nplayers_scoring_at_least_1 = frequency[1] + frequency[2] + frequency[3] + frequency[4] + frequency[5]  # Adding frequency of touchdowns 1, 2, 3, 4, and 5\nanswer = players_scoring_at_least_1  # This will be an integer\nprint(answer)", "frequency = {\n    0: 8,\n    1: 20,\n    2: 15,\n    3: 10,\n    4: 0,\n    5: 1\n}\n\n# Calculate the number of players who scored at least 1 touchdown\nplayers_scoring_at_least_1 = frequency[1] + frequency[2] + frequency[3] + frequency[5]  # Only adding frequencies of touchdowns 1, 2, 3, and 5\nanswer = players_scoring_at_least_1  # This will be an integer\nprint(answer)"
], "prediction": [46.0, 46.0, 46.0, 46.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nsilk scraps | $8 per lb\nlace scraps | $12 per lb\ndenim scraps | $9 per lb\nfelt scraps | $10 per lb\ncanvas scraps | $10 per lb", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nsilk scraps | $8 per lb\nlace scraps | $12 per lb\ndenim scraps | $9 per lb\nfelt scraps | $10 per lb\ncanvas scraps | $10 per lb\n\nLola buys 1.4 pounds of lace scraps. What is the total cost?", "answer": "16.80", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \nprice_per_lb_lace_scraps = 12  # Price per pound for lace scraps\npounds_bought = 1.4  # Pounds of lace scraps bought\n# Calculate total cost\ntotal_cost = price_per_lb_lace_scraps * pounds_bought\nanswer = total_cost\nprint(answer)", "# Define the price per pound for lace scraps\nprice_per_lb_lace_scraps = 12  # Price per pound for lace scraps\n\n# Define the number of pounds bought\npounds_bought = 1.4  # Pounds of lace scraps bought\n\n# Calculate the total cost\ntotal_cost = price_per_lb_lace_scraps * pounds_bought\n\n# Store the result in the answer variable\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the price per pound for lace scraps and the amount bought\nprice_per_lb_lace_scraps = 12  # Price per pound for lace scraps\npounds_bought = 1.4  # Pounds of lace scraps bought\n\n# Calculate the total cost\ntotal_cost = price_per_lb_lace_scraps * pounds_bought\n\n# Store the result in the answer variable\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the price per pound for lace scraps\nprice_per_lb_lace_scraps = 12  \n\n# Define the number of pounds bought\npounds_bought = 1.4  \n\n# Calculate the total cost\ntotal_cost = price_per_lb_lace_scraps * pounds_bought  \n\n# Assign the result to the variable answer\nanswer = total_cost  \n\n# Print the answer\nprint(answer)"
], "prediction": [16.8, 16.8, 16.8, 16.8], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Pairs of shoes per store\" and then answer a question.\n\nStem | Leaf \n3 | 5, 6, 6\n4 | 0, 2\n5 | 0, 1, 1, 2, 4\n6 | 3, 3\n7 | 3, 4\n8 | 2, 3, 4, 7, 8\n9 | 0, 0, 0, 0", "question": "Read the following table regarding \"Pairs of shoes per store\" and then write Python code to answer a question.\n\nStem | Leaf \n3 | 5, 6, 6\n4 | 0, 2\n5 | 0, 1, 1, 2, 4\n6 | 3, 3\n7 | 3, 4\n8 | 2, 3, 4, 7, 8\n9 | 0, 0, 0, 0\n\nHunter counted the number of pairs of shoes for sale at each of the shoe stores in the mall. How many stores have exactly 90 pairs of shoes?", "answer": "4", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# From the stem-and-leaf display, we need to find how many stores have exactly 90 pairs of shoes.\n# The stem '9' indicates the tens place, and the leaf '0' repeated four times indicates the units.\nnumber_of_stores_with_90_pairs = 4  # Since there are four '0's in the stem 9.\nanswer = number_of_stores_with_90_pairs\nprint(answer)", "# Define the stem and leaf data structure for pairs of shoes per store\nstem_and_leaf = [(3, [5, 6, 6]), (4, [0, 2]), (5, [0, 1, 1, 2, 4]), \n                 (6, [3, 3]), (7, [3, 4]), (8, [2, 3, 4, 7, 8]), \n                 (9, [0, 0, 0, 0])]\n\n# Initialize counter for stores with exactly 90 pairs of shoes\nstores_with_90_pairs = 0\n\n# Check the leaf values for the stem corresponding to 90 pairs of shoes\nfor stem, leaf_list in stem_and_leaf:\n    if stem == 9:  # The stem for 90 pairs of shoes\n        stores_with_90_pairs += len(leaf_list)  # Count the number of leaves\n\nanswer = stores_with_90_pairs\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(3, [5, 6, 6]), (4, [0, 2]), (5, [0, 1, 1, 2, 4]), \n                 (6, [3, 3]), (7, [3, 4]), (8, [2, 3, 4, 7, 8]), \n                 (9, [0, 0, 0, 0])]  \n  \n# Initialize counter for stores with exactly 90 pairs of shoes  \nstores_with_90_pairs = 0  \n  \n# Check the stem for 90 pairs of shoes and count the corresponding leaves  \nfor stem, leaf_list in stem_and_leaf:  \n    if stem == 9:  # The stem for 90 pairs of shoes  \n        stores_with_90_pairs += len(leaf_list)  # Count the number of leaves  \n  \nanswer = stores_with_90_pairs  # This will be an integer  \nprint(answer)", "stem_and_leaf = [(3, [5, 6, 6]), (4, [0, 2]), (5, [0, 1, 1, 2, 4]), \n                 (6, [3, 3]), (7, [3, 4]), (8, [2, 3, 4, 7, 8]), \n                 (9, [0, 0, 0, 0])]  \nstores_with_90_pairs = 0  \nfor stem, leaf_list in stem_and_leaf:  \n    if stem == 9:  # The stem for 90 pairs of shoes  \n        stores_with_90_pairs += len(leaf_list)  # Count the number of leaves  \nanswer = int(stores_with_90_pairs)  # Ensure answer is an integer  \nprint(answer)"
], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Drawing a card between 2 and 8\" and then answer a question.\n\nNumber drawn | Frequency\n2 | 14\n3 | 13\n4 | 0\n5 | 19\n6 | 7\n7 | 12\n8 | 16", "question": "Read the following table regarding \"Drawing a card between 2 and 8\" and then write Python code to answer a question.\n\nNumber drawn | Frequency\n2 | 14\n3 | 13\n4 | 0\n5 | 19\n6 | 7\n7 | 12\n8 | 16\n\nAs part of a math lab, Darell tracked the number of times his classmates drew a number between 2 and 8. Which number was drawn the fewest times?", "answer": "4", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency data for each number drawn\nfrequency = {\n    2: 14,\n    3: 13,\n    4: 0,\n    5: 19,\n    6: 7,\n    7: 12,\n    8: 16\n}\n# Find the number drawn the fewest times\nfewest_drawn_number = min(frequency, key=frequency.get)\nanswer = fewest_drawn_number\nprint(answer)", "frequency = {\n    2: 14,\n    3: 13,\n    4: 0,\n    5: 19,\n    6: 7,\n    7: 12,\n    8: 16\n}\nfewest_drawn_number = min(frequency, key=frequency.get)\nanswer = int(fewest_drawn_number)  # Ensure the answer is an integer\nprint(answer)", "frequency = {\n    2: 14,\n    3: 13,\n    4: 0,\n    5: 19,\n    6: 7,\n    7: 12,\n    8: 16\n}\nfewest_drawn_number = min(frequency, key=frequency.get)\nanswer = fewest_drawn_number  # No need to convert to int, it's already an integer\nprint(answer)", "frequency = {\n    2: 14,\n    3: 13,\n    4: 0,\n    5: 19,\n    6: 7,\n    7: 12,\n    8: 16\n}\nfewest_drawn_number = min(frequency, key=frequency.get)\nanswer = int(fewest_drawn_number)  # Ensure the output is an integer\nprint(answer)"], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Class schedule\" and then answer a question.\n\nSubject | Begin | End\nRussian | 8:10 A.M. | 9:40 A.M.\nAncient Civilizations | 10:20 A.M. | 11:45 A.M.\nPlant Biology | 12:20 P.M. | 1:45 P.M.\nAdvanced Algebra | 2:10 P.M. | 3:00 P.M.\nJapanese | 3:40 P.M. | 5:00 P.M.\nEuropean History | 5:10 P.M. | 5:45 P.M.", "question": "Read the following table regarding \"Class schedule\" and then write Python code to answer a question.\n\nSubject | Begin | End\nRussian | 8:10 A.M. | 9:40 A.M.\nAncient Civilizations | 10:20 A.M. | 11:45 A.M.\nPlant Biology | 12:20 P.M. | 1:45 P.M.\nAdvanced Algebra | 2:10 P.M. | 3:00 P.M.\nJapanese | 3:40 P.M. | 5:00 P.M.\nEuropean History | 5:10 P.M. | 5:45 P.M.\n\nLook at the following schedule. Which class ends at 5.45 P.M.? Choose from the the options: ['Plant Biology class', 'Russian class', 'Japanese class', 'European History class']", "answer": "European History class", "ques_type": "multi_choice", "choices": ["Plant Biology class", "Russian class", "Japanese class", "European History class"], "code": [
  "# Python code, return answer \n# The class that ends at 5:45 P.M. is European History.\nending_time = \"5:45 P.M.\"\nanswer = 'European History class'\nprint(answer)", "# Define the class schedule in a dictionary\nclass_schedule = {\n    'Russian': ('8:10 A.M.', '9:40 A.M.'),\n    'Ancient Civilizations': ('10:20 A.M.', '11:45 A.M.'),\n    'Plant Biology': ('12:20 P.M.', '1:45 P.M.'),\n    'Advanced Algebra': ('2:10 P.M.', '3:00 P.M.'),\n    'Japanese': ('3:40 P.M.', '5:00 P.M.'),\n    'European History': ('5:10 P.M.', '5:45 P.M.')\n}\n\n# Check which class ends at 5:45 P.M.\nending_time = '5:45 P.M.'\nanswer = None\n\nfor subject, times in class_schedule.items():\n    if times[1] == ending_time:\n        answer = f\"{subject} class\"\n        break\n\nprint(answer)", "class_schedule = {\n    'Russian': ('8:10 A.M.', '9:40 A.M.'),\n    'Ancient Civilizations': ('10:20 A.M.', '11:45 A.M.'),\n    'Plant Biology': ('12:20 P.M.', '1:45 P.M.'),\n    'Advanced Algebra': ('2:10 P.M.', '3:00 P.M.'),\n    'Japanese': ('3:40 P.M.', '5:00 P.M.'),\n    'European History': ('5:10 P.M.', '5:45 P.M.')\n}\n\nending_time = '5:45 P.M.'\noptions = ['Plant Biology class', 'Russian class', 'Japanese class', 'European History class']\nanswer = None\n\nfor subject, times in class_schedule.items():\n    if times[1] == ending_time:\n        answer = f\"{subject} class\"\n        break\n\n# Check if the answer is one of the provided options\nif answer in options:\n    print(answer)\nelse:\n    answer = \"No valid option found.\"\n    print(answer)", "```python\nclass_schedule = {\n    'Russian': ('8:10 A.M.', '9:40 A.M.'),\n    'Ancient Civilizations': ('10:20 A.M.', '11:45 A.M.'),\n    'Plant Biology': ('12:20 P.M.', '1:45 P.M.'),\n    'Advanced Algebra': ('2:10 P.M.', '3:00 P.M.'),\n    'Japanese': ('3:40 P.M.', '5:00 P.M.'),\n    'European History': ('5:10 P.M.', '5:45 P.M.')\n}\n\n# Define the ending time we are looking for\nending"
], "prediction": ["European History class", "European History class", "European History class", null], "report": ["Done", "Done", "Done", "SyntaxError('invalid syntax', ('<string>', 1, 1, '```python\\n', 1, 2))"]
}
{
  "context": "Read the following table regarding \"Club membership\" and then answer a question.\n\nClub | Number of members\nJapanese club | 9\nfilm club | 9\nhistory club | 8\nspeech club | 9\nFrench club | 8", "question": "Read the following table regarding \"Club membership\" and then write Python code to answer a question.\n\nClub | Number of members\nJapanese club | 9\nfilm club | 9\nhistory club | 8\nspeech club | 9\nFrench club | 8\n\nThe local high school found out how many members each club had. What is the mode of the numbers?", "answer": "9", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nfrom collections import Counter\n\n# Number of members in each club\nmembers_count = [9, 9, 8, 9, 8]\n\n# Calculate the mode\nmode_count = Counter(members_count).most_common(1)[0][0]\nanswer = mode_count\nprint(answer)", "from collections import Counter\n\n# List of members in each club\nmembers_count = [9, 9, 8, 9, 8]\n\n# Calculate the mode\nmode_count = Counter(members_count).most_common(1)[0][0]\n\n# Store the result as an integer\nanswer = int(mode_count)\n\n# Output the answer\nprint(answer)", "from collections import Counter\n\nmembers_count = [9, 9, 8, 9, 8]\nmode_count = Counter(members_count).most_common(1)[0][0]\nanswer = int(mode_count)  # Ensure the mode is an integer\nprint(answer)", "from collections import Counter\n\n# List of the number of members in each club\nmembers_count = [9, 9, 8, 9, 8]\n\n# Calculate the mode using Counter\nmode_count = Counter(members_count).most_common(1)[0][0]\n\n# Store the mode as an integer\nanswer = mode_count\n\nprint(answer)"], "prediction": [9.0, 9.0, 9.0, 9.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nhovercraft | $2,810\ngolf cart | $9,384\ntrailer | $6,652\nhang glider | $9,079\ncanoe | $2,511\nspeedboat | $9,880", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nhovercraft | $2,810\ngolf cart | $9,384\ntrailer | $6,652\nhang glider | $9,079\ncanoe | $2,511\nspeedboat | $9,880\n\nHow much money does Brenda need to buy 7 hang gliders?", "answer": "63,553", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_hang_glider = 9079 \nnumber_of_hang_gliders = 7 \n# Calculate total cost\ntotal_cost = price_per_hang_glider * number_of_hang_gliders\nanswer = total_cost\nprint(answer)", "price_per_hang_glider = 9079 \nnumber_of_hang_gliders = 7 \ntotal_cost = price_per_hang_glider * number_of_hang_gliders\nanswer = f\"${total_cost:,.2f}\"  # Format as currency with two decimal places\nprint(answer)", "price_per_hang_glider = 9079 \nnumber_of_hang_gliders = 7 \ntotal_cost = price_per_hang_glider * number_of_hang_gliders\nanswer = f\"${total_cost:,.2f}\"  # Format as currency with two decimal places\nprint(answer)  # This will display the answer", "# Define the price per hang glider and the number of hang gliders Brenda wants to buy\nprice_per_hang_glider = 9079  \nnumber_of_hang_gliders = 7  \n\n# Calculate the total cost\ntotal_cost = price_per_hang_glider * number_of_hang_gliders  \n\n# Store the formatted total cost in the variable 'answer'\nanswer = f\"${total_cost:,.2f}\"  # Format as currency with two decimal places"], "prediction": [63553.0, "$63,553.00", "$63,553.00", "$63,553.00"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Hockey games won by Franklin High\" and then answer a question.\n\nYear | Games won\n2014 | 19\n2015 | 12\n2016 | 12\n2017 | 17\n2018 | 8", "question": "Read the following table regarding \"Hockey games won by Franklin High\" and then write Python code to answer a question.\n\nYear | Games won\n2014 | 19\n2015 | 12\n2016 | 12\n2017 | 17\n2018 | 8\n\nA pair of Franklin High School hockey fans counted the number of games won by the school each year. According to the table, what was the rate of change between 2015 and 2016?", "answer": "0", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of games won in 2015 and 2016\ngames_won_2015 = 12\ngames_won_2016 = 12\n\n# Calculate the rate of change between 2015 and 2016\nrate_of_change = games_won_2016 - games_won_2015\nanswer = rate_of_change\nprint(answer)", "# Define the number of games won in 2015 and 2016\ngames_won_2015 = 12\ngames_won_2016 = 12\n\n# Calculate the rate of change as a percentage\nrate_of_change = ((games_won_2016 - games_won_2015) / games_won_2015) * 100\nanswer = rate_of_change\nprint(answer)", "# Define the number of games won in 2015 and 2016\ngames_won_2015 = 12\ngames_won_2016 = 12\n\n# Calculate the rate of change\nrate_of_change = ((games_won_2016 - games_won_2015) / games_won_2015) * 100\n\n# Store the result in answer\nanswer = f\"The rate of change in games won from 2015 to 2016 is {rate_of_change}%.\"\n\n# Output the answer\nprint(answer)", "games_won_2015 = 12\ngames_won_2016 = 12\nrate_of_change = ((games_won_2016 - games_won_2015) / games_won_2015) * 100\n\nif rate_of_change == 0:\n    answer = \"There was no change in the number of games won from 2015 to 2016.\"\nelse:\n    answer = f\"The rate of change in games won from 2015 to 2016 is {rate_of_change}%.\"\n\nprint(answer)"], "prediction": [0.0, 0.0, "The rate of change in games won from 2015 to 2016 is 0.0%.", "There was no change in the number of games won from 2015 to 2016."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nAfrican safari vacation package | $8,630.00\nCaribbean vacation package | $3,920.00\nHawaiian vacation package | $6,637.00\nJamaican vacation package | $9,269.00\nEuropean vacation package | $8,988.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nAfrican safari vacation package | $8,630.00\nCaribbean vacation package | $3,920.00\nHawaiian vacation package | $6,637.00\nJamaican vacation package | $9,269.00\nEuropean vacation package | $8,988.00\n\nHow much more does a Jamaican vacation package cost than a Caribbean vacation package?", "answer": "5,349", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncaribbean_cost = 3920.00 \njamaican_cost = 9269.00 \n# Calculate the difference in cost\ncost_difference = jamaican_cost - caribbean_cost\nanswer = cost_difference\nprint(answer)", "caribbean_cost = 3920.00 \njamaican_cost = 9269.00 \ncost_difference = jamaican_cost - caribbean_cost\nanswer = round(cost_difference, 2)  # Round to two decimal places for clarity\nprint(answer)", "caribbean_cost = 3920.00 \njamaican_cost = 9269.00 \ncost_difference = jamaican_cost - caribbean_cost\nanswer = round(cost_difference, 2)  # Round to two decimal places for clarity\nprint(answer)", "caribbean_cost = 3920.00\njamaican_cost = 9269.00\ncost_difference = jamaican_cost - caribbean_cost\nanswer = cost_difference  # No need to round if we want the exact difference\nprint(answer)"], "prediction": [5349.0, 5349.0, 5349.0, 5349.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Plants per garden\" and then answer a question.\n\nStem | Leaf \n3 | 2\n4 | 1, 8\n5 | 1\n6 | 1\n7 | 3", "question": "Read the following table regarding \"Plants per garden\" and then write Python code to answer a question.\n\nStem | Leaf \n3 | 2\n4 | 1, 8\n5 | 1\n6 | 1\n7 | 3\n\nThe members of the local garden club tallied the number of plants in each person's garden. How many gardens have at least 30 plants?", "answer": "6", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The stem-and-leaf display corresponds to the following number of plants:\n# 32 (3 | 2)\n# 41, 48 (4 | 1, 8)\n# 51 (5 | 1)\n# 61 (6 | 1)\n# 73 (7 | 3)\n\n# Count how many gardens have at least 30 plants\nplants_counts = [32, 41, 48, 51, 61, 73]\ngardens_with_at_least_30_plants = len(plants_counts)  # All gardens have at least 30 plants\nanswer = gardens_with_at_least_30_plants\nprint(answer)", "```python\n# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(3, [2]), (4, [1, 8]), (5, [1]), (6, [1]), (7, [3])]\n\n# Initialize counter for gardens with at least 30 plants\ngardens_with_at_least_30_plants = 0\n\n# Iterate through the stem and leaf data structure and count relevant gardens\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        plants_per_garden = stem * 10 + leaf\n        if plants_per_garden >= 30:\n            gardens_with_at_least_30_plants += 1\n\nanswer = gardens_with_at_least_", "# Define the stem and leaf data structure as a list of tuples\nstem_and_leaf = [(3, [2]), (4, [1, 8]), (5, [1]), (6, [1]), (7, [3])]\n\n# Initialize counter for gardens with at least 30 plants\ngardens_with_at_least_30_plants = 0\n\n# Iterate through the stem and leaf data structure and count relevant gardens\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        plants_per_garden = stem * 10 + leaf  # Calculate the number of plants\n        if plants_per_garden >= 30:  # Check if at least 30 plants\n            gardens_with_at_least_30_plants += 1\n\nanswer = gardens_with_at_least_30_plants\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(3, [2]), (4, [1, 8]), (5, [1]), (6, [1]), (7, [3])]  \n  \n# Initialize counter for gardens with at least 30 plants  \ngardens_with_at_least_30_plants = 0  \n  \n# Iterate through the stem and leaf data structure and count relevant gardens  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        plants_per_garden = stem * 10 + leaf  \n        if plants_per_garden >= 30:  \n            gardens_with_at_least_30_plants += 1  \n  \nanswer = gardens_with_at_least_30_plants  \nprint(answer)"
], "prediction": [6.0, null, 6.0, 6.0], "report": ["Done", "SyntaxError('invalid syntax', ('<string>', 1, 1, '```python\\n', 1, 2))", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ntow truck | $8,991\ncanoe | $3,864\nboxcar | $7,900\njet ski | $5,902", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ntow truck | $8,991\ncanoe | $3,864\nboxcar | $7,900\njet ski | $5,902\n\nHow much money does Lauren need to buy a boxcar and a jet ski?", "answer": "13,802", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the boxcar and jet ski\nprice_boxcar = 7900\nprice_jet_ski = 5902\n# Total money needed to buy both\ntotal_money_needed = price_boxcar + price_jet_ski\nanswer = total_money_needed\nprint(answer)", "price_boxcar = 7900\nprice_jet_ski = 5902\ntotal_money_needed = price_boxcar + price_jet_ski\nanswer = int(total_money_needed)  # Converting to an integer to remove decimal places\nprint(answer)", "# Define the prices of the boxcar and jet ski\nprice_boxcar = 7900\nprice_jet_ski = 5902\n\n# Calculate the total money needed\ntotal_money_needed = price_boxcar + price_jet_ski\n\n# Store the result in the variable 'answer'\nanswer = total_money_needed\n\n# Output the answer\nprint(answer)", "price_boxcar = 7900\nprice_jet_ski = 5902\ntotal_money_needed = price_boxcar + price_jet_ski\nanswer = \"${:,.2f}\".format(total_money_needed)  # Format as currency\nprint(answer)"], "prediction": [13802.0, 13802.0, 13802.0, "$13,802.00"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Science articles read\" and then answer a question.\n\nName | Number of science articles\nKaren | 173\nDanny | 682\nLisa | 126\nAlan | 130", "question": "Read the following table regarding \"Science articles read\" and then write Python code to answer a question.\n\nName | Number of science articles\nKaren | 173\nDanny | 682\nLisa | 126\nAlan | 130\n\nDanny's classmates revealed how many science articles they read. Together, how many science articles did Danny and Lisa read?", "answer": "808", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ndanny_articles = 682 \nlisa_articles = 126 \n# Calculate the total number of science articles read by Danny and Lisa\ntotal_articles_danny_lisa = danny_articles + lisa_articles\nanswer = total_articles_danny_lisa\nprint(answer)", "# Define the number of science articles read by Danny and Lisa\ndanny_articles = 682\nlisa_articles = 126\n\n# Calculate the total number of articles read by Danny and Lisa\ntotal_articles_danny_lisa = danny_articles + lisa_articles\n\n# Store the result in the variable 'answer'\nanswer = total_articles_danny_lisa\n\n# Output the answer\nprint(answer)", "danny_articles = 682\nlisa_articles = 126\ntotal_articles_danny_lisa = danny_articles + lisa_articles\nanswer = total_articles_danny_lisa\nprint(answer)", "danny_articles = 682\nlisa_articles = 126\ntotal_articles_danny_lisa = danny_articles + lisa_articles\nanswer = total_articles_danny_lisa  # This will be an integer\nprint(answer)"], "prediction": [808.0, 808.0, 808.0, 808.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nlemon sours | $1 per pound\nyogurt-covered peanuts | $1 per pound\ngummy bears | $2 per pound\nlicorice | $4 per pound", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nlemon sours | $1 per pound\nyogurt-covered peanuts | $1 per pound\ngummy bears | $2 per pound\nlicorice | $4 per pound\n\nHow much would it cost to buy 3 pounds of gummy bears, 3 pounds of yogurt-covered peanuts, and 2 pounds of licorice?", "answer": "17", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices per pound\nprice_per_pound_gummy_bears = 2\nprice_per_pound_yogurt_covered_peanuts = 1\nprice_per_pound_licorice = 4\n\n# Pounds to buy\npounds_gummy_bears = 3\npounds_yogurt_covered_peanuts = 3\npounds_licorice = 2\n\n# Calculate total cost\ntotal_cost = (price_per_pound_gummy_bears * pounds_gummy_bears +\n               price_per_pound_yogurt_covered_peanuts * pounds_yogurt_covered_peanuts +\n               price_per_pound_licorice * pounds_licorice)\n\nanswer = total_cost\nprint(answer)", "# Define the prices per pound\nprice_per_pound_gummy_bears = 2\nprice_per_pound_yogurt_covered_peanuts = 1\nprice_per_pound_licorice = 4\n\n# Define the number of pounds to buy\npounds_gummy_bears = 3\npounds_yogurt_covered_peanuts = 3\npounds_licorice = 2\n\n# Calculate the total cost\ntotal_cost = (price_per_pound_gummy_bears * pounds_gummy_bears +\n               price_per_pound_yogurt_covered_peanuts * pounds_yogurt_covered_peanuts +\n               price_per_pound_licorice * pounds_licorice)\n\n# Format the total cost as currency\nanswer = \"${:.2f}\".format(total_cost)\nprint(answer)", "# Define the prices per pound for each item\nprice_per_pound_gummy_bears = 2\nprice_per_pound_yogurt_covered_peanuts = 1\nprice_per_pound_licorice = 4\n\n# Define the number of pounds for each item\npounds_gummy_bears = 3\npounds_yogurt_covered_peanuts = 3\npounds_licorice = 2\n\n# Calculate the total cost\ntotal_cost = (price_per_pound_gummy_bears * pounds_gummy_bears +\n               price_per_pound_yogurt_covered_peanuts * pounds_yogurt_covered_peanuts +\n               price_per_pound_licorice * pounds_licorice)\n\n# Store the result as a variable named 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "# Define prices per pound\nprice_per_pound = {\n    \"gummy_bears\": 2,\n    \"yogurt_covered_peanuts\": 1,\n    \"licorice\": 4\n}\n\n# Define the quantities in pounds\nquantities = {\n    \"gummy_bears\": 3,\n    \"yogurt_covered_peanuts\": 3,\n    \"licorice\": 2\n}\n\n# Calculate total cost\ntotal_cost = (price_per_pound[\"gummy_bears\"] * quantities[\"gummy_bears\"] +\n               price_per_pound[\"yogurt_covered_peanuts\"] * quantities[\"yogurt_covered_peanuts\"] +\n               price_per_pound[\"licorice\"] * quantities[\"licorice\"])\n\nanswer = total_cost\nprint(answer)"
], "prediction": [17.0, "$17.00", 17.0, 17.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Bronze status | Silver status\n0 checked bags | 4 | 4\n1 checked bag | 8 | 4", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Bronze status | Silver status\n0 checked bags | 4 | 4\n1 checked bag | 8 | 4\n\nA flight attendant was counting the number of passengers present to see if any upgrades could be offered. The flight attendant's list contained passengers' Frequent Flyer status as well as number of bags checked. What is the probability that a randomly selected passenger has 1 checked bag and silver status? Simplify any fractions.", "answer": "1/5", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total passengers for each category\nbronze_bags_0 = 4\nbronze_bags_1 = 8\nsilver_bags_0 = 4\nsilver_bags_1 = 4\n\n# Total passengers with 0 and 1 checked bag\ntotal_passengers_with_0_bags = bronze_bags_0 + silver_bags_0\ntotal_passengers_with_1_bags = bronze_bags_1 + silver_bags_1\ntotal_passengers = total_passengers_with_0_bags + total_passengers_with_1_bags\n\n# Passengers with 1 checked bag and silver status\npassengers_with_1_bag_and_silver = silver_bags_1\n\n# Calculate the probability\nprobability = passengers_with_1_bag_and_silver / total_passengers\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(passengers_with_1_bag_and_silver, total_passengers).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "bronze_bags_0 = 4\nbronze_bags_1 = 8\nsilver_bags_0 = 4\nsilver_bags_1 = 4\n\n# Calculate total passengers for each category\ntotal_passengers_with_0_bags = bronze_bags_0 + silver_bags_0\ntotal_passengers_with_1_bags = bronze_bags_1 + silver_bags_1\ntotal_passengers = total_passengers_with_0_bags + total_passengers_with_1_bags\n\n# Passengers with 1 checked bag and silver status\npassengers_with_1_bag_and_silver = silver_bags_1\n\n# Calculate probability\nprobability = passengers_with_1_bag_and_silver / total_passengers\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(passengers_with_1_bag_and_silver, total_passengers).limit_denominator()\n\n# Store the result in 'answer' variable\nanswer = f\"{simplified_probability.numerator}/{simplified_probability.denominator}\"\nprint(answer)", "# Define the number of passengers based on their Frequent Flyer status and checked bags\nbronze_bags_0 = 4\nbronze_bags_1 = 8\nsilver_bags_0 = 4\nsilver_bags_1 = 4\n\n# Calculate total passengers with 0 and 1 checked bags\ntotal_passengers_with_0_bags = bronze_bags_0 + silver_bags_0\ntotal_passengers_with_1_bags = bronze_bags_1 + silver_bags_1\n\n# Calculate total passengers\ntotal_passengers = total_passengers_with_0_bags + total_passengers_with_1_bags\n\n# Passengers with 1 checked bag and silver status\npassengers_with_1_bag_and_silver = silver_bags_1\n\n# Calculate the probability\nfrom fractions import Fraction\nsimplified_probability = Fraction(passengers_with_1_bag_and_silver, total_passengers).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = f\"{simplified_probability.numerator}/{simplified_probability.denominator}\"", "# Number of passengers with different statuses and checked bags\nbronze_bags_0 = 4\nbronze_bags_1 = 8\nsilver_bags_0 = 4\nsilver_bags_1 = 4\n\n# Calculate total passengers\ntotal_passengers = (bronze_bags_0 + silver_bags_0) + (bronze_bags_1 + silver_bags_1)\n\n# Calculate passengers with 1 checked bag and silver status\npassengers_with_1_bag_and_silver = silver_bags_1\n\n# Calculate the probability\nfrom fractions import Fraction\nsimplified_probability = Fraction(passengers_with_1_bag_and_silver, total_passengers).limit_denominator()\n\n# Store the result\nanswer = f\"{simplified_probability.numerator}/{simplified_probability.denominator}\"\n\nprint(answer)"
], "prediction": [0.2, "1/5", "1/5", "1/5"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Scores in a trivia game\" and then answer a question.\n\nScore | Frequency\n5 | 2\n6 | 8\n7 | 4\n8 | 11\n9 | 1\n10 | 14", "question": "Read the following table regarding \"Scores in a trivia game\" and then write Python code to answer a question.\n\nScore | Frequency\n5 | 2\n6 | 8\n7 | 4\n8 | 11\n9 | 1\n10 | 14\n\nThe coach of the Academic Bowl recorded the scores in a trivia game to determine who would represent the school at the regional competition. How many people scored more than 9?", "answer": "14", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Frequency of scores greater than 9\nscores_above_9_frequency = 0  # Score 10 has frequency of 14\nfrequency_score_10 = 14\nscores_above_9_frequency += frequency_score_10\n\nanswer = scores_above_9_frequency\nprint(answer)", "# Define the scores and their frequencies in a dictionary\nscore_frequencies = {\n    5: 2,\n    6: 8,\n    7: 4,\n    8: 11,\n    9: 1,\n    10: 14\n}\n\n# Initialize counter for scores above 9\nscores_above_9_frequency = 0\n\n# Iterate through the dictionary and count frequencies of scores above 9\nfor score, frequency in score_frequencies.items():\n    if score > 9:\n        scores_above_9_frequency += frequency\n\nanswer = scores_above_9_frequency\nprint(answer)", "score_frequencies = {\n    5: 2,\n    6: 8,\n    7: 4,\n    8: 11,\n    9: 1,\n    10: 14\n}\n\nscores_above_9_frequency = 0\nfor score, frequency in score_frequencies.items():\n    if score > 9:\n        scores_above_9_frequency += frequency\n\nanswer = int(scores_above_9_frequency)  # Ensure the answer is an integer\nprint(answer)", "# Define the score frequencies in a dictionary\nscore_frequencies = {\n    5: 2,\n    6: 8,\n    7: 4,\n    8: 11,\n    9: 1,\n    10: 14\n}\n\n# Initialize a counter for scores above 9\nscores_above_9_frequency = 0\n\n# Iterate through the score frequencies and count those above 9\nfor score, frequency in score_frequencies.items():\n    if score > 9:\n        scores_above_9_frequency += frequency\n\n# Store the result as an integer\nanswer = scores_above_9_frequency\n\nprint(answer)  # Output the answer"
], "prediction": [14.0, 14.0, 14.0, 14.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Science articles read\" and then answer a question.\n\nName | Number of science articles\nDylan | 7\nKenji | 5\nNellie | 8\nBraden | 9\nTisha | 10\nMaureen | 9", "question": "Read the following table regarding \"Science articles read\" and then write Python code to answer a question.\n\nName | Number of science articles\nDylan | 7\nKenji | 5\nNellie | 8\nBraden | 9\nTisha | 10\nMaureen | 9\n\nDylan's classmates revealed how many science articles they read. What is the mean of the numbers?", "answer": "8", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of the number of science articles read by each classmate\narticles_read = [7, 5, 8, 9, 10, 9]\n\n# Calculate the mean\nmean_articles = sum(articles_read) / len(articles_read)\nanswer = mean_articles\nprint(answer)", "# List of articles read by Dylan and his classmates\narticles_read = [7, 5, 8, 9, 10, 9]  \n\n# Calculate the mean of the articles read\nmean_articles = sum(articles_read) / len(articles_read)  \n\n# Store the result in 'answer'\nanswer = mean_articles  \n\n# Output the answer\nprint(answer)", "articles_read = [7, 5, 8, 9, 10, 9]  \nmean_articles = sum(articles_read) / len(articles_read)  \nanswer = mean_articles  \nprint(answer)  # This will correctly output the answer", "# Define the number of science articles read by each student\narticles_read = [7, 5, 8, 9, 10, 9]\n\n# Calculate the mean of the articles read\nmean_articles = sum(articles_read) / len(articles_read)\n\n# Format the answer to one decimal place for clarity\nanswer = round(mean_articles, 1)\nprint(answer)  # This will correctly output the answer"], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Pizza sales\" and then answer a question.\n\nRestaurant | Cheese pizzas | Vegetarian pizzas\nNew York Slice | $10 | $19\nThe Real Chicago | $17 | $19\nDan's Deep Dish | $6 | $12\nThe Big Cheese | $6 | $16", "question": "Read the following table regarding \"Pizza sales\" and then write Python code to answer a question.\n\nRestaurant | Cheese pizzas | Vegetarian pizzas\nNew York Slice | $10 | $19\nThe Real Chicago | $17 | $19\nDan's Deep Dish | $6 | $12\nThe Big Cheese | $6 | $16\n\nA food industry researcher compiled the revenues of several pizzerias. Which restaurant made more from pizzas, New York Slice or The Real Chicago? Choose from the the options: ['The Real Chicago', 'New York Slice']", "answer": "The Real Chicago", "ques_type": "multi_choice", "choices": ["The Real Chicago", "New York Slice"], "code": [
  "# Python code, return answer \n# Revenue calculation for each restaurant\nrevenue_new_york_slice = 10 + 19  # Cheese + Vegetarian\nrevenue_real_chicago = 17 + 19  # Cheese + Vegetarian\n\n# Determine which restaurant made more money from pizzas\nif revenue_real_chicago > revenue_new_york_slice:\n    answer = 'The Real Chicago'\nelse:\n    answer = 'New York Slice'\n\nprint(answer)", "# Define the prices of the pizzas\nprice_cheese_new_york_slice = 10\nprice_vegetarian_new_york_slice = 19\nprice_cheese_real_chicago = 17\nprice_vegetarian_real_chicago = 19\n\n# Define the number of each type of pizza sold\nsold_cheese_new_york_slice = 100  # Example quantity\nsold_vegetarian_new_york_slice = 50  # Example quantity\nsold_cheese_real_chicago = 80  # Example quantity\nsold_vegetarian_real_chicago = 60  # Example quantity\n\n# Calculate the total revenue for each restaurant\nrevenue_new_york_slice = (price_cheese_new_york_slice * sold_cheese_new_york_slice) + \\\n                         (price_vegetarian_new_york_slice * sold_vegetarian_new_york_slice)\n\nrevenue_real_chicago = (price_cheese_real_chicago * sold_cheese_real_chicago) + \\\n                       (price_vegetarian_real_chicago * sold_vegetarian_real_chicago)\n\n# Determine which restaurant made more revenue\nif revenue_real_chicago > revenue_new_york_slice:\n    answer = 'The Real Chicago'\nelse:\n    answer = 'New York Slice'\n\nprint(answer)", "```python\n# Define prices of pizzas\nprice_cheese_new_york_slice = 10\nprice_vegetarian_new_york_slice = 19\nprice_cheese_real_chicago = 17\nprice_vegetarian_real_chicago = 19\n\n# Define quantities sold (these should be replaced with actual sales data)\nsold_cheese_new_york_slice = 100  # Example quantity\nsold_vegetarian_new_york_slice = 50  # Example quantity\nsold_cheese_real_chicago = 80  # Example quantity\nsold_vegetarian_real_chicago = 60  # Example quantity\n\n# Calculate revenues\nrevenue_new_york_slice = (price_cheese_new_york_slice * sold_cheese_new_york_slice) + \\\n                         (price_vegetarian_new_york_slice * sold_vegetarian_new_york_slice)\nrevenue_real_chicago = (price_cheese_real_chicago * sold_cheese_real_chicago) + \\\n                       (price_vegetarian_real_chicago * sold_vegetarian_real_chicago)\n\n# Determine which restaurant made more money\nif revenue_real_chicago > revenue", "# Define the prices of pizzas for each restaurant\nprice_cheese_new_york_slice = 10\nprice_vegetarian_new_york_slice = 19\nprice_cheese_real_chicago = 17\nprice_vegetarian_real_chicago = 19\n\n# Assume the same quantity sold for simplicity\nsold_cheese = 100  # Example quantity sold for cheese pizzas\nsold_vegetarian = 50  # Example quantity sold for vegetarian pizzas\n\n# Calculate revenue for New York Slice\nrevenue_new_york_slice = (price_cheese_new_york_slice * sold_cheese) + \\\n                         (price_vegetarian_new_york_slice * sold_vegetarian)\n\n# Calculate revenue for The Real Chicago\nrevenue_real_chicago = (price_cheese_real_chicago * sold_cheese) + \\\n                       (price_vegetarian_real_chicago * sold_vegetarian)\n\n# Determine which restaurant made more revenue\nif revenue_real_chicago > revenue_new_york_slice:\n    answer = 'The Real Chicago'\nelse:\n    answer = 'New York Slice'\n\nprint(answer)"
], "prediction": ["The Real Chicago", "The Real Chicago", null, "The Real Chicago"], "report": ["Done", "Done", "SyntaxError('invalid syntax', ('<string>', 1, 1, '```python\\n', 1, 2))", "Done"]
}
{
  "context": "Read the following table regarding \"Building heights (meters)\" and then answer a question.\n\nStem | Leaf \n1 | 0, 2, 7, 8\n2 | 3\n3 | 3, 4, 9\n4 | 0, 7\n5 | 4, 6, 8\n6 | 8, 9\n7 | 4\n8 | 1", "question": "Read the following table regarding \"Building heights (meters)\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 0, 2, 7, 8\n2 | 3\n3 | 3, 4, 9\n4 | 0, 7\n5 | 4, 6, 8\n6 | 8, 9\n7 | 4\n8 | 1\n\nAn architecture student measured the heights of all the buildings downtown. How many buildings are at least 27 meters tall?", "answer": "12", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Extract building heights from the stem-and-leaf display\nbuilding_heights = [10, 12, 17, 18, 23, 33, 34, 39, 40, 47, 54, 56, 58, 68, 69, 74, 81]  # Corresponding heights in meters\n# Count the buildings that are at least 27 meters tall\nbuildings_at_least_27_meters = sum(1 for height in building_heights if height >= 27)\nanswer = buildings_at_least_27_meters\nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [(1, [0, 2, 7, 8]), (2, [3]), (3, [3, 4, 9]), (4, [0, 7]), (5, [4, 6, 8]), (6, [8, 9]), (7, [4]), (8, [1])]\n\n# Initialize counter for buildings at least 27 meters tall\nbuildings_at_least_27_meters = 0\n\n# Iterate through the stem and leaf data structure and count relevant buildings\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        height = stem * 10 + leaf  # Convert stem and leaf to actual height\n        if height >= 27:\n            buildings_at_least_27_meters += 1\n\nanswer = buildings_at_least_27_meters\nprint(answer)", "# Define the stem and leaf data structure for building heights\nstem_and_leaf = [(1, [0, 2, 7, 8]), (2, [3]), (3, [3, 4, 9]), (4, [0, 7]), (5, [4, 6, 8]), (6, [8, 9]), (7, [4]), (8, [1])]\n\n# Initialize counter for buildings at least 27 meters tall\nbuildings_at_least_27_meters = 0\n\n# Iterate through the stem and leaf data structure and count relevant buildings\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        height = stem * 10 + leaf  # Convert stem and leaf to actual height\n        if height >= 27:\n            buildings_at_least_27_meters += 1\n\n# Store the result as an integer\nanswer = buildings_at_least_27_meters\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [0, 2, 7, 8]), (2, [3]), (3, [3, 4, 9]), (4, [0, 7]), (5, [4, 6, 8]), (6, [8, 9]), (7, [4]), (8, [1])]  \n\n# Initialize counter for buildings at least 27 meters tall  \nbuildings_at_least_27_meters = 0  \n\n# Iterate through the stem and leaf data structure and count relevant buildings  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        height = stem * 10 + leaf  # Convert stem and leaf to actual height  \n        if height >= 27:  \n            buildings_at_least_27_meters += 1  \n\nanswer = buildings_at_least_27_meters  # Ensure answer is an integer\nprint(answer)"
], "prediction": [12.0, 12.0, 12.0, 12.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Eating ice cream last month\" and then answer a question.\n\nTimes eaten | Frequency\n0 | 3\n1 | 4\n2 | 17\n3 | 7\n4 | 0\n5 | 1", "question": "Read the following table regarding \"Eating ice cream last month\" and then write Python code to answer a question.\n\nTimes eaten | Frequency\n0 | 3\n1 | 4\n2 | 17\n3 | 7\n4 | 0\n5 | 1\n\nPerry's Treats counted how many times its most frequent customers ate ice cream last month. How many customers ate ice cream at least 1 time?", "answer": "29", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Frequency of customers for each times eaten\nfrequency = {\n    0: 3,\n    1: 4,\n    2: 17,\n    3: 7,\n    4: 0,\n    5: 1\n}\n\n# Calculate the number of customers who ate ice cream at least 1 time\ncustomers_at_least_once = sum(frequency[times] for times in frequency if times > 0)\nanswer = customers_at_least_once\nprint(answer)", "# Define the frequency of ice cream consumption\nfrequency = {\n    0: 3,\n    1: 4,\n    2: 17,\n    3: 7,\n    4: 0,\n    5: 1\n}\n\n# Calculate the number of customers who ate ice cream at least 1 time\ncustomers_at_least_once = sum(frequency[times] for times in frequency if times > 0)\n\n# Store the result in the answer variable\nanswer = customers_at_least_once\n\n# Output the answer\nprint(answer)", "# Define the frequency of ice cream consumption\nfrequency = {\n    0: 3,\n    1: 4,\n    2: 17,\n    3: 7,\n    4: 0,\n    5: 1\n}\n\n# Calculate the number of customers who ate ice cream at least once\ncustomers_at_least_once = sum(frequency[times] for times in frequency if times > 0)\n\n# Store the result in the variable 'answer'\nanswer = customers_at_least_once\n\n# Output the answer\nprint(answer)", "# Define the frequency of ice cream consumption\nfrequency = {\n    0: 3,\n    1: 4,\n    2: 17,\n    3: 7,\n    4: 0,\n    5: 1\n}\n\n# Calculate the number of customers who ate ice cream at least 1 time\ncustomers_at_least_once = sum(frequency[times] for times in frequency if times > 0)\n\n# Store the result in the variable 'answer'\nanswer = customers_at_least_once\n\n# Print the answer\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'frequency' is not defined\")", "NameError(\"name 'frequency' is not defined\")", "NameError(\"name 'frequency' is not defined\")", "NameError(\"name 'frequency' is not defined\")"]
}
{
  "context": "Read the following table regarding \"Fish per tank\" and then answer a question.\n\nStem | Leaf \n1 | 0, 0, 2, 3, 4, 5\n2 | 8, 9\n3 | 1, 2, 3, 4, 4, 7\n4 | 8, 8, 8\n5 | 2, 9\n6 | 5, 6, 8", "question": "Read the following table regarding \"Fish per tank\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 0, 0, 2, 3, 4, 5\n2 | 8, 9\n3 | 1, 2, 3, 4, 4, 7\n4 | 8, 8, 8\n5 | 2, 9\n6 | 5, 6, 8\n\nA pet store owner had his staff count the number of fish in each tank. What is the largest number of fish per tank?", "answer": "68", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number of fish corresponds to the highest value in the stem-and-leaf display.\nlargest_fish_count = 68  # From the stem \"6 | 5, 6, 8\", the value is 68.\nanswer = largest_fish_count\nprint(answer)", "# Define the stem and leaf data structure as a list of tuples\nstem_and_leaf = [(1, [0, 0, 2, 3, 4, 5]), (2, [8, 9]), (3, [1, 2, 3, 4, 4, 7]), (4, [8, 8, 8]), (5, [2, 9]), (6, [5, 6, 8])]\n\n# Initialize variable to track the largest number of fish per tank\nlargest_fish_count = 0\n\n# Iterate through the stem and leaf data structure to find the largest count\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        fish_count = stem * 10 + leaf  # Calculate the number of fish per tank\n        if fish_count > largest_fish_count:  # Update if the current count is larger\n            largest_fish_count = fish_count\n\nanswer = largest_fish_count\nprint(answer)", "stem_and_leaf = [(1, [0, 0, 2, 3, 4, 5]), (2, [8, 9]), (3, [1, 2, 3, 4, 4, 7]), (4, [8, 8, 8]), (5, [2, 9]), (6, [5, 6, 8])]\nlargest_fish_count = 0\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        fish_count = stem * 10 + leaf  # Calculate the number of fish per tank\n        if fish_count > largest_fish_count:  # Update if the current count is larger\n            largest_fish_count = fish_count\nanswer = int(largest_fish_count)  # Convert to integer\nprint(answer)", "# Define the stem and leaf data structure for the number of fish per tank\nstem_and_leaf = [(1, [0, 0, 2, 3, 4, 5]), \n                 (2, [8, 9]), \n                 (3, [1, 2, 3, 4, 4, 7]), \n                 (4, [8, 8, 8]), \n                 (5, [2, 9]), \n                 (6, [5, 6, 8])]\n\n# Initialize variable to track the largest fish count\nlargest_fish_count = 0\n\n# Iterate through the stem and leaf data structure\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        fish_count = stem * 10 + leaf  # Calculate the number of fish per tank\n        if fish_count > largest_fish_count:  # Update if the current count is larger\n            largest_fish_count = fish_count\n\nanswer = largest_fish_count  # Store the result as an integer\nprint(answer)"
], "prediction": [68.0, 68.0, 68.0, 68.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Library schedule\" and then answer a question.\n\nClass | Begin | End\nMr. Harper's class | 7:25 A.M. | 8:20 A.M.\nMrs. Suzuki's class | 8:25 A.M. | 9:30 A.M.\nMrs. Carlson's class | 9:50 A.M. | 10:20 A.M.\nMs. Dyer's class | 10:30 A.M. | 11:10 A.M.\nMr. Mason's class | 11:20 A.M. | 11:55 A.M.\nMrs. McCoy's class | 12:00 P.M. | 12:45 P.M.\nMs. Mueller's class | 1:05 P.M. | 1:55 P.M.\nMs. Hampton's class | 2:00 P.M. | 2:50 P.M.", "question": "Read the following table regarding \"Library schedule\" and then write Python code to answer a question.\n\nClass | Begin | End\nMr. Harper's class | 7:25 A.M. | 8:20 A.M.\nMrs. Suzuki's class | 8:25 A.M. | 9:30 A.M.\nMrs. Carlson's class | 9:50 A.M. | 10:20 A.M.\nMs. Dyer's class | 10:30 A.M. | 11:10 A.M.\nMr. Mason's class | 11:20 A.M. | 11:55 A.M.\nMrs. McCoy's class | 12:00 P.M. | 12:45 P.M.\nMs. Mueller's class | 1:05 P.M. | 1:55 P.M.\nMs. Hampton's class | 2:00 P.M. | 2:50 P.M.\n\nLook at the following schedule. When does Ms. Hampton's class begin? Choose from the the options: ['2:50 P.M.', '1:55 P.M.', '9:50 A.M.', '2:00 P.M.']", "answer": "2:00 P.M.", "ques_type": "multi_choice", "choices": ["2:50 P.M.", "1:55 P.M.", "9:50 A.M.", "2:00 P.M."], "code": ["# Python code, return answer \n# Ms. Hampton's class begins at 2:00 P.M.\nstart_time_ms_hampton = \"2:00 P.M.\"\noptions = ['2:50 P.M.', '1:55 P.M.', '9:50 A.M.', '2:00 P.M.']\n# Check if start time is in options\nif start_time_ms_hampton in options:\n    answer = start_time_ms_hampton\nprint(answer)", "# Define the start time of Ms. Hampton's class\nstart_time_ms_hampton = \"2:00 P.M.\"\n\n# Directly assign the start time to the answer variable\nanswer = start_time_ms_hampton\n\n# Print the answer\nprint(answer)", "# Define the start time of Ms. Hampton's class\nstart_time_ms_hampton = \"2:00 P.M.\"\n\n# Options to choose from\noptions = ['2:50 P.M.', '1:55 P.M.', '9:50 A.M.', '2:00 P.M.']\n\n# Check if the start time is in the options\nif start_time_ms_hampton in options:\n    answer = start_time_ms_hampton\nelse:\n    answer = None  # or any other appropriate value if not found\n\nprint(answer)", "# Define the start time for Ms. Hampton's class\nstart_time_ms_hampton = \"2:00 P.M.\"\n# Define the available options\noptions = ['2:50 P.M.', '1:55 P.M.', '9:50 A.M.', '2:00 P.M.']\n# Check if the start time is in the options\nif start_time_ms_hampton in options:\n    answer = start_time_ms_hampton\nelse:\n    answer = None  # or any other appropriate value if not found\n\nprint(answer)"], "prediction": ["2:00 P.M.", "2:00 P.M.", "2:00 P.M.", "2:00 P.M."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Ferry fares\" and then answer a question.\n\nFerry | Car | Bicycle\nSouthport-Fort Fisher | $5 | $2\nMukilteu-Clinton | $7 | $5\nOcracoke | $15 | $3\nFauntleroy-Vashon | $15 | $5\nSeattle-Bremerton | $12 | $8", "question": "Read the following table regarding \"Ferry fares\" and then write Python code to answer a question.\n\nFerry | Car | Bicycle\nSouthport-Fort Fisher | $5 | $2\nMukilteu-Clinton | $7 | $5\nOcracoke | $15 | $3\nFauntleroy-Vashon | $15 | $5\nSeattle-Bremerton | $12 | $8\n\nFor an economics project, Jim determined the cost of ferry rides for bicycles and cars. How much higher is the fare for a car on the Seattle-Bremerton ferry than on the Mukilteu-Clinton ferry?", "answer": "5", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Ferry fares for the specific routes\nfare_seattle_bremerton_car = 12  # Cost for a car on Seattle-Bremerton ferry\nfare_mukilteu_clinton_car = 7     # Cost for a car on Mukilteu-Clinton ferry\n\n# Calculate the difference\ndifference_fare = fare_seattle_bremerton_car - fare_mukilteu_clinton_car\nanswer = difference_fare\nprint(answer)", "fare_seattle_bremerton_car = 12  # Cost for a car on Seattle-Bremerton ferry\nfare_mukilteu_clinton_car = 7     # Cost for a car on Mukilteu-Clinton ferry\ndifference_fare = fare_seattle_bremerton_car - fare_mukilteu_clinton_car\nanswer = int(difference_fare)  # Convert to integer for clarity\nprint(answer)", "fare_seattle_bremerton_car = 12  # Cost for a car on Seattle-Bremerton ferry\nfare_mukilteu_clinton_car = 7     # Cost for a car on Mukilteu-Clinton ferry\ndifference_fare = fare_seattle_bremerton_car - fare_mukilteu_clinton_car\nanswer = difference_fare  # No need to convert to integer since it's already a whole number\nprint(answer)", "fare_seattle_bremerton_car = 12  # Cost for a car on Seattle-Bremerton ferry\nfare_mukilteu_clinton_car = 7     # Cost for a car on Mukilteu-Clinton ferry\ndifference_fare = fare_seattle_bremerton_car - fare_mukilteu_clinton_car\nanswer = int(difference_fare)  # Convert the result to an integer for a whole number output\nprint(answer)"
], "prediction": [5.0, 5.0, 5.0, 5.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ntoy guitar | $25.03\nremote control car | $16.92\nmystery game | $14.34\nmodel airplane | $38.89\nchess board | $12.98\ntrivia game | $31.99", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ntoy guitar | $25.03\nremote control car | $16.92\nmystery game | $14.34\nmodel airplane | $38.89\nchess board | $12.98\ntrivia game | $31.99\n\nDanny has $103.16. How much money will Danny have left if he buys a model airplane and a mystery game?", "answer": "49.93", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices of the items Danny wants to buy\nprice_model_airplane = 38.89\nprice_mystery_game = 14.34\n# Total cost of the items\ntotal_cost = price_model_airplane + price_mystery_game\n# Danny's initial amount\ninitial_amount = 103.16\n# Remaining amount after the purchase\nremaining_amount = initial_amount - total_cost\nanswer = remaining_amount\nprint(answer)", "# Define the prices of the items Danny wants to buy\nprice_model_airplane = 38.89\nprice_mystery_game = 14.34\n\n# Calculate the total cost of the items\ntotal_cost = price_model_airplane + price_mystery_game\n\n# Define Danny's initial amount of money\ninitial_amount = 103.16\n\n# Calculate the remaining amount after the purchase\nremaining_amount = initial_amount - total_cost\n\n# Store the result in the answer variable\nanswer = remaining_amount\n\n# Print the answer\nprint(answer)", "# Prices of the items Danny wants to buy\nprice_model_airplane = 38.89\nprice_mystery_game = 14.34\n\n# Total cost of the items\ntotal_cost = price_model_airplane + price_mystery_game\n\n# Initial amount of money Danny has\ninitial_amount = 103.16\n\n# Remaining amount after the purchase\nremaining_amount = initial_amount - total_cost\n\n# Store the result in the variable 'answer'\nanswer = remaining_amount\n\n# Print the answer\nprint(answer)", "# Prices of items\nprice_model_airplane = 38.89\nprice_mystery_game = 14.34\n\n# Total cost of the items\ntotal_cost = price_model_airplane + price_mystery_game\n\n# Danny's initial amount\ninitial_amount = 103.16\n\n# Remaining amount after purchases\nremaining_amount = initial_amount - total_cost\n\n# Store the result in the variable 'answer'\nanswer = remaining_amount\n\n# Output the answer\nprint(answer)"
], "prediction": [49.93, 49.93, 49.93, 49.93], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Making leaf rubbings\" and then answer a question.\n\nLeaf rubbings made | Frequency\n0 | 20\n1 | 13\n2 | 3\n3 | 11", "question": "Read the following table regarding \"Making leaf rubbings\" and then write Python code to answer a question.\n\nLeaf rubbings made | Frequency\n0 | 20\n1 | 13\n2 | 3\n3 | 11\n\nAfter a field trip to the park, students in Mrs. Garcia's art class counted the number of leaf rubbings they had made. How many students made at least 2 leaf rubbings?", "answer": "14", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of leaf rubbings\nfrequency = {\n    0: 20,\n    1: 13,\n    2: 3,\n    3: 11\n}\n# Calculate the number of students who made at least 2 leaf rubbings\nstudents_at_least_2 = frequency[2] + frequency[3]\nanswer = students_at_least_2\nprint(answer)", "frequency = {\n    0: 20,\n    1: 13,\n    2: 3,\n    3: 11\n}\n\nstudents_at_least_2 = frequency[2] + frequency[3]\nanswer = int(students_at_least_2)  # Ensuring the answer is an integer\nprint(answer)", "frequency = {\n    0: 20,\n    1: 13,\n    2: 3,\n    3: 11\n}\nstudents_at_least_2 = frequency[2] + frequency[3]\nanswer = students_at_least_2  # Directly assigning the integer value\nprint(answer)", "frequency = {\n    0: 20,\n    1: 13,\n    2: 3,\n    3: 11\n}\nstudents_at_least_2 = frequency[2] + frequency[3]\nanswer = students_at_least_2  # This will be an integer\nprint(answer)"], "prediction": [14.0, 14.0, 14.0, 14.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of toy bins | Number of red blocks\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of toy bins | Number of red blocks\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | ?\n\nEach toy bin has 2 red blocks. How many red blocks are in 5 toy bins?", "answer": "10", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Each toy bin contains 2 red blocks\nblocks_per_bin = 2\n# Calculate the number of red blocks in 5 toy bins\ntoy_bins = 5\nred_blocks_in_five_bins = blocks_per_bin * toy_bins\nanswer = red_blocks_in_five_bins\nprint(answer)", "blocks_per_bin = 2\ntoy_bins = 5\nred_blocks_in_five_bins = blocks_per_bin * toy_bins\nanswer = int(red_blocks_in_five_bins)  # Convert to integer\nprint(answer)", "blocks_per_bin = 2\ntoy_bins = 5\nred_blocks_in_five_bins = blocks_per_bin * toy_bins\nanswer = red_blocks_in_five_bins  # No need to convert to integer\nprint(answer)", "blocks_per_bin = 2\ntoy_bins = 5\nred_blocks_in_five_bins = blocks_per_bin * toy_bins\nanswer = int(red_blocks_in_five_bins)  # Convert to integer\nprint(answer)"], "prediction": [10.0, 10.0, 10.0, 10.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$35 | 21,100 | 12,300\n$45 | 18,400 | 14,600\n$55 | 15,700 | 16,900\n$65 | 13,000 | 19,200\n$75 | 10,300 | 21,500", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$35 | 21,100 | 12,300\n$45 | 18,400 | 14,600\n$55 | 15,700 | 16,900\n$65 | 13,000 | 19,200\n$75 | 10,300 | 21,500\n\nLook at the table. Then answer the question. At a price of $65, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "surplus", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": [
  "# Python code, return answer \n# Quantity demanded and supplied at the price of $65\nquantity_demanded_at_65 = 13000\nquantity_supplied_at_65 = 19200\n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_65 < quantity_supplied_at_65:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the quantities based on the table for the price of $65\nquantity_demanded_at_65 = 13000  # from the table\nquantity_supplied_at_65 = 19200   # from the table\n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_65 < quantity_supplied_at_65:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the quantities demanded and supplied at a price of $65\nquantity_demanded_at_65 = 13000  # from the table\nquantity_supplied_at_65 = 19200   # from the table\n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_65 < quantity_supplied_at_65:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)  # This will output: surplus", "# Define the quantities from the table\nquantity_demanded_at_65 = 13000  # from the table\nquantity_supplied_at_65 = 19200   # from the table\n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_65 < quantity_supplied_at_65:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)  # This will output: surplus"
], "prediction": ["surplus", "surplus", "surplus", "surplus"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Quiz show scores\" and then answer a question.\n\nName | Score\nVince | 445\nHerman | 425\nTom | 422\nWesley | 452", "question": "Read the following table regarding \"Quiz show scores\" and then write Python code to answer a question.\n\nName | Score\nVince | 445\nHerman | 425\nTom | 422\nWesley | 452\n\nThe players on a quiz show received the following scores. Who had the highest score? Choose from the the options: ['Vince', 'Herman', 'Tom', 'Wesley']", "answer": "Wesley", "ques_type": "multi_choice", "choices": ["Vince", "Herman", "Tom", "Wesley"], "code": ["# Python code, return answer \nscores = {\n    'Vince': 445,\n    'Herman': 425,\n    'Tom': 422,\n    'Wesley': 452\n}\n# Find the player with the highest score\nhighest_score_player = max(scores, key=scores.get)\nanswer = highest_score_player\nprint(answer)", "# Store the scores of the players in a dictionary  \nscores = {  \n    'Vince': 445,  \n    'Herman': 425,  \n    'Tom': 422,  \n    'Wesley': 452  \n}  \n  \n# Find the player with the highest score  \nhighest_score_player = max(scores, key=scores.get)  \nanswer = highest_score_player  \n\nprint(answer)", "scores = {  \n    'Vince': 445,  \n    'Herman': 425,  \n    'Tom': 422,  \n    'Wesley': 452  \n}  \nhighest_score_player = max(scores, key=scores.get)  \nanswer = f\"The player with the highest score is: {highest_score_player}\"  \nprint(answer)", "scores = {  \n    'Vince': 445,  \n    'Herman': 425,  \n    'Tom': 422,  \n    'Wesley': 452  \n}  \nhighest_score_player = max(scores, key=scores.get)  \nanswer = highest_score_player  \nprint(answer)"], "prediction": ["Wesley", "Wesley", "The player with the highest score is: Wesley", "Wesley"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Trees planted\" and then answer a question.\n\nOrganization | Number of trees planted\nMake it Green | 270\nDreaming Green | 454\nNew Planet | 207\nPlant It | 371", "question": "Read the following table regarding \"Trees planted\" and then write Python code to answer a question.\n\nOrganization | Number of trees planted\nMake it Green | 270\nDreaming Green | 454\nNew Planet | 207\nPlant It | 371\n\nAn environmental agency examined how many trees were planted by different organizations. In all, how many trees were planted by New Planet and Plant It?", "answer": "578", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ntrees_new_planet = 207\ntrees_plant_it = 371\n# Total trees planted by New Planet and Plant It\ntotal_trees = trees_new_planet + trees_plant_it\nanswer = total_trees\nprint(answer)", "# Define the number of trees planted by each organization\ntrees_new_planet = 207\ntrees_plant_it = 371\n\n# Calculate the total number of trees planted by New Planet and Plant It\ntotal_trees = trees_new_planet + trees_plant_it\n\n# Store the result as an integer\nanswer = total_trees\n\n# Output the answer\nprint(answer)", "trees_new_planet = 207\ntrees_plant_it = 371\ntotal_trees = trees_new_planet + trees_plant_it\nanswer = int(total_trees)  # Ensure the result is an integer\nprint(answer)", "# Define the number of trees planted by each organization\ntrees_new_planet = 207\ntrees_plant_it = 371\n\n# Calculate the total number of trees planted by New Planet and Plant It\ntotal_trees = trees_new_planet + trees_plant_it\n\n# Store the result as an integer\nanswer = total_trees  # No need to convert to int since the result is already an integer\n\nprint(answer)  # Output the answer"], "prediction": [578.0, 578.0, 578.0, 578.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Students in applied majors\" and then answer a question.\n\nSchool | Intake\nElectronics | 170\nArchitecture | 470\nCivil engineering | 280\nMechanical engineering | 200", "question": "Read the following table regarding \"Students in applied majors\" and then write Python code to answer a question.\n\nSchool | Intake\nElectronics | 170\nArchitecture | 470\nCivil engineering | 280\nMechanical engineering | 200\n\nCastroville University offers four applied majors and monitors the number of students in each. What fraction of the students in applied majors are majoring in mechanical engineering? Simplify your answer.", "answer": "5/28", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total students in applied majors\ntotal_students = 170 + 470 + 280 + 200\n# Students majoring in mechanical engineering\nmechanical_engineering_students = 200\n# Calculate the fraction of students in mechanical engineering\nfraction_mechanical_engineering = mechanical_engineering_students / total_students\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_fraction = Fraction(mechanical_engineering_students, total_students).limit_denominator()\nanswer = simplified_fraction\nprint(answer)", "# Define the number of students in each applied major\nelectronics_students = 170\narchitecture_students = 470\ncivil_engineering_students = 280\nmechanical_engineering_students = 200\n\n# Calculate the total number of students in applied majors\ntotal_students = electronics_students + architecture_students + civil_engineering_students + mechanical_engineering_students\n\n# Calculate the fraction of students majoring in mechanical engineering\nfrom fractions import Fraction\nfraction_mechanical_engineering = Fraction(mechanical_engineering_students, total_students).limit_denominator()\n\n# Store the simplified fraction in the answer variable\nanswer = fraction_mechanical_engineering\nprint(answer)", "electronics_students = 170\narchitecture_students = 470\ncivil_engineering_students = 280\nmechanical_engineering_students = 200\n\ntotal_students = electronics_students + architecture_students + civil_engineering_students + mechanical_engineering_students\n\nfrom fractions import Fraction\nfraction_mechanical_engineering = Fraction(mechanical_engineering_students, total_students).limit_denominator()\n\nanswer = fraction_mechanical_engineering\nprint(answer)", "electronics_students = 170\narchitecture_students = 470\ncivil_engineering_students = 280\nmechanical_engineering_students = 200\n\n# Calculate total number of students\ntotal_students = electronics_students + architecture_students + civil_engineering_students + mechanical_engineering_students\n\n# Calculate the fraction of students majoring in mechanical engineering\nfrom fractions import Fraction\nfraction_mechanical_engineering = Fraction(mechanical_engineering_students, total_students).limit_denominator()\n\n# Store the fraction as the answer\nanswer = fraction_mechanical_engineering\nprint(answer)"
], "prediction": [0.17857, 0.17857, 0.17857, 0.17857], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n15 | 3\n5 | 18\n13 | 0\n11 | 4", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n15 | 3\n5 | 18\n13 | 0\n11 | 4\n\nLook at this table. Is this relation a function? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# A relation is a function if each input (x value) is associated with exactly one output (y value).\n# We will check if any x values are repeated.\ndata = {\n    15: 3,\n    5: 18,\n    13: 0,\n    11: 4\n}\n# Check for duplicate x values\nis_function = len(data) == len(set(data.keys()))\nanswer = 'yes' if is_function else 'no'\nprint(answer)", "# Store the relation in a dictionary where keys are x-values and values are y-values\ndata = {\n    15: 3,\n    5: 18,\n    13: 0,\n    11: 4\n}\n\n# Check if the relation is a function (each x-value must map to a unique y-value)\nis_function = len(data) == len(set(data.keys()))\nanswer = 'yes' if is_function else 'no'\n\nprint(answer)", "# Define the relation as a dictionary\ndata = {\n    15: 3,\n    5: 18,\n    13: 0,\n    11: 4\n}\n\n# Check if each x-value corresponds to exactly one y-value\nis_function = len(data) == len(set(data.keys()))\n\n# Determine the answer based on the function check\nanswer = 'yes' if is_function else 'no'\n\n# Print the answer\nprint(answer)", "# Define the relation as a dictionary\ndata = {\n    15: 3,\n    5: 18,\n    13: 0,\n    11: 4\n}\n\n# Check if the relation is a function\nis_function = len(data) == len(set(data.keys()))\n\n# Prepare the answer based on the function check\nanswer = 'yes' if is_function else 'no'\n\n# Print the answer\nprint(answer)"
], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n15 | 2\n11 | 8\n1 | 4\n12 | 13", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n15 | 2\n11 | 8\n1 | 4\n12 | 13\n\nLook at this table. Is this relation a function? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# A relation is a function if each input (x value) is associated with exactly one output (y value).\n# We will check if any x values are repeated in the table.\n\ndata = [(15, 2), (11, 8), (1, 4), (12, 13)]\nx_values = [x for x, y in data]\n\n# Check for duplicates in x_values\nis_function = len(x_values) == len(set(x_values))\nanswer = 'yes' if is_function else 'no'\nprint(answer)", "# Define the data as a list of tuples\ndata = [(15, 2), (11, 8), (1, 4), (12, 13)]\n\n# Extract x-values and check if they are unique\nx_values = [x for x, y in data]\nis_function = len(x_values) == len(set(x_values))\n\n# Determine the answer based on the uniqueness of x-values\nanswer = 'yes' if is_function else 'no'\nprint(answer)", "# Define the data as a list of tuples\ndata = [(15, 2), (11, 8), (1, 4), (12, 13)]\n\n# Extract x-values\nx_values = [x for x, y in data]\n\n# Determine if the relation is a function\nis_function = len(x_values) == len(set(x_values))\n\n# Prepare the answer based on whether it is a function or not\nanswer = 'yes' if is_function else 'no'\n\n# Print the answer\nprint(answer)", "# Define the data as a list of tuples\ndata = [(15, 2), (11, 8), (1, 4), (12, 13)]\n\n# Extract x-values and y-values\nx_values = [x for x, y in data]\ny_values = [y for x, y in data]\n\n# Check if the relation is a function\nis_function = len(x_values) == len(set(x_values)) and len(y_values) == len(set(y_values))\n\n# Determine the answer based on the function check\nanswer = 'yes' if is_function else 'no'\nprint(answer)"
], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npine nuts | $5.43 per kilogram\nBrazil nuts | $3.93 per kilogram\nchestnuts | $5.14 per kilogram\nmacadamia nuts | $4.00 per kilogram\npistachios | $2.86 per kilogram\npeanuts | $1.95 per kilogram", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npine nuts | $5.43 per kilogram\nBrazil nuts | $3.93 per kilogram\nchestnuts | $5.14 per kilogram\nmacadamia nuts | $4.00 per kilogram\npistachios | $2.86 per kilogram\npeanuts | $1.95 per kilogram\n\nIf Edwin buys 4 kilograms of chestnuts, 5 kilograms of peanuts, and 5 kilograms of macadamia nuts, how much will he spend?", "answer": "50.31", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices per kilogram\nprice_per_kg_chestnuts = 5.14 \nprice_per_kg_peanuts = 1.95 \nprice_per_kg_macadamia = 4.00 \n\n# Quantities purchased\nkg_chestnuts = 4 \nkg_peanuts = 5 \nkg_macadamia = 5 \n\n# Total cost calculation\ntotal_cost = (price_per_kg_chestnuts * kg_chestnuts + \n               price_per_kg_peanuts * kg_peanuts + \n               price_per_kg_macadamia * kg_macadamia)\n\nanswer = total_cost\nprint(answer)", "# Define the prices per kilogram for each type of nut  \nprice_per_kg = {\n    'chestnuts': 5.14, \n    'peanuts': 1.95, \n    'macadamia': 4.00\n}\n\n# Define the quantities in kilograms  \nquantities = {\n    'chestnuts': 4, \n    'peanuts': 5, \n    'macadamia': 5\n}\n\n# Calculate the total cost  \ntotal_cost = sum(price_per_kg[nut] * quantities[nut] for nut in quantities)\n\n# Store the result in the variable 'answer'  \nanswer = total_cost  \nprint(answer)", "price_per_kg_chestnuts = 5.14 \nprice_per_kg_peanuts = 1.95 \nprice_per_kg_macadamia = 4.00 \nkg_chestnuts = 4 \nkg_peanuts = 5 \nkg_macadamia = 5 \n\ntotal_cost = (price_per_kg_chestnuts * kg_chestnuts + \n               price_per_kg_peanuts * kg_peanuts + \n               price_per_kg_macadamia * kg_macadamia)\n\nanswer = f\"${total_cost:.2f}\"  # Format the total cost with a dollar sign and two decimal places\nprint(answer)", "# Define the prices per kilogram\nprice_per_kg_chestnuts = 5.14 \nprice_per_kg_peanuts = 1.95 \nprice_per_kg_macadamia = 4.00 \n\n# Define the quantities in kilograms\nkg_chestnuts = 4 \nkg_peanuts = 5 \nkg_macadamia = 5 \n\n# Calculate the total cost\ntotal_cost = (price_per_kg_chestnuts * kg_chestnuts + \n               price_per_kg_peanuts * kg_peanuts + \n               price_per_kg_macadamia * kg_macadamia)\n\n# Store the result formatted as a string with a dollar sign and two decimal places\nanswer = f\"${total_cost:.2f}\"  \nprint(answer)"
], "prediction": [50.31, null, "$50.31", "$50.31"], "report": ["Done", "NameError(\"name 'price_per_kg' is not defined\")", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Going to the library last month\" and then answer a question.\n\nNumber of trips | Frequency\n1 | 1\n2 | 12\n3 | 6\n4 | 9\n5 | 13\n6 | 16", "question": "Read the following table regarding \"Going to the library last month\" and then write Python code to answer a question.\n\nNumber of trips | Frequency\n1 | 1\n2 | 12\n3 | 6\n4 | 9\n5 | 13\n6 | 16\n\nIn considering whether to open a new branch, the city council examined the number of times some typical residents went to the library last month. How many people went to the library at least 3 times last month?", "answer": "44", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Frequency data from the table\nfrequency_data = {\n    1: 1,\n    2: 12,\n    3: 6,\n    4: 9,\n    5: 13,\n    6: 16\n}\n\n# Calculate the number of people who went to the library at least 3 times\npeople_at_least_3_times = frequency_data[3] + frequency_data[4] + frequency_data[5] + frequency_data[6]\nanswer = people_at_least_3_times\nprint(answer)", "frequency_data = {\n    1: 1,\n    2: 12,\n    3: 6,\n    4: 9,\n    5: 13,\n    6: 16\n}\n\n# Calculate the number of people who went to the library at least 3 times\npeople_at_least_3_times = frequency_data[3] + frequency_data[4] + frequency_data[5] + frequency_data[6]\nanswer = int(people_at_least_3_times)  # Convert to integer to avoid float output\nprint(answer)", "frequency_data = {\n    1: 1,\n    2: 12,\n    3: 6,\n    4: 9,\n    5: 13,\n    6: 16\n}\n\n# Calculate the number of people who went to the library at least 3 times\npeople_at_least_3_times = frequency_data[3] + frequency_data[4] + frequency_data[5] + frequency_data[6]\nanswer = people_at_least_3_times  # This will be an integer\n\nprint(answer)", "frequency_data = {\n    1: 1,\n    2: 12,\n    3: 6,\n    4: 9,\n    5: 13,\n    6: 16\n}\npeople_at_least_3_times = frequency_data[3] + frequency_data[4] + frequency_data[5] + frequency_data[6]\nanswer = int(people_at_least_3_times)  # Ensure the result is an integer\nprint(answer)"
], "prediction": [44.0, 44.0, 44.0, 44.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbreakfast burrito | $9\nfried eggs | $3\nbowl of melon | $1\nwaffle with berries | $1", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbreakfast burrito | $9\nfried eggs | $3\nbowl of melon | $1\nwaffle with berries | $1\n\nNora has $11. Does she have enough to buy fried eggs and a breakfast burrito? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \ncost_fried_eggs = 3\ncost_breakfast_burrito = 9\ntotal_cost = cost_fried_eggs + cost_breakfast_burrito\nnora_money = 11\n\n# Check if Nora has enough money\nif nora_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "cost_fried_eggs = 3\ncost_breakfast_burrito = 9\ntotal_cost = cost_fried_eggs + cost_breakfast_burrito\nnora_money = 11\n\nif nora_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)  # This will correctly output 'no' since 11 is less than 12", "cost_fried_eggs = 3\ncost_breakfast_burrito = 9\ntotal_cost = cost_fried_eggs + cost_breakfast_burrito\nnora_money = 11\n\nif nora_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)  # This will correctly output 'no' since 11 is less than 12", "cost_fried_eggs = 3\ncost_breakfast_burrito = 9\ntotal_cost = cost_fried_eggs + cost_breakfast_burrito\nnora_money = 11\n\nanswer = 'yes' if nora_money >= total_cost else 'no'\nprint(answer)  # This will correctly output 'no' since 11 is less than 12"], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n12 | 7\n13 | 10\n14 | 13", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n12 | 7\n13 | 10\n14 | 13\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "linear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for equal differences in x-values.\nx_values = [12, 13, 14]\ny_values = [7, 10, 13]\n\n# Calculate the differences\ndifferences = [y_values[i] - y_values[i - 1] for i in range(1, len(y_values))]\n# If the differences are constant, the function is linear.\nis_linear = all(diff == differences[0] for diff in differences)\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values from the table\nx_values = [12, 13, 14]\ny_values = [7, 10, 13]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i] - y_values[i - 1] for i in range(1, len(y_values))]\n\n# Check if all differences are the same\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "x_values = [12, 13, 14]\ny_values = [7, 10, 13]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i] - y_values[i - 1] for i in range(1, len(y_values))]\n\n# Check if all differences are equal\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values from the table\nx_values = [12, 13, 14]\ny_values = [7, 10, 13]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i] - y_values[i - 1] for i in range(1, len(y_values))]\n\n# Check if all differences are the same to determine if the function is linear\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Set the answer based on whether the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")"]
}
{
  "context": "Read the following table regarding \"Broken lights per string\" and then answer a question.\n\nStem | Leaf \n4 | 3, 5\n5 | \n6 | 2\n7 | 5, 6\n8 | \n9 | 0", "question": "Read the following table regarding \"Broken lights per string\" and then write Python code to answer a question.\n\nStem | Leaf \n4 | 3, 5\n5 | \n6 | 2\n7 | 5, 6\n8 | \n9 | 0\n\nWhile hanging Christmas lights for neighbors, Kelsey counted the number of broken lights on each string. How many strings had at least 50 broken lights?", "answer": "4", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# From the stem-and-leaf display, we can extract the counts of broken lights.\nbroken_lights_counts = [43, 45, 62, 75, 76, 90]  # Based on the stem and leaves\n\n# Count the number of strings with at least 50 broken lights\ncount_at_least_50 = sum(1 for count in broken_lights_counts if count >= 50)\nanswer = count_at_least_50\nprint(answer)", "broken_lights_counts = [43, 45, 62, 75, 76, 90]  # Based on the stem and leaves\ncount_at_least_50 = sum(1 for count in broken_lights_counts if count >= 50)\nanswer = int(count_at_least_50)  # Ensure the result is an integer\nprint(answer)", "# Define the counts of broken lights based on the stem and leaf data structure\nbroken_lights_counts = [43, 45, 62, 75, 76, 90]  # Based on the stem and leaves\n\n# Count how many strings had at least 50 broken lights\ncount_at_least_50 = sum(1 for count in broken_lights_counts if count >= 50)\n\n# Store the result as an integer\nanswer = count_at_least_50\n\nprint(answer)", "broken_lights_counts = [43, 45, 62, 75, 76, 90]  # Based on the stem and leaves\ncount_at_least_50 = sum(1 for count in broken_lights_counts if count >= 50)\nanswer = count_at_least_50  # This will naturally be an integer\nprint(answer)"], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Cars sold\" and then answer a question.\n\nMonth | Number of cars\nNovember | 268\nDecember | 286\nJanuary | 289\nFebruary | 226", "question": "Read the following table regarding \"Cars sold\" and then write Python code to answer a question.\n\nMonth | Number of cars\nNovember | 268\nDecember | 286\nJanuary | 289\nFebruary | 226\n\nA car dealership tracked the number of cars sold each month. In which month did the dealership sell the most cars? Choose from the the options: ['November', 'December', 'January', 'February']", "answer": "January", "ques_type": "multi_choice", "choices": ["November", "December", "January", "February"], "code": ["# Python code, return answer \ncars_sold = {\n    'November': 268,\n    'December': 286,\n    'January': 289,\n    'February': 226\n}\n# Find the month with the most cars sold\nmost_cars_month = max(cars_sold, key=cars_sold.get)\nanswer = most_cars_month\nprint(answer)", "# Store the number of cars sold each month in a dictionary\ncars_sold = {\n    'November': 268,\n    'December': 286,\n    'January': 289,\n    'February': 226\n}\n\n# Find the month with the most cars sold\nmost_cars_month = max(cars_sold, key=cars_sold.get)\n\n# Assign the result to the variable 'answer'\nanswer = most_cars_month\n\n# Output the answer\nprint(answer)", "cars_sold = {\n    'November': 268,\n    'December': 286,\n    'January': 289,\n    'February': 226\n}\nmost_cars_month = max(cars_sold, key=cars_sold.get)\nanswer = most_cars_month\nprint(answer)", "# Store the number of cars sold each month in a dictionary  \ncars_sold = {  \n    'November': 268,  \n    'December': 286,  \n    'January': 289,  \n    'February': 226  \n}  \n  \n# Find the month with the most cars sold  \nmost_cars_month = max(cars_sold, key=cars_sold.get)  \nanswer = most_cars_month  \n  \nprint(answer)"], "prediction": ["January", "January", "January", "January"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Average waiting time at the DMV\" and then answer a question.\n\nMonth | Waiting time (minutes)\nMarch | 10\nApril | 7\nMay | 40\nJune | 6\nJuly | 50", "question": "Read the following table regarding \"Average waiting time at the DMV\" and then write Python code to answer a question.\n\nMonth | Waiting time (minutes)\nMarch | 10\nApril | 7\nMay | 40\nJune | 6\nJuly | 50\n\nAn administrator at the Department of Motor Vehicles (DMV) tracked the average wait time from month to month. According to the table, what was the rate of change between May and June?", "answer": "-34", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Waiting times in May and June\nwaiting_time_may = 40\nwaiting_time_june = 6\n# Calculate the rate of change\nrate_of_change = waiting_time_june - waiting_time_may\nanswer = rate_of_change\nprint(answer)", "waiting_time_may = 40\nwaiting_time_june = 6\nchange_in_waiting_time = waiting_time_june - waiting_time_may\nrate_of_change = change_in_waiting_time / waiting_time_may * 100  # Expressed as a percentage\nanswer = rate_of_change\nprint(answer)", "waiting_time_may = 40\nwaiting_time_june = 6\nchange_in_waiting_time = waiting_time_june - waiting_time_may\nrate_of_change = change_in_waiting_time  # Direct change in waiting time\nanswer = rate_of_change\nprint(answer)", "waiting_time_may = 40\nwaiting_time_june = 6\nchange_in_waiting_time = waiting_time_june - waiting_time_may\n# The change occurred over 1 month\nrate_of_change = change_in_waiting_time / 1  # Change per month\nanswer = rate_of_change\nprint(answer)"], "prediction": [-34.0, -85.0, -34.0, -34.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nlentils | $3/pound\nsunflower seeds | $3/pound\nsoybeans | $1/pound\npumpkin seeds | $3/pound\nflax seeds | $8/pound\nsesame seeds | $5/pound", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nlentils | $3/pound\nsunflower seeds | $3/pound\nsoybeans | $1/pound\npumpkin seeds | $3/pound\nflax seeds | $8/pound\nsesame seeds | $5/pound\n\nSeth went to the store. He bought 1+3/10 pounds of lentils. How much did he spend?", "answer": "3.90", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \nprice_per_pound_lentils = 3  # Price of lentils per pound\npounds_bought = 1 + 3/10  # Total pounds of lentils bought\n# Calculate the total cost\ntotal_cost = price_per_pound_lentils * pounds_bought\nanswer = total_cost\nprint(answer)", "# Define the price per pound of lentils\nprice_per_pound_lentils = 3  # Price of lentils per pound\n\n# Calculate the total pounds of lentils bought\npounds_bought = 1 + 3/10  # Total pounds of lentils bought\n\n# Calculate the total cost\ntotal_cost = price_per_pound_lentils * pounds_bought\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "# Define the price per pound of lentils  \nprice_per_pound_lentils = 3  \n\n# Define the amount of lentils bought in pounds  \npounds_bought = 1 + 3/10  \n\n# Calculate the total cost for the lentils  \ntotal_cost = price_per_pound_lentils * pounds_bought  \n\n# Store the result in the answer variable  \nanswer = total_cost  \n\n# Print the answer  \nprint(answer)", "# Define the price per pound of lentils\nprice_per_pound_lentils = 3  \n\n# Define the weight of lentils purchased\npounds_bought = 1 + 3/10  \n\n# Calculate the total cost\ntotal_cost = price_per_pound_lentils * pounds_bought  \n\n# Format the total cost as currency\nanswer = \"${:.2f}\".format(total_cost)  \n\nprint(answer)"
], "prediction": [3.9, 3.9, 3.9, "$3.90"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n0 | 20\n1 | 12\n2 | 4", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n0 | 20\n1 | 12\n2 | 4\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "linear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for equal changes in x-values.\ny_values = [20, 12, 4]\nx_values = [0, 1, 2]\n\n# Calculate the differences\ndifference_1 = y_values[1] - y_values[0]  # y(1) - y(0)\ndifference_2 = y_values[2] - y_values[1]  # y(2) - y(1)\n\n# Check if the differences are constant\nif difference_1 == difference_2:\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\nprint(answer)", "# Define the y values and x values\ny_values = [20, 12, 4]\nx_values = [0, 1, 2]\n\n# Calculate the differences\ndifference_y1 = y_values[1] - y_values[0]  # y(1) - y(0)\ndifference_y2 = y_values[2] - y_values[1]  # y(2) - y(1)\n\n# Calculate the x differences\ndifference_x1 = x_values[1] - x_values[0]  # x(1) - x(0)\ndifference_x2 = x_values[2] - x_values[1]  # x(2) - x(1)\n\n# Check if the slopes are the same\nslope1 = difference_y1 / difference_x1 if difference_x1 != 0 else None\nslope2 = difference_y2 / difference_x2 if difference_x2 != 0 else None\n\nif slope1 == slope2:\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\n\nprint(answer)", "# Define the y-values and x-values based on the given table\ny_values = [20, 12, 4]\nx_values = [0, 1, 2]\n\n# Calculate the differences in y and x\ndifferences_y = [y_values[i + 1] - y_values[i] for i in range(len(y_values) - 1)]\ndifferences_x = [x_values[i + 1] - x_values[i] for i in range(len(x_values) - 1)]\n\n# Calculate the slopes between all points\nslopes = [differences_y[i] / differences_x[i] for i in range(len(differences_y))]\n\n# Check if all slopes are equal\nif all(slope == slopes[0] for slope in slopes):\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\n\nprint(answer)", "# Define the y values and x values\ny_values = [20, 12, 4]\nx_values = [0, 1, 2]\n\n# Calculate the differences in y and x\ndifferences_y = [y_values[i + 1] - y_values[i] for i in range(len(y_values) - 1)]\ndifferences_x = [x_values[i + 1] - x_values[i] for i in range(len(x_values) - 1)]\n\n# Check if the ratios of differences are constant\nratios = [differences_y[i] / differences_x[i] for i in range(len(differences_y))]\n\n# Determine if the function is linear or nonlinear\nif all(ratio == ratios[0] for ratio in ratios):\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\n\nprint(answer)"
], "prediction": ["linear", "linear", null, null], "report": ["Done", "Done", "NameError(\"name 'slopes' is not defined\")", "NameError(\"name 'ratios' is not defined\")"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ncoffee mug | $2.93\nglass measuring cup | $5.81\ncookie jar | $5.92\nserving platter | $8.06\nglass bowl | $6.97", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ncoffee mug | $2.93\nglass measuring cup | $5.81\ncookie jar | $5.92\nserving platter | $8.06\nglass bowl | $6.97\n\nEddie has $9.50. Does he have enough to buy a coffee mug and a glass bowl? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \ncoffee_mug_price = 2.93\nglass_bowl_price = 6.97\ntotal_cost = coffee_mug_price + glass_bowl_price\neddies_money = 9.50\n\nif eddies_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "coffee_mug_price = 2.93  \nglass_bowl_price = 6.97  \ntotal_cost = coffee_mug_price + glass_bowl_price  \neddies_money = 9.50  \n\nif eddies_money >= total_cost:  \n    answer = 'yes'  \nelse:  \n    answer = 'no'  \n\nprint(answer)", "coffee_mug_price = 2.93  \nglass_bowl_price = 6.97  \ntotal_cost = coffee_mug_price + glass_bowl_price  # Total cost is $9.90  \neddies_money = 9.50  \n\nif eddies_money >= total_cost:  \n    answer = 'yes'  \nelse:  \n    answer = 'no'  \n\nprint(answer)  # Output will be 'no'", "coffee_mug_price = 2.93  \nglass_bowl_price = 6.97  \ntotal_cost = coffee_mug_price + glass_bowl_price  \neddies_money = 9.50  \n\nif eddies_money >= total_cost:  \n    answer = 'yes'  \nelse:  \n    answer = 'no'  \n\nprint(answer)  # Output will be 'no'"], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n5 | 0\n6 | 1\n7 | 4", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n5 | 0\n6 | 1\n7 | 4\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "nonlinear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear or nonlinear, we can check the differences in y-values for equal increments of x.\n# Calculate the differences\nx_values = [5, 6, 7]\ny_values = [0, 1, 4]\n\n# Calculate the first differences\nfirst_differences = [y_values[i] - y_values[i - 1] for i in range(1, len(y_values))]\n\n# Check if the first differences are constant\nis_linear = all(diff == first_differences[0] for diff in first_differences)\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values based on the table\nx_values = [5, 6, 7]\ny_values = [0, 1, 4]\n\n# Calculate the first differences\nfirst_differences = [y_values[i] - y_values[i - 1] for i in range(1, len(y_values))]\n\n# Check if all first differences are the same\nis_linear = all(diff == first_differences[0] for diff in first_differences)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values\nx_values = [5, 6, 7]\ny_values = [0, 1, 4]\n\n# Calculate the first differences\nfirst_differences = [y_values[i] - y_values[i - 1] for i in range(1, len(y_values))]\n\n# Check if all first differences are the same\nis_linear = all(diff == first_differences[0] for diff in first_differences)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values\nx_values = [5, 6, 7]\ny_values = [0, 1, 4]\n\n# Calculate the first differences\nfirst_differences = [y_values[i] - y_values[i - 1] for i in range(1, len(y_values))]\n\n# Check if all first differences are the same\nis_linear = all(diff == first_differences[0] for diff in first_differences)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'first_differences' is not defined\")", "NameError(\"name 'first_differences' is not defined\")", "NameError(\"name 'first_differences' is not defined\")", "NameError(\"name 'first_differences' is not defined\")"]
}
{
  "context": "Read the following table regarding \"Train schedule\" and then answer a question.\n\nSpringfield | 11:00 A.M. | 11:15 A.M. | 6:30 P.M. | 8:45 P.M. | 9:00 P.M.\nAshland | 12:00 P.M. | 12:15 P.M. | 7:30 P.M. | 9:45 P.M. | 10:00 P.M.\nLexington | 1:15 P.M. | 1:30 P.M. | 8:45 P.M. | 11:00 P.M. | 11:15 P.M.\nBurlington | 2:45 P.M. | 3:00 P.M. | 10:15 P.M. | 12:30 A.M. | 12:45 A.M.\nNewberry | 4:15 P.M. | 4:30 P.M. | 11:45 P.M. | 2:00 A.M. | 2:15 A.M.\nLancaster | 4:45 P.M. | 5:00 P.M. | 12:15 A.M. | 2:30 A.M. | 2:45 A.M.\nCedarburg | 5:15 P.M. | 5:30 P.M. | 12:45 A.M. | 3:00 A.M. | 3:15 A.M.\nMorristown | 6:00 P.M. | 6:15 P.M. | 1:30 A.M. | 3:45 A.M. | 4:00 A.M.\nNewberg | 7:00 P.M. | 7:15 P.M. | 2:30 A.M. | 4:45 A.M. | 5:00 A.M.", "question": "Read the following table regarding \"Train schedule\" and then write Python code to answer a question.\n\nSpringfield | 11:00 A.M. | 11:15 A.M. | 6:30 P.M. | 8:45 P.M. | 9:00 P.M.\nAshland | 12:00 P.M. | 12:15 P.M. | 7:30 P.M. | 9:45 P.M. | 10:00 P.M.\nLexington | 1:15 P.M. | 1:30 P.M. | 8:45 P.M. | 11:00 P.M. | 11:15 P.M.\nBurlington | 2:45 P.M. | 3:00 P.M. | 10:15 P.M. | 12:30 A.M. | 12:45 A.M.\nNewberry | 4:15 P.M. | 4:30 P.M. | 11:45 P.M. | 2:00 A.M. | 2:15 A.M.\nLancaster | 4:45 P.M. | 5:00 P.M. | 12:15 A.M. | 2:30 A.M. | 2:45 A.M.\nCedarburg | 5:15 P.M. | 5:30 P.M. | 12:45 A.M. | 3:00 A.M. | 3:15 A.M.\nMorristown | 6:00 P.M. | 6:15 P.M. | 1:30 A.M. | 3:45 A.M. | 4:00 A.M.\nNewberg | 7:00 P.M. | 7:15 P.M. | 2:30 A.M. | 4:45 A.M. | 5:00 A.M.\n\nLook at the following schedule. Nina just missed the 12.15 P.M. train at Ashland. What time is the next train? Choose from the the options: ['3:15 A.M.', '12:45 A.M.', '10:15 P.M.', '7:30 P.M.']", "answer": "7:30 P.M.", "ques_type": "multi_choice", "choices": ["3:15 A.M.", "12:45 A.M.", "10:15 P.M.", "7:30 P.M."], "code": [
  "# Python code, return answer \n# The next train after 12:15 P.M. from Ashland is at 7:30 P.M.\nnext_train_time = \"7:30 P.M.\"\nanswer = next_train_time\nprint(answer)", "# Define the train schedule in a dictionary\ntrain_schedule = {\n    \"Ashland\": [\"12:00 P.M.\", \"12:15 P.M.\", \"7:30 P.M.\", \"9:45 P.M.\", \"10:00 P.M.\"]\n}\n\n# Nina just missed the 12:15 P.M. train\nmissed_train_time = \"12:15 P.M.\"\n\n# Find the next train time after the missed train\nnext_train_time = None\nfor time in train_schedule[\"Ashland\"]:\n    if time > missed_train_time:\n        next_train_time = time\n        break\n\nanswer = next_train_time\nprint(answer)", "from datetime import datetime\n\n# Define the train schedule\ntrain_schedule = {\n    \"Ashland\": [\"12:00 P.M.\", \"12:15 P.M.\", \"7:30 P.M.\", \"9:45 P.M.\", \"10:00 P.M.\"]\n}\n\n# Define the missed train time\nmissed_train_time = \"12:15 P.M.\"\n\n# Convert the missed train time to a datetime object for accurate comparison\nmissed_time_dt = datetime.strptime(missed_train_time, \"%I:%M %p\")\n\n# Initialize the variable to hold the next train time\nnext_train_time = None\n\n# Iterate through the train times\nfor time in train_schedule[\"Ashland\"]:\n    # Convert each train time to a datetime object\n    train_time_dt = datetime.strptime(time, \"%I:%M %p\")\n    # Check if the train time is after the missed train time\n    if train_time_dt > missed_time_dt:\n        next_train_time = time\n        break\n\n# Store the result in the 'answer' variable\nanswer = next_train_time\n\n# Output the answer\nprint(answer)", "def convert_to_minutes(time_str):\n    \"\"\"Convert a time string in 12-hour format to minutes since midnight.\"\"\"\n    time_parts = time_str.split()\n    time = time_parts[0].split(':')\n    hours = int(time[0])\n    minutes = int(time[1])\n    \n    if time_parts[1] == \"P.M.\" and hours != 12:\n        hours += 12\n    elif time_parts[1] == \"A.M.\" and hours == 12:\n        hours = 0\n    \n    return hours * 60 + minutes\n\ntrain_schedule = {\n    \"Ashland\": [\"12:00 P.M.\", \"12:15 P.M.\", \"7:30 P.M.\", \"9:45 P.M.\", \"10:00 P.M.\"]\n}\n\nmissed_train_time = \"12:15 P.M.\"\nmissed_train_minutes = convert_to_minutes(missed_train_time)\nnext_train_time = None\n\nfor time in train_schedule[\"Ashland\"]:\n    if convert_to_minutes(time) > missed_train_minutes:\n        next_train_time = time\n        break\n\nanswer = next_train_time\nprint(answer)"
], "prediction": ["7:30 P.M.", "7:30 P.M.", null, "7:30 P.M."], "report": ["Done", "Done", "ValueError(\"time data '12:15 P.M.' does not match format '%I:%M %p'\")", "Done"]
}
{
  "context": "Read the following table regarding \"Soccer practice\" and then answer a question.\n\nMonth | Number of practices\nNovember | 24\nMarch | 23\nApril | 28\nMay | 22", "question": "Read the following table regarding \"Soccer practice\" and then write Python code to answer a question.\n\nMonth | Number of practices\nNovember | 24\nMarch | 23\nApril | 28\nMay | 22\n\nJosh looked over his calendar to see how many times he had soccer practice each month. In which month did Josh have the most soccer practices? Choose from the the options: ['November', 'March', 'April', 'May']", "answer": "April", "ques_type": "multi_choice", "choices": ["November", "March", "April", "May"], "code": ["# Python code, return answer \npractices = {\n    'November': 24,\n    'March': 23,\n    'April': 28,\n    'May': 22\n}\n# Find the month with the most practices\nmost_practices_month = max(practices, key=practices.get)\nanswer = most_practices_month\nprint(answer)", "# Define the number of practices for each month in a dictionary\npractices = {\n    'November': 24,\n    'March': 23,\n    'April': 28,\n    'May': 22\n}\n\n# Find the month with the most soccer practices\nmost_practices_month = max(practices, key=practices.get)\n\n# Store the result in the variable 'answer'\nanswer = most_practices_month\n\n# Output the answer\nprint(answer)", "# Store the number of practices for each month in a dictionary\npractices = {\n    'November': 24,\n    'March': 23,\n    'April': 28,\n    'May': 22\n}\n\n# Find the month with the most soccer practices\nmost_practices_month = max(practices, key=practices.get)\nanswer = most_practices_month\n\nprint(answer)", "practices = {\n    'November': 24,\n    'March': 23,\n    'April': 28,\n    'May': 22\n}\nmost_practices_month = max(practices, key=practices.get)\nanswer = most_practices_month\nprint(answer)"], "prediction": ["April", "April", "April", "April"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$280 | 18,300 | 2,400\n$450 | 16,400 | 3,700\n$620 | 14,500 | 5,000\n$790 | 12,600 | 6,300\n$960 | 10,700 | 7,600", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$280 | 18,300 | 2,400\n$450 | 16,400 | 3,700\n$620 | 14,500 | 5,000\n$790 | 12,600 | 6,300\n$960 | 10,700 | 7,600\n\nLook at the table. Then answer the question. At a price of $960, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "shortage", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": [
  "# Python code, return answer \n# Quantity demanded and supplied at the price of $960\nquantity_demanded = 10700\nquantity_supplied = 7600\n\n# Determine if there is a shortage or surplus\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelse:\n    answer = 'surplus'\n\nprint(answer)", "# Correctly assign the quantity demanded and supplied for the price of $960\nquantity_demanded = 10700  # Quantity demanded at $960\nquantity_supplied = 7600    # Quantity supplied at $960\n\n# Determine if there is a shortage or surplus\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelse:\n    answer = 'surplus'\n\nprint(answer)", "# Correctly assign the quantity demanded and supplied at a price of $960\nquantity_demanded = 10700  # Quantity demanded at $960\nquantity_supplied = 7600    # Quantity supplied at $960\n\n# Determine if there is a shortage or surplus\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelse:\n    answer = 'surplus'\n\nprint(answer)", "# Define the quantities at the price of $960\nquantity_demanded = 10700  # Quantity demanded at $960\nquantity_supplied = 7600    # Quantity supplied at $960\n\n# Determine if there is a shortage or surplus\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelse:\n    answer = 'surplus'\n\nprint(answer)"
], "prediction": ["shortage", "shortage", "shortage", "shortage"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Aid received per capita from the U.S.\" and then answer a question.\n\nCountry | 1980 | 1990\nAlgeria | $9 | $10\nAfghanistan | $2 | $7\nLibya | $5 | $5\nPakistan | $14 | $10", "question": "Read the following table regarding \"Aid received per capita from the U.S.\" and then write Python code to answer a question.\n\nCountry | 1980 | 1990\nAlgeria | $9 | $10\nAfghanistan | $2 | $7\nLibya | $5 | $5\nPakistan | $14 | $10\n\nAn economics student recorded the amount of per-capita aid that the U.S. gave to various countries during the 1900s. Per capita, how much more aid did Pakistan receive in 1980 than in 1990?", "answer": "4", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Aid received by Pakistan in 1980 and 1990\naid_1980_pakistan = 14\naid_1990_pakistan = 10\n# Calculate the difference in aid received\ndifference_aid = aid_1980_pakistan - aid_1990_pakistan\nanswer = difference_aid\nprint(answer)", "# Define the aid received per capita for Pakistan in 1980 and 1990\naid_1980_pakistan = 14\naid_1990_pakistan = 10\n\n# Calculate the difference in aid received\ndifference_aid = aid_1980_pakistan - aid_1990_pakistan\n\n# Store the result in the variable 'answer'\nanswer = difference_aid\n\n# Print the answer\nprint(answer)", "# Define the aid received by Pakistan in 1980 and 1990\naid_1980_pakistan = 14\naid_1990_pakistan = 10\n\n# Calculate the difference in aid received\ndifference_aid = aid_1980_pakistan - aid_1990_pakistan\n\n# Store the result in the variable 'answer'\nanswer = difference_aid\n\n# Print the result\nprint(answer)", "# Define the aid received by Pakistan in 1980 and 1990\naid_1980_pakistan = 14\naid_1990_pakistan = 10\n\n# Calculate the difference in aid received\ndifference_aid = aid_1980_pakistan - aid_1990_pakistan\n\n# Store the result in the answer variable\nanswer = difference_aid\n\n# Output the answer\nprint(answer)"], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Law firm hours billed\" and then answer a question.\n\nPartner | Hours billed\nJenna | 690\nMaddie | 950\nJamie | 1,000\nGrayson | 910\nSidney | 890\nMitchell | 890", "question": "Read the following table regarding \"Law firm hours billed\" and then write Python code to answer a question.\n\nPartner | Hours billed\nJenna | 690\nMaddie | 950\nJamie | 1,000\nGrayson | 910\nSidney | 890\nMitchell | 890\n\nA law firm in Weston kept track of how many hours were billed by each partner last year. What fraction of the hours were billed by Jamie? Simplify your answer.", "answer": "100/533", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total hours billed by all partners\ntotal_hours = 690 + 950 + 1000 + 910 + 890 + 890\n# Hours billed by Jamie\njamie_hours = 1000\n# Calculate the fraction of hours billed by Jamie\nfraction_jamie = jamie_hours / total_hours\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_fraction = Fraction(jamie_hours, total_hours).limit_denominator()\nanswer = simplified_fraction\nprint(answer)", "# Define the hours billed by each partner\nhours_billed = {\n    'Jenna': 690,\n    'Maddie': 950,\n    'Jamie': 1000,\n    'Grayson': 910,\n    'Sidney': 890,\n    'Mitchell': 890\n}\n\n# Calculate total hours billed\ntotal_hours = sum(hours_billed.values())\n\n# Hours billed by Jamie\njamie_hours = hours_billed['Jamie']\n\n# Calculate the fraction of hours billed by Jamie\nfrom fractions import Fraction\nfraction_jamie = Fraction(jamie_hours, total_hours).limit_denominator()\n\n# Store the result in the answer variable\nanswer = fraction_jamie\nprint(answer)", "# Store the hours billed by each partner in a dictionary\nhours_billed = {\n    'Jenna': 690,\n    'Maddie': 950,\n    'Jamie': 1000,\n    'Grayson': 910,\n    'Sidney': 890,\n    'Mitchell': 890\n}\n\n# Calculate the total hours billed\ntotal_hours = sum(hours_billed.values())\n\n# Get the hours billed by Jamie\njamie_hours = hours_billed['Jamie']\n\n# Calculate the fraction of hours billed by Jamie and simplify it\nfrom fractions import Fraction\nfraction_jamie = Fraction(jamie_hours, total_hours).limit_denominator()\n\n# Store the simplified fraction as the answer\nanswer = fraction_jamie\nprint(answer)", "# Define the hours billed by each partner\nhours_billed = {\n    'Jenna': 690,\n    'Maddie': 950,\n    'Jamie': 1000,\n    'Grayson': 910,\n    'Sidney': 890,\n    'Mitchell': 890\n}\n\n# Calculate the total hours billed\ntotal_hours = sum(hours_billed.values())\n\n# Get the hours billed by Jamie\njamie_hours = hours_billed['Jamie']\n\n# Calculate the fraction of hours billed by Jamie and simplify it\nfrom fractions import Fraction\nfraction_jamie = Fraction(jamie_hours, total_hours).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = fraction_jamie\n\n# Output the answer\nprint(answer)"
], "prediction": [0.18762, 0.18762, 0.18762, 0.18762], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbead with green and blue swirls | $0.52\nstar-shaped silver bead | $0.47\nshiny metal bead | $0.28\nlong red bead | $0.72\nthick gray bead | $0.44\nwhite bead with black spots | $0.27", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbead with green and blue swirls | $0.52\nstar-shaped silver bead | $0.47\nshiny metal bead | $0.28\nlong red bead | $0.72\nthick gray bead | $0.44\nwhite bead with black spots | $0.27\n\nElena has $0.74. Does she have enough to buy a shiny metal bead and a thick gray bead? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# Prices of the beads\nprice_shiny_metal_bead = 0.28\nprice_thick_gray_bead = 0.44\n\n# Total cost for both beads\ntotal_cost = price_shiny_metal_bead + price_thick_gray_bead\n\n# Amount Elena has\nelena_amount = 0.74\n\n# Check if she has enough money\nif elena_amount >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the prices of the beads\nprice_shiny_metal_bead = 0.28\nprice_thick_gray_bead = 0.44\n\n# Calculate the total cost\ntotal_cost = price_shiny_metal_bead + price_thick_gray_bead\n\n# Elena's amount\nelena_amount = 0.74\n\n# Determine if Elena has enough money\nanswer = 'yes' if elena_amount >= total_cost else 'no'\n\n# Print the answer\nprint(answer)", "# Prices of the beads\nprice_shiny_metal_bead = 0.28\nprice_thick_gray_bead = 0.44\n\n# Total cost calculation\ntotal_cost = price_shiny_metal_bead + price_thick_gray_bead\n\n# Elena's available amount\nelena_amount = 0.74\n\n# Determine if Elena can afford the beads\nanswer = 'yes' if elena_amount >= total_cost else 'no'\n\n# Output the answer\nprint(answer)", "# Define the prices of the beads\nprice_shiny_metal_bead = 0.28\nprice_thick_gray_bead = 0.44\n\n# Calculate the total cost of the beads\ntotal_cost = price_shiny_metal_bead + price_thick_gray_bead\n\n# Amount Elena has\nelena_amount = 0.74\n\n# Determine if Elena has enough money\nanswer = 'yes' if elena_amount >= total_cost else 'no'\nprint(answer)"
], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Characters per book\" and then answer a question.\n\nStem | Leaf \n2 | 1, 4\n3 | 6\n4 | 0, 0, 2, 3, 7, 8, 9\n5 | 1, 4", "question": "Read the following table regarding \"Characters per book\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 1, 4\n3 | 6\n4 | 0, 0, 2, 3, 7, 8, 9\n5 | 1, 4\n\nKamal kept track of the number of characters in each book he read. How many books had at least 30 characters but fewer than 50 characters?", "answer": "8", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Based on the stem-and-leaf display, we can determine the number of characters in each book.\n# We need to count the books with characters between 30 and 49 (inclusive of 30 and exclusive of 50).\n\n# Books with 30-49 characters:\nbooks = [21, 24, 36, 40, 40, 42, 43, 47, 48, 51, 54]\n\n# Filter the books to find those that have at least 30 but fewer than 50 characters\ncount_books = sum(1 for book in books if 30 <= book < 50)\n\nanswer = count_books\nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [(2, [1, 4]), (3, [6]), (4, [0, 0, 2, 3, 7, 8, 9]), (5, [1, 4])]\n\n# Initialize counter for books with at least 30 characters but fewer than 50 characters\nbooks_with_30_to_49_characters = 0\n\n# Iterate through the stem and leaf data structure and count relevant books\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        characters_per_book = stem * 10 + leaf  # Convert stem and leaf to actual number of characters\n        if 30 <= characters_per_book < 50:\n            books_with_30_to_49_characters += 1\n\nanswer = books_with_30_to_49_characters\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [1, 4]), (3, [6]), (4, [0, 0, 2, 3, 7, 8, 9]), (5, [1, 4])]  \n  \n# Initialize counter for books with at least 30 characters but fewer than 50 characters  \nbooks_with_30_to_49_characters = 0  \n  \n# Iterate through the stem and leaf data structure and count relevant books  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        characters_per_book = stem * 10 + leaf  # Convert stem and leaf to actual number of characters  \n        if 30 <= characters_per_book < 50:  \n            books_with_30_to_49_characters += 1  \n  \nanswer = books_with_30_to_49_characters  \nprint(answer)", "# Define the stem and leaf data structure for characters per book\nstem_and_leaf = [(2, [1, 4]), (3, [6]), (4, [0, 0, 2, 3, 7, 8, 9]), (5, [1, 4])]\n\n# Initialize counter for books with at least 30 characters but fewer than 50 characters\nbooks_with_30_to_49_characters = 0\n\n# Iterate through the stem and leaf data structure and count relevant books\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        characters_per_book = stem * 10 + leaf  # Convert stem and leaf to actual number of characters\n        if 30 <= characters_per_book < 50:  # Check if the character count is in the specified range\n            books_with_30_to_49_characters += 1\n\nanswer = books_with_30_to_49_characters\nprint(answer)"
], "prediction": [7.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Number of birds\" and then answer a question.\n\nDay | Number of birds\nFriday | 2\nSaturday | 6\nSunday | 6\nMonday | 2\nTuesday | 6", "question": "Read the following table regarding \"Number of birds\" and then write Python code to answer a question.\n\nDay | Number of birds\nFriday | 2\nSaturday | 6\nSunday | 6\nMonday | 2\nTuesday | 6\n\nTyler went on a bird watching trip and jotted down the number of birds he saw each day. What is the mode of the numbers?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nfrom statistics import mode\n\n# List of the number of birds seen each day\nbirds_count = [2, 6, 6, 2, 6]\n\n# Calculate the mode\nanswer = mode(birds_count)\nprint(answer)", "from statistics import mode\n\nbirds_count = [2, 6, 6, 2, 6]\nanswer = int(mode(birds_count))  # Convert the mode result to an integer\nprint(answer)", "from statistics import mode\n\nbirds_count = [2, 6, 6, 2, 6]\nanswer = mode(birds_count)  # The mode function already returns an integer\nprint(answer)", "from statistics import mode\n\nbirds_count = [2, 6, 6, 2, 6]\nanswer = int(mode(birds_count))  # Convert the mode result to an integer\nprint(answer)"], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\napricot | $0.40\nnectarine | $0.33\ntangerine | $0.69\npear | $0.51", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\napricot | $0.40\nnectarine | $0.33\ntangerine | $0.69\npear | $0.51\n\nTammy has $1.06. Does she have enough to buy a tangerine and a nectarine? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \nprice_tangerine = 0.69 \nprice_nectarine = 0.33 \ntotal_cost = price_tangerine + price_nectarine\ntammy_budget = 1.06\n\n# Check if Tammy has enough money\nif tammy_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "# Define the prices of the fruits\nprice_tangerine = 0.69 \nprice_nectarine = 0.33 \n\n# Calculate the total cost\ntotal_cost = price_tangerine + price_nectarine\n\n# Define Tammy's budget\ntammy_budget = 1.06\n\n# Check if Tammy has enough money\nanswer = 'yes' if tammy_budget >= total_cost else 'no'\n\nprint(answer)", "price_tangerine = 0.69 \nprice_nectarine = 0.33 \ntotal_cost = price_tangerine + price_nectarine\ntammy_budget = 1.06\nanswer = 'yes' if tammy_budget >= total_cost else 'no'\nprint(answer)", "# Prices of the fruits\nprice_tangerine = 0.69 \nprice_nectarine = 0.33 \n\n# Total cost of buying a tangerine and a nectarine\ntotal_cost = price_tangerine + price_nectarine\n\n# Tammy's budget\ntammy_budget = 1.06\n\n# Determine if Tammy has enough money\nanswer = 'yes' if tammy_budget >= total_cost else 'no'\n\n# Output the answer\nprint(answer)"], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Chocolate consumption per capita (kg)\" and then answer a question.\n\nCountry | 2002 | 2005\nAustralia | 4 | 5\nGermany | 10 | 11\nDenmark | 9 | 8\nBelgium | 8 | 11", "question": "Read the following table regarding \"Chocolate consumption per capita (kg)\" and then write Python code to answer a question.\n\nCountry | 2002 | 2005\nAustralia | 4 | 5\nGermany | 10 | 11\nDenmark | 9 | 8\nBelgium | 8 | 11\n\nCody's Candies has been studying how much chocolate people have been eating in different countries. In 2002, how much more chocolate did Denmark consume per capita than Australia?", "answer": "5", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ndenmark_consumption_2002 = 9  # kg\naustralia_consumption_2002 = 4  # kg\n# Calculate the difference in chocolate consumption\ndifference = denmark_consumption_2002 - australia_consumption_2002\nanswer = difference\nprint(answer)", "# Define chocolate consumption per capita for Denmark and Australia in 2002\ndenmark_consumption_2002 = 9  # kg\naustralia_consumption_2002 = 4  # kg\n\n# Calculate the difference in consumption\ndifference = denmark_consumption_2002 - australia_consumption_2002\n\n# Store the result as a variable named 'answer'\nanswer = f\"In 2002, Denmark consumed {difference} kg more chocolate per capita than Australia.\"\n\n# Print the answer\nprint(answer)", "denmark_consumption_2002 = 9  # kg\naustralia_consumption_2002 = 4  # kg\ndifference = denmark_consumption_2002 - australia_consumption_2002\nanswer = difference  # Store the numerical difference\nprint(answer)", "denmark_consumption_2002 = 9  # kg\naustralia_consumption_2002 = 4  # kg\ndifference = denmark_consumption_2002 - australia_consumption_2002\nanswer = f\"In 2002, Denmark consumed {difference} kg more chocolate per capita than Australia.\"\nprint(answer)"], "prediction": [5.0, "In 2002, Denmark consumed 5 kg more chocolate per capita than Australia.", 5.0, "In 2002, Denmark consumed 5 kg more chocolate per capita than Australia."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Ducks per pond\" and then answer a question.\n\nStem | Leaf \n4 | 0, 4, 5, 6\n5 | 2, 4\n6 | 1, 2, 3, 9\n7 | 0, 1, 4, 5, 6, 9", "question": "Read the following table regarding \"Ducks per pond\" and then write Python code to answer a question.\n\nStem | Leaf \n4 | 0, 4, 5, 6\n5 | 2, 4\n6 | 1, 2, 3, 9\n7 | 0, 1, 4, 5, 6, 9\n\nDamon counted the number of ducks at each pond in the city. How many ponds had at least 50 ducks but fewer than 68 ducks?", "answer": "5", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Extract the number of ducks from the stem-and-leaf display\nducks_count = [40, 44, 45, 46, 52, 54, 61, 62, 63, 69, 70, 71, 74, 75, 76, 79]\n\n# Count the number of ponds with at least 50 but fewer than 68 ducks\ncount_of_ponds = sum(1 for ducks in ducks_count if 50 <= ducks < 68)\nanswer = count_of_ponds\nprint(answer)", "# Define the stem and leaf data structure as a list of tuples\nstem_and_leaf = [(4, [0, 4, 5, 6]), (5, [2, 4]), (6, [1, 2, 3, 9]), (7, [0, 1, 4, 5, 6, 9])]\n\n# Initialize a counter for ponds with at least 50 ducks but fewer than 68 ducks\ncount_of_ponds = 0\n\n# Iterate through the stem and leaf data structure and count relevant ponds\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        ducks = stem * 10 + leaf\n        if 50 <= ducks < 68:\n            count_of_ponds += 1\n\nanswer = count_of_ponds\nprint(answer)", "# Define the stem and leaf data structure for ducks per pond\nstem_and_leaf = [(4, [0, 4, 5, 6]), (5, [2, 4]), (6, [1, 2, 3, 9]), (7, [0, 1, 4, 5, 6, 9])]\n\n# Initialize counter for ponds with at least 50 ducks but fewer than 68 ducks\ncount_of_ponds = 0\n\n# Iterate through the stem and leaf data structure and count relevant ponds\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        ducks = stem * 10 + leaf\n        if 50 <= ducks < 68:\n            count_of_ponds += 1\n\n# Store the count as an integer\nanswer = int(count_of_ponds)\nprint(answer)", "stem_and_leaf = [(4, [0, 4, 5, 6]), (5, [2, 4]), (6, [1, 2, 3, 9]), (7, [0, 1, 4, 5, 6, 9])]\ncount_of_ponds = 0\n\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        ducks = stem * 10 + leaf\n        if 50 <= ducks < 68:\n            count_of_ponds += 1\n\nanswer = count_of_ponds  # No need to convert to int, it's already an integer\nprint(answer)"
], "prediction": [5.0, 5.0, 5.0, 5.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Scores on the math quiz\" and then answer a question.\n\nScore | Frequency\n5 | 8\n6 | 6\n7 | 2\n8 | 19\n9 | 10\n10 | 13", "question": "Read the following table regarding \"Scores on the math quiz\" and then write Python code to answer a question.\n\nScore | Frequency\n5 | 8\n6 | 6\n7 | 2\n8 | 19\n9 | 10\n10 | 13\n\nMr. Kerr recorded the scores of his students on the most recent math quiz. How many students scored more than 9?", "answer": "13", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of scores greater than 9\nscores = {\n    5: 8,\n    6: 6,\n    7: 2,\n    8: 19,\n    9: 10,\n    10: 13\n}\n\n# Calculate the number of students who scored more than 9\nstudents_scored_more_than_9 = scores[10]  # Only score of 10 is greater than 9\nanswer = students_scored_more_than_9\nprint(answer)", "scores = {\n    5: 8,\n    6: 6,\n    7: 2,\n    8: 19,\n    9: 10,\n    10: 13\n}\nstudents_scored_more_than_9 = scores[10]  # Only score of 10 is greater than 9\nanswer = students_scored_more_than_9  # This will be an integer\nprint(answer)", "scores = {\n    5: 8,\n    6: 6,\n    7: 2,\n    8: 19,\n    9: 10,\n    10: 13\n}\nstudents_scored_more_than_9 = scores[10]  # Only score of 10 is greater than 9\nanswer = students_scored_more_than_9  # This will be an integer\nprint(answer)", "scores = {\n    5: 8,\n    6: 6,\n    7: 2,\n    8: 19,\n    9: 10,\n    10: 13\n}\nstudents_scored_more_than_9 = scores[10]  # Only score of 10 is greater than 9\nanswer = int(students_scored_more_than_9)  # Ensure the result is an integer\nprint(answer)"], "prediction": [13.0, 13.0, 13.0, 13.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ncookbook | $3\nbaking dish | $6\ncutting board | $9\nmixing bowl | $9", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ncookbook | $3\nbaking dish | $6\ncutting board | $9\nmixing bowl | $9\n\nHow much money does Ernest need to buy a baking dish and a mixing bowl?", "answer": "15", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_baking_dish = 6\nprice_mixing_bowl = 9\n# Total cost for both items\ntotal_cost = price_baking_dish + price_mixing_bowl\nanswer = total_cost\nprint(answer)", "# Define the prices of the items as floats for clarity\nprice_baking_dish = 6.0\nprice_mixing_bowl = 9.0\n\n# Calculate the total cost\ntotal_cost = price_baking_dish + price_mixing_bowl\n\n# Assign the result to the answer variable\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "price_baking_dish = 6\nprice_mixing_bowl = 9\ntotal_cost = price_baking_dish + price_mixing_bowl\nanswer = total_cost\nprint(answer)", "# Define the prices as floats for better accuracy\nprice_baking_dish = 6.00\nprice_mixing_bowl = 9.00\n\n# Calculate the total cost\ntotal_cost = price_baking_dish + price_mixing_bowl\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer formatted to two decimal places\nprint(f\"${answer:.2f}\")"], "prediction": [15.0, 15.0, 15.0, 15.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Quiz show scores\" and then answer a question.\n\nName | Score\nIsaac | 65\nMitchell | 69\nCharlie | 71\nRoger | 69\nHaley | 65\nTara | 71\nSteven | 69\nDominic | 69", "question": "Read the following table regarding \"Quiz show scores\" and then write Python code to answer a question.\n\nName | Score\nIsaac | 65\nMitchell | 69\nCharlie | 71\nRoger | 69\nHaley | 65\nTara | 71\nSteven | 69\nDominic | 69\n\nThe players on a quiz show received the following scores. What is the mode of the numbers?", "answer": "69", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \nscores = [65, 69, 71, 69, 65, 71, 69, 69]\n# Calculate the mode\nfrom statistics import mode\nanswer = mode(scores)\nprint(answer)", "from collections import Counter\n\nscores = [65, 69, 71, 69, 65, 71, 69, 69]\nscore_counts = Counter(scores)\n\n# Find the maximum frequency\nmax_frequency = max(score_counts.values())\n\n# Find all scores that have the maximum frequency\nmodes = [score for score, count in score_counts.items() if count == max_frequency]\n\n# Since we need the mode, we can just take the first one (or you can choose to return all modes)\nanswer = modes[0]  # This will return 69, the most frequent score\nprint(answer)", "from collections import Counter\n\n# List of scores from the quiz show\nscores = [65, 69, 71, 69, 65, 71, 69, 69]\n\n# Count the frequency of each score\nscore_counts = Counter(scores)\n\n# Find the maximum frequency\nmax_frequency = max(score_counts.values())\n\n# Find all scores that have the maximum frequency (mode)\nmodes = [score for score, count in score_counts.items() if count == max_frequency]\n\n# Since we're interested in the mode, we can simply take the first one\nanswer = modes[0]  # This will return 69, the most frequent score\n\nprint(answer)", "from collections import Counter\n\n# List of scores from the quiz show\nscores = [65, 69, 71, 69, 65, 71, 69, 69]\n\n# Count the frequency of each score\nscore_counts = Counter(scores)\n\n# Find the maximum frequency\nmax_frequency = max(score_counts.values())\n\n# Find all scores that have the maximum frequency (modes)\nmodes = [score for score, count in score_counts.items() if count == max_frequency]\n\n# Store the result\nanswer = modes  # This will return all modes, which in this case would be [69]\n\nprint(answer)"
], "prediction": [69.0, 69.0, 69.0, 69.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | 1 foot long | 2 feet long\nRed | 4 | 3\nBright orange | 5 | 5", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | 1 foot long | 2 feet long\nRed | 4 | 3\nBright orange | 5 | 5\n\nOn a camping trip, Clara kept a log of the types of snakes she saw. She noted their colors and approximate lengths. What is the probability that a randomly selected snake is red and 1 foot long? Simplify any fractions.", "answer": "4/17", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total number of snakes\nred_1ft = 4 \nbright_orange_1ft = 5 \nred_2ft = 3 \nbright_orange_2ft = 5 \n\ntotal_snakes = red_1ft + bright_orange_1ft + red_2ft + bright_orange_2ft\n\n# Probability of selecting a red snake that is 1 foot long\nprobability_red_1ft = red_1ft / total_snakes\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(red_1ft, total_snakes).limit_denominator()\n\nanswer = simplified_probability\nprint(answer)", "red_1ft = 4 \nbright_orange_1ft = 5 \nred_2ft = 3 \nbright_orange_2ft = 5 \n\n# Calculate total number of snakes\ntotal_snakes = red_1ft + bright_orange_1ft + red_2ft + bright_orange_2ft\n\n# Calculate the probability of selecting a red snake that is 1 foot long\nfrom fractions import Fraction\nsimplified_probability = Fraction(red_1ft, total_snakes).limit_denominator()\n\n# Store the simplified fraction in the answer variable\nanswer = simplified_probability\n\n# Output the answer\nprint(answer)", "red_1ft = 4 \nbright_orange_1ft = 5 \nred_2ft = 3 \nbright_orange_2ft = 5 \n\n# Calculate the total number of snakes\ntotal_snakes = red_1ft + bright_orange_1ft + red_2ft + bright_orange_2ft\n\n# Calculate the probability of selecting a red and 1-foot-long snake\nfrom fractions import Fraction\nsimplified_probability = Fraction(red_1ft, total_snakes).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = simplified_probability\n\n# Print the answer\nprint(answer)", "# Define the counts of snakes by color and length\nred_1ft = 4 \nbright_orange_1ft = 5 \nred_2ft = 3 \nbright_orange_2ft = 5 \n\n# Calculate the total number of snakes\ntotal_snakes = red_1ft + bright_orange_1ft + red_2ft + bright_orange_2ft\n\n# Calculate the probability that a randomly selected snake is red and 1 foot long\nfrom fractions import Fraction\nsimplified_probability = Fraction(red_1ft, total_snakes).limit_denominator()\n\n# Store the result in the answer variable\nanswer = simplified_probability\nprint(answer)"
], "prediction": [0.23529, 0.23529, 0.23529, 0.23529], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Children's weights (lbs)\" and then answer a question.\n\nStem | Leaf \n2 | 8\n3 | \n4 | 0\n5 | 4, 9\n6 | 3, 8\n7 | 8\n8 | \n9 | 0", "question": "Read the following table regarding \"Children's weights (lbs)\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 8\n3 | \n4 | 0\n5 | 4, 9\n6 | 3, 8\n7 | 8\n8 | \n9 | 0\n\nDr. Wagner, a pediatrician, weighed all the children who recently visited his office. How many children weighed at least 60 pounds but less than 70 pounds?", "answer": "2", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# From the stem-and-leaf display, we identify the weights of the children\nweights = [28, 40, 54, 59, 63, 68, 78, 90]  # Converting stem and leaf to actual weights\n\n# Count the number of children weighing at least 60 pounds but less than 70 pounds\ncount_children = sum(1 for weight in weights if 60 <= weight < 70)\nanswer = count_children\nprint(answer)", "# Define the weights based on the stem-and-leaf plot\nweights = [28, 40, 54, 59, 63, 68, 78, 90]  # Converting stem and leaf to actual weights\n\n# Count the number of children who weigh at least 60 pounds but less than 70 pounds\ncount_children = sum(1 for weight in weights if 60 <= weight < 70)\n\n# Store the result as an integer\nanswer = count_children  # This will be an integer\nprint(answer)", "# List of children's weights based on the stem and leaf data\nweights = [28, 40, 54, 59, 63, 68, 78, 90]  # Converting stem and leaf to actual weights\n\n# Count the number of children who weigh at least 60 pounds but less than 70 pounds\ncount_children = sum(1 for weight in weights if 60 <= weight < 70)\n\n# Store the result as an integer\nanswer = int(count_children)  # Ensuring the answer is an integer\nprint(answer)", "# Define the weights based on the stem and leaf data structure\nweights = [28, 40, 54, 59, 63, 68, 78, 90]  # Converting stem and leaf to actual weights\n\n# Count the number of children who weighed at least 60 pounds but less than 70 pounds\ncount_children = sum(1 for weight in weights if 60 <= weight < 70)\n\n# Store the count as an integer\nanswer = count_children  \nprint(answer)"
], "prediction": [2.0, 2.0, 2.0, 2.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Circus schedule\" and then answer a question.\n\nPerformer | Begin | End\nthe jugglers | 4:10 P.M. | 4:15 P.M.\nthe trapeze artists | 4:25 P.M. | 4:45 P.M.\nthe strongman | 5:00 P.M. | 5:05 P.M.\nthe stuntman | 5:15 P.M. | 5:55 P.M.\nthe tightrope walkers | 6:00 P.M. | 6:35 P.M.\nthe magician | 6:40 P.M. | 7:20 P.M.\nthe clowns | 7:35 P.M. | 8:05 P.M.\nthe unicycle rider | 8:10 P.M. | 8:35 P.M.", "question": "Read the following table regarding \"Circus schedule\" and then write Python code to answer a question.\n\nPerformer | Begin | End\nthe jugglers | 4:10 P.M. | 4:15 P.M.\nthe trapeze artists | 4:25 P.M. | 4:45 P.M.\nthe strongman | 5:00 P.M. | 5:05 P.M.\nthe stuntman | 5:15 P.M. | 5:55 P.M.\nthe tightrope walkers | 6:00 P.M. | 6:35 P.M.\nthe magician | 6:40 P.M. | 7:20 P.M.\nthe clowns | 7:35 P.M. | 8:05 P.M.\nthe unicycle rider | 8:10 P.M. | 8:35 P.M.\n\nLook at the following schedule. When does the unicycle rider's performance begin? Choose from the the options: ['8:10 P.M.', '5:00 P.M.', '8:35 P.M.', '8:05 P.M.']", "answer": "8:10 P.M.", "ques_type": "multi_choice", "choices": ["8:10 P.M.", "5:00 P.M.", "8:35 P.M.", "8:05 P.M."], "code": ["# Python code, return answer \nunicycle_rider_begin = '8:10 P.M.'\nanswer = unicycle_rider_begin\nprint(answer)", "# Define the options for the performance begin time\noptions = ['8:10 P.M.', '5:00 P.M.', '8:35 P.M.', '8:05 P.M.']\n\n# Assign the unicycle rider's performance begin time\nunicycle_rider_begin = '8:10 P.M.'\n\n# Check if the unicycle rider's performance begin time is in the options\nif unicycle_rider_begin in options:\n    answer = unicycle_rider_begin\nelse:\n    answer = None  # or some indication of an invalid choice\n\nprint(answer)", "unicycle_rider_begin = '8:10 P.M.'\nanswer = unicycle_rider_begin\nprint(answer)", ""], "prediction": ["8:10 P.M.", "8:10 P.M.", "8:10 P.M.", null], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Math teachers\" and then answer a question.\n\nHigh school | Number of math teachers\nRiver High | 6\nThompson High | 8\nLincoln High | 10\nNorthside High | 9\nWashington High | 5\nGreen High | 6\nCedar High | 5\nHillview High | 7", "question": "Read the following table regarding \"Math teachers\" and then write Python code to answer a question.\n\nHigh school | Number of math teachers\nRiver High | 6\nThompson High | 8\nLincoln High | 10\nNorthside High | 9\nWashington High | 5\nGreen High | 6\nCedar High | 5\nHillview High | 7\n\nThe school district compared how many math teachers each high school has. What is the mean of the numbers?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of math teachers at each high school\nteachers_count = [6, 8, 10, 9, 5, 6, 5, 7]\n# Calculate the mean\nmean_teachers = sum(teachers_count) / len(teachers_count)\nanswer = mean_teachers\nprint(answer)", "teachers_count = [6, 8, 10, 9, 5, 6, 5, 7]\nmean_teachers = sum(teachers_count) / len(teachers_count)\nanswer = round(mean_teachers, 2)  # Rounding to 2 decimal places for clarity\nprint(answer)", "# Define the number of math teachers at each high school\nteachers_count = [6, 8, 10, 9, 5, 6, 5, 7]\n\n# Calculate the mean of the numbers\nmean_teachers = sum(teachers_count) / len(teachers_count)\n\n# Round to the nearest whole number\nanswer = round(mean_teachers)\n\n# Output the answer\nprint(answer)", "teachers_count = [6, 8, 10, 9, 5, 6, 5, 7]\nmean_teachers = sum(teachers_count) / len(teachers_count)\nanswer = round(mean_teachers)  # This will round to the nearest whole number\nprint(answer)"], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nDate | Description | Received | Expenses | Available Funds\n | Balance: end of June | | | $450.70\n7/5 | cleaning the Owens' pool | $15.00 | | $465.70\n7/17 | bottle of water | | $1.50 | $464.20\n7/29 | swim trunks | | $16.80 | $447.40", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nDate | Description | Received | Expenses | Available Funds\n | Balance: end of June | | | $450.70\n7/5 | cleaning the Owens' pool | $15.00 | | $465.70\n7/17 | bottle of water | | $1.50 | $464.20\n7/29 | swim trunks | | $16.80 | $447.40\n\nThis is Duncan's complete financial record for July. On July 5, how much money did Duncan make?", "answer": "15", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Amount received by Duncan on July 5\nmoney_made_july_5 = 15.00\nanswer = money_made_july_5\nprint(answer)", "# Duncan's financial record for July\ntransactions = {\n    '7/5': {'description': \"cleaning the Owens' pool\", 'received': 15.00, 'expenses': 0.00},\n    '7/17': {'description': \"bottle of water\", 'received': 0.00, 'expenses': 1.50},\n    '7/29': {'description': \"swim trunks\", 'received': 0.00, 'expenses': 16.80}\n}\n\n# Extract the amount of money Duncan made on July 5\nmoney_made_july_5 = transactions['7/5']['received']\nanswer = money_made_july_5\nprint(answer)", "# Define the transactions for July\ntransactions = {\n    '7/5': {'description': \"cleaning the Owens' pool\", 'received': 15.00, 'expenses': 0.00},\n    '7/17': {'description': \"bottle of water\", 'received': 0.00, 'expenses': 1.50},\n    '7/29': {'description': \"swim trunks\", 'received': 0.00, 'expenses': 16.80}\n}\n\n# Extract the amount of money made on July 5\nmoney_made_july_5 = transactions['7/5']['received']\nanswer = money_made_july_5\n\n# Output the answer\nprint(answer)", "# Define the transactions for July\ntransactions = {\n    '7/5': {'description': \"cleaning the Owens' pool\", 'received': 15.00, 'expenses': 0.00},\n    '7/17': {'description': \"bottle of water\", 'received': 0.00, 'expenses': 1.50},\n    '7/29': {'description': \"swim trunks\", 'received': 0.00, 'expenses': 16.80}\n}\n\n# Extract the amount Duncan made on July 5\nmoney_made_july_5 = transactions['7/5']['received']\nanswer = money_made_july_5\n\nprint(answer)"
], "prediction": [15.0, 15.0, 15.0, 15.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbag of birdseed | $9\ndog bowl | $9\nfish bowl | $5\nbox of dog biscuits | $2\ndog leash | $3\nhamster wheel | $3", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbag of birdseed | $9\ndog bowl | $9\nfish bowl | $5\nbox of dog biscuits | $2\ndog leash | $3\nhamster wheel | $3\n\nHow much money does Donald need to buy a fish bowl and a bag of birdseed?", "answer": "14", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nprice_fish_bowl = 5\nprice_birdseed = 9\n# Total cost for a fish bowl and a bag of birdseed\ntotal_cost = price_fish_bowl + price_birdseed\nanswer = total_cost\nprint(answer)", "price_fish_bowl = 5\nprice_birdseed = 9\ntotal_cost = price_fish_bowl + price_birdseed\nanswer = f\"${total_cost}\"  # Format as a string representing currency\nprint(answer)", "# Define the prices of the items\nprice_fish_bowl = 5\nprice_birdseed = 9\n\n# Calculate the total cost\ntotal_cost = price_fish_bowl + price_birdseed\n\n# Store the numeric value in the answer variable\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "# Prices of the items\nprice_fish_bowl = 5.0  # Price of fish bowl\nprice_birdseed = 9.0   # Price of bag of birdseed\n\n# Calculate total cost\ntotal_cost = price_fish_bowl + price_birdseed\n\n# Store the result in the answer variable\nanswer = total_cost\n\n# Output the answer\nprint(answer)"], "prediction": [14.0, "$14", 14.0, 14.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Miles driven\" and then answer a question.\n\nMonth | Miles\nJuly | 3,229\nAugust | 1,075\nSeptember | 5,242", "question": "Read the following table regarding \"Miles driven\" and then write Python code to answer a question.\n\nMonth | Miles\nJuly | 3,229\nAugust | 1,075\nSeptember | 5,242\n\nA taxi cab driver tracked how many miles she drove each month. How many more miles did the taxi cab driver drive in July than in August?", "answer": "2,154", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nmiles_july = 3229 \nmiles_august = 1075 \n# Calculate the difference in miles driven\nmiles_difference = miles_july - miles_august\nanswer = miles_difference\nprint(answer)", "miles_july = 3229 \nmiles_august = 1075 \nmiles_difference = miles_july - miles_august\nanswer = miles_difference\nprint(answer)", "miles_july = 3229 \nmiles_august = 1075 \nmiles_difference = miles_july - miles_august\nanswer = int(miles_difference)  # Convert to integer for cleaner output\nprint(answer)", "miles_july = 3229 \nmiles_august = 1075 \nmiles_difference = miles_july - miles_august\nanswer = miles_difference  # No need to convert to int, as the result is already an integer\nprint(answer)"], "prediction": [2154.0, 2154.0, 2154.0, 2154.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Pairs of shoes per store\" and then answer a question.\n\nStem | Leaf \n4 | 4\n5 | 0, 6\n6 | 0\n7 | \n8 | 4, 9\n9 | 0", "question": "Read the following table regarding \"Pairs of shoes per store\" and then write Python code to answer a question.\n\nStem | Leaf \n4 | 4\n5 | 0, 6\n6 | 0\n7 | \n8 | 4, 9\n9 | 0\n\nEmilia counted the number of pairs of shoes for sale at each of the shoe stores in the mall. How many stores have at least 60 pairs of shoes but fewer than 100 pairs of shoes?", "answer": "4", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# From the stem-and-leaf display, we can determine the number of pairs of shoes in each store.\npairs_of_shoes = [\n    44,  # from stem 4 | leaf 4\n    50, 56,  # from stem 5 | leaves 0, 6\n    60,  # from stem 6 | leaf 0\n    84, 89,  # from stem 8 | leaves 4, 9\n    90   # from stem 9 | leaf 0\n]\n\n# Count how many stores have at least 60 pairs and fewer than 100 pairs\ncount_stores = sum(1 for pairs in pairs_of_shoes if 60 <= pairs < 100)\nanswer = count_stores\nprint(answer)", "pairs_of_shoes = [\n    44,  # from stem 4 | leaf 4\n    50, 56,  # from stem 5 | leaves 0, 6\n    60,  # from stem 6 | leaf 0\n    84, 89,  # from stem 8 | leaves 4, 9\n    90   # from stem 9 | leaf 0\n]\ncount_stores = sum(1 for pairs in pairs_of_shoes if 60 <= pairs < 100)\nanswer = int(count_stores)  # Ensure answer is an integer\nprint(answer)", "# Define the pairs of shoes based on the stem and leaf data structure  \npairs_of_shoes = [\n    44,  # from stem 4 | leaf 4\n    50, 56,  # from stem 5 | leaves 0, 6\n    60,  # from stem 6 | leaf 0\n    84, 89,  # from stem 8 | leaves 4, 9\n    90   # from stem 9 | leaf 0\n]\n\n# Count how many stores have at least 60 pairs of shoes but fewer than 100 pairs of shoes\ncount_stores = sum(1 for pairs in pairs_of_shoes if 60 <= pairs < 100)\n\n# Store the result as an integer\nanswer = count_stores  \nprint(answer)", "pairs_of_shoes = [\n    44,  # from stem 4 | leaf 4\n    50, 56,  # from stem 5 | leaves 0, 6\n    60,  # from stem 6 | leaf 0\n    84, 89,  # from stem 8 | leaves 4, 9\n    90   # from stem 9 | leaf 0\n]\n\n# Count the number of stores with at least 60 pairs but fewer than 100 pairs\ncount_stores = len([pairs for pairs in pairs_of_shoes if 60 <= pairs < 100])\nanswer = count_stores  \nprint(answer)"
], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Drawing a card between 4 and 9\" and then answer a question.\n\nNumber drawn | Frequency\n4 | 1\n5 | 9\n6 | 8\n7 | 16\n8 | 11\n9 | 12", "question": "Read the following table regarding \"Drawing a card between 4 and 9\" and then write Python code to answer a question.\n\nNumber drawn | Frequency\n4 | 1\n5 | 9\n6 | 8\n7 | 16\n8 | 11\n9 | 12\n\nA math textbook explains probability by showing a set of cards numbered 4 through 9 and showing the number of people who might draw each card. How many people are there in all?", "answer": "57", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequencies of cards drawn\nfrequency = {\n    4: 1,\n    5: 9,\n    6: 8,\n    7: 16,\n    8: 11,\n    9: 12\n}\n# Calculate total number of people\ntotal_people = sum(frequency.values())\nanswer = total_people\nprint(answer)", "frequency = {\n    4: 1,\n    5: 9,\n    6: 8,\n    7: 16,\n    8: 11,\n    9: 12\n}\ntotal_people = sum(frequency.values())\nanswer = int(total_people)  # Convert to integer\nprint(answer)", "frequency = {\n    4: 1,\n    5: 9,\n    6: 8,\n    7: 16,\n    8: 11,\n    9: 12\n}\ntotal_people = sum(frequency.values())\nanswer = total_people  # No need to convert to integer\nprint(answer)", "frequency = {\n    4: 1,\n    5: 9,\n    6: 8,\n    7: 16,\n    8: 11,\n    9: 12\n}\ntotal_people = sum(frequency.values())\nanswer = int(total_people)  # Convert to integer to ensure the output is not a float\nprint(answer)"], "prediction": [57.0, 57.0, 57.0, 57.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Apples | Peaches\nOrganic | 3 | 4\nNon-organic | 1 | 3", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Apples | Peaches\nOrganic | 3 | 4\nNon-organic | 1 | 3\n\nBrianna conducted a blind taste test on some of her friends in order to determine if organic fruits tasted different than non-organic fruits. Each friend ate one type of fruit. What is the probability that a randomly selected friend preferred non-organic and tasted apples? Simplify any fractions.", "answer": "1/11", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Number of friends who tasted each type of fruit\norganic_apples = 3\nnon_organic_apples = 1\norganic_peaches = 4\nnon_organic_peaches = 3\n\n# Total number of friends who tasted non-organic fruits\ntotal_non_organic = non_organic_apples + non_organic_peaches\n\n# Probability that a randomly selected friend preferred non-organic and tasted apples\nprobability_non_organic_apples = non_organic_apples / total_non_organic\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(non_organic_apples, total_non_organic).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Define the counts of apples and peaches for organic and non-organic\norganic_apples = 3\nnon_organic_apples = 1\norganic_peaches = 4\nnon_organic_peaches = 3\n\n# Calculate the total number of non-organic fruits\ntotal_non_organic = non_organic_apples + non_organic_peaches\n\n# Calculate the probability of preferring non-organic apples\nfrom fractions import Fraction\nprobability_non_organic_apples = Fraction(non_organic_apples, total_non_organic).limit_denominator()\n\n# Store the simplified probability as the answer\nanswer = probability_non_organic_apples\nprint(answer)", "organic_apples = 3\nnon_organic_apples = 1\norganic_peaches = 4\nnon_organic_peaches = 3\n\n# Calculate total non-organic fruits\ntotal_non_organic = non_organic_apples + non_organic_peaches\n\n# Calculate probability of preferring non-organic apples\nfrom fractions import Fraction\nprobability_non_organic_apples = Fraction(non_organic_apples, total_non_organic).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = probability_non_organic_apples\nprint(answer)", "# Define the quantities of organic and non-organic fruits\norganic_apples = 3\nnon_organic_apples = 1\norganic_peaches = 4\nnon_organic_peaches = 3\n\n# Calculate the total number of non-organic fruits\ntotal_non_organic = non_organic_apples + non_organic_peaches\n\n# Calculate the probability that a randomly selected friend preferred non-organic and tasted apples\nfrom fractions import Fraction\nprobability_non_organic_apples = Fraction(non_organic_apples, total_non_organic)\n\n# Store the result in the answer variable\nanswer = probability_non_organic_apples\n\n# Print the answer in fraction format\nprint(answer)"
], "prediction": [0.25, 0.25, 0.25, 0.25], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nking snake | $119.00\nchameleon | $277.00\nchinchilla | $112.00\nbearded dragon | $118.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nking snake | $119.00\nchameleon | $277.00\nchinchilla | $112.00\nbearded dragon | $118.00\n\nMatthew has $428.00. How much money will Matthew have left if he buys a king snake and a bearded dragon?", "answer": "191", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices of the animals\nprice_king_snake = 119.00\nprice_bearded_dragon = 118.00\n\n# Total cost for buying both\ntotal_cost = price_king_snake + price_bearded_dragon\n\n# Money Matthew has\nmatthew_money = 428.00\n\n# Remaining money after purchase\nmoney_left = matthew_money - total_cost\nanswer = money_left\nprint(answer)", "# Prices of the animals\nprice_king_snake = 119.00\nprice_bearded_dragon = 118.00\n\n# Total cost of the animals\ntotal_cost = price_king_snake + price_bearded_dragon\n\n# Matthew's initial amount of money\nmatthew_money = 428.00\n\n# Calculate the remaining money after the purchases\nmoney_left = matthew_money - total_cost\n\n# Store the result in the variable 'answer'\nanswer = money_left\n\n# Output the answer\nprint(answer)", "# Define the prices in a dictionary\nprices = {\n    'king snake': 119.00,\n    'bearded dragon': 118.00\n}\n\n# Calculate total cost\ntotal_cost = prices['king snake'] + prices['bearded dragon']\n\n# Matthew's initial money\nmatthew_money = 428.00\n\n# Calculate money left after purchases\nmoney_left = matthew_money - total_cost\nanswer = money_left\n\nprint(answer)", "prices = {\n    'king snake': 119.00,\n    'bearded dragon': 118.00\n}\ntotal_cost = prices['king snake'] + prices['bearded dragon']\nmatthew_money = 428.00\nmoney_left = matthew_money - total_cost\nanswer = int(money_left)  # Convert to integer for better output format\nprint(answer)"
], "prediction": [191.0, 191.0, 191.0, 191.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of boxes | Number of yogurt pops\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | 25\n6 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of boxes | Number of yogurt pops\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | 25\n6 | ?\n\nEach box has 5 yogurt pops. How many yogurt pops are in 6 boxes?", "answer": "30", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Each box contains 5 yogurt pops\nyogurt_pops_per_box = 5 \nboxes = 6 \n# Calculate the total number of yogurt pops in 6 boxes\ntotal_yogurt_pops = yogurt_pops_per_box * boxes\nanswer = total_yogurt_pops\nprint(answer)", "yogurt_pops_per_box = 5 \nboxes = 6 \ntotal_yogurt_pops = yogurt_pops_per_box * boxes\nanswer = total_yogurt_pops  # This will be an integer\nprint(answer)", "yogurt_pops_per_box = 5 \nboxes = 6 \ntotal_yogurt_pops = yogurt_pops_per_box * boxes\nanswer = total_yogurt_pops  # This will be an integer\nprint(answer)", "# Define the number of yogurt pops per box and the number of boxes\nyogurt_pops_per_box = 5\nboxes = 6\n\n# Calculate the total number of yogurt pops\ntotal_yogurt_pops = yogurt_pops_per_box * boxes\n\n# Store the result as an integer\nanswer = total_yogurt_pops  # This will naturally be an integer\n\nprint(answer)"], "prediction": [30.0, 30.0, 30.0, 30.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of shelves | Number of plates\n1 | 10\n2 | 20\n3 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of shelves | Number of plates\n1 | 10\n2 | 20\n3 | ?\n\nEach shelf has 10 plates. How many plates are on 3 shelves?", "answer": "30", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nplates_per_shelf = 10\nnumber_of_shelves = 3\n# Calculate the total number of plates\ntotal_plates = plates_per_shelf * number_of_shelves\nanswer = total_plates\nprint(answer)", "plates_per_shelf = 10\nnumber_of_shelves = 3\ntotal_plates = plates_per_shelf * number_of_shelves\nanswer = int(total_plates)  # Convert to integer if needed\nprint(answer)", "plates_per_shelf = 10\nnumber_of_shelves = 3\ntotal_plates = plates_per_shelf * number_of_shelves\nanswer = total_plates  # No need to convert to integer since the result is already an integer\nprint(answer)", "plates_per_shelf = 10\nnumber_of_shelves = 3\ntotal_plates = plates_per_shelf * number_of_shelves\nanswer = int(total_plates)  # Convert the result to an integer\nprint(answer)"], "prediction": [30.0, 30.0, 30.0, 30.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\norange T-shirt | $7\nlong-sleeved shirt | $4\npair of white socks | $4\npair of shorts | $5", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\norange T-shirt | $7\nlong-sleeved shirt | $4\npair of white socks | $4\npair of shorts | $5\n\nHow much money does Lacey need to buy an orange T-shirt, a pair of white socks, and a pair of shorts?", "answer": "16", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nprice_orange_tshirt = 7\nprice_white_socks = 4\nprice_shorts = 5\n\n# Total cost calculation\ntotal_cost = price_orange_tshirt + price_white_socks + price_shorts\nanswer = total_cost\nprint(answer)", "price_orange_tshirt = 7\nprice_white_socks = 4\nprice_shorts = 5\ntotal_cost = price_orange_tshirt + price_white_socks + price_shorts\nanswer = int(total_cost)  # Convert to integer to avoid decimal\nprint(answer)", "# Prices of items\nprice_orange_tshirt = 7\nprice_white_socks = 4\nprice_shorts = 5\n\n# Total cost calculation\ntotal_cost = price_orange_tshirt + price_white_socks + price_shorts\n\n# Store the result as an integer\nanswer = total_cost  # No need to convert to int since total_cost is already an integer\nprint(answer)", "price_orange_tshirt = 7\nprice_white_socks = 4\nprice_shorts = 5\ntotal_cost = price_orange_tshirt + price_white_socks + price_shorts\nanswer = total_cost  # This will be an integer since all prices are integers\nprint(answer)"], "prediction": [16.0, 16.0, 16.0, 16.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Winning relay times\" and then answer a question.\n\nYear | Winning time (minutes)\n2009 | 38\n2010 | 30\n2011 | 33\n2012 | 35\n2013 | 33", "question": "Read the following table regarding \"Winning relay times\" and then write Python code to answer a question.\n\nYear | Winning time (minutes)\n2009 | 38\n2010 | 30\n2011 | 33\n2012 | 35\n2013 | 33\n\nEvery year Ashland has a citywide relay and reports the winning times. According to the table, what was the rate of change between 2010 and 2011?", "answer": "3", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Winning times for the specified years\ntime_2010 = 30\ntime_2011 = 33\n\n# Calculate the rate of change\nrate_of_change = time_2011 - time_2010\nanswer = rate_of_change\nprint(answer)", "time_2010 = 30\ntime_2011 = 33\nrate_of_change = (time_2011 - time_2010) / time_2010\nanswer = rate_of_change\nprint(answer)", "time_2010 = 30\ntime_2011 = 33\nchange_in_time = time_2011 - time_2010\nanswer = change_in_time\nprint(answer)", "time_2010 = 30\ntime_2011 = 33\nchange_in_time = time_2011 - time_2010\nrate_of_change = (change_in_time / time_2010) * 100  # Calculate the rate of change as a percentage\nanswer = rate_of_change\nprint(answer)"], "prediction": [3.0, 0.1, 3.0, 10.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Boxes per shipment\" and then answer a question.\n\nStem | Leaf \n1 | 0, 0, 2, 6, 8\n2 | 4, 6\n3 | \n4 | 2, 2, 4, 8, 9\n5 | 1, 3, 6\n6 | 2, 2, 3, 8, 9, 9\n7 | 3, 7", "question": "Read the following table regarding \"Boxes per shipment\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 0, 0, 2, 6, 8\n2 | 4, 6\n3 | \n4 | 2, 2, 4, 8, 9\n5 | 1, 3, 6\n6 | 2, 2, 3, 8, 9, 9\n7 | 3, 7\n\nA shipping company keeps track of the number of boxes in each shipment they send out. How many shipments had at least 10 boxes?", "answer": "23", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The leaf values correspond to the stem values (10-79).\nshipments = [\n    10, 10, 12, 16, 18,  # Stem 1\n    24, 26,              # Stem 2\n    30,                  # Stem 3\n    42, 42, 44, 48, 49,  # Stem 4\n    51, 53, 56,         # Stem 5\n    62, 62, 63, 68, 69, 69,  # Stem 6\n    73, 77               # Stem 7\n]\n\n# Count shipments with at least 10 boxes\ncount_at_least_10 = len(shipments)  # All shipments are at least 10\nanswer = count_at_least_10\nprint(answer)", "# List of shipments based on the stem-and-leaf data\nshipments = [\n    10, 10, 12, 16, 18,  # Stem 1\n    24, 26,              # Stem 2\n    30,                  # Stem 3\n    42, 42, 44, 48, 49,  # Stem 4\n    51, 53, 56,         # Stem 5\n    62, 62, 63, 68, 69, 69,  # Stem 6\n    73, 77               # Stem 7\n]\n\n# Count the number of shipments with at least 10 boxes\ncount_at_least_10 = sum(1 for shipment in shipments if shipment >= 10)\n\n# Store the result in the variable 'answer'\nanswer = count_at_least_10\n\nprint(answer)", "shipments = [\n    10, 10, 12, 16, 18,  # Stem 1\n    24, 26,              # Stem 2\n    30,                  # Stem 3\n    42, 42, 44, 48, 49,  # Stem 4\n    51, 53, 56,         # Stem 5\n    62, 62, 63, 68, 69, 69,  # Stem 6\n    73, 77               # Stem 7\n]\n\n# Count shipments with at least 10 boxes\ncount_at_least_10 = sum(1 for shipment in shipments if shipment >= 10)\nanswer = int(count_at_least_10)  # Ensure the answer is an integer\nprint(answer)", "# List of shipments representing the number of boxes in each shipment\nshipments = [\n    10, 10, 12, 16, 18,  # Stem 1\n    24, 26,              # Stem 2\n    30,                  # Stem 3\n    42, 42, 44, 48, 49,  # Stem 4\n    51, 53, 56,         # Stem 5\n    62, 62, 63, 68, 69, 69,  # Stem 6\n    73, 77               # Stem 7\n]\n\n# Count the number of shipments with at least 10 boxes\ncount_at_least_10 = sum(1 for shipment in shipments if shipment >= 10)\n\n# Store the result as an integer\nanswer = count_at_least_10  # This will inherently be an integer\n\nprint(answer)"
], "prediction": [24.0, 24.0, 24.0, 24.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Donations received\" and then answer a question.\n\nCause | April | May\nHunger | $17 | $2\nParks | $17 | $4\nEducation | $12 | $7\nMedical research | $18 | $9", "question": "Read the following table regarding \"Donations received\" and then write Python code to answer a question.\n\nCause | April | May\nHunger | $17 | $2\nParks | $17 | $4\nEducation | $12 | $7\nMedical research | $18 | $9\n\nA county agency recorded the money donated to several charitable causes over time. In May, which cause raised the least money? Choose from the the options: ['education', 'hunger', 'medical research', 'parks']", "answer": "hunger", "ques_type": "multi_choice", "choices": ["education", "hunger", "medical research", "parks"], "code": [
  "# Python code, return answer \ndonations_may = {\n    'hunger': 2,\n    'parks': 4,\n    'education': 7,\n    'medical research': 9\n}\n# Find the cause that raised the least money in May\nleast_money_cause = min(donations_may, key=donations_may.get)\nanswer = least_money_cause\nprint(answer)", "# Store the donations received in May for each cause in a dictionary\ndonations_may = {\n    'hunger': 2,\n    'parks': 4,\n    'education': 7,\n    'medical research': 9\n}\n\n# Find the cause that raised the least money in May\nleast_money_cause = min(donations_may, key=donations_may.get)\nanswer = least_money_cause\n\nprint(answer)  # This should output 'hunger'", "# Store the donations received in May for each cause in a dictionary\ndonations_may = {\n    'hunger': 2,\n    'parks': 4,\n    'education': 7,\n    'medical research': 9\n}\n\n# Find the cause that raised the least money in May\nleast_money_cause = min(donations_may, key=donations_may.get)\n\n# Ensure the answer is in lowercase\nanswer = least_money_cause.lower()\nprint(answer)  # This should output 'hunger'", "donations_may = {\n    'hunger': 2,\n    'parks': 4,\n    'education': 7,\n    'medical research': 9\n}\nleast_money_cause = min(donations_may, key=donations_may.get)\nanswer = least_money_cause.capitalize()  # Capitalizing the first letter\nprint(answer)  # This should output 'Hunger'"
], "prediction": ["hunger", "hunger", "hunger", "Hunger"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Butterfly | Batwing\nCotton | 1 | 3\nSuede | 4 | 6", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Butterfly | Batwing\nCotton | 1 | 3\nSuede | 4 | 6\n\nErnest designs bow ties for a local boutique store. The store manager counted the ties currently on display, tracking them by material and shape. What is the probability that a randomly selected bow tie is made of suede and is shaped like a butterfly? Simplify any fractions.", "answer": "2/7", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total number of bow ties\ntotal_bow_ties = 1 + 3 + 4 + 6\n# Number of suede butterfly bow ties\nsue_butterfly_bow_ties = 4\n# Calculate the probability\nprobability_suede_butterfly = sue_butterfly_bow_ties / total_bow_ties\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(sue_butterfly_bow_ties, total_bow_ties).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Define the number of bow ties by material and shape\nbutterfly_bow_ties = 1 + 4  # Cotton + Suede\nbatwing_bow_ties = 3 + 6    # Cotton + Suede\n\n# Total bow ties\ntotal_bow_ties = butterfly_bow_ties + batwing_bow_ties\n\n# Number of suede butterfly bow ties\nsuede_butterfly_bow_ties = 4\n\n# Calculate the probability of selecting a suede butterfly bow tie\nprobability_suede_butterfly = suede_butterfly_bow_ties / total_bow_ties\n\n# Simplify the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(suede_butterfly_bow_ties, total_bow_ties).limit_denominator()\n\nanswer = simplified_probability\nprint(answer)", "# Define the number of bow ties by material and shape\nbutterfly_bow_ties = 1 + 4  # Cotton + Suede\nbatwing_bow_ties = 3 + 6    # Cotton + Suede\n\n# Calculate total bow ties\ntotal_bow_ties = butterfly_bow_ties + batwing_bow_ties\n\n# Number of suede butterfly bow ties\nsuede_butterfly_bow_ties = 4\n\n# Calculate probability of selecting a suede butterfly bow tie\nprobability_suede_butterfly = Fraction(suede_butterfly_bow_ties, total_bow_ties).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = probability_suede_butterfly\nprint(answer)", "# Define the counts of bow ties by material and shape\nbutterfly_bow_ties_cotton = 1\nbutterfly_bow_ties_suede = 4\nbatwing_bow_ties_cotton = 3\nbatwing_bow_ties_suede = 6\n\n# Calculate total bow ties\ntotal_butterfly_bow_ties = butterfly_bow_ties_cotton + butterfly_bow_ties_suede\ntotal_batwing_bow_ties = batwing_bow_ties_cotton + batwing_bow_ties_suede\ntotal_bow_ties = total_butterfly_bow_ties + total_batwing_bow_ties\n\n# Calculate suede butterfly bow ties\nsuede_butterfly_bow_ties = butterfly_bow_ties_suede\n\n# Calculate the probability\nfrom fractions import Fraction\nprobability_suede_butterfly = Fraction(suede_butterfly_bow_ties, total_bow_ties).limit_denominator()\n\nanswer = probability_suede_butterfly\nprint(answer)"
], "prediction": [0.28571, 0.28571, null, 0.28571], "report": ["Done", "Done", "NameError(\"name 'Fraction' is not defined\")", "Done"]
}
{
  "context": "Read the following table regarding \"Children's weights (lbs)\" and then answer a question.\n\nStem | Leaf \n1 | 0, 5, 9\n2 | 2, 9, 9, 9\n3 | 2, 3, 9\n4 | 2, 2, 6", "question": "Read the following table regarding \"Children's weights (lbs)\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 0, 5, 9\n2 | 2, 9, 9, 9\n3 | 2, 3, 9\n4 | 2, 2, 6\n\nAs part of a statistics project, a math class weighed all the children who were willing to participate. What is the weight of the lightest child?", "answer": "10", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The lightest child corresponds to the smallest value in the stem-and-leaf display.\nlightest_child_weight = 10  # From the stem \"1 | 0\", the value is 10 lbs.\nanswer = lightest_child_weight\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [0, 5, 9]), (2, [2, 9, 9, 9]), (3, [2, 3, 9]), (4, [2, 2, 6])]  \n  \n# Initialize a variable to track the lightest child's weight  \nlightest_child_weight = float('inf')  \n  \n# Iterate through the stem and leaf data structure to find the lightest weight  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        weight = stem * 10 + leaf  \n        if weight < lightest_child_weight:  \n            lightest_child_weight = weight  \n  \nanswer = lightest_child_weight  \nprint(answer)", "stem_and_leaf = [(1, [0, 5, 9]), (2, [2, 9, 9, 9]), (3, [2, 3, 9]), (4, [2, 2, 6])]\nlightest_child_weight = float('inf')\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        weight = stem * 10 + leaf\n        if weight < lightest_child_weight:\n            lightest_child_weight = weight\nanswer = int(lightest_child_weight)  # Convert to integer\nprint(answer)", "stem_and_leaf = [(1, [0, 5, 9]), (2, [2, 9, 9, 9]), (3, [2, 3, 9]), (4, [2, 2, 6])]\nlightest_child_weight = float('inf')\n\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        weight = stem * 10 + leaf\n        if weight < lightest_child_weight:\n            lightest_child_weight = weight\n\nanswer = lightest_child_weight  # No need to convert to int, as it is already an integer\nprint(answer)"
], "prediction": [10.0, 10.0, 10.0, 10.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Commute time (minutes)\" and then answer a question.\n\nStem | Leaf \n3 | 0, 8\n4 | 1, 4, 4\n5 | 0, 1, 2, 7, 7\n6 | 2, 5, 7, 9, 9", "question": "Read the following table regarding \"Commute time (minutes)\" and then write Python code to answer a question.\n\nStem | Leaf \n3 | 0, 8\n4 | 1, 4, 4\n5 | 0, 1, 2, 7, 7\n6 | 2, 5, 7, 9, 9\n\nA business magazine surveyed its readers about their commute times. How many commutes are less than 51 minutes?", "answer": "6", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Extracting the commute times from the stem-and-leaf display\ncommute_times = [30, 38, 41, 44, 44, 50, 51, 52, 57, 57, 62, 65, 67, 69, 69]  # 30, 38, 41, 44, 44 (from stem 3 and 4), 50 (from stem 5), not including 51 and above\n# Counting the number of commutes less than 51 minutes\ncount_less_than_51 = sum(1 for time in commute_times if time < 51)\nanswer = count_less_than_51\nprint(answer)", "commute_times = [30, 38, 41, 44, 44, 50]  # 30, 38, 41, 44, 44, 50 (from stem 3 and 4)\ncount_less_than_51 = sum(1 for time in commute_times if time < 51)\nanswer = int(count_less_than_51)  # Convert to integer\nprint(answer)", "# Define the commute times based on the stem-and-leaf data structure  \ncommute_times = [30, 38, 41, 44, 44, 50, 52, 57, 62, 65, 67, 69, 69]  # All values from the stem and leaf  \n\n# Count how many commute times are less than 51 minutes  \ncount_less_than_51 = sum(1 for time in commute_times if time < 51)  \nanswer = count_less_than_51  # No need to convert to int, as sum already returns an integer  \n\nprint(answer)", "commute_times = [30, 38, 41, 44, 44, 50, 52, 57, 62, 65, 67, 69, 69]  # All values from the stem and leaf  \ncount_less_than_51 = sum(1 for time in commute_times if time < 51)  \nanswer = int(count_less_than_51)  # Explicitly convert to integer  \nprint(answer)"
], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Butterscotch candies per bag\" and then answer a question.\n\nStem | Leaf \n2 | 0, 8\n3 | 5\n4 | 2, 2, 3, 4, 5, 9, 9\n5 | 5, 6\n6 | 1, 3, 5, 8, 9\n7 | 2", "question": "Read the following table regarding \"Butterscotch candies per bag\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 0, 8\n3 | 5\n4 | 2, 2, 3, 4, 5, 9, 9\n5 | 5, 6\n6 | 1, 3, 5, 8, 9\n7 | 2\n\nAt a candy factory, butterscotch candies were packaged into bags of different sizes. How many bags had at least 29 butterscotch candies but fewer than 77 butterscotch candies?", "answer": "16", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# We will derive the counts of bags based on the stem-and-leaf display\n# Each stem represents the tens digit, and each leaf represents the units digit\nbags_with_candies = [\n    20, 28,  # from stem 2\n    35,      # from stem 3\n    42, 42, 43, 44, 45, 49, 49,  # from stem 4\n    55, 56,  # from stem 5\n    61, 63, 65, 68, 69,  # from stem 6\n    72       # from stem 7\n]\n\n# Count bags with candies in the specified range\ncount_bags = len([candy for candy in bags_with_candies if 29 <= candy < 77])\nanswer = count_bags\nprint(answer)", "# Define the number of butterscotch candies in each bag based on the stem and leaf data\nbags_with_candies = [\n    20, 28,  # from stem 2\n    35,      # from stem 3\n    42, 42, 43, 44, 45, 49, 49,  # from stem 4\n    55, 56,  # from stem 5\n    61, 63, 65, 68, 69,  # from stem 6\n    72       # from stem 7\n]\n\n# Count how many bags have at least 29 but fewer than 77 butterscotch candies\ncount_bags = len([candy for candy in bags_with_candies if 29 <= candy < 77])\nanswer = count_bags  # Store the count as an integer\nprint(answer)", "# Define the number of butterscotch candies in each bag based on the stem-and-leaf data\nbags_with_candies = [\n    20, 28,  # from stem 2\n    35,      # from stem 3\n    42, 42, 43, 44, 45, 49, 49,  # from stem 4\n    55, 56,  # from stem 5\n    61, 63, 65, 68, 69,  # from stem 6\n    72       # from stem 7\n]\n\n# Count the number of bags with at least 29 but fewer than 77 candies\ncount_bags = len([candy for candy in bags_with_candies if 29 <= candy < 77])\n\n# Store the count as an integer\nanswer = count_bags  \nprint(answer)", "bags_with_candies = [\n    20, 28,  # from stem 2\n    35,      # from stem 3\n    42, 42, 43, 44, 45, 49, 49,  # from stem 4\n    55, 56,  # from stem 5\n    61, 63, 65, 68, 69,  # from stem 6\n    72       # from stem 7\n]\n\n# Count the number of bags with at least 29 but fewer than 77 candies\ncount_bags = len([candy for candy in bags_with_candies if 29 <= candy < 77])\nanswer = int(count_bags)  # Ensure answer is an integer\nprint(answer)"
], "prediction": [16.0, 16.0, 16.0, 16.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nloganberries | $5.88 per lb\nblueberries | $2.35 per lb\nstrawberries | $4.04 per lb\nraspberries | $2.08 per lb", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nloganberries | $5.88 per lb\nblueberries | $2.35 per lb\nstrawberries | $4.04 per lb\nraspberries | $2.08 per lb\n\nGabrielle purchased 2 pounds of blueberries, 1 pound of raspberries, and 5 pounds of loganberries. What was the total cost?", "answer": "36.18", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices per pound\nprice_per_lb_blueberries = 2.35 \nprice_per_lb_raspberries = 2.08 \nprice_per_lb_loganberries = 5.88 \n\n# Quantities purchased\nquantity_blueberries = 2 \nquantity_raspberries = 1 \nquantity_loganberries = 5 \n\n# Calculate total cost\ntotal_cost = (price_per_lb_blueberries * quantity_blueberries +\n               price_per_lb_raspberries * quantity_raspberries +\n               price_per_lb_loganberries * quantity_loganberries)\n\nanswer = total_cost\nprint(answer)", "price_per_lb_blueberries = 2.35 \nprice_per_lb_raspberries = 2.08 \nprice_per_lb_loganberries = 5.88 \nquantity_blueberries = 2 \nquantity_raspberries = 1 \nquantity_loganberries = 5 \n\ntotal_cost = (price_per_lb_blueberries * quantity_blueberries +\n               price_per_lb_raspberries * quantity_raspberries +\n               price_per_lb_loganberries * quantity_loganberries)\n\n# Format the output to two decimal places\nanswer = f\"{total_cost:.2f}\"\nprint(answer)", "price_per_lb_blueberries = 2.35 \nprice_per_lb_raspberries = 2.08 \nprice_per_lb_loganberries = 5.88 \nquantity_blueberries = 2 \nquantity_raspberries = 1 \nquantity_loganberries = 5 \n\ntotal_cost = (price_per_lb_blueberries * quantity_blueberries +\n               price_per_lb_raspberries * quantity_raspberries +\n               price_per_lb_loganberries * quantity_loganberries)\n\nanswer = total_cost\nprint(answer)", "# Prices per pound\nprice_per_lb_blueberries = 2.35 \nprice_per_lb_raspberries = 2.08 \nprice_per_lb_loganberries = 5.88 \n\n# Quantities purchased\nquantity_blueberries = 2 \nquantity_raspberries = 1 \nquantity_loganberries = 5 \n\n# Calculate total cost\ntotal_cost = (price_per_lb_blueberries * quantity_blueberries +\n               price_per_lb_raspberries * quantity_raspberries +\n               price_per_lb_loganberries * quantity_loganberries)\n\nanswer = total_cost\nprint(answer)"
], "prediction": [36.18, 36.18, 36.18, 36.18], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Quiz scores\" and then answer a question.\n\nStem | Leaf \n4 | 0, 3, 3, 4, 4, 5, 5\n5 | 0, 0, 1, 2, 5, 5, 7, 8\n6 | 3, 4\n7 | 2, 3, 3, 4, 5, 9", "question": "Read the following table regarding \"Quiz scores\" and then write Python code to answer a question.\n\nStem | Leaf \n4 | 0, 3, 3, 4, 4, 5, 5\n5 | 0, 0, 1, 2, 5, 5, 7, 8\n6 | 3, 4\n7 | 2, 3, 3, 4, 5, 9\n\nMs. Cline reported her students' scores on the most recent quiz. How many students scored fewer than 80 points?", "answer": "23", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The scores are represented in a stem-and-leaf display.\n# Counting the scores that are less than 80 points.\nscores = [\n    40, 43, 43, 44, 44, 45, 45,  # scores in the 40s\n    50, 50, 51, 52, 55, 55, 57, 58,  # scores in the 50s\n    63, 64,  # scores in the 60s\n    72, 73, 73, 74, 75, 79  # scores in the 70s\n]\n# Count students with scores less than 80\nstudents_below_80 = len([score for score in scores if score < 80])\nanswer = students_below_80\nprint(answer)", "scores = [\n    40, 43, 43, 44, 44, 45, 45,  # scores in the 40s\n    50, 50, 51, 52, 55, 55, 57, 58,  # scores in the 50s\n    63, 64,  # scores in the 60s\n    72, 73, 73, 74, 75, 79  # scores in the 70s\n]\nstudents_below_80 = len([score for score in scores if score < 80])\nanswer = students_below_80\nprint(answer)", "# Define the scores based on the stem and leaf representation\nscores = [\n    40, 43, 43, 44, 44, 45, 45,  # scores in the 40s\n    50, 50, 51, 52, 55, 55, 57, 58,  # scores in the 50s\n    63, 64,  # scores in the 60s\n    72, 73, 73, 74, 75, 79  # scores in the 70s\n]\n\n# Count how many students scored fewer than 80 points\nstudents_below_80 = len([score for score in scores if score < 80])\n\n# Store the result in the answer variable\nanswer = students_below_80\n\n# Print the answer\nprint(answer)", "scores = [\n    40, 43, 43, 44, 44, 45, 45,  # scores in the 40s\n    50, 50, 51, 52, 55, 55, 57, 58,  # scores in the 50s\n    63, 64,  # scores in the 60s\n    72, 73, 73, 74, 75, 79  # scores in the 70s\n]\nstudents_below_80 = len([score for score in scores if score < 80])\nanswer = students_below_80  # This will correctly be an integer\nprint(answer)"
], "prediction": [23.0, 23.0, 23.0, 23.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Track team sizes (number of members)\" and then answer a question.\n\nStem | Leaf \n2 | 2, 4, 4\n3 | 3, 4, 8, 9\n4 | 0, 1, 4, 5, 6\n5 | 1, 3, 4, 4, 5, 5, 6, 6", "question": "Read the following table regarding \"Track team sizes (number of members)\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 2, 4, 4\n3 | 3, 4, 8, 9\n4 | 0, 1, 4, 5, 6\n5 | 1, 3, 4, 4, 5, 5, 6, 6\n\nMr. Christensen, a track coach, recorded the sizes of all the nearby track teams. How many teams have fewer than 50 members?", "answer": "12", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Extract the sizes from the stem-and-leaf display\nsizes = [22, 24, 24, 33, 34, 38, 39, 40, 41, 44, 45, 46, 51, 53, 54, 54, 55, 55, 56, 56]\n# Count the number of teams with fewer than 50 members\nteams_fewer_than_50 = sum(1 for size in sizes if size < 50)\nanswer = teams_fewer_than_50\nprint(answer)", "# List of sizes of track teams\nsizes = [22, 24, 24, 33, 34, 38, 39, 40, 41, 44, 45, 46, 51, 53, 54, 54, 55, 55, 56, 56]\n\n# Count the number of teams with fewer than 50 members\nteams_fewer_than_50 = len([size for size in sizes if size < 50])\n\n# Store the result in the variable 'answer'\nanswer = teams_fewer_than_50\n\n# Print the answer\nprint(answer)", "sizes = [22, 24, 24, 33, 34, 38, 39, 40, 41, 44, 45, 46, 51, 53, 54, 54, 55, 55, 56, 56]\nteams_fewer_than_50 = len([size for size in sizes if size < 50])\nanswer = int(teams_fewer_than_50)  # Ensuring the result is an integer\nprint(answer)", "sizes = [22, 24, 24, 33, 34, 38, 39, 40, 41, 44, 45, 46, 51, 53, 54, 54, 55, 55, 56, 56]\nteams_fewer_than_50 = len([size for size in sizes if size < 50])\nanswer = teams_fewer_than_50  # Directly using the count without converting to int\nprint(answer)"], "prediction": [12.0, 12.0, 12.0, 12.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npecan pie | $6.38\npumpkin pie | $9.74\nchocolate cheesecake | $8.85\nalmond tart | $9.79", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npecan pie | $6.38\npumpkin pie | $9.74\nchocolate cheesecake | $8.85\nalmond tart | $9.79\n\nHow much money does Lester need to buy 8 chocolate cheesecakes?", "answer": "70.80", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_cheesecake = 8.85  # Price of one chocolate cheesecake\nquantity = 8  # Number of chocolate cheesecakes Lester wants to buy\ntotal_cost = price_per_cheesecake * quantity  # Total cost for 8 cheesecakes\nanswer = total_cost\nprint(answer)", "price_per_cheesecake = 8.85  # Price of one chocolate cheesecake\nquantity = 8  # Number of chocolate cheesecakes Lester wants to buy\ntotal_cost = price_per_cheesecake * quantity  # Total cost for 8 cheesecakes\nanswer = f\"${total_cost:.2f}\"  # Format the answer as currency\nprint(answer)", "# Define the price of one chocolate cheesecake\nprice_per_cheesecake = 8.85  \n\n# Define the quantity of cheesecakes Lester wants to buy\nquantity = 8  \n\n# Calculate the total cost for the cheesecakes\ntotal_cost = price_per_cheesecake * quantity  \n\n# Store the numerical value in the answer variable\nanswer = total_cost  \n\n# Output the answer\nprint(answer)", "price_per_cheesecake = 8.85  \nquantity = 8  \ntotal_cost = price_per_cheesecake * quantity  \nanswer = \"${:,.2f}\".format(total_cost)  \nprint(answer)"], "prediction": [70.8, "$70.80", 70.8, "$70.80"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Number of birds seen\" and then answer a question.\n\nMonth | Number of birds\nOctober | 125\nNovember | 115\nDecember | 152\nJanuary | 121", "question": "Read the following table regarding \"Number of birds seen\" and then write Python code to answer a question.\n\nMonth | Number of birds\nOctober | 125\nNovember | 115\nDecember | 152\nJanuary | 121\n\nThe bird-watching club recorded how many birds its members saw each month. In which month did the club see the most birds? Choose from the the options: ['October', 'November', 'December', 'January']", "answer": "December", "ques_type": "multi_choice", "choices": ["October", "November", "December", "January"], "code": ["# Python code, return answer \nbirds_seen = {\n    'October': 125,\n    'November': 115,\n    'December': 152,\n    'January': 121\n}\n# Find the month with the maximum number of birds seen\nmost_birds_month = max(birds_seen, key=birds_seen.get)\nanswer = most_birds_month\nprint(answer)", "# Store the number of birds seen each month in a dictionary\nbirds_seen = {\n    'October': 125,\n    'November': 115,\n    'December': 152,\n    'January': 121\n}\n\n# Find the month with the most birds seen\nmost_birds_month = max(birds_seen, key=birds_seen.get)\n\n# Store the result in the variable 'answer'\nanswer = most_birds_month\n\n# Print the answer\nprint(answer)", "# Store the number of birds seen each month in a dictionary\nbirds_seen = {\n    'October': 125,\n    'November': 115,\n    'December': 152,\n    'January': 121\n}\n\n# Find the month with the most birds seen\nmost_birds_month = max(birds_seen, key=birds_seen.get)\nanswer = most_birds_month\n\nprint(answer)", "# Store the number of birds seen each month in a dictionary\nbirds_seen = {\n    'October': 125,\n    'November': 115,\n    'December': 152,\n    'January': 121\n}\n\n# Find the month with the most birds seen\nmost_birds_month = max(birds_seen, key=birds_seen.get)\nanswer = most_birds_month\n\nprint(answer)"], "prediction": ["December", "December", "December", "December"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Spelling bee results\" and then answer a question.\n\nName | Number of words spelled correctly\nTucker | 56\nAnn | 54\nDenise | 54\nNate | 57\nOmar | 54\nMalik | 65\nKimi | 72", "question": "Read the following table regarding \"Spelling bee results\" and then write Python code to answer a question.\n\nName | Number of words spelled correctly\nTucker | 56\nAnn | 54\nDenise | 54\nNate | 57\nOmar | 54\nMalik | 65\nKimi | 72\n\nAfter a spelling bee, some students compared how many words they spelled correctly. What is the range of the numbers?", "answer": "18", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of the number of words spelled correctly by each student\nwords_spelled_correctly = [56, 54, 54, 57, 54, 65, 72]\n# Calculate the range\nrange_of_numbers = max(words_spelled_correctly) - min(words_spelled_correctly)\nanswer = range_of_numbers\nprint(answer)", "words_spelled_correctly = [56, 54, 54, 57, 54, 65, 72]\nrange_of_numbers = max(words_spelled_correctly) - min(words_spelled_correctly)\nanswer = int(range_of_numbers)  # Convert to integer for clarity\nprint(answer)", "# List of the number of words spelled correctly by each student\nwords_spelled_correctly = [56, 54, 54, 57, 54, 65, 72]\n\n# Calculate the range of the numbers\nrange_of_numbers = max(words_spelled_correctly) - min(words_spelled_correctly)\n\n# Store the result in the variable 'answer'\nanswer = range_of_numbers  # No need for conversion since it's already an integer\n\n# Print the answer\nprint(answer)", "words_spelled_correctly = [56, 54, 54, 57, 54, 65, 72]\nrange_of_numbers = max(words_spelled_correctly) - min(words_spelled_correctly)\nanswer = int(range_of_numbers)  # Convert to integer to ensure the output is an integer\nprint(answer)"], "prediction": [18.0, 18.0, 18.0, 18.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Quiz show scores\" and then answer a question.\n\nName | Score\nMitch | 9\nGina | 9\nRiley | 4\nAnthony | 7\nBetty | 3\nElise | 8\nJada | 9", "question": "Read the following table regarding \"Quiz show scores\" and then write Python code to answer a question.\n\nName | Score\nMitch | 9\nGina | 9\nRiley | 4\nAnthony | 7\nBetty | 3\nElise | 8\nJada | 9\n\nThe players on a quiz show received the following scores. What is the mean of the numbers?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nscores = [9, 9, 4, 7, 3, 8, 9]\n# Calculate the mean score\nmean_score = sum(scores) / len(scores)\nanswer = mean_score\nprint(answer)", "scores = [9, 9, 4, 7, 3, 8, 9]\nmean_score = sum(scores) / len(scores)\nanswer = round(mean_score, 1)  # Round to one decimal place for better readability\nprint(answer)", "scores = [9, 9, 4, 7, 3, 8, 9]\nmean_score = sum(scores) / len(scores)\nanswer = round(mean_score, 1)  # Round to one decimal place for better readability\nprint(answer)", "scores = [9, 9, 4, 7, 3, 8, 9]\nmean_score = sum(scores) / len(scores)\nanswer = round(mean_score, 1)  # Round to one decimal place for better readability\nprint(answer)"], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Fire hydrants\" and then answer a question.\n\nStreet | Number of hydrants\nOak Street | 3\nLemon Street | 6\nMaple Street | 3\nPine Street | 3\nCedar Street | 7\nFir Street | 6\nElm Street | 1\nAspen Street | 7", "question": "Read the following table regarding \"Fire hydrants\" and then write Python code to answer a question.\n\nStreet | Number of hydrants\nOak Street | 3\nLemon Street | 6\nMaple Street | 3\nPine Street | 3\nCedar Street | 7\nFir Street | 6\nElm Street | 1\nAspen Street | 7\n\nThe city recorded how many fire hydrants there are on each street. What is the mode of the numbers?", "answer": "3", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nfrom statistics import mode\n\n# Number of hydrants on each street\nhydrant_counts = [3, 6, 3, 3, 7, 6, 1, 7]\n\n# Calculate the mode\nanswer = mode(hydrant_counts)\nprint(answer)", "from statistics import mode\n\nhydrant_counts = [3, 6, 3, 3, 7, 6, 1, 7]\nanswer = int(mode(hydrant_counts))  # Convert the result to an integer\nprint(answer)", "from statistics import mode\n\nhydrant_counts = [3, 6, 3, 3, 7, 6, 1, 7]\nanswer = mode(hydrant_counts)  # mode already returns an int\nprint(answer)", "from statistics import mode\n\nhydrant_counts = [3, 6, 3, 3, 7, 6, 1, 7]\nanswer = int(mode(hydrant_counts))  # Convert the mode result to an integer\nprint(answer)"], "prediction": [3.0, 3.0, 3.0, 3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ndenim skirt | $8.47\npair of shoes | $6.12\norange T-shirt | $7.50\npair of sweat pants | $6.93\npurple dress | $5.82", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ndenim skirt | $8.47\npair of shoes | $6.12\norange T-shirt | $7.50\npair of sweat pants | $6.93\npurple dress | $5.82\n\nHow much money does Tina need to buy 5 denim skirts and 4 purple dresses?", "answer": "65.63", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nprice_denim_skirt = 8.47\nprice_purple_dress = 5.82\n\n# Calculate the total cost\ntotal_cost = (5 * price_denim_skirt) + (4 * price_purple_dress)\nanswer = total_cost\nprint(answer)", "price_denim_skirt = 8.47\nprice_purple_dress = 5.82\ntotal_cost = (5 * price_denim_skirt) + (4 * price_purple_dress)\nanswer = \"{:.2f}\".format(total_cost)  # Format the answer to two decimal places\nprint(answer)", "# Prices of the items\nprice_denim_skirt = 8.47\nprice_purple_dress = 5.82\n\n# Calculate the total cost for 5 denim skirts and 4 purple dresses\ntotal_cost = (5 * price_denim_skirt) + (4 * price_purple_dress)\n\n# Store the result as a numerical value\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Prices of the items\nprice_denim_skirt = 8.47\nprice_purple_dress = 5.82\n\n# Calculate the total cost for 5 denim skirts and 4 purple dresses\ntotal_cost = (5 * price_denim_skirt) + (4 * price_purple_dress)\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)"], "prediction": [65.63, 65.63, 65.63, 65.63], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Swimming pool schedule\" and then answer a question.\n\nActivity | Begin | End\nfamily swim | 6:45 A.M. | 7:15 A.M.\nswim team practice | 7:25 A.M. | 8:50 A.M.\nintermediate swimming class | 9:00 A.M. | 9:40 A.M.\nbeginning swimming class | 9:50 A.M. | 10:25 A.M.\ndiving club practice | 10:30 A.M. | 11:00 A.M.\nwater polo practice | 11:15 A.M. | 12:50 P.M.\nadvanced swimming class | 1:00 P.M. | 2:20 P.M.\nlap swim | 2:25 P.M. | 3:35 P.M.", "question": "Read the following table regarding \"Swimming pool schedule\" and then write Python code to answer a question.\n\nActivity | Begin | End\nfamily swim | 6:45 A.M. | 7:15 A.M.\nswim team practice | 7:25 A.M. | 8:50 A.M.\nintermediate swimming class | 9:00 A.M. | 9:40 A.M.\nbeginning swimming class | 9:50 A.M. | 10:25 A.M.\ndiving club practice | 10:30 A.M. | 11:00 A.M.\nwater polo practice | 11:15 A.M. | 12:50 P.M.\nadvanced swimming class | 1:00 P.M. | 2:20 P.M.\nlap swim | 2:25 P.M. | 3:35 P.M.\n\nLook at the following schedule. When does lap swim end? Choose from the the options: ['10:25 A.M.', '8:50 A.M.', '2:25 P.M.', '3:35 P.M.']", "answer": "3:35 P.M.", "ques_type": "multi_choice", "choices": ["10:25 A.M.", "8:50 A.M.", "2:25 P.M.", "3:35 P.M."], "code": ["# Python code, return answer \n# According to the schedule, lap swim ends at 3:35 P.M.\nlap_swim_end_time = \"3:35 P.M.\"\nanswer = lap_swim_end_time\nprint(answer)", "# Define the end time for lap swim\nlap_swim_end_time = \"3:35 P.M.\"\n\n# Define the options\noptions = ['10:25 A.M.', '8:50 A.M.', '2:25 P.M.', '3:35 P.M.']\n\n# Check if the answer is in the options\nif lap_swim_end_time in options:\n    answer = lap_swim_end_time\nelse:\n    answer = \"Not a valid option\"\n\nprint(answer)", "# Directly assign the end time of lap swim to the answer variable\nanswer = \"3:35 P.M.\"\nprint(answer)", "# The end time for lap swim\nanswer = \"3:35 P.M.\"\nprint(answer)"], "prediction": ["3:35 P.M.", "3:35 P.M.", "3:35 P.M.", "3:35 P.M."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Broken tiles per shipment\" and then answer a question.\n\nStem | Leaf \n1 | 1\n2 | 1, 7, 9\n3 | 2, 2, 7\n4 | \n5 | 2, 8, 9\n6 | 2, 3, 3, 6, 7\n7 | 7\n8 | 0, 5, 7\n9 | 0", "question": "Read the following table regarding \"Broken tiles per shipment\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 1\n2 | 1, 7, 9\n3 | 2, 2, 7\n4 | \n5 | 2, 8, 9\n6 | 2, 3, 3, 6, 7\n7 | 7\n8 | 0, 5, 7\n9 | 0\n\nWinchester Flooring tracked the number of broken tiles in each shipment it received last year. What is the largest number of broken tiles?", "answer": "90", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number of broken tiles corresponds to the largest value in the stem-and-leaf display.\nlargest_broken_tiles = 90  # From the stem \"9 | 0\", the value is 90 tiles.\nanswer = largest_broken_tiles\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [1]), (2, [1, 7, 9]), (3, [2, 2, 7]), (4, []), (5, [2, 8, 9]), (6, [2, 3, 3, 6, 7]), (7, [7]), (8, [0, 5, 7]), (9, [0])]  \n\n# Initialize variable to track the largest number of broken tiles  \nlargest_broken_tiles = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        broken_tiles = stem * 10 + leaf  \n        if broken_tiles > largest_broken_tiles:  \n            largest_broken_tiles = broken_tiles  \n\nanswer = largest_broken_tiles  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [1]), (2, [1, 7, 9]), (3, [2, 2, 7]), (4, []), (5, [2, 8, 9]), (6, [2, 3, 3, 6, 7]), (7, [7]), (8, [0, 5, 7]), (9, [0])]  \n\n# Initialize variable to track the largest number of broken tiles  \nlargest_broken_tiles = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number of broken tiles  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        broken_tiles = stem * 10 + leaf  \n        if broken_tiles > largest_broken_tiles:  \n            largest_broken_tiles = broken_tiles  \n\n# Store the result as an integer  \nanswer = int(largest_broken_tiles)  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [1]), (2, [1, 7, 9]), (3, [2, 2, 7]), (4, []), (5, [2, 8, 9]), (6, [2, 3, 3, 6, 7]), (7, [7]), (8, [0, 5, 7]), (9, [0])]  \n\n# Initialize variable to track the largest number of broken tiles  \nlargest_broken_tiles = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number of broken tiles  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        broken_tiles = stem * 10 + leaf  \n        if broken_tiles > largest_broken_tiles:  \n            largest_broken_tiles = broken_tiles  \n\n# Assign the largest number of broken tiles to answer as an integer  \nanswer = largest_broken_tiles  \nprint(answer)"
], "prediction": [90.0, 90.0, 90.0, 90.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Daily temperatures (\u00b0C)\" and then answer a question.\n\nStem | Leaf \n1 | 1, 8, 9, 9, 9, 9\n2 | 0, 3, 4\n3 | 3, 7, 8\n4 | 0", "question": "Read the following table regarding \"Daily temperatures (\u00b0C)\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 1, 8, 9, 9, 9, 9\n2 | 0, 3, 4\n3 | 3, 7, 8\n4 | 0\n\nFor a science fair project, Oliver tracked the temperature each day. How many temperature readings were exactly 19\u00b0C?", "answer": "4", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# From the stem-and-leaf display, 19\u00b0C corresponds to the stem \"1\" and leaf \"9\".\n# Thus, there is 1 reading of exactly 19\u00b0C.\ntemperature_readings_19C = 1\nanswer = temperature_readings_19C\nprint(answer)", "# Define the stem and leaf data structure as a list of tuples\nstem_and_leaf = [(1, [1, 8, 9, 9, 9, 9]), (2, [0, 3, 4]), (3, [3, 7, 8]), (4, [0])]\n\n# Initialize counter for temperature readings of exactly 19\u00b0C\ntemperature_readings_19C = 0\n\n# Iterate through the stem and leaf data structure and count readings of 19\u00b0C\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        if stem == 1 and leaf == 9:  # 19\u00b0C corresponds to stem 1 and leaf 9\n            temperature_readings_19C += 1\n\nanswer = temperature_readings_19C\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [1, 8, 9, 9, 9, 9]), (2, [0, 3, 4]), (3, [3, 7, 8]), (4, [0])]  \n  \n# Initialize counter for temperature readings of exactly 19\u00b0C  \ntemperature_readings_19C = 0  \n  \n# Iterate through the stem and leaf data structure and count relevant readings  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        if stem == 1 and leaf == 9:  # 19\u00b0C corresponds to stem 1 and leaf 9  \n            temperature_readings_19C += 1  \n  \n# Store the result as an integer  \nanswer = temperature_readings_19C  \nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [(1, [1, 8, 9, 9, 9, 9]), (2, [0, 3, 4]), (3, [3, 7, 8]), (4, [0])]  \n\n# Initialize counter for temperature readings of exactly 19\u00b0C\ntemperature_readings_19C = 0  \n\n# Iterate through the stem and leaf data structure and count readings of 19\u00b0C\nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        if stem == 1 and leaf == 9:  # 19\u00b0C corresponds to stem 1 and leaf 9  \n            temperature_readings_19C += 1  \n\n# Store the result as an integer\nanswer = int(temperature_readings_19C)  \nprint(answer)"
], "prediction": [1.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Apples per tree\" and then answer a question.\n\nStem | Leaf \n4 | 2\n5 | 1, 2, 3\n6 | 0, 1, 1\n7 | 3, 6, 9\n8 | 1, 1, 5, 9\n9 | 0", "question": "Read the following table regarding \"Apples per tree\" and then write Python code to answer a question.\n\nStem | Leaf \n4 | 2\n5 | 1, 2, 3\n6 | 0, 1, 1\n7 | 3, 6, 9\n8 | 1, 1, 5, 9\n9 | 0\n\nA farmer counted the number of apples on each tree in her orchard. How many trees have at least 80 apples?", "answer": "5", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Count the number of trees with at least 80 apples\n# From the stem-and-leaf display, we identify the values.\napple_counts = [42, 51, 52, 53, 60, 61, 61, 73, 76, 79, 81, 81, 85, 89, 90]\n\n# Count trees with at least 80 apples\ntrees_with_at_least_80 = sum(1 for count in apple_counts if count >= 80)\nanswer = trees_with_at_least_80\nprint(answer)", "apple_counts = [42, 51, 52, 53, 60, 61, 61, 73, 76, 79, 81, 81, 85, 89, 90]\ntrees_with_at_least_80 = sum(1 for count in apple_counts if count >= 80)\nanswer = int(trees_with_at_least_80)  # Cast to integer for clarity\nprint(answer)", "apple_counts = [42, 51, 52, 53, 60, 61, 61, 73, 76, 79, 81, 81, 85, 89, 90]\ntrees_with_at_least_80 = sum(1 for count in apple_counts if count >= 80)\nanswer = trees_with_at_least_80  # No need to cast to integer, it will already be an integer\nprint(answer)", "apple_counts = [42, 51, 52, 53, 60, 61, 61, 73, 76, 79, 81, 81, 85, 89, 90]\ntrees_with_at_least_80 = sum(1 for count in apple_counts if count >= 80)\nanswer = int(trees_with_at_least_80)  # Ensure the result is stored as an integer\nprint(answer)"], "prediction": [5.0, 5.0, 5.0, 5.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Fish per tank\" and then answer a question.\n\nStem | Leaf \n1 | 1, 5, 7\n2 | 2, 4, 6, 7, 8\n3 | 1, 1, 5\n4 | 2, 3, 6, 9\n5 | 7\n6 | 3, 3, 7\n7 | 6, 8\n8 | 1, 3", "question": "Read the following table regarding \"Fish per tank\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 1, 5, 7\n2 | 2, 4, 6, 7, 8\n3 | 1, 1, 5\n4 | 2, 3, 6, 9\n5 | 7\n6 | 3, 3, 7\n7 | 6, 8\n8 | 1, 3\n\nA pet store owner had his staff count the number of fish in each tank. What is the smallest number of fish per tank?", "answer": "11", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The smallest number of fish corresponds to the smallest value in the stem-and-leaf display.\nsmallest_fish_count = 11  # From the stem \"1 | 1\", the value is 11 fish.\nanswer = smallest_fish_count\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(1, [1, 5, 7]), (2, [2, 4, 6, 7, 8]), (3, [1, 1, 5]), (4, [2, 3, 6, 9]), (5, [7]), (6, [3, 3, 7]), (7, [6, 8]), (8, [1, 3])]\n\n# Initialize variable to store the smallest number of fish\nsmallest_fish_count = float('inf')\n\n# Iterate through the stem and leaf data structure to find the smallest fish count\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        fish_per_tank = stem * 10 + leaf  # Calculate the number of fish per tank\n        if fish_per_tank < smallest_fish_count:\n            smallest_fish_count = fish_per_tank  # Update smallest fish count\n\nanswer = smallest_fish_count\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [1, 5, 7]), (2, [2, 4, 6, 7, 8]), (3, [1, 1, 5]), (4, [2, 3, 6, 9]), (5, [7]), (6, [3, 3, 7]), (7, [6, 8]), (8, [1, 3])]  \n  \n# Initialize variable to store the smallest fish count  \nsmallest_fish_count = float('inf')  \n  \n# Iterate through the stem and leaf data structure and find the smallest fish count  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        fish_per_tank = stem * 10 + leaf  # Calculate the number of fish per tank correctly\n        if fish_per_tank < smallest_fish_count:  \n            smallest_fish_count = fish_per_tank  # Update smallest fish count  \n  \nanswer = smallest_fish_count  \nprint(answer)", "stem_and_leaf = [(1, [1, 5, 7]), (2, [2, 4, 6, 7, 8]), (3, [1, 1, 5]), (4, [2, 3, 6, 9]), (5, [7]), (6, [3, 3, 7]), (7, [6, 8]), (8, [1, 3])]  \nsmallest_fish_count = float('inf')  \n\nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        fish_per_tank = stem * 10 + leaf  # Correctly calculate the number of fish per tank\n        if fish_per_tank < smallest_fish_count:  \n            smallest_fish_count = fish_per_tank  # Update smallest fish count  \n\nanswer = int(smallest_fish_count)  # Convert to integer for clarity\nprint(answer)"
], "prediction": [11.0, 11.0, 11.0, 11.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nOption | Change in phone price\nAdd an upgrade | $60\nBuy a used phone | -$75", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nOption | Change in phone price\nAdd an upgrade | $60\nBuy a used phone | -$75\n\nEliana is looking at the price of new cell phones online. Her favorite company, OrangeTech, has a special this weekend. Eliana can add an upgrade to a phone for an additional cost, or she can buy a used phone to get a discount. The change in price for each option is shown in the table. Which option results in a greater change in price? Choose from the the options: ['adding an upgrade', 'buying a used phone']", "answer": "buying a used phone", "ques_type": "multi_choice", "choices": ["adding an upgrade", "buying a used phone"], "code": ["# Python code, return answer \nchange_upgrade = 60 \nchange_used_phone = -75 \n# Determine which option results in a greater change in price\nif change_upgrade > abs(change_used_phone): \n    answer = 'adding an upgrade'\nelse:\n    answer = 'buying a used phone'\nprint(answer)", "# Define the change in phone price for each option\nchange_upgrade = 60\nchange_used_phone = -75\n\n# Compare the change in price for both options\nif change_upgrade > change_used_phone:\n    answer = 'adding an upgrade'\nelse:\n    answer = 'buying a used phone'\n\nprint(answer)", "```python\n# Define the change in price for each option\nchange_upgrade = 60\nchange_used_phone = -75\n\n# Compare the absolute values of the changes in price\nif abs(change_upgrade) > abs(change_used_phone", "change_upgrade = 60\nchange_used_phone = -75\n\n# Compare the absolute values of the changes\nif abs(change_upgrade) > abs(change_used_phone):\n    answer = 'adding an upgrade'\nelse:\n    answer = 'buying a used phone'\n\nprint(answer)"], "prediction": ["buying a used phone", "adding an upgrade", null, "buying a used phone"], "report": ["Done", "Done", "SyntaxError('invalid syntax', ('<string>', 1, 1, '```python\\n', 1, 2))", "Done"]
}
{
  "context": "Read the following table regarding \"Push-up competition (number of push-ups)\" and then answer a question.\n\nStem | Leaf \n4 | 8\n5 | 5, 6\n6 | 3, 6, 7, 7\n7 | 1, 3, 3, 5, 7, 7, 8", "question": "Read the following table regarding \"Push-up competition (number of push-ups)\" and then write Python code to answer a question.\n\nStem | Leaf \n4 | 8\n5 | 5, 6\n6 | 3, 6, 7, 7\n7 | 1, 3, 3, 5, 7, 7, 8\n\nJustine's P.E. class participated in a push-up competition, and Justine wrote down how many push-ups each person could do. How many people did at least 60 push-ups?", "answer": "11", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Extract the values from the stem-and-leaf display\npush_ups = [48, 55, 56, 63, 66, 67, 67, 71, 73, 73, 75, 77, 77, 78]  # Corresponding push-up values from the stem and leaf.\n# Count how many people did at least 60 push-ups\ncount_at_least_60 = len([push for push in push_ups if push >= 60])\nanswer = count_at_least_60\nprint(answer)", "push_ups = [48, 55, 56, 63, 66, 67, 67, 71, 73, 73, 75, 77, 77, 78]  # Corresponding push-up values from the stem and leaf.\ncount_at_least_60 = len([push for push in push_ups if push >= 60])\nanswer = count_at_least_60  # This will be an integer\nprint(answer)", "push_ups = [48, 55, 56, 63, 66, 67, 67, 71, 73, 73, 75, 77, 77, 78]  # Corresponding push-up values from the stem and leaf.\ncount_at_least_60 = len([push for push in push_ups if push >= 60])\nanswer = int(count_at_least_60)  # Explicitly convert to integer\nprint(answer)", "# List of push-up values corresponding to the stem and leaf data\npush_ups = [48, 55, 56, 63, 66, 67, 67, 71, 73, 73, 75, 77, 77, 78]\n\n# Count the number of people who did at least 60 push-ups\ncount_at_least_60 = len([push for push in push_ups if push >= 60])\n\n# Store the result in the answer variable\nanswer = count_at_least_60\n\n# Print the answer\nprint(answer)"], "prediction": [11.0, 11.0, 11.0, 11.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Polarized lenses | Regular lenses\nCat eye frames | 2 | 5\nBrowline frames | 4 | 4", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Polarized lenses | Regular lenses\nCat eye frames | 2 | 5\nBrowline frames | 4 | 4\n\nAfter growing tired of squinting while driving, Erik went shopping for a pair of sunglasses. He tried on glasses with different frames and lenses. What is the probability that a randomly selected pair of sunglasses has browline frames and polarized lenses? Simplify any fractions.", "answer": "4/15", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total pairs of sunglasses\ntotal_pairs = 2 + 5 + 4 + 4 \n# Pairs with browline frames and polarized lenses\nbrowline_polarized_pairs = 4\n# Calculate the probability\nprobability_browline_polarized = browline_polarized_pairs / total_pairs\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(browline_polarized_pairs, total_pairs).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Define the counts of sunglasses based on the frame and lens types\npolarized_lenses = {\n    'Cat eye frames': 2,\n    'Browline frames': 4\n}\n\nregular_lenses = {\n    'Cat eye frames': 5,\n    'Browline frames': 4\n}\n\n# Calculate total pairs of sunglasses\ntotal_pairs = sum(polarized_lenses.values()) + sum(regular_lenses.values())\n\n# Count the number of browline frames with polarized lenses\nbrowline_polarized_pairs = polarized_lenses['Browline frames']\n\n# Calculate the probability\nfrom fractions import Fraction\nprobability_browline_polarized = Fraction(browline_polarized_pairs, total_pairs).limit_denominator()\n\n# Store the result\nanswer = probability_browline_polarized\nprint(answer)", "# Define the number of polarized and regular lenses for each frame type\npolarized_lenses = {\n    'Cat eye frames': 2,\n    'Browline frames': 4\n}\nregular_lenses = {\n    'Cat eye frames': 5,\n    'Browline frames': 4\n}\n\n# Calculate the total number of pairs of sunglasses\ntotal_pairs = sum(polarized_lenses.values()) + sum(regular_lenses.values())\n\n# Get the number of browline frames with polarized lenses\nbrowline_polarized_pairs = polarized_lenses['Browline frames']\n\n# Calculate the probability as a fraction\nfrom fractions import Fraction\nprobability_browline_polarized = Fraction(browline_polarized_pairs, total_pairs).limit_denominator()\n\n# Store the result in the answer variable\nanswer = probability_browline_polarized\nprint(answer)", "# Define the number of polarized and regular lenses for each frame type\npolarized_lenses = {\n    'Cat eye frames': 2,\n    'Browline frames': 4\n}\nregular_lenses = {\n    'Cat eye frames': 5,\n    'Browline frames': 4\n}\n\n# Calculate the total number of pairs of sunglasses\ntotal_pairs = sum(polarized_lenses.values()) + sum(regular_lenses.values())\n\n# Calculate the number of browline frames with polarized lenses\nbrowline_polarized_pairs = polarized_lenses['Browline frames']\n\n# Calculate the probability as a simplified fraction\nfrom fractions import Fraction\nprobability_browline_polarized = Fraction(browline_polarized_pairs, total_pairs).limit_denominator()\n\n# Store the result in the answer variable\nanswer = probability_browline_polarized\nprint(answer)"
], "prediction": [0.26667, 0.26667, 0.26667, 0.26667], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Rotten tomatoes per barrel\" and then answer a question.\n\nStem | Leaf \n1 | 1, 6, 8\n2 | \n3 | 2\n4 | \n5 | \n6 | \n7 | 0, 4\n8 | 4\n9 | 0", "question": "Read the following table regarding \"Rotten tomatoes per barrel\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 1, 6, 8\n2 | \n3 | 2\n4 | \n5 | \n6 | \n7 | 0, 4\n8 | 4\n9 | 0\n\nThe Lexington Soup Company recorded the number of rotten tomatoes in each barrel it received. How many barrels had at least 20 rotten tomatoes?", "answer": "5", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Based on the stem-and-leaf display, we can determine the number of barrels with at least 20 rotten tomatoes.\n# Each stem represents the tens digit and each leaf represents the units digit.\n\nbarrels_with_at_least_20 = 0\n\n# Analyzing the display:\n# Stem '1' corresponds to 11, 16, 18 -> all less than 20\n# Stem '2' corresponds to 20 (no leaves, so 0 barrels)\n# Stem '3' corresponds to 32 -> 1 barrel\n# Stem '4' -> 0 barrels\n# Stem '5' -> 0 barrels\n# Stem '6' -> 0 barrels\n# Stem '7' corresponds to 70 and 74 -> 2 barrels\n# Stem '8' corresponds to 84 -> 1 barrel\n# Stem '9' corresponds to 90 -> 1 barrel\n\nbarrels_with_at_least_20 += 1  # for 20 (from stem '2')\nbarrels_with_at_least_20 += 1  # for 32 (from stem '3')\nbarrels_with_at_least_20 += 2  # for 70 and 74 (from stem '7')\nbarrels_with_at_least_20 += 1  # for 84 (from stem '8')\nbarrels_with_at_least_20 += 1  # for 90 (from stem '9')\n\nanswer = barrels_with_at_least_20\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [1, 6, 8]), (2, []), (3, [2]), (4, []), (5, []), (6, []), (7, [0, 4]), (8, [4]), (9, [0])]  \n  \n# Initialize counter for barrels with at least 20 rotten tomatoes  \nbarrels_with_at_least_20 = 0  \n  \n# Iterate through the stem and leaf data structure and count relevant barrels  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        rotten_tomatoes = stem * 10 + leaf  \n        if rotten_tomatoes >= 20:  \n            barrels_with_at_least_20 += 1  \n    # Count the stem values that represent the range of rotten tomatoes  \n    if stem >= 2:  # For stems 2 to 9, all leaf values count\n        barrels_with_at_least_20 += len(leaf_list)\n\n# For stem 2, it represents the number 20\nif 2 in [stem for stem, _ in stem_and_leaf]:\n    barrels_with_at_least_20 += 1  \n\nanswer = barrels_with_at_least_20  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [1, 6, 8]), (2, []), (3, [2]), (4, []), (5, []), (6, []), (7, [0, 4]), (8, [4]), (9, [0])]  \n\n# Initialize counter for barrels with at least 20 rotten tomatoes  \nbarrels_with_at_least_20 = 0  \n\n# Iterate through the stem and leaf data structure and count relevant barrels  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        rotten_tomatoes = stem * 10 + leaf  \n        if rotten_tomatoes >= 20:  \n            barrels_with_at_least_20 += 1  \n    # Count barrels for stems 2 to 9, where all leaf values count  \n    if stem >= 2:  \n        barrels_with_at_least_20 += len(leaf_list)  \n\nanswer = barrels_with_at_least_20  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [1, 6, 8]), (2, []), (3, [2]), (4, []), (5, []), (6, []), (7, [0, 4]), (8, [4]), (9, [0])]  \n\n# Initialize counter for barrels with at least 20 rotten tomatoes  \nbarrels_with_at_least_20 = 0  \n\n# Iterate through the stem and leaf data structure and count relevant barrels  \nfor stem, leaf_list in stem_and_leaf:  \n    # Count for the current stem and its leaves  \n    for leaf in leaf_list:  \n        rotten_tomatoes = stem * 10 + leaf  \n        if rotten_tomatoes >= 20:  \n            barrels_with_at_least_20 += 1  \n            \n    # For stems 2 to 9, check if they have at least 20 rotten tomatoes if they have any leaves\n    if stem >= 2 and leaf_list:\n        for leaf in leaf_list:\n            rotten_tomatoes = stem * 10 + leaf\n            if rotten_tomatoes >= 20:\n                barrels_with_at_least_20 += 1  \n\nanswer = barrels_with_at_least_20  \nprint(answer)"
], "prediction": [6.0, 11.0, 10.0, 10.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ngreen pipe cleaner | $0.03\nshiny red button | $0.07\nsilver bow | $0.01\norange ribbon | $0.06", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ngreen pipe cleaner | $0.03\nshiny red button | $0.07\nsilver bow | $0.01\norange ribbon | $0.06\n\nChristina has $0.21. How much money will Christina have left if she buys an orange ribbon and a shiny red button?", "answer": "0.08", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices of the items\nprice_orange_ribbon = 0.06 \nprice_shiny_red_button = 0.07 \n# Total cost of the items\ntotal_cost = price_orange_ribbon + price_shiny_red_button \n# Initial amount Christina has\ninitial_amount = 0.21 \n# Remaining money after purchases\nremaining_money = initial_amount - total_cost \nanswer = remaining_money\nprint(answer)", "# Prices of the items\nprice_orange_ribbon = 0.06 \nprice_shiny_red_button = 0.07 \n\n# Total cost of the items\ntotal_cost = price_orange_ribbon + price_shiny_red_button \n\n# Initial amount Christina has\ninitial_amount = 0.21 \n\n# Remaining money after the purchase\nremaining_money = initial_amount - total_cost \n\n# Store the result in the variable 'answer'\nanswer = remaining_money \n\n# Output the answer\nprint(answer)  # This will output: 0.08", "# Define the prices of the items Christina wants to buy\nprice_orange_ribbon = 0.06 \nprice_shiny_red_button = 0.07 \n\n# Calculate the total cost of the items\ntotal_cost = price_orange_ribbon + price_shiny_red_button \n\n# Define the initial amount of money Christina has\ninitial_amount = 0.21 \n\n# Calculate the remaining money after the purchase\nremaining_money = initial_amount - total_cost \n\n# Store the result in the variable 'answer'\nanswer = remaining_money \n\n# Output the result\nprint(answer)  # This will output: 0.08", "# Define the prices of the items\nprice_orange_ribbon = 0.06 \nprice_shiny_red_button = 0.07 \n\n# Calculate the total cost of the items\ntotal_cost = price_orange_ribbon + price_shiny_red_button \n\n# Define Christina's initial amount of money\ninitial_amount = 0.21 \n\n# Calculate the remaining money after purchases\nremaining_money = initial_amount - total_cost \n\n# Store the result in the variable 'answer'\nanswer = remaining_money \n\n# Output the answer\nprint(answer)  # This will output: 0.08"
], "prediction": [0.08, 0.08, 0.08, 0.08], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Doing cartwheels\" and then answer a question.\n\nDay | Number of cartwheels\nWednesday | 8\nThursday | 6\nFriday | 10\nSaturday | 7\nSunday | 9", "question": "Read the following table regarding \"Doing cartwheels\" and then write Python code to answer a question.\n\nDay | Number of cartwheels\nWednesday | 8\nThursday | 6\nFriday | 10\nSaturday | 7\nSunday | 9\n\nA gymnast jotted down the number of cartwheels she did each day. What is the mean of the numbers?", "answer": "8", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of cartwheels each day\ncartwheels = [8, 6, 10, 7, 9]\n# Calculate the mean\nmean_cartwheels = sum(cartwheels) / len(cartwheels)\nanswer = mean_cartwheels\nprint(answer)", "# List of the number of cartwheels done each day\ncartwheels = [8, 6, 10, 7, 9]\n\n# Calculate the mean of the cartwheels\nmean_cartwheels = sum(cartwheels) / len(cartwheels)\n\n# Store the result in the variable 'answer'\nanswer = mean_cartwheels\n\n# Print the answer\nprint(answer)", "# Define the number of cartwheels for each day\ncartwheels = [8, 6, 10, 7, 9]\n\n# Calculate the mean of the cartwheels\nmean_cartwheels = sum(cartwheels) / len(cartwheels)\n\n# Store the result in the answer variable\nanswer = mean_cartwheels\n\n# Print the answer\nprint(answer)", "cartwheels = [8, 6, 10, 7, 9]  \nmean_cartwheels = sum(cartwheels) / len(cartwheels)  \nanswer = round(mean_cartwheels, 2)  # Rounding to 2 decimal places for clarity  \nprint(f\"The mean number of cartwheels is: {answer}\")"], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Children's weights (lbs)\" and then answer a question.\n\nStem | Leaf \n1 | 2, 2, 2, 4, 6, 8, 8\n2 | 2, 2, 3, 9\n3 | 5, 7, 8, 8, 9\n4 | 0, 2, 3, 3, 5, 7, 7", "question": "Read the following table regarding \"Children's weights (lbs)\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 2, 2, 2, 4, 6, 8, 8\n2 | 2, 2, 3, 9\n3 | 5, 7, 8, 8, 9\n4 | 0, 2, 3, 3, 5, 7, 7\n\nDr. Rudd, a pediatrician, weighed all the children who recently visited his office. How many children weighed less than 50 pounds?", "answer": "23", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# We will extract the weights from the stem-and-leaf display and count those less than 50 pounds.\n\n# Extracting weights from the stem-and-leaf table\nweights = [\n    12, 12, 12, 14, 16, 18, 18,  # from stem 1\n    22, 22, 23, 29,              # from stem 2\n    35, 37, 38, 38, 39,          # from stem 3\n    40, 42, 43, 43, 45, 47, 47   # from stem 4\n]\n\n# Count the number of children weighing less than 50 pounds\ncount_less_than_50 = sum(1 for weight in weights if weight < 50)\nanswer = count_less_than_50\nprint(answer)", "weights = [\n    12, 12, 12, 14, 16, 18, 18,  # from stem 1\n    22, 22, 23, 29,              # from stem 2\n    35, 37, 38, 38, 39,          # from stem 3\n    40, 42, 43, 43, 45, 47, 47   # from stem 4\n]\ncount_less_than_50 = sum(1 for weight in weights if weight < 50)\nanswer = count_less_than_50  # This will be an integer\nprint(answer)", "weights = [\n    12, 12, 12, 14, 16, 18, 18,  # from stem 1\n    22, 22, 23, 29,              # from stem 2\n    35, 37, 38, 38, 39,          # from stem 3\n    40, 42, 43, 43, 45, 47, 47   # from stem 4\n]\n\ncount_less_than_50 = sum(1 for weight in weights if weight < 50)\nanswer = count_less_than_50  # This will be an integer\nprint(answer)", "weights = [\n    12, 12, 12, 14, 16, 18, 18,  # from stem 1\n    22, 22, 23, 29,              # from stem 2\n    35, 37, 38, 38, 39,          # from stem 3\n    40, 42, 43, 43, 45, 47, 47   # from stem 4\n]\ncount_less_than_50 = sum(1 for weight in weights if weight < 50)\nanswer = int(count_less_than_50)  # Convert to integer\nprint(answer)"
], "prediction": [23.0, 23.0, 23.0, 23.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npotato salad | $3 per pound\nmacaroni salad | $3 per pound\nfruit salad | $4 per pound\negg salad | $5 per pound\ntuna salad | $4 per pound\ngreen salad | $5 per pound", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npotato salad | $3 per pound\nmacaroni salad | $3 per pound\nfruit salad | $4 per pound\negg salad | $5 per pound\ntuna salad | $4 per pound\ngreen salad | $5 per pound\n\nMona went to the store and bought 3+3/4 pounds of fruit salad. How much did she spend?", "answer": "15", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \nprice_per_pound_fruit_salad = 4  # Price of fruit salad per pound\npounds_bought = 3 + 3/4  # Total pounds bought by Mona\ntotal_cost = price_per_pound_fruit_salad * pounds_bought  # Total cost calculation\nanswer = total_cost\nprint(answer)", "price_per_pound_fruit_salad = 4  # Price of fruit salad per pound\npounds_bought = 3 + 3/4  # Total pounds bought by Mona\ntotal_cost = price_per_pound_fruit_salad * pounds_bought  # Total cost calculation\nanswer = round(total_cost, 2)  # Format the answer to two decimal places\nprint(answer)", "# Define the price per pound of fruit salad\nprice_per_pound_fruit_salad = 4  # Price of fruit salad per pound\n\n# Define the total pounds bought by Mona\npounds_bought = 3 + 3/4  # Total pounds bought by Mona\n\n# Calculate the total cost\ntotal_cost = price_per_pound_fruit_salad * pounds_bought  # Total cost calculation\n\n# Store the result in the answer variable\nanswer = total_cost  # No need to round since we want the exact total cost\n\n# Print the answer\nprint(answer)", "price_per_pound_fruit_salad = 4  # Price of fruit salad per pound\npounds_bought = 3 + 3/4  # Total pounds bought by Mona\ntotal_cost = price_per_pound_fruit_salad * pounds_bought  # Total cost calculation\nanswer = f\"${total_cost:.2f}\"  # Format the output to two decimal places\nprint(answer)"
], "prediction": [15.0, 15.0, 15.0, "$15.00"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Idaho crop prices per cwt\" and then answer a question.\n\nCrop | 2004 | 2005\nCanola | $11 | $10\nTimothy seed | $7 | $7\nApples | $12 | $18\nPeas | $7 | $6\nPotatoes | $4 | $6", "question": "Read the following table regarding \"Idaho crop prices per cwt\" and then write Python code to answer a question.\n\nCrop | 2004 | 2005\nCanola | $11 | $10\nTimothy seed | $7 | $7\nApples | $12 | $18\nPeas | $7 | $6\nPotatoes | $4 | $6\n\nAn Idaho farmer has been monitoring crop prices over time. Per cwt, how much did Timothy seed cost in 2005?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Price of Timothy seed in 2005\nprice_timothy_seed_2005 = 7  # from the table\nanswer = price_timothy_seed_2005\nprint(answer)", "# Price of Timothy seed in 2005 based on the provided crop prices table\nprice_timothy_seed_2005 = 7  # dollars per cwt\nanswer = price_timothy_seed_2005\nprint(answer)", "# Define the crop prices for the years 2004 and 2005 in a dictionary\ncrop_prices = {\n    'Canola': {2004: 11, 2005: 10},\n    'Timothy seed': {2004: 7, 2005: 7},\n    'Apples': {2004: 12, 2005: 18},\n    'Peas': {2004: 7, 2005: 6},\n    'Potatoes': {2004: 4, 2005: 6}\n}\n\n# Get the price of Timothy seed in 2005\nprice_timothy_seed_2005 = crop_prices['Timothy seed'][2005]\nanswer = price_timothy_seed_2005\nprint(answer)", "crop_prices = {\n    'Canola': {2004: 11, 2005: 10},\n    'Timothy seed': {2004: 7, 2005: 7},\n    'Apples': {2004: 12, 2005: 18},\n    'Peas': {2004: 7, 2005: 6},\n    'Potatoes': {2004: 4, 2005: 6}\n}\n\nprice_timothy_seed_2005 = crop_prices['Timothy seed'][2005]\nanswer = f\"${price_timothy_seed_2005}\"\nprint(answer)"], "prediction": [7.0, 7.0, 7.0, "$7"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Vacation days taken by Erin\" and then answer a question.\n\nYear | Vacation days\n2017 | 26\n2018 | 34\n2019 | 26\n2020 | 34\n2021 | 28", "question": "Read the following table regarding \"Vacation days taken by Erin\" and then write Python code to answer a question.\n\nYear | Vacation days\n2017 | 26\n2018 | 34\n2019 | 26\n2020 | 34\n2021 | 28\n\nTo figure out how many vacation days she had left to use, Erin looked over her old calendars to figure out how many days of vacation she had taken each year. According to the table, what was the rate of change between 2017 and 2018?", "answer": "8", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nvacation_days_2017 = 26\nvacation_days_2018 = 34\n\n# Calculate the rate of change\nrate_of_change = vacation_days_2018 - vacation_days_2017\nanswer = rate_of_change\nprint(answer)", "vacation_days_2017 = 26\nvacation_days_2018 = 34\nrate_of_change = vacation_days_2018 - vacation_days_2017\nanswer = int(rate_of_change)  # Convert to integer for expected output format\nprint(answer)", "vacation_days_2017 = 26\nvacation_days_2018 = 34\nrate_of_change = vacation_days_2018 - vacation_days_2017\nanswer = rate_of_change  # The result is already an integer\nprint(answer)", "vacation_days_2017 = 26\nvacation_days_2018 = 34\nrate_of_change = vacation_days_2018 - vacation_days_2017\nanswer = int(rate_of_change)  # Convert the result to an integer\nprint(answer)"], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Going swimming last month\" and then answer a question.\n\nNumber of times | Frequency\n1 | 4\n2 | 8\n3 | 3\n4 | 16\n5 | 7", "question": "Read the following table regarding \"Going swimming last month\" and then write Python code to answer a question.\n\nNumber of times | Frequency\n1 | 4\n2 | 8\n3 | 3\n4 | 16\n5 | 7\n\nArlington will decide whether to extend its public pool's hours by looking at the number of times its residents visited the pool last month. How many people went swimming at least 2 times?", "answer": "34", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Frequency of swimming visits\nfrequency_data = {\n    1: 4,\n    2: 8,\n    3: 3,\n    4: 16,\n    5: 7\n}\n\n# Calculate the total number of people who went swimming at least 2 times\npeople_at_least_2_times = frequency_data[2] + frequency_data[3] + frequency_data[4] + frequency_data[5]\nanswer = people_at_least_2_times\nprint(answer)", "# Define the frequency data for the number of times people went swimming\nfrequency_data = {\n    1: 4,\n    2: 8,\n    3: 3,\n    4: 16,\n    5: 7\n}\n\n# Calculate the number of people who went swimming at least 2 times\npeople_at_least_2_times = frequency_data[2] + frequency_data[3] + frequency_data[4] + frequency_data[5]\n\n# Store the result in the variable 'answer'\nanswer = people_at_least_2_times\n\n# Output the answer\nprint(answer)", "frequency_data = {\n    1: 4,\n    2: 8,\n    3: 3,\n    4: 16,\n    5: 7\n}\n\n# Calculate the total number of people who went swimming at least 2 times\npeople_at_least_2_times = frequency_data[2] + frequency_data[3] + frequency_data[4] + frequency_data[5]\nanswer = people_at_least_2_times  # This will be an integer\nprint(answer)", "frequency_data = {\n    1: 4,\n    2: 8,\n    3: 3,\n    4: 16,\n    5: 7\n}\n\n# Calculate the number of people who went swimming at least 2 times\npeople_at_least_2_times = frequency_data[2] + frequency_data[3] + frequency_data[4] + frequency_data[5]\nanswer = people_at_least_2_times  # This will be an integer\nprint(answer)"
], "prediction": [34.0, 34.0, 34.0, 34.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Tractors made\" and then answer a question.\n\nMonth | Number of tractors\nJuly | 353\nAugust | 332\nSeptember | 375\nOctober | 357", "question": "Read the following table regarding \"Tractors made\" and then write Python code to answer a question.\n\nMonth | Number of tractors\nJuly | 353\nAugust | 332\nSeptember | 375\nOctober | 357\n\nA farm equipment company kept a record of the number of tractors made each month. In which month did the company make the most tractors? Choose from the the options: ['July', 'August', 'September', 'October']", "answer": "September", "ques_type": "multi_choice", "choices": ["July", "August", "September", "October"], "code": ["# Python code, return answer \ntractors_made = {\n    'July': 353,\n    'August': 332,\n    'September': 375,\n    'October': 357\n}\n# Find the month with the most tractors made\nmost_tractors_month = max(tractors_made, key=tractors_made.get)\nanswer = most_tractors_month\nprint(answer)", "# Store the number of tractors made each month in a dictionary\ntractors_made = {\n    'July': 353,\n    'August': 332,\n    'September': 375,\n    'October': 357\n}\n\n# Find the month with the maximum number of tractors made\nmost_tractors_month = max(tractors_made, key=tractors_made.get)\n\n# Store the result in the answer variable\nanswer = most_tractors_month\n\n# Print the answer\nprint(answer)", "tractors_made = {\n    'July': 353,\n    'August': 332,\n    'September': 375,\n    'October': 357\n}\n\n# Find the month with the most tractors made\nmost_tractors_month = max(tractors_made, key=tractors_made.get)\nanswer = most_tractors_month\n\nprint(answer)", "# Define the number of tractors made each month in a dictionary\ntractors_made = {\n    'July': 353,\n    'August': 332,\n    'September': 375,\n    'October': 357\n}\n\n# Find the month with the most tractors made\nmost_tractors_month = max(tractors_made, key=tractors_made.get)\n\n# Store the result in the variable 'answer'\nanswer = most_tractors_month\n\n# Output the answer\nprint(answer)"], "prediction": ["September", "September", "September", "September"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Final exam scores\" and then answer a question.\n\nStem | Leaf \n1 | 5\n2 | 2\n3 | 9\n4 | \n5 | 2\n6 | 4\n7 | 1, 6\n8 | 7\n9 | 0", "question": "Read the following table regarding \"Final exam scores\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 5\n2 | 2\n3 | 9\n4 | \n5 | 2\n6 | 4\n7 | 1, 6\n8 | 7\n9 | 0\n\nMrs. Freeman kept track of her students' scores on last year's final exam. What is the highest score?", "answer": "90", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The highest score corresponds to the largest value in the stem-and-leaf display.\nhighest_score = 90  # From the stem \"9 | 0\", the value is 90.\nanswer = highest_score\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [5]), (2, [2]), (3, [9]), (4, []), (5, [2]), (6, [4]), (7, [1, 6]), (8, [7]), (9, [0])]  \n\n# Initialize variable to track the highest score  \nhighest_score = 0  \n\n# Iterate through the stem and leaf data structure to find the highest score  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        score = stem * 10 + leaf  \n        if score > highest_score:  \n            highest_score = score  \n\n# Check for the highest possible score from the stem \"9\"\nhighest_score = max(highest_score, 90)  # Since stem \"9\" corresponds to the highest score of 90\n\nanswer = highest_score  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [5]), (2, [2]), (3, [9]), (4, []), (5, [2]), (6, [4]), (7, [1, 6]), (8, [7]), (9, [0])]  \n\n# Initialize variable to hold the highest score  \nhighest_score = 0  \n\n# Iterate through the stem and leaf data structure to find the highest score  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        score = stem * 10 + leaf  \n        if score > highest_score:  \n            highest_score = score  \n\n# Since the stem \"9\" corresponds to the highest score of 90, we check if it's included  \nif 90 > highest_score:\n    highest_score = 90\n\nanswer = highest_score  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [5]), (2, [2]), (3, [9]), (4, []), (5, [2]), (6, [4]), (7, [1, 6]), (8, [7]), (9, [0])]  \n\n# Initialize variable for the highest score  \nhighest_score = 0  \n\n# Iterate through the stem and leaf data structure to find the highest score  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        score = stem * 10 + leaf  \n        if score > highest_score:  \n            highest_score = score  \n\nanswer = highest_score  \nprint(answer)"
], "prediction": [90.0, 90.0, 90.0, 90.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Broken lights per string\" and then answer a question.\n\nStem | Leaf \n1 | 4, 8, 8\n2 | 8\n3 | 2, 4, 5\n4 | 1, 3, 7\n5 | 3, 7, 9\n6 | 9\n7 | 5, 6", "question": "Read the following table regarding \"Broken lights per string\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 4, 8, 8\n2 | 8\n3 | 2, 4, 5\n4 | 1, 3, 7\n5 | 3, 7, 9\n6 | 9\n7 | 5, 6\n\nWhile hanging Christmas lights for neighbors, Paul counted the number of broken lights on each string. How many strings had at least 10 broken lights but less than 20 broken lights?", "answer": "3", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Construct the list of broken lights from the stem-and-leaf display\nbroken_lights = [14, 18, 18, 28, 32, 34, 35, 41, 43, 47, 53, 57, 59, 69, 75, 76]\n\n# Count the number of strings with at least 10 but less than 20 broken lights\ncount_at_least_10_less_than_20 = sum(1 for lights in broken_lights if 10 <= lights < 20)\n\nanswer = count_at_least_10_less_than_20\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(1, [4, 8, 8]), (2, [8]), (3, [2, 4, 5]), \n                 (4, [1, 3, 7]), (5, [3, 7, 9]), (6, [9]), \n                 (7, [5, 6])]\n\n# Initialize counter for strings with at least 10 broken lights but less than 20 broken lights\ncount_at_least_10_less_than_20 = 0\n\n# Iterate through the stem and leaf data structure and count relevant strings\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        broken_lights = stem * 10 + leaf\n        if 10 <= broken_lights < 20:\n            count_at_least_10_less_than_20 += 1\n\nanswer = count_at_least_10_less_than_20\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [4, 8, 8]), (2, [8]), (3, [2, 4, 5]), \n                 (4, [1, 3, 7]), (5, [3, 7, 9]), (6, [9]), \n                 (7, [5, 6])]  \n  \n# Initialize counter for strings with at least 10 broken lights but less than 20 broken lights  \ncount_at_least_10_less_than_20 = 0  \n  \n# Iterate through the stem and leaf data structure and count relevant strings  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        broken_lights = stem * 10 + leaf  \n        if 10 <= broken_lights < 20:  \n            count_at_least_10_less_than_20 += 1  \n  \n# Store the result as an integer  \nanswer = int(count_at_least_10_less_than_20)  \nprint(answer)", "# Define the stem and leaf data structure  \nstem_and_leaf = [(1, [4, 8, 8]), (2, [8]), (3, [2, 4, 5]), \n                 (4, [1, 3, 7]), (5, [3, 7, 9]), (6, [9]), \n                 (7, [5, 6])]  \n\n# Initialize counter for strings with at least 10 broken lights but less than 20 broken lights  \ncount_at_least_10_less_than_20 = 0  \n\n# Iterate through the stem and leaf data structure and count relevant strings  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        broken_lights = stem * 10 + leaf  \n        if 10 <= broken_lights < 20:  \n            count_at_least_10_less_than_20 += 1  \n\n# Store the count in the answer variable  \nanswer = count_at_least_10_less_than_20  \nprint(answer)"
], "prediction": [3.0, 3.0, 3.0, 3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n17 | 0\n10 | 11\n6 | 7", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n17 | 0\n10 | 11\n6 | 7\n\nLook at this table. Is this relation a function? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# A relation is a function if each input (x) maps to exactly one output (y).\n# In this case, the x-values are 17, 10, and 6. All x-values are unique.\nis_function = True  # Since no x-values are repeated\nanswer = 'yes' if is_function else 'no'\nprint(answer)", "# Define the relation as a list of tuples\nrelation = [(17, 0), (10, 11), (6, 7)]\n\n# Extract x-values and check for duplicates\nx_values = [x for x, y in relation]\nis_function = len(x_values) == len(set(x_values))\n\n# Determine if the relation is a function\nanswer = 'yes' if is_function else 'no'\nprint(answer)", "# Define the relation as a list of tuples\nrelation = [(17, 0), (10, 11), (6, 7)]\n\n# Extract x-values from the relation\nx_values = [x for x, y in relation]\n\n# Check if the relation is a function\nis_function = len(x_values) == len(set(x_values))\n\n# Assign the answer based on whether it is a function\nanswer = 'yes' if is_function else 'no'\n\n# Output the answer\nprint(answer)", "# Define the relation as a list of tuples\nrelation = [(17, 0), (10, 11), (6, 7)]\n\n# Extract x-values from the relation\nx_values = [x for x, y in relation]\n\n# Check for duplicates in x-values\nis_function = len(x_values) == len(set(x_values))\n\n# Assign the answer based on the uniqueness of x-values\nanswer = 'yes' if is_function else 'no'\nprint(answer)"
], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nalmonds | $7.23 per lb\nhazelnuts | $10.29 per lb\npecans | $4.77 per lb\npeanuts | $2.41 per lb", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nalmonds | $7.23 per lb\nhazelnuts | $10.29 per lb\npecans | $4.77 per lb\npeanuts | $2.41 per lb\n\nWhat is the total cost for 5 pounds of hazelnuts?", "answer": "51.45", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_hazelnuts = 10.29 \npounds_bought = 5 \ntotal_cost = price_per_pound_hazelnuts * pounds_bought\nanswer = total_cost\nprint(answer)", "# Define the price per pound of hazelnuts and the amount bought\nprice_per_pound_hazelnuts = 10.29 \npounds_bought = 5 \n\n# Calculate the total cost\ntotal_cost = price_per_pound_hazelnuts * pounds_bought\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the price per pound of hazelnuts\nprice_per_pound_hazelnuts = 10.29\n\n# Define the number of pounds bought\npounds_bought = 5\n\n# Calculate the total cost for the hazelnuts\ntotal_cost = price_per_pound_hazelnuts * pounds_bought\n\n# Store the result in the answer variable\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the price per pound of hazelnuts\nprice_per_pound_hazelnuts = 10.29\n\n# Define the number of pounds bought\npounds_bought = 5\n\n# Calculate the total cost\ntotal_cost = price_per_pound_hazelnuts * pounds_bought\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)"], "prediction": [51.45, 51.45, 51.45, 51.45], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Vote breakdown\" and then answer a question.\n\nGrade | Number of votes\nSixth grade | 810\nSeventh grade | 780\nEighth grade | 200", "question": "Read the following table regarding \"Vote breakdown\" and then write Python code to answer a question.\n\nGrade | Number of votes\nSixth grade | 810\nSeventh grade | 780\nEighth grade | 200\n\nRobert, who just won the election for student body president at Lakeside Middle School, tallied how many votes he received from each grade. What fraction of his votes were from the eighth grade? Simplify your answer.", "answer": "20/179", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total votes received from all grades\ntotal_votes = 810 + 780 + 200\n# Votes received from eighth grade\neighth_grade_votes = 200\n# Calculate the fraction of votes from eighth grade\nfraction_eighth_grade = eighth_grade_votes / total_votes\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_fraction = Fraction(eighth_grade_votes, total_votes).limit_denominator()\nanswer = simplified_fraction\nprint(answer)", "# Votes from each grade\nsixth_grade_votes = 810\nseventh_grade_votes = 780\neighth_grade_votes = 200\n\n# Total votes\ntotal_votes = sixth_grade_votes + seventh_grade_votes + eighth_grade_votes\n\n# Calculate the fraction of votes from the eighth grade\nfrom fractions import Fraction\nsimplified_fraction = Fraction(eighth_grade_votes, total_votes).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = simplified_fraction\nprint(answer)", "sixth_grade_votes = 810\nseventh_grade_votes = 780\neighth_grade_votes = 200\ntotal_votes = sixth_grade_votes + seventh_grade_votes + eighth_grade_votes\n\nfrom fractions import Fraction\nsimplified_fraction = Fraction(eighth_grade_votes, total_votes).limit_denominator()\nanswer = simplified_fraction\nprint(answer)", "# Define the number of votes from each grade\nsixth_grade_votes = 810\nseventh_grade_votes = 780\neighth_grade_votes = 200\n\n# Calculate the total number of votes\ntotal_votes = sixth_grade_votes + seventh_grade_votes + eighth_grade_votes\n\n# Use the Fraction class to find the simplified fraction of votes from the eighth grade\nfrom fractions import Fraction\nsimplified_fraction = Fraction(eighth_grade_votes, total_votes).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = simplified_fraction\n\n# Print the answer\nprint(answer)"
], "prediction": [0.11173, 0.11173, 0.11173, 0.11173], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Quiz show scores\" and then answer a question.\n\nName | Score\nMalik | 2\nDuncan | 2\nGrace | 6\nNate | 6\nIan | 2", "question": "Read the following table regarding \"Quiz show scores\" and then write Python code to answer a question.\n\nName | Score\nMalik | 2\nDuncan | 2\nGrace | 6\nNate | 6\nIan | 2\n\nThe players on a quiz show received the following scores. What is the mode of the numbers?", "answer": "2", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nfrom statistics import mode\n\n# Scores from the quiz show\nscores = [2, 2, 6, 6, 2]\n\n# Calculate the mode of the scores\nanswer = mode(scores)\nprint(answer)", "from statistics import mode\n\nscores = [2, 2, 6, 6, 2]\nanswer = int(mode(scores))  # Convert the mode to an integer\nprint(answer)", "from statistics import mode\n\nscores = [2, 2, 6, 6, 2]\nanswer = mode(scores)  # Get the mode directly\nprint(answer)", "from statistics import mode\n\nscores = [2, 2, 6, 6, 2]\nanswer = float(mode(scores))  # Store the mode as a float\nprint(answer)"], "prediction": [2.0, 2.0, 2.0, 2.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Phone calls received\" and then answer a question.\n\nDay | Number of calls\nMonday | 454\nTuesday | 442\nWednesday | 452\nThursday | 425", "question": "Read the following table regarding \"Phone calls received\" and then write Python code to answer a question.\n\nDay | Number of calls\nMonday | 454\nTuesday | 442\nWednesday | 452\nThursday | 425\n\nA technical support line tracked how many calls it received each day. On which day did the support line receive the fewest calls? Choose from the the options: ['Monday', 'Tuesday', 'Wednesday', 'Thursday']", "answer": "Thursday", "ques_type": "multi_choice", "choices": ["Monday", "Tuesday", "Wednesday", "Thursday"], "code": [
  "# Python code, return answer \ncalls_received = {\n    'Monday': 454,\n    'Tuesday': 442,\n    'Wednesday': 452,\n    'Thursday': 425\n}\n# Find the day with the fewest calls\nfewest_calls_day = min(calls_received, key=calls_received.get)\nanswer = fewest_calls_day\nprint(answer)", "# Store the number of calls received each day in a dictionary\ncalls_received = {\n    'Monday': 454,\n    'Tuesday': 442,\n    'Wednesday': 452,\n    'Thursday': 425\n}\n\n# Find the day with the fewest calls\nfewest_calls_day = min(calls_received, key=calls_received.get)\n\n# Store the result in the variable 'answer'\nanswer = fewest_calls_day\n\n# Output the answer\nprint(answer)", "# Store the number of calls received each day in a dictionary\ncalls_received = {\n    'Monday': 454,\n    'Tuesday': 442,\n    'Wednesday': 452,\n    'Thursday': 425\n}\n\n# Find the day with the fewest calls received\nfewest_calls_day = min(calls_received, key=calls_received.get)\nanswer = fewest_calls_day\n\nprint(answer)", "calls_received = {\n    'Monday': 454,\n    'Tuesday': 442,\n    'Wednesday': 452,\n    'Thursday': 425\n}\n\nfewest_calls_day = min(calls_received, key=calls_received.get)\nanswer = f\"The day with the fewest calls is {fewest_calls_day}.\"\nprint(answer)"
], "prediction": ["Thursday", "Thursday", "Thursday", "The day with the fewest calls is Thursday."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Trips to an amusement park last year\" and then answer a question.\n\nNumber of trips | Frequency\n1 | 6\n2 | 3\n3 | 9\n4 | 12", "question": "Read the following table regarding \"Trips to an amusement park last year\" and then write Python code to answer a question.\n\nNumber of trips | Frequency\n1 | 6\n2 | 3\n3 | 9\n4 | 12\n\nAmy surveyed people at the amusement park where she works and asked them how many times they visited last year. How many people went to an amusement park fewer than 2 times?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency data\nfrequency = {\n    1: 6,\n    2: 3,\n    3: 9,\n    4: 12\n}\n\n# Calculate the number of people who went to the park fewer than 2 times\n# Fewer than 2 times means only those who went 1 time\npeople_fewer_than_2_times = frequency[1]\nanswer = people_fewer_than_2_times\nprint(answer)", "frequency = {\n    1: 6,\n    2: 3,\n    3: 9,\n    4: 12\n}\n\n# Calculate the number of people who went to the amusement park fewer than 2 times\npeople_fewer_than_2_times = frequency[1]  # This is already an integer\nanswer = people_fewer_than_2_times  # Store the integer directly\nprint(answer)", "frequency = {\n    1: 6,\n    2: 3,\n    3: 9,\n    4: 12\n}\npeople_fewer_than_2_times = frequency[1]  # This is already an integer\nanswer = int(people_fewer_than_2_times)  # Ensure the result is an integer\nprint(answer)", "frequency = {\n    1: 6,\n    2: 3,\n    3: 9,\n    4: 12\n}\npeople_fewer_than_2_times = frequency[1]  # This is already an integer\nanswer = people_fewer_than_2_times  # No need to convert to int\nprint(answer)"], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Problems per test\" and then answer a question.\n\nStem | Leaf \n1 | 0, 3, 4, 4, 4, 6, 6, 9\n2 | 3, 5, 5\n3 | 4, 5, 7\n4 | 1, 2, 4, 5, 5, 5, 5, 8", "question": "Read the following table regarding \"Problems per test\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 0, 3, 4, 4, 4, 6, 6, 9\n2 | 3, 5, 5\n3 | 4, 5, 7\n4 | 1, 2, 4, 5, 5, 5, 5, 8\n\nEli counted the number of problems on each of his tests. What is the largest number of problems?", "answer": "48", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number of problems corresponds to the highest value in the stem-and-leaf display.\nlargest_problems_count = 48  # From the stem \"4 | 1, 2, 4, 5, 5, 5, 5, 8\", the highest value is 48.\nanswer = largest_problems_count\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [0, 3, 4, 4, 4, 6, 6, 9]), \n                 (2, [3, 5, 5]), \n                 (3, [4, 5, 7]), \n                 (4, [1, 2, 4, 5, 5, 5, 5, 8])]  \n\n# Initialize variable to track the largest number of problems  \nlargest_problems_count = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number of problems  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        problems_count = stem * 10 + leaf  \n        if problems_count > largest_problems_count:  \n            largest_problems_count = problems_count  \n\nanswer = largest_problems_count  \nprint(answer)", "stem_and_leaf = [\n    (1, [0, 3, 4, 4, 4, 6, 6, 9]), \n    (2, [3, 5, 5]), \n    (3, [4, 5, 7]), \n    (4, [1, 2, 4, 5, 5, 5, 5, 8])\n]\n\nlargest_problems_count = 0  \n\nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        problems_count = stem * 10 + leaf  \n        if problems_count > largest_problems_count:  \n            largest_problems_count = problems_count  \n\nanswer = largest_problems_count  # No need to convert to int, it's already an integer\nprint(answer)", "# Define the stem and leaf data structure as a list of tuples  \nstem_and_leaf = [\n    (1, [0, 3, 4, 4, 4, 6, 6, 9]), \n    (2, [3, 5, 5]), \n    (3, [4, 5, 7]), \n    (4, [1, 2, 4, 5, 5, 5, 5, 8])\n]\n\n# Initialize variable to track the largest number of problems\nlargest_problems_count = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number of problems\nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        problems_count = stem * 10 + leaf  \n        if problems_count > largest_problems_count:  \n            largest_problems_count = problems_count  \n\n# Store the result in 'answer'\nanswer = largest_problems_count  \nprint(answer)"
], "prediction": [48.0, 48.0, 48.0, 48.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$140 | 14,900 | 5,400\n$150 | 13,700 | 8,800\n$160 | 12,500 | 12,200\n$170 | 11,300 | 15,600\n$180 | 10,100 | 19,000", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$140 | 14,900 | 5,400\n$150 | 13,700 | 8,800\n$160 | 12,500 | 12,200\n$170 | 11,300 | 15,600\n$180 | 10,100 | 19,000\n\nLook at the table. Then answer the question. At a price of $160, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "shortage", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": ["# Python code, return answer \n# Quantity demanded and supplied at the price of $160\nquantity_demanded_at_160 = 12500\nquantity_supplied_at_160 = 12200\n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_160 < quantity_supplied_at_160:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "quantity_demanded_at_160 = 12500\nquantity_supplied_at_160 = 12200\n\nif quantity_demanded_at_160 > quantity_supplied_at_160:\n    answer = 'shortage'\nelse:\n    answer = 'surplus'\n\nprint(answer)", "quantity_demanded_at_160 = 12500\nquantity_supplied_at_160 = 12200\n\nif quantity_demanded_at_160 < quantity_supplied_at_160:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "quantity_demanded_at_160 = 12500\nquantity_supplied_at_160 = 12200\n\nif quantity_demanded_at_160 > quantity_supplied_at_160:\n    answer = 'shortage'\nelse:\n    answer = 'surplus'\n\nprint(answer)"], "prediction": ["shortage", "shortage", "shortage", "shortage"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Children's weights (lbs)\" and then answer a question.\n\nStem | Leaf \n1 | 2\n2 | 1, 4, 8, 9\n3 | 1, 1, 2, 2, 4\n4 | 6, 6, 8", "question": "Read the following table regarding \"Children's weights (lbs)\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 2\n2 | 1, 4, 8, 9\n3 | 1, 1, 2, 2, 4\n4 | 6, 6, 8\n\nAs part of a statistics project, a math class weighed all the children who were willing to participate. How many children weighed at least 19 pounds but less than 35 pounds?", "answer": "9", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Listing the weights based on the stem-and-leaf display\nweights = [12, 21, 24, 28, 29, 31, 31, 32, 32, 34, 36, 36, 38]\n\n# Counting the number of children weighing at least 19 pounds but less than 35 pounds\ncount_children = sum(1 for weight in weights if 19 <= weight < 35)\nanswer = count_children\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(1, [2]), (2, [1, 4, 8, 9]), (3, [1, 1, 2, 2, 4]), (4, [6, 6, 8])]\n\n# Initialize counter for children weighing at least 19 pounds but less than 35 pounds\ncount_children = 0\n\n# Iterate through the stem and leaf data structure and count relevant weights\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        weight = stem * 10 + leaf\n        if 19 <= weight < 35:\n            count_children += 1\n\nanswer = count_children\nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [(1, [2]), (2, [1, 4, 8, 9]), (3, [1, 1, 2, 2, 4]), (4, [6, 6, 8])]\n\n# Initialize counter for children weighing at least 19 pounds but less than 35 pounds\ncount_children = 0\n\n# Iterate through the stem and leaf data structure and count relevant children\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        weight = stem * 10 + leaf\n        if 19 <= weight < 35:\n            count_children += 1\n\n# Store the result as an integer\nanswer = int(count_children)\nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [(1, [2]), (2, [1, 4, 8, 9]), (3, [1, 1, 2, 2, 4]), (4, [6, 6, 8])]\n\n# Initialize counter for children weighing at least 19 pounds but less than 35 pounds\ncount_children = 0\n\n# Iterate through the stem and leaf data structure and count relevant weights\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        weight = stem * 10 + leaf\n        if 19 <= weight < 35:\n            count_children += 1\n\n# Store the result as an integer\nanswer = count_children\nprint(answer)"
], "prediction": [9.0, 9.0, 9.0, 9.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Making finger puppets\" and then answer a question.\n\nFinger puppets made | Frequency\n0 | 5\n1 | 10\n2 | 0\n3 | 13\n4 | 16\n5 | 18\n6 | 1", "question": "Read the following table regarding \"Making finger puppets\" and then write Python code to answer a question.\n\nFinger puppets made | Frequency\n0 | 5\n1 | 10\n2 | 0\n3 | 13\n4 | 16\n5 | 18\n6 | 1\n\nThe Fairview Art Museum recorded how many finger puppets the children made at last Sunday's art workshop. How many children made more than 5 finger puppets?", "answer": "1", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of children making different numbers of finger puppets\nfrequency = {\n    0: 5,\n    1: 10,\n    2: 0,\n    3: 13,\n    4: 16,\n    5: 18,\n    6: 1\n}\n# Number of children who made more than 5 finger puppets\nchildren_more_than_5 = frequency[6]  # Only 6 puppets made by 1 child\nanswer = children_more_than_5\nprint(answer)", "frequency = {\n    0: 5,\n    1: 10,\n    2: 0,\n    3: 13,\n    4: 16,\n    5: 18,\n    6: 1\n}\n\nchildren_more_than_5 = frequency[6]  # Only 6 puppets made by 1 child\nanswer = children_more_than_5  # This is already an integer\nprint(answer)", "frequency = {\n    0: 5,\n    1: 10,\n    2: 0,\n    3: 13,\n    4: 16,\n    5: 18,\n    6: 1\n}\n\nchildren_more_than_5 = frequency[6]  # Only 6 puppets made by 1 child\nanswer = children_more_than_5  # This is already an integer\nprint(answer)", "# Define the frequency of finger puppets made by children\nfrequency = {\n    0: 5,\n    1: 10,\n    2: 0,\n    3: 13,\n    4: 16,\n    5: 18,\n    6: 1\n}\n\n# Count the number of children who made more than 5 finger puppets\nchildren_more_than_5 = frequency[6]  # Only 6 puppets made by 1 child\nanswer = children_more_than_5  # This is already an integer\n\nprint(answer)"], "prediction": [1.0, 1.0, 1.0, 1.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nsoftball glove | $21.00\nswimsuit | $15.00\nbowling ball | $40.00\nbicycle helmet | $16.00\nbicycle | $43.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nsoftball glove | $21.00\nswimsuit | $15.00\nbowling ball | $40.00\nbicycle helmet | $16.00\nbicycle | $43.00\n\nSue has $54.00. Does she have enough to buy a bicycle and a swimsuit? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \ncost_bicycle = 43.00 \ncost_swimsuit = 15.00 \ntotal_cost = cost_bicycle + cost_swimsuit\n# Check if Sue has enough money\nif total_cost <= 54.00:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "# Define the costs of the items\ncost_bicycle = 43.00 \ncost_swimsuit = 15.00 \n\n# Calculate the total cost\ntotal_cost = cost_bicycle + cost_swimsuit\n\n# Check if Sue has enough money\nsue_budget = 54.00\nanswer = 'yes' if total_cost <= sue_budget else 'no'\n\nprint(answer)", "cost_bicycle = 43.00 \ncost_swimsuit = 15.00 \ntotal_cost = cost_bicycle + cost_swimsuit\nsue_budget = 54.00\nanswer = 'yes' if total_cost <= sue_budget else 'no'\nprint(answer)", "cost_bicycle = 43.00 \ncost_swimsuit = 15.00 \ntotal_cost = cost_bicycle + cost_swimsuit\nsue_budget = 54.00\nanswer = 'yes' if total_cost <= sue_budget else 'no'\nprint(answer)"], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Peanuts per bag of trail mix\" and then answer a question.\n\nStem | Leaf \n2 | 3, 4, 5, 6, 7, 9\n3 | 6\n4 | \n5 | 7, 8", "question": "Read the following table regarding \"Peanuts per bag of trail mix\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 3, 4, 5, 6, 7, 9\n3 | 6\n4 | \n5 | 7, 8\n\nMegan counted the number of peanuts in each bag of trail mix. What is the largest number of peanuts?", "answer": "58", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number of peanuts corresponds to the largest value in the stem-and-leaf display.\nlargest_peanuts = 58  # From the stem \"5 | 7, 8\", the value is 58 peanuts.\nanswer = largest_peanuts\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [3, 4, 5, 6, 7, 9]), (3, [6]), (4, []), (5, [7, 8])]  \n\n# Initialize variable to store the largest number of peanuts  \nlargest_peanuts = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        peanuts = stem * 10 + leaf  \n        if peanuts > largest_peanuts:  \n            largest_peanuts = peanuts  \n\nanswer = largest_peanuts  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [3, 4, 5, 6, 7, 9]), (3, [6]), (4, []), (5, [7, 8])]  \n\n# Initialize variable to track the largest number of peanuts  \nlargest_peanuts = 0  \n\n# Iterate through the stem and leaf data structure  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        peanuts = stem * 10 + leaf  # Calculate the total peanuts  \n        if peanuts > largest_peanuts:  \n            largest_peanuts = peanuts  # Update largest peanuts if current is greater  \n\n# Check for the case where the stem has no leaves  \nif stem == 5:  \n    peanuts = stem * 10 + 8  # Check for the largest leaf in stem 5  \n    if peanuts > largest_peanuts:  \n        largest_peanuts = peanuts  \n\nanswer = largest_peanuts  \nprint(answer)", "# Define the stem and leaf data structure  \nstem_and_leaf = [(2, [3, 4, 5, 6, 7, 9]), (3, [6]), (4, []), (5, [7, 8])]  \n\n# Initialize variable to store the largest number of peanuts  \nlargest_peanuts = 0  \n\n# Iterate through the stem and leaf data structure  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        peanuts = stem * 10 + leaf  # Calculate the total peanuts  \n        if peanuts > largest_peanuts:  \n            largest_peanuts = peanuts  # Update largest peanuts if current is greater  \n\nanswer = largest_peanuts  \nprint(answer)"
], "prediction": [58.0, 58.0, 58.0, 58.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$20 | 21,900 | 6,400\n$180 | 21,000 | 6,700\n$340 | 20,100 | 7,000\n$500 | 19,200 | 7,300\n$660 | 18,300 | 7,600", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$20 | 21,900 | 6,400\n$180 | 21,000 | 6,700\n$340 | 20,100 | 7,000\n$500 | 19,200 | 7,300\n$660 | 18,300 | 7,600\n\nLook at the table. Then answer the question. At a price of $20, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "shortage", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": ["# Python code, return answer \n# Given values from the table\nquantity_demanded = 21900\nquantity_supplied = 6400\n\n# Determine if there is a shortage or surplus\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelse:\n    answer = 'surplus'\n\nprint(answer)", "# Define the quantities demanded and supplied at a price of $20\nquantity_demanded = 21900\nquantity_supplied = 6400\n\n# Determine if there is a shortage, surplus, or equilibrium\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'equilibrium'\n\nprint(answer)", "# Define the quantities for price $20\nquantity_demanded = 21900\nquantity_supplied = 6400\n\n# Determine if there is a shortage or surplus\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'equilibrium'\n\nprint(answer)", "# Define the quantity demanded and supplied at the price of $20\nquantity_demanded = 21900\nquantity_supplied = 6400\n\n# Determine if there is a shortage or surplus\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'equilibrium'\n\nprint(answer)"], "prediction": ["shortage", "shortage", "shortage", "shortage"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Movies checked out\" and then answer a question.\n\nDay | Number of movies\nSunday | 96\nMonday | 93\nTuesday | 95\nWednesday | 92\nThursday | 94", "question": "Read the following table regarding \"Movies checked out\" and then write Python code to answer a question.\n\nDay | Number of movies\nSunday | 96\nMonday | 93\nTuesday | 95\nWednesday | 92\nThursday | 94\n\nA video store clerk looked up the number of movies checked out each day. What is the mean of the numbers?", "answer": "94", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of movies checked out each day\nmovies_checked_out = [96, 93, 95, 92, 94]\n# Calculate the mean\nmean_movies = sum(movies_checked_out) / len(movies_checked_out)\nanswer = mean_movies\nprint(answer)", "movies_checked_out = [96, 93, 95, 92, 94]  \nmean_movies = sum(movies_checked_out) / len(movies_checked_out)  \nanswer = mean_movies  \nprint(answer)  # This will output: 94.0", "movies_checked_out = [96, 93, 95, 92, 94]  \nmean_movies = sum(movies_checked_out) / len(movies_checked_out)  \nanswer = round(mean_movies)  # Rounding to the nearest whole number\nprint(answer)  # This will output: 94", "movies_checked_out = [96, 93, 95, 92, 94]  \nmean_movies = sum(movies_checked_out) / len(movies_checked_out)  \nanswer = int(round(mean_movies))  # Convert to integer after rounding\nprint(answer)  # This will output: 94"], "prediction": [94.0, 94.0, 94.0, 94.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Band tour gas costs\" and then answer a question.\n\nBand member | Contribution ($)\nVince | 480\nDevon | 690\nTara | 100", "question": "Read the following table regarding \"Band tour gas costs\" and then write Python code to answer a question.\n\nBand member | Contribution ($)\nVince | 480\nDevon | 690\nTara | 100\n\nA band from Arlington went on tour over the summer, and each member chipped in for the cost of gas. What fraction of the gas money came from Devon? Simplify your answer.", "answer": "69/127", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total contributions from all band members\ntotal_contributions = 480 + 690 + 100\n# Contribution from Devon\ndevon_contribution = 690\n# Calculate the fraction of the contribution from Devon\nfraction_devon = devon_contribution / total_contributions\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_fraction = Fraction(devon_contribution, total_contributions).limit_denominator()\nanswer = simplified_fraction\nprint(answer)", "# Contributions from each band member\nvince_contribution = 480\ndevon_contribution = 690\ntara_contribution = 100\n\n# Calculate total contributions\ntotal_contributions = vince_contribution + devon_contribution + tara_contribution\n\n# Calculate the fraction of the gas money that came from Devon\nfrom fractions import Fraction\nfraction_devon = Fraction(devon_contribution, total_contributions).limit_denominator()\n\n# Store the simplified fraction as the answer\nanswer = fraction_devon\nprint(answer)", "# Define contributions from each band member  \nvince_contribution = 480  \ndevon_contribution = 690  \ntara_contribution = 100  \n\n# Calculate total contributions  \ntotal_contributions = vince_contribution + devon_contribution + tara_contribution  \n\n# Calculate the fraction of the gas money that came from Devon  \nfrom fractions import Fraction  \nfraction_devon = Fraction(devon_contribution, total_contributions).limit_denominator()  \n\n# Store the simplified fraction in the answer variable  \nanswer = fraction_devon  \nprint(answer)", "# Contributions from each band member\nvince_contribution = 480  \ndevon_contribution = 690  \ntara_contribution = 100  \n\n# Total contributions\ntotal_contributions = vince_contribution + devon_contribution + tara_contribution  \n\n# Calculate the fraction of the gas money that came from Devon\nfrom fractions import Fraction  \nfraction_devon = Fraction(devon_contribution, total_contributions).limit_denominator()  \n\n# Store the result in the answer variable\nanswer = fraction_devon  \nprint(answer)  # This will output the fraction in simplified form"
], "prediction": [0.54331, 0.54331, 0.54331, 0.54331], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Web pages visited\" and then answer a question.\n\nPerson | Number of Web pages\nNellie | 5\nLouis | 8\nGrayson | 9\nZack | 8\nJasmine | 4\nPerry | 8", "question": "Read the following table regarding \"Web pages visited\" and then write Python code to answer a question.\n\nPerson | Number of Web pages\nNellie | 5\nLouis | 8\nGrayson | 9\nZack | 8\nJasmine | 4\nPerry | 8\n\nSeveral people compared how many Web pages they had visited. What is the mean of the numbers?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of Web pages visited by each person\nweb_pages_visited = [5, 8, 9, 8, 4, 8]\n\n# Calculate the mean\nmean_web_pages = sum(web_pages_visited) / len(web_pages_visited)\nanswer = mean_web_pages\nprint(answer)", "web_pages_visited = [5, 8, 9, 8, 4, 8]\nmean_web_pages = sum(web_pages_visited) / len(web_pages_visited)\nanswer = round(mean_web_pages, 2)  # Rounding to two decimal places for clarity\nprint(answer)", "web_pages_visited = [5, 8, 9, 8, 4, 8]\nmean_web_pages = sum(web_pages_visited) / len(web_pages_visited)\nanswer = round(mean_web_pages, 2)  # Rounding to two decimal places for clarity\nprint(answer)", "web_pages_visited = [5, 8, 9, 8, 4, 8]  \nmean_web_pages = sum(web_pages_visited) / len(web_pages_visited)  \nanswer = mean_web_pages  # Store the mean directly in the answer variable  \nprint(answer)"], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Hours of babysitting\" and then answer a question.\n\nMonth | Hours\nDecember | 23\nJanuary | 22\nFebruary | 29\nMarch | 26", "question": "Read the following table regarding \"Hours of babysitting\" and then write Python code to answer a question.\n\nMonth | Hours\nDecember | 23\nJanuary | 22\nFebruary | 29\nMarch | 26\n\nHelen looked at her calendar to figure out how much time she spent babysitting each month. In which month did Helen babysit the most? Choose from the the options: ['December', 'January', 'February', 'March']", "answer": "February", "ques_type": "multi_choice", "choices": ["December", "January", "February", "March"], "code": ["# Python code, return answer \nbabysitting_hours = {\n    'December': 23,\n    'January': 22,\n    'February': 29,\n    'March': 26\n}\n# Find the month with the most babysitting hours\nmax_hours_month = max(babysitting_hours, key=babysitting_hours.get)\nanswer = max_hours_month\nprint(answer)", "babysitting_hours = {\n    'December': 23,\n    'January': 22,\n    'February': 29,\n    'March': 26\n}\nanswer = max(babysitting_hours, key=babysitting_hours.get)\nprint(answer)", "babysitting_hours = {\n    'December': 23,\n    'January': 22,\n    'February': 29,\n    'March': 26\n}\nanswer = max(babysitting_hours, key=babysitting_hours.get)\nprint(answer)", "# Define the babysitting hours for each month\nbabysitting_hours = {\n    'December': 23,\n    'January': 22,\n    'February': 29,\n    'March': 26\n}\n\n# Find the month with the maximum babysitting hours\nanswer = max(babysitting_hours, key=babysitting_hours.get)\n\n# Print the answer\nprint(answer)"], "prediction": ["February", "February", "February", "February"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npepperoni pizza | $13\nbaked ziti | $14\npasta with pesto sauce | $13\nbaked chicken | $20", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npepperoni pizza | $13\nbaked ziti | $14\npasta with pesto sauce | $13\nbaked chicken | $20\n\nHow much more does baked chicken cost than a pepperoni pizza?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_baked_chicken = 20 \ncost_pepperoni_pizza = 13 \n# Calculate the difference in cost\ndifference_cost = cost_baked_chicken - cost_pepperoni_pizza\nanswer = difference_cost\nprint(answer)", "cost_baked_chicken = 20 \ncost_pepperoni_pizza = 13 \ndifference_cost = cost_baked_chicken - cost_pepperoni_pizza\nanswer = int(difference_cost)  # Convert to integer for whole number output\nprint(answer)", "cost_baked_chicken = 20 \ncost_pepperoni_pizza = 13 \ndifference_cost = cost_baked_chicken - cost_pepperoni_pizza\nanswer = difference_cost  # No need to convert to int since it's already a whole number\nprint(answer)", "cost_baked_chicken = 20 \ncost_pepperoni_pizza = 13 \ndifference_cost = cost_baked_chicken - cost_pepperoni_pizza\nanswer = int(difference_cost)  # Convert to int to ensure the result is a whole number\nprint(answer)"], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$640 | 21,600 | 2,000\n$690 | 20,200 | 5,700\n$740 | 18,800 | 9,400\n$790 | 17,400 | 13,100\n$840 | 16,000 | 16,800", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$640 | 21,600 | 2,000\n$690 | 20,200 | 5,700\n$740 | 18,800 | 9,400\n$790 | 17,400 | 13,100\n$840 | 16,000 | 16,800\n\nLook at the table. Then answer the question. At a price of $840, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "surplus", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": ["# Python code, return answer \n# Quantity demanded and supplied at the price of $840\nquantity_demanded = 16000\nquantity_supplied = 16800\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the price and corresponding quantity demanded and supplied\nprice = 840\nquantity_demanded = 16000  # From the table\nquantity_supplied = 16800   # From the table\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the price and the corresponding quantities from the table\nprice = 840\nquantity_demanded = 16000  # From the table\nquantity_supplied = 16800   # From the table\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the price and corresponding quantities from the table\nprice = 840\nquantity_demanded = 16000  # From the table\nquantity_supplied = 16800   # From the table\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)"], "prediction": ["surplus", "surplus", "surplus", "surplus"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Ages\" and then answer a question.\n\nStem | Leaf \n3 | 3, 4, 4\n4 | 2, 5\n5 | \n6 | 4, 4\n7 | 2\n8 | 2", "question": "Read the following table regarding \"Ages\" and then write Python code to answer a question.\n\nStem | Leaf \n3 | 3, 4, 4\n4 | 2, 5\n5 | \n6 | 4, 4\n7 | 2\n8 | 2\n\nAt their family reunion, the Stanley family recorded everyone's age. How many people are exactly 33 years old?", "answer": "1", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# From the stem-and-leaf display, the stem '3' indicates the tens place, and the leaf '3' indicates the ones place.\n# Therefore, the age '33' corresponds to the stem '3' and leaf '3'.\nnumber_of_people_33_years_old = 1  # There is one leaf '3' in the stem '3'.\nanswer = number_of_people_33_years_old\nprint(answer)", "# There is one leaf '3' in the stem '3' which corresponds to 33 years old.\nnumber_of_people_33_years_old = 1  \nanswer = number_of_people_33_years_old  \nprint(answer)  # This will output 1 as an integer", "# Define the number of people who are exactly 33 years old\nnumber_of_people_33_years_old = 1  \nanswer = int(number_of_people_33_years_old)  # Ensure the answer is an integer\nprint(answer)  # This will output 1 as an integer", "# The number of people exactly 33 years old is derived from the stem and leaf data.\n# In the stem and leaf representation, 3 represents the tens place and 3, 4, 4 represents the units place.\n# Therefore, the ages represented are 33, 34, and 34.\n# Hence, there is exactly 1 person who is 33 years old.\n\nnumber_of_people_33_years_old = 1\nanswer = number_of_people_33_years_old  # Store as an integer\nprint(answer)  # This will output 1 as an integer"], "prediction": [1.0, 1.0, 1.0, 1.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Hotel shuttle bus schedule\" and then answer a question.\n\nairport | 9:45 A.M. | 10:00 A.M. | 10:30 A.M. | 10:45 A.M. | 11:00 A.M.\nboat docks | 10:30 A.M. | 10:45 A.M. | 11:15 A.M. | 11:30 A.M. | 11:45 A.M.\npizza place | 11:15 A.M. | 11:30 A.M. | 12:00 P.M. | 12:15 P.M. | 12:30 P.M.\namusement park | 12:00 P.M. | 12:15 P.M. | 12:45 P.M. | 1:00 P.M. | 1:15 P.M.\ncollege campus | 12:15 P.M. | 12:30 P.M. | 1:00 P.M. | 1:15 P.M. | 1:30 P.M.\nfootball stadium | 12:30 P.M. | 12:45 P.M. | 1:15 P.M. | 1:30 P.M. | 1:45 P.M.\nsoftball field | 1:00 P.M. | 1:15 P.M. | 1:45 P.M. | 2:00 P.M. | 2:15 P.M.\ntrain station | 1:30 P.M. | 1:45 P.M. | 2:15 P.M. | 2:30 P.M. | 2:45 P.M.\nbus station | 2:30 P.M. | 2:45 P.M. | 3:15 P.M. | 3:30 P.M. | 3:45 P.M.", "question": "Read the following table regarding \"Hotel shuttle bus schedule\" and then write Python code to answer a question.\n\nairport | 9:45 A.M. | 10:00 A.M. | 10:30 A.M. | 10:45 A.M. | 11:00 A.M.\nboat docks | 10:30 A.M. | 10:45 A.M. | 11:15 A.M. | 11:30 A.M. | 11:45 A.M.\npizza place | 11:15 A.M. | 11:30 A.M. | 12:00 P.M. | 12:15 P.M. | 12:30 P.M.\namusement park | 12:00 P.M. | 12:15 P.M. | 12:45 P.M. | 1:00 P.M. | 1:15 P.M.\ncollege campus | 12:15 P.M. | 12:30 P.M. | 1:00 P.M. | 1:15 P.M. | 1:30 P.M.\nfootball stadium | 12:30 P.M. | 12:45 P.M. | 1:15 P.M. | 1:30 P.M. | 1:45 P.M.\nsoftball field | 1:00 P.M. | 1:15 P.M. | 1:45 P.M. | 2:00 P.M. | 2:15 P.M.\ntrain station | 1:30 P.M. | 1:45 P.M. | 2:15 P.M. | 2:30 P.M. | 2:45 P.M.\nbus station | 2:30 P.M. | 2:45 P.M. | 3:15 P.M. | 3:30 P.M. | 3:45 P.M.\n\nLook at the following schedule. How long does it take to get from the pizza place to the train station? Choose from the the options: ['2 hours and 15 minutes', '2 hours', '1 hour and 45 minutes', '1 hour and 30 minutes']", "answer": "2 hours and 15 minutes", "ques_type": "multi_choice", "choices": ["2 hours and 15 minutes", "2 hours", "1 hour and 45 minutes", "1 hour and 30 minutes"], "code": [
  "# Python code, return answer \n# Departure time from pizza place to train station\ndeparture_time_pizza_place = \"12:00 PM\"  # the last time listed at pizza place\narrival_time_train_station = \"1:30 PM\"    # first time listed at train station\n\nfrom datetime import datetime\n\n# Calculate the time difference\ndeparture = datetime.strptime(departure_time_pizza_place, \"%I:%M %p\")\narrival = datetime.strptime(arrival_time_train_station, \"%I:%M %p\")\ntime_difference = arrival - departure\n\n# Convert time difference to hours and minutes\nhours, remainder = divmod(time_difference.seconds, 3600)\nminutes = remainder // 60\n\nanswer = f\"{hours} hours and {minutes} minutes\"\nprint(answer)", "from datetime import datetime\n\n# Correct departure time from the pizza place\ndeparture_time_pizza_place = \"12:30 PM\"  # the last time listed at pizza place\narrival_time_train_station = \"1:30 PM\"    # first time listed at train station\n\n# Convert the times to datetime objects\ndeparture = datetime.strptime(departure_time_pizza_place, \"%I:%M %p\")\narrival = datetime.strptime(arrival_time_train_station, \"%I:%M %p\")\n\n# Calculate the time difference\ntime_difference = arrival - departure\n\n# Extract hours and minutes from the time difference\nhours, remainder = divmod(time_difference.seconds, 3600)\nminutes = remainder // 60\n\n# Format the answer\nanswer = f\"{hours} hours and {minutes} minutes\"\nprint(answer)", "from datetime import datetime\n\n# Correct departure time from the pizza place\ndeparture_time_pizza_place = \"12:30 PM\"  # the last time listed at pizza place\narrival_time_train_station = \"1:30 PM\"    # first time listed at train station\n\n# Convert string times to datetime objects\ndeparture = datetime.strptime(departure_time_pizza_place, \"%I:%M %p\")\narrival = datetime.strptime(arrival_time_train_station, \"%I:%M %p\")\n\n# Calculate the time difference\ntime_difference = arrival - departure\nhours, remainder = divmod(time_difference.seconds, 3600)\nminutes = remainder // 60\n\n# Format the answer\nanswer = f\"{hours} hours and {minutes} minutes\"\nprint(answer)", "from datetime import datetime\n\n# Correct departure time from the pizza place\ndeparture_time_pizza_place = \"12:15 PM\"  # Correct time listed at pizza place\narrival_time_train_station = \"1:30 PM\"    # First time listed at train station\n\n# Convert string times to datetime objects\ndeparture = datetime.strptime(departure_time_pizza_place, \"%I:%M %p\")\narrival = datetime.strptime(arrival_time_train_station, \"%I:%M %p\")\n\n# Calculate the time difference\ntime_difference = arrival - departure\n\n# Extract hours and minutes from the time difference\nhours, remainder = divmod(time_difference.seconds, 3600)\nminutes = remainder // 60\n\n# Format the answer\nanswer = f\"{hours} hours and {minutes} minutes\"\nprint(answer)"
], "prediction": ["1 hours and 30 minutes", "1 hours and 0 minutes", "1 hours and 0 minutes", "1 hours and 15 minutes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Pairs of shoes per store\" and then answer a question.\n\nStem | Leaf \n3 | 4, 6, 8\n4 | 0, 7, 8\n5 | 1, 5, 9\n6 | 6, 6\n7 | 1, 1, 5, 9\n8 | 0, 6, 7, 7\n9 | 0, 0", "question": "Read the following table regarding \"Pairs of shoes per store\" and then write Python code to answer a question.\n\nStem | Leaf \n3 | 4, 6, 8\n4 | 0, 7, 8\n5 | 1, 5, 9\n6 | 6, 6\n7 | 1, 1, 5, 9\n8 | 0, 6, 7, 7\n9 | 0, 0\n\nJaylen counted the number of pairs of shoes for sale at each of the shoe stores in the mall. What is the smallest number of pairs of shoes?", "answer": "34", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The smallest number of pairs of shoes corresponds to the smallest value in the stem-and-leaf display.\nsmallest_shoes = 34  # From the stem \"3 | 4\", the value is 34 pairs.\nanswer = smallest_shoes\nprint(answer)", "# Define the stem and leaf data structure as a list of tuples\nstem_and_leaf = [(3, [4, 6, 8]), (4, [0, 7, 8]), (5, [1, 5, 9]), (6, [6, 6]), (7, [1, 1, 5, 9]), (8, [0, 6, 7, 7]), (9, [0, 0])]\n\n# Initialize a variable to store the smallest number of pairs of shoes\nsmallest_shoes = float('inf')\n\n# Iterate through the stem and leaf data structure to find the smallest number of pairs\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        pairs_of_shoes = stem * 10 + leaf  # Calculate the number of pairs\n        if pairs_of_shoes < smallest_shoes:  # Update smallest_shoes if a smaller value is found\n            smallest_shoes = pairs_of_shoes\n\nanswer = smallest_shoes\nprint(answer)", "stem_and_leaf = [(3, [4, 6, 8]), (4, [0, 7, 8]), (5, [1, 5, 9]), (6, [6, 6]), (7, [1, 1, 5, 9]), (8, [0, 6, 7, 7]), (9, [0, 0])]\nsmallest_shoes = float('inf')\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        pairs_of_shoes = stem * 10 + leaf  # Calculate the number of pairs\n        if pairs_of_shoes < smallest_shoes:  # Update smallest_shoes if a smaller value is found\n            smallest_shoes = pairs_of_shoes\nanswer = int(smallest_shoes)  # Convert to integer\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(3, [4, 6, 8]), (4, [0, 7, 8]), (5, [1, 5, 9]), (6, [6, 6]), (7, [1, 1, 5, 9]), (8, [0, 6, 7, 7]), (9, [0, 0])]  \n\n# Initialize variable for the smallest number of pairs of shoes  \nsmallest_shoes = float('inf')  \n\n# Iterate through the stem and leaf data structure to find the smallest number of pairs of shoes  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        pairs_of_shoes = stem * 10 + leaf  # Calculate the number of pairs  \n        if pairs_of_shoes < smallest_shoes:  # Update smallest_shoes if a smaller value is found  \n            smallest_shoes = pairs_of_shoes  \n\nanswer = int(smallest_shoes)  # Convert to integer  \nprint(answer)"
], "prediction": [34.0, 34.0, 34.0, 34.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPattern A | add | 3 3 | 6 | 9 | 12\nPattern B | add | 30 30 | 60 | 90 | 120", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPattern A | add | 3 3 | 6 | 9 | 12\nPattern B | add | 30 30 | 60 | 90 | 120\n\nCompare pattern A to pattern B. Which statement is true?  Choose from the the options: ['Each term in pattern B is 27 more than the corresponding term in pattern A.', 'Each term in pattern B is 10 times the corresponding term in pattern A.']", "answer": "Each term in pattern B is 10 times the corresponding term in pattern A.", "ques_type": "multi_choice", "choices": ["Each term in pattern B is 27 more than the corresponding term in pattern A.", "Each term in pattern B is 10 times the corresponding term in pattern A."], "code": [
  "# Python code, return answer \n# Analyzing the patterns\npattern_A = [3, 6, 9, 12]  # Terms in Pattern A\npattern_B = [30, 60, 90, 120]  # Terms in Pattern B\n\n# Check the relationship between corresponding terms in the two patterns\nis_ten_times = all(b == 10 * a for a, b in zip(pattern_A, pattern_B))\nis_twenty_seven_more = all(b == a + 27 for a, b in zip(pattern_A, pattern_B))\n\nif is_ten_times:\n    answer = 'Each term in pattern B is 10 times the corresponding term in pattern A.'\nelif is_twenty_seven_more:\n    answer = 'Each term in pattern B is 27 more than the corresponding term in pattern A.'\n\nprint(answer)", "pattern_A = [3, 6, 9, 12]  # Terms in Pattern A\npattern_B = [30, 60, 90, 120]  # Terms in Pattern B\n\nis_ten_times = all(b == 10 * a for a, b in zip(pattern_A, pattern_B))\nis_twenty_seven_more = all(b == a + 27 for a, b in zip(pattern_A, pattern_B))\n\nif is_ten_times:\n    answer = 'Each term in pattern B is 10 times the corresponding term in pattern A.'\nelif is_twenty_seven_more:\n    answer = 'Each term in pattern B is 27 more than the corresponding term in pattern A.'\nelse:\n    answer = 'Neither condition is true.'\n\nprint(answer)", "pattern_A = [3, 6, 9, 12]  # Terms in Pattern A\npattern_B = [30, 60, 90, 120]  # Terms in Pattern B\n\n# Check if each term in pattern B is 10 times the corresponding term in pattern A\nis_ten_times = all(b == 10 * a for a, b in zip(pattern_A, pattern_B))\n\n# If not, check if each term in pattern B is 27 more than the corresponding term in pattern A\nis_twenty_seven_more = not is_ten_times and all(b == a + 27 for a, b in zip(pattern_A, pattern_B))\n\nif is_ten_times:\n    answer = 'Each term in pattern B is 10 times the corresponding term in pattern A.'\nelif is_twenty_seven_more:\n    answer = 'Each term in pattern B is 27 more than the corresponding term in pattern A.'\nelse:\n    answer = 'Neither condition is true.'\n\nprint(answer)", "pattern_A = [3, 6, 9, 12]  # Terms in Pattern A\npattern_B = [30, 60, 90, 120]  # Terms in Pattern B\n\n# Check if each term in pattern B is 10 times the corresponding term in pattern A\nis_ten_times = all(b == 10 * a for a, b in zip(pattern_A, pattern_B))\n\n# Check if each term in pattern B is 27 more than the corresponding term in pattern A\nis_twenty_seven_more = all(b == a + 27 for a, b in zip(pattern_A, pattern_B))\n\nif is_ten_times:\n    answer = 'Each term in pattern B is 10 times the corresponding term in pattern A.'\nelif is_twenty_seven_more:\n    answer = 'Each term in pattern B is 27 more than the corresponding term in pattern A.'\nelse:\n    answer = 'Neither condition is true.'\n\nprint(answer)"
], "prediction": ["Each term in pattern B is 10 times the corresponding term in pattern A.", "Each term in pattern B is 10 times the corresponding term in pattern A.", "Each term in pattern B is 10 times the corresponding term in pattern A.", "Each term in pattern B is 10 times the corresponding term in pattern A."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nEuropean vacation package | $959.00\nAustralian vacation package | $531.00\nHawaiian vacation package | $741.00\nJamaican vacation package | $637.00\nCaribbean vacation package | $897.00\nAfrican safari vacation package | $538.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nEuropean vacation package | $959.00\nAustralian vacation package | $531.00\nHawaiian vacation package | $741.00\nJamaican vacation package | $637.00\nCaribbean vacation package | $897.00\nAfrican safari vacation package | $538.00\n\nHow much more does a Hawaiian vacation package cost than an Australian vacation package?", "answer": "210", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_hawaiian = 741.00\ncost_australian = 531.00\n# Calculate the difference in cost\ncost_difference = cost_hawaiian - cost_australian\nanswer = cost_difference\nprint(answer)", "# Define the costs of the vacation packages\ncost_hawaiian = 741.00\ncost_australian = 531.00\n\n# Calculate the difference in cost\ncost_difference = cost_hawaiian - cost_australian\n\n# Store the result in the variable 'answer'\nanswer = cost_difference\n\n# Print the answer\nprint(answer)", "cost_hawaiian = 741.00\ncost_australian = 531.00\ncost_difference = cost_hawaiian - cost_australian\nanswer = cost_difference\nprint(f\"The Hawaiian vacation package costs ${answer:.2f} more than the Australian vacation package.\")", "cost_hawaiian = 741.00\ncost_australian = 531.00\ncost_difference = cost_hawaiian - cost_australian\nanswer = cost_difference\nprint(answer)"], "prediction": [210.0, 210.0, 210.0, 210.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Spinning a wheel numbered 1 through 6\" and then answer a question.\n\nNumber spun | Frequency\n1 | 16\n2 | 3\n3 | 12\n4 | 14\n5 | 11\n6 | 2", "question": "Read the following table regarding \"Spinning a wheel numbered 1 through 6\" and then write Python code to answer a question.\n\nNumber spun | Frequency\n1 | 16\n2 | 3\n3 | 12\n4 | 14\n5 | 11\n6 | 2\n\nAt a school carnival, a curious student volunteer counted the number of times visitors to her booth spun the numbers 1 through 6. How many people spun a number less than 2?", "answer": "16", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of the numbers spun\nfrequency = {\n    1: 16,\n    2: 3,\n    3: 12,\n    4: 14,\n    5: 11,\n    6: 2\n}\n# Count the number of people who spun a number less than 2\npeople_spun_less_than_2 = frequency[1]  # Only the number '1' is less than '2'\nanswer = people_spun_less_than_2\nprint(answer)", "frequency = {\n    1: 16,\n    2: 3,\n    3: 12,\n    4: 14,\n    5: 11,\n    6: 2\n}\npeople_spun_less_than_2 = frequency[1]  # Only the number '1' is less than '2'\nanswer = int(people_spun_less_than_2)  # Ensure the output is an integer\nprint(answer)", "frequency = {\n    1: 16,\n    2: 3,\n    3: 12,\n    4: 14,\n    5: 11,\n    6: 2\n}\npeople_spun_less_than_2 = frequency[1]  # Only the number '1' is less than '2'\nanswer = people_spun_less_than_2  # Directly assign the integer value\nprint(answer)", "frequency = {\n    1: 16,\n    2: 3,\n    3: 12,\n    4: 14,\n    5: 11,\n    6: 2\n}\npeople_spun_less_than_2 = frequency[1]  # Only the number '1' is less than '2'\nanswer = int(people_spun_less_than_2)  # Cast to integer to avoid float representation\nprint(answer)"], "prediction": [16.0, 16.0, 16.0, 16.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Idaho crop prices per cwt\" and then answer a question.\n\nCrop | 2003 | 2004\nTimothy seed | $9 | $7\nPeas | $9 | $7\nLentils | $18 | $14", "question": "Read the following table regarding \"Idaho crop prices per cwt\" and then write Python code to answer a question.\n\nCrop | 2003 | 2004\nTimothy seed | $9 | $7\nPeas | $9 | $7\nLentils | $18 | $14\n\nAn Idaho farmer has been monitoring crop prices over time. Per cwt, how much did Timothy seed cost in 2004?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Timothy seed price in 2004\ntimothy_seed_price_2004 = 7  # dollars per cwt\nanswer = timothy_seed_price_2004\nprint(answer)", "# Define the price of Timothy seed in 2004\ntimothy_seed_price_2004 = 7  # dollars per cwt\n\n# Store the result in a variable named 'answer'\nanswer = f\"The cost of Timothy seed in 2004 was ${timothy_seed_price_2004} per cwt.\"\n\n# Print the answer\nprint(answer)", "# Assign the price of Timothy seed in 2004 directly to the answer variable\ntimothy_seed_price_2004 = 7  # dollars per cwt\nanswer = timothy_seed_price_2004\nprint(answer)", "# Timothy seed price in 2004 in dollars per cwt\ntimothy_seed_price_2004 = 7  # dollars per cwt\nanswer = f\"${timothy_seed_price_2004:.2f}\"  # Formatting to show currency\nprint(answer)"], "prediction": [7.0, "The cost of Timothy seed in 2004 was $7 per cwt.", 7.0, "$7.00"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nmeasuring tape | $4.87\npadlock | $5.07\nhammer | $9.51\nrake | $7.24\nbroom | $4.58\nmop | $8.37", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nmeasuring tape | $4.87\npadlock | $5.07\nhammer | $9.51\nrake | $7.24\nbroom | $4.58\nmop | $8.37\n\nHow much money does Henry need to buy 2 measuring tapes and a rake?", "answer": "16.98", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_measuring_tape = 4.87 \nprice_rake = 7.24 \n# Total cost for 2 measuring tapes and 1 rake\ntotal_cost = (2 * price_measuring_tape) + price_rake\nanswer = total_cost\nprint(answer)", "price_measuring_tape = 4.87 \nprice_rake = 7.24 \ntotal_cost = (2 * price_measuring_tape) + price_rake\nanswer = f\"${total_cost:.2f}\"  # Format as a monetary value\nprint(answer)", "# Define the prices of the items\nprice_measuring_tape = 4.87 \nprice_rake = 7.24 \n\n# Calculate the total cost for 2 measuring tapes and a rake\ntotal_cost = (2 * price_measuring_tape) + price_rake\n\n# Store the result in the variable 'answer' formatted as a monetary value\nanswer = f\"${total_cost:.2f}\"  # Format as a monetary value\n\n# Output the answer\nprint(answer)", "# Prices of items\nprice_measuring_tape = 4.87 \nprice_rake = 7.24 \n\n# Calculate total cost for 2 measuring tapes and 1 rake\ntotal_cost = (2 * price_measuring_tape) + price_rake\n\n# Store the result as a formatted monetary value\nanswer = f\"${total_cost:.2f}\"  # Format as a monetary value\n\n# Print the answer\nprint(answer)"], "prediction": [16.98, "$16.98", "$16.98", "$16.98"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Aid received per capita from the U.S.\" and then answer a question.\n\nCountry | 1965 | 1975\nNepal | $2 | $3\nLibya | $4 | $2\nSri Lanka | $1 | $11\nAfghanistan | $5 | $5", "question": "Read the following table regarding \"Aid received per capita from the U.S.\" and then write Python code to answer a question.\n\nCountry | 1965 | 1975\nNepal | $2 | $3\nLibya | $4 | $2\nSri Lanka | $1 | $11\nAfghanistan | $5 | $5\n\nAn economist tracked the amount of per-capita aid sent from the U.S. to various countries during the 1900s. Per capita, how much more aid did Libya receive in 1965 than in 1975?", "answer": "2", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nlibya_aid_1965 = 4  # in dollars\nlibya_aid_1975 = 2  # in dollars\n# Calculate the difference in aid received by Libya between 1965 and 1975\ndifference_aid_libya = libya_aid_1965 - libya_aid_1975\nanswer = difference_aid_libya\nprint(answer)", "libya_aid_1965 = 4  # in dollars\nlibya_aid_1975 = 2  # in dollars\ndifference_aid_libya = libya_aid_1965 - libya_aid_1975\nanswer = difference_aid_libya\nprint(answer)  # This will output the difference clearly", "libya_aid_1965 = 4  # in dollars\nlibya_aid_1975 = 2  # in dollars\ndifference_aid_libya = libya_aid_1965 - libya_aid_1975\nanswer = difference_aid_libya  # Store the result in the variable 'answer'\nprint(answer)  # This will output the difference clearly", "libya_aid_1965 = 4  # in dollars\nlibya_aid_1975 = 2  # in dollars\ndifference_aid_libya = libya_aid_1965 - libya_aid_1975\nanswer = f\"Libya received ${difference_aid_libya} more in aid per capita in 1965 than in 1975.\"\nprint(answer)"], "prediction": [2.0, 2.0, 2.0, "Libya received $2 more in aid per capita in 1965 than in 1975."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Web pages visited\" and then answer a question.\n\nPerson | Number of Web pages\nKenji | 141\nAlexis | 119\nJosh | 147\nSofia | 174", "question": "Read the following table regarding \"Web pages visited\" and then write Python code to answer a question.\n\nPerson | Number of Web pages\nKenji | 141\nAlexis | 119\nJosh | 147\nSofia | 174\n\nSeveral people compared how many Web pages they had visited. Who visited the most Web pages? Choose from the the options: ['Kenji', 'Alexis', 'Josh', 'Sofia']", "answer": "Sofia", "ques_type": "multi_choice", "choices": ["Kenji", "Alexis", "Josh", "Sofia"], "code": ["# Python code, return answer \nweb_pages_visited = {\n    'Kenji': 141,\n    'Alexis': 119,\n    'Josh': 147,\n    'Sofia': 174\n}\n# Find the person who visited the most web pages\nmost_web_pages_person = max(web_pages_visited, key=web_pages_visited.get)\nanswer = most_web_pages_person\nprint(answer)", "# Store the number of web pages visited by each person in a dictionary\nweb_pages_visited = {\n    'Kenji': 141,\n    'Alexis': 119,\n    'Josh': 147,\n    'Sofia': 174\n}\n\n# Find the person who visited the most web pages\nmost_web_pages_person = max(web_pages_visited, key=web_pages_visited.get)\n\n# Store the result in the variable 'answer'\nanswer = most_web_pages_person\n\n# Print the answer\nprint(answer)", "web_pages_visited = {\n    'Kenji': 141,\n    'Alexis': 119,\n    'Josh': 147,\n    'Sofia': 174\n}\nmost_web_pages_person = max(web_pages_visited, key=web_pages_visited.get)\nanswer = most_web_pages_person\nprint(answer)", "# Store the number of web pages visited by each person in a dictionary\nweb_pages_visited = {\n    'Kenji': 141,\n    'Alexis': 119,\n    'Josh': 147,\n    'Sofia': 174\n}\n\n# Find the person who visited the most web pages\nmost_web_pages_person = max(web_pages_visited, key=web_pages_visited.get)\nanswer = most_web_pages_person\n\nprint(answer)"], "prediction": ["Sofia", "Sofia", "Sofia", "Sofia"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nlong-sleeved shirt | $4.00\ndenim skirt | $9.00\npink sweater | $5.00\nplaid scarf | $3.00\npurple T-shirt | $3.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nlong-sleeved shirt | $4.00\ndenim skirt | $9.00\npink sweater | $5.00\nplaid scarf | $3.00\npurple T-shirt | $3.00\n\nHow much more does a denim skirt cost than a purple T-shirt?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_denim_skirt = 9.00 \ncost_purple_tshirt = 3.00 \n# Calculate the difference in cost\ndifference_cost = cost_denim_skirt - cost_purple_tshirt\nanswer = difference_cost\nprint(answer)", "# Define the costs of the items\ncost_denim_skirt = 9.00 \ncost_purple_tshirt = 3.00 \n\n# Calculate the difference in cost\ndifference_cost = cost_denim_skirt - cost_purple_tshirt\n\n# Store the result in the variable 'answer'\nanswer = difference_cost\n\n# Output the answer\nprint(answer)", "# Define the costs of the items\ncost_denim_skirt = 9.00 \ncost_purple_tshirt = 3.00 \n\n# Calculate the difference in cost\ndifference_cost = cost_denim_skirt - cost_purple_tshirt\n\n# Store the result in the variable 'answer'\nanswer = difference_cost\n\n# Print the answer\nprint(answer)", "cost_denim_skirt = 9.00 \ncost_purple_tshirt = 3.00 \ndifference_cost = cost_denim_skirt - cost_purple_tshirt\nanswer = difference_cost\nprint(answer)"], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Convenience store beverage sales\" and then answer a question.\n\nBeverage | Thursday | Friday\nKrazy Kola | $7 | $5\nSweet Sips | $17 | $7\nPearl's Soda | $2 | $12\nNature's Nectar | $1 | $19\nFizzy Fun | $14 | $15", "question": "Read the following table regarding \"Convenience store beverage sales\" and then write Python code to answer a question.\n\nBeverage | Thursday | Friday\nKrazy Kola | $7 | $5\nSweet Sips | $17 | $7\nPearl's Soda | $2 | $12\nNature's Nectar | $1 | $19\nFizzy Fun | $14 | $15\n\nJosie, an employee at Morgan's Convenience Store, looked at the sales of each of its soda products. On Friday, how much more did the convenience store make from Nature's Nectar sales than from Sweet Sips sales?", "answer": "12", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Sales on Friday for each beverage\nsales_natures_nectar = 19\nsales_sweet_sips = 7\n\n# Calculate the difference in sales\ndifference_in_sales = sales_natures_nectar - sales_sweet_sips\nanswer = difference_in_sales\nprint(answer)", "# Define the sales for each beverage on Friday\nsales = {\n    'Krazy Kola': 5,\n    'Sweet Sips': 7,\n    'Pearl\\'s Soda': 12,\n    'Nature\\'s Nectar': 19,\n    'Fizzy Fun': 15\n}\n\n# Calculate the difference in sales between Nature's Nectar and Sweet Sips on Friday\nsales_natures_nectar = sales['Nature\\'s Nectar']\nsales_sweet_sips = sales['Sweet Sips']\ndifference_in_sales = sales_natures_nectar - sales_sweet_sips\n\nanswer = difference_in_sales\nprint(answer)", "# Define the sales for each beverage on Friday\nsales = {\n    'Krazy Kola': 5,\n    'Sweet Sips': 7,\n    'Pearl\\'s Soda': 12,\n    'Nature\\'s Nectar': 19,\n    'Fizzy Fun': 15\n}\n\n# Get the sales amounts for Nature's Nectar and Sweet Sips\nsales_natures_nectar = sales['Nature\\'s Nectar']\nsales_sweet_sips = sales['Sweet Sips']\n\n# Calculate the difference in sales\ndifference_in_sales = sales_natures_nectar - sales_sweet_sips\n\n# Store the result in the variable 'answer'\nanswer = difference_in_sales\nprint(answer)", "# Define the sales for each beverage on Friday\nsales = {\n    'Krazy Kola': 5,\n    'Sweet Sips': 7,\n    'Pearl\\'s Soda': 12,\n    'Nature\\'s Nectar': 19,\n    'Fizzy Fun': 15\n}\n\n# Get the sales for Nature's Nectar and Sweet Sips\nsales_natures_nectar = sales['Nature\\'s Nectar']\nsales_sweet_sips = sales['Sweet Sips']\n\n# Calculate the difference in sales\ndifference_in_sales = sales_natures_nectar - sales_sweet_sips\nanswer = difference_in_sales\n\nprint(answer)"
], "prediction": [12.0, 12.0, 12.0, 12.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Toys per bin\" and then answer a question.\n\nStem | Leaf \n3 | 5\n4 | 3, 6, 9, 9\n5 | 2\n6 | 0, 5\n7 | 5", "question": "Read the following table regarding \"Toys per bin\" and then write Python code to answer a question.\n\nStem | Leaf \n3 | 5\n4 | 3, 6, 9, 9\n5 | 2\n6 | 0, 5\n7 | 5\n\nA toy store employee counted the number of toys in each bin in the sale section. What is the smallest number of toys?", "answer": "35", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The smallest number of toys corresponds to the smallest value in the stem-and-leaf display.\nsmallest_toys_count = 35  # From the stem \"3 | 5\", the value is 35 toys.\nanswer = smallest_toys_count\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(3, [5]), (4, [3, 6, 9, 9]), (5, [2]), (6, [0, 5]), (7, [5])]  \n  \n# Initialize variable to store the smallest number of toys  \nsmallest_toys_count = float('inf')  \n  \n# Iterate through the stem and leaf data structure and find the smallest number of toys  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        toys_count = stem * 10 + leaf  \n        if toys_count < smallest_toys_count:  \n            smallest_toys_count = toys_count  \n  \nanswer = smallest_toys_count  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(3, [5]), (4, [3, 6, 9, 9]), (5, [2]), (6, [0, 5]), (7, [5])]  \n\n# Initialize variable for the smallest number of toys\nsmallest_toys = float('inf')  \n\n# Iterate through the stem and leaf data structure to find the smallest number of toys\nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        toys = stem * 10 + leaf  \n        if toys < smallest_toys:  \n            smallest_toys = toys  \n\n# Store the result as an integer\nanswer = int(smallest_toys)  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(3, [5]), (4, [3, 6, 9, 9]), (5, [2]), (6, [0, 5]), (7, [5])]  \n\n# Initialize variable for the smallest number of toys\nsmallest_toys = None  \n\n# Iterate through the stem and leaf data structure to find the smallest number of toys\nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        toys = stem * 10 + leaf  \n        if smallest_toys is None or toys < smallest_toys:  \n            smallest_toys = toys  \n\nanswer = smallest_toys  \nprint(answer)"
], "prediction": [35.0, 35.0, 35.0, 35.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nfootball helmet key chain | $1.90\npiano key chain | $2.19\nrainbow key chain | $2.25\nglobe key chain | $1.70\npuppy key chain | $2.69\nsoccer ball key chain | $1.96", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nfootball helmet key chain | $1.90\npiano key chain | $2.19\nrainbow key chain | $2.25\nglobe key chain | $1.70\npuppy key chain | $2.69\nsoccer ball key chain | $1.96\n\nHow much money does Walter need to buy a football helmet key chain and a puppy key chain?", "answer": "4.59", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the key chains\nprice_football_helmet = 1.90\nprice_puppy_key_chain = 2.69\n# Calculate the total cost\ntotal_cost = price_football_helmet + price_puppy_key_chain\nanswer = total_cost\nprint(answer)", "# Prices of the key chains\nprice_football_helmet = 1.90\nprice_puppy_key_chain = 2.69\n\n# Total cost calculation\ntotal_cost = price_football_helmet + price_puppy_key_chain\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer formatted as a monetary value\nprint(f\"${answer:.2f}\")", "# Prices of the key chains\nprice_football_helmet = 1.90\nprice_puppy_key_chain = 2.69\n\n# Calculate total cost\ntotal_cost = price_football_helmet + price_puppy_key_chain\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Prices of the key chains\nprice_football_helmet = 1.90\nprice_puppy_key_chain = 2.69\n\n# Calculate total cost\ntotal_cost = price_football_helmet + price_puppy_key_chain\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)"], "prediction": [4.59, 4.59, 4.59, 4.59], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Math teachers\" and then answer a question.\n\nHigh school | Number of math teachers\nLincoln High | 2\nCedar High | 2\nNorthside High | 6\nHillview High | 6\nRiver High | 2\nGreen High | 7\nWestside High | 7", "question": "Read the following table regarding \"Math teachers\" and then write Python code to answer a question.\n\nHigh school | Number of math teachers\nLincoln High | 2\nCedar High | 2\nNorthside High | 6\nHillview High | 6\nRiver High | 2\nGreen High | 7\nWestside High | 7\n\nThe school district compared how many math teachers each high school has. What is the mode of the numbers?", "answer": "2", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of the number of math teachers for each high school\nmath_teachers = [2, 2, 6, 6, 2, 7, 7]\n\n# Finding the mode\nfrom statistics import mode\nmode_value = mode(math_teachers)\nanswer = mode_value\nprint(answer)", "math_teachers = [2, 2, 6, 6, 2, 7, 7]\nfrom statistics import mode\nmode_value = mode(math_teachers)\nanswer = int(mode_value)  # Convert the mode to an integer\nprint(answer)", "from statistics import mode\n\n# List of the number of math teachers at each high school\nmath_teachers = [2, 2, 6, 6, 2, 7, 7]\n\n# Calculate the mode\nmode_value = mode(math_teachers)\n\n# Assign the mode value to the answer variable (it will be an integer)\nanswer = mode_value\n\nprint(answer)", "from statistics import mode\n\nmath_teachers = [2, 2, 6, 6, 2, 7, 7]\nmode_value = mode(math_teachers)\nanswer = int(mode_value)  # Convert to integer\nprint(answer)"], "prediction": [2.0, 2.0, 2.0, 2.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Absences\" and then answer a question.\n\nStudent | 2005 | 2006\nValentina | 2 | 18\nPreston | 13 | 3\nLiz | 14 | 4", "question": "Read the following table regarding \"Absences\" and then write Python code to answer a question.\n\nStudent | 2005 | 2006\nValentina | 2 | 18\nPreston | 13 | 3\nLiz | 14 | 4\n\nA teacher at Mills Middle School studied the absence rates of her students over the course of a few years. In 2006, which student had the most absences? Choose from the the options: ['Preston', 'Liz', 'Valentina']", "answer": "Valentina", "ques_type": "multi_choice", "choices": ["Preston", "Liz", "Valentina"], "code": [
  "# Python code, return answer \nabsences_2006 = {\n    'Valentina': 18,\n    'Preston': 3,\n    'Liz': 4\n}\n# Find the student with the most absences in 2006\nmost_absences_student = max(absences_2006, key=absences_2006.get)\nanswer = most_absences_student\nprint(answer)", "# Store the absences for each student in 2006\nabsences_2006 = {\n    'Valentina': 18,\n    'Preston': 3,\n    'Liz': 4\n}\n\n# Find the student with the most absences in 2006\nmost_absences_student = max(absences_2006, key=absences_2006.get)\n\n# Store the result in the variable 'answer'\nanswer = most_absences_student\n\n# Print the answer\nprint(answer)", "# Define the absences for each student in 2006\nabsences_2006 = {\n    'Valentina': 18,\n    'Preston': 3,\n    'Liz': 4\n}\n\n# Find the student with the most absences in 2006\nmost_absences_student = max(absences_2006, key=absences_2006.get)\n\n# Store the result in the variable 'answer'\nanswer = most_absences_student\n\n# Output the answer\nprint(answer)", "# Store the absences for the year 2006 in a dictionary  \nabsences_2006 = {\n    'Valentina': 18,\n    'Preston': 3,\n    'Liz': 4\n}\n\n# Find the student with the most absences in 2006  \nmost_absences_student = max(absences_2006, key=absences_2006.get)\n\n# Define the options provided  \noptions = ['Preston', 'Liz', 'Valentina']\n\n# Validate that the student with the most absences is among the options  \nif most_absences_student in options:\n    answer = most_absences_student\nelse:\n    answer = None  # Or handle the case where the answer is not in options\n\nprint(answer)"
], "prediction": ["Valentina", "Valentina", "Valentina", "Valentina"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Patients under 18 years old | Patients 19-60 years old\nRegular cleaning | 4 | 2\nBroken tooth | 4 | 4", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Patients under 18 years old | Patients 19-60 years old\nRegular cleaning | 4 | 2\nBroken tooth | 4 | 4\n\nA dentist was making note of his upcoming appointments with different aged patients and the reasons for their visits. What is the probability that a randomly selected appointment is for a broken tooth and is with patients 19-60 years old? Simplify any fractions.", "answer": "2/7", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total patients\npatients_under_18 = 4 + 4  # Regular cleaning + Broken tooth\npatients_19_to_60 = 2 + 4  # Regular cleaning + Broken tooth\ntotal_patients = patients_under_18 + patients_19_to_60\n\n# Patients 19-60 years old with broken tooth\nbroken_tooth_19_to_60 = 4\n\n# Probability calculation\nprobability = broken_tooth_19_to_60 / total_patients\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(broken_tooth_19_to_60, total_patients).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Define the number of patients for each category\npatients_under_18_regular_cleaning = 4\npatients_under_18_broken_tooth = 4\npatients_19_to_60_regular_cleaning = 2\npatients_19_to_60_broken_tooth = 4\n\n# Calculate total patients\ntotal_patients = (patients_under_18_regular_cleaning + patients_under_18_broken_tooth +\n                  patients_19_to_60_regular_cleaning + patients_19_to_60_broken_tooth)\n\n# Calculate the number of patients with broken tooth in the 19-60 age group\nbroken_tooth_19_to_60 = patients_19_to_60_broken_tooth\n\n# Calculate the probability\nprobability = broken_tooth_19_to_60 / total_patients\n\n# Simplify the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(broken_tooth_19_to_60, total_patients).limit_denominator()\n\nanswer = simplified_probability\nprint(answer)", "# Define the number of patients for each category\npatients_under_18_regular_cleaning = 4\npatients_under_18_broken_tooth = 4\npatients_19_to_60_regular_cleaning = 2\npatients_19_to_60_broken_tooth = 4\n\n# Calculate the total number of patients\ntotal_patients = (patients_under_18_regular_cleaning + \n                  patients_under_18_broken_tooth +\n                  patients_19_to_60_regular_cleaning + \n                  patients_19_to_60_broken_tooth)\n\n# Calculate the number of patients aged 19-60 with broken teeth\nbroken_tooth_19_to_60 = patients_19_to_60_broken_tooth\n\n# Calculate the probability\nprobability = Fraction(broken_tooth_19_to_60, total_patients).limit_denominator()\nanswer = probability\nprint(answer)", "# Define the number of patients for each category\npatients_under_18_regular_cleaning = 4\npatients_under_18_broken_tooth = 4\npatients_19_to_60_regular_cleaning = 2\npatients_19_to_60_broken_tooth = 4\n\n# Calculate total number of patients\ntotal_patients = (patients_under_18_regular_cleaning + \n                  patients_under_18_broken_tooth +\n                  patients_19_to_60_regular_cleaning + \n                  patients_19_to_60_broken_tooth)\n\n# Calculate the number of patients for broken tooth in the age group 19-60\nbroken_tooth_19_to_60 = patients_19_to_60_broken_tooth\n\n# Calculate the probability\nprobability = broken_tooth_19_to_60 / total_patients\n\n# Simplify the probability to a fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(broken_tooth_19_to_60, total_patients).limit_denominator()\n\n# Store the simplified probability as the answer\nanswer = simplified_probability\nprint(answer)"
], "prediction": [0.28571, 0.28571, null, 0.28571], "report": ["Done", "Done", "NameError(\"name 'Fraction' is not defined\")", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of train cars | Number of people\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | 50\n6 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of train cars | Number of people\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | 50\n6 | ?\n\nEach train car has 10 people. How many people are in 6 train cars?", "answer": "60", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Each train car has 10 people\npeople_per_car = 10 \n# Number of train cars\nnumber_of_cars = 6 \n# Calculate total number of people\ntotal_people = people_per_car * number_of_cars\nanswer = total_people\nprint(answer)", "people_per_car = 10 \nnumber_of_cars = 6 \ntotal_people = people_per_car * number_of_cars\nanswer = int(total_people)  # Convert to integer\nprint(answer)", "# Define the number of people per train car and the number of train cars\npeople_per_car = 10 \nnumber_of_cars = 6 \n\n# Calculate the total number of people\ntotal_people = people_per_car * number_of_cars\n\n# Store the result as an integer\nanswer = total_people  # This will be an integer\n\nprint(answer)", "people_per_car = 10  \nnumber_of_cars = 6  \ntotal_people = people_per_car * number_of_cars  \nanswer = total_people  # This will be an integer\nprint(answer)"], "prediction": [60.0, 60.0, 60.0, 60.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nsilver coat rack | $796.00\ngrandfather clock | $628.00\ncrystal sculpture | $734.00\nrug | $274.00\ncrystal vase | $464.00\noil painting | $328.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nsilver coat rack | $796.00\ngrandfather clock | $628.00\ncrystal sculpture | $734.00\nrug | $274.00\ncrystal vase | $464.00\noil painting | $328.00\n\nHow much more does a grandfather clock cost than a crystal vase?", "answer": "164", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_grandfather_clock = 628.00 \ncost_crystal_vase = 464.00 \n# Calculate the difference in cost\ndifference = cost_grandfather_clock - cost_crystal_vase\nanswer = difference\nprint(answer)", "cost_grandfather_clock = 628.00 \ncost_crystal_vase = 464.00 \ndifference = cost_grandfather_clock - cost_crystal_vase\nanswer = f\"The grandfather clock costs ${difference:.2f} more than the crystal vase.\"\nprint(answer)", "cost_grandfather_clock = 628.00 \ncost_crystal_vase = 464.00 \ndifference = cost_grandfather_clock - cost_crystal_vase\nanswer = difference\nprint(answer)", "# Define the costs of the grandfather clock and the crystal vase\ncost_grandfather_clock = 628.00 \ncost_crystal_vase = 464.00 \n\n# Calculate the difference in cost\ndifference = cost_grandfather_clock - cost_crystal_vase\n\n# Store the result in the answer variable\nanswer = difference\n\n# Output the answer\nprint(answer)"], "prediction": [164.0, "The grandfather clock costs $164.00 more than the crystal vase.", 164.0, 164.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Photographs taken\" and then answer a question.\n\nDay | Number of photographs\nSunday | 9\nMonday | 8\nTuesday | 9\nWednesday | 2\nThursday | 7", "question": "Read the following table regarding \"Photographs taken\" and then write Python code to answer a question.\n\nDay | Number of photographs\nSunday | 9\nMonday | 8\nTuesday | 9\nWednesday | 2\nThursday | 7\n\nMegan looked at the dates of the digital photos on her computer to find out how many she had taken in the past 5 days. What is the mean of the numbers?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of photographs taken each day\nphotographs = [9, 8, 9, 2, 7]\n# Calculate the mean\nmean_photographs = sum(photographs) / len(photographs)\nanswer = mean_photographs\nprint(answer)", "photographs = [9, 8, 9, 2, 7]\nmean_photographs = sum(photographs) / len(photographs)\nanswer = round(mean_photographs)  # Round to the nearest integer\nprint(answer)", "photographs = [9, 8, 9, 2, 7]\nmean_photographs = sum(photographs) / len(photographs)\nanswer = mean_photographs  # Keep the mean as a float\nprint(answer)", "photographs = [9, 8, 9, 2, 7]\nmean_photographs = sum(photographs) / len(photographs)\nanswer = mean_photographs  # Keep the mean as a float\nprint(answer)  # Outputs: 7.0"], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Going swimming last month\" and then answer a question.\n\nNumber of times | Frequency\n1 | 3\n2 | 10\n3 | 17\n4 | 6", "question": "Read the following table regarding \"Going swimming last month\" and then write Python code to answer a question.\n\nNumber of times | Frequency\n1 | 3\n2 | 10\n3 | 17\n4 | 6\n\nStamford will decide whether to extend its public pool's hours by looking at the number of times its residents visited the pool last month. How many people went swimming fewer than 2 times?", "answer": "3", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of swimming visits\nfrequency_1_time = 3  # 1 time\nfrequency_2_times = 10  # 2 times\n\n# Calculate the number of people who went swimming fewer than 2 times\npeople_fewer_than_2_times = frequency_1_time  # Only those who swam 1 time\nanswer = people_fewer_than_2_times\nprint(answer)", "frequency_1_time = 3  # 1 time\nfrequency_2_times = 10  # 2 times\npeople_fewer_than_2_times = frequency_1_time  # Only those who swam 1 time\nanswer = int(people_fewer_than_2_times)  # Convert to integer for clarity\nprint(answer)", "frequency_1_time = 3  # 1 time\nfrequency_2_times = 10  # 2 times\npeople_fewer_than_2_times = frequency_1_time  # Only those who swam 1 time\nanswer = people_fewer_than_2_times  # No need for conversion to int\nprint(answer)", "# Define the frequencies of swimming occurrences\nfrequency_1_time = 3  # Number of people who swam 1 time\nfrequency_2_times = 10  # Number of people who swam 2 times\n\n# Calculate the number of people who swam fewer than 2 times\npeople_fewer_than_2_times = frequency_1_time  # Only those who swam 1 time\n\n# Store the result in the variable 'answer'\nanswer = people_fewer_than_2_times\n\n# Print the answer\nprint(answer)"], "prediction": [3.0, 3.0, 3.0, 3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Average food preparation time\" and then answer a question.\n\nDay | Food preparation time (minutes)\nTuesday | 36\nWednesday | 37\nThursday | 37\nFriday | 33\nSaturday | 32", "question": "Read the following table regarding \"Average food preparation time\" and then write Python code to answer a question.\n\nDay | Food preparation time (minutes)\nTuesday | 36\nWednesday | 37\nThursday | 37\nFriday | 33\nSaturday | 32\n\nA restaurant's average food preparation time was tracked from day to day as part of an efficiency improvement program. According to the table, what was the rate of change between Thursday and Friday?", "answer": "-4", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Food preparation times on Thursday and Friday\nthursday_time = 37 \nfriday_time = 33 \n# Calculate the rate of change\nrate_of_change = friday_time - thursday_time\nanswer = rate_of_change\nprint(answer)", "# Average food preparation times for Thursday and Friday\nthursday_time = 37 \nfriday_time = 33 \n\n# Calculate the rate of change from Thursday to Friday\nrate_of_change = friday_time - thursday_time\n\n# Prepare a more descriptive answer\nanswer = f\"The rate of change in food preparation time from Thursday to Friday is {rate_of_change} minutes.\"\n\nprint(answer)", "thursday_time = 37 \nfriday_time = 33 \nrate_of_change = friday_time - thursday_time\nanswer = rate_of_change  \nprint(answer)", "# Define the food preparation times for Thursday and Friday\nthursday_time = 37 \nfriday_time = 33 \n\n# Calculate the rate of change\nrate_of_change = friday_time - thursday_time\n\n# Format the answer to provide context\nanswer = f\"The rate of change in food preparation time from Thursday to Friday is {rate_of_change} minutes.\"\nprint(answer)"], "prediction": [-4.0, "The rate of change in food preparation time from Thursday to Friday is -4 minutes.", -4.0, "The rate of change in food preparation time from Thursday to Friday is -4 minutes."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Clubs\" and then answer a question.\n\nName | Number of clubs\nJared | 5\nLee | 7\nReba | 5\nKamal | 10\nSanjay | 7\nAiden | 7", "question": "Read the following table regarding \"Clubs\" and then write Python code to answer a question.\n\nName | Number of clubs\nJared | 5\nLee | 7\nReba | 5\nKamal | 10\nSanjay | 7\nAiden | 7\n\nSome students compared how many clubs they belong to. What is the mode of the numbers?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nfrom statistics import mode\n\n# List of the number of clubs each student belongs to\nclubs = [5, 7, 5, 10, 7, 7]\n\n# Calculate the mode\nanswer = mode(clubs)\nprint(answer)", "from statistics import mode\n\nclubs = [5, 7, 5, 10, 7, 7]\nanswer = int(mode(clubs))  # Convert the mode to an integer\nprint(answer)", "from statistics import mode\n\nclubs = [5, 7, 5, 10, 7, 7]\nanswer = mode(clubs)  # Get the mode directly\nprint(answer)  # This will print 7 as an integer", "from statistics import mode\n\nclubs = [5, 7, 5, 10, 7, 7]\nanswer = int(mode(clubs))  # Convert the mode to an integer\nprint(answer)  # This will print 7 as an integer"], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Basketball hoops\" and then answer a question.\n\nPark | Number of basketball hoops\nWestfield Park | 10\nRiverfront Park | 6\nMooreland Park | 9\nLinden Park | 5\nCrestview Park | 2\nHeron Park | 4\nPinehurst Park | 3\nKelly Park | 8", "question": "Read the following table regarding \"Basketball hoops\" and then write Python code to answer a question.\n\nPark | Number of basketball hoops\nWestfield Park | 10\nRiverfront Park | 6\nMooreland Park | 9\nLinden Park | 5\nCrestview Park | 2\nHeron Park | 4\nPinehurst Park | 3\nKelly Park | 8\n\nThe parks department compared how many basketball hoops there are at each park. What is the range of the numbers?", "answer": "8", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of basketball hoops at each park\nhoops_count = [10, 6, 9, 5, 2, 4, 3, 8]\n# Calculate the range\nrange_hoops = max(hoops_count) - min(hoops_count)\nanswer = range_hoops\nprint(answer)", "hoops_count = [10, 6, 9, 5, 2, 4, 3, 8]\nrange_hoops = max(hoops_count) - min(hoops_count)\nanswer = int(range_hoops)  # Convert to integer for clarity\nprint(answer)", "hoops_count = [10, 6, 9, 5, 2, 4, 3, 8]\nrange_hoops = max(hoops_count) - min(hoops_count)\nanswer = range_hoops  # No need to convert to int, already an integer\nprint(answer)", "hoops_count = [10, 6, 9, 5, 2, 4, 3, 8]\nrange_hoops = max(hoops_count) - min(hoops_count)\nanswer = int(range_hoops)  # Convert to int to ensure the result is an integer\nprint(answer)"], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Making picture frames\" and then answer a question.\n\nPicture frames made | Frequency\n0 | 2\n1 | 10\n2 | 3\n3 | 18\n4 | 17\n5 | 11\n6 | 19", "question": "Read the following table regarding \"Making picture frames\" and then write Python code to answer a question.\n\nPicture frames made | Frequency\n0 | 2\n1 | 10\n2 | 3\n3 | 18\n4 | 17\n5 | 11\n6 | 19\n\nThe shop teacher, Mr. Johnston, wrote down how many picture frames the students made last week. How many students made exactly 6 picture frames?", "answer": "19", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of students making exactly 6 picture frames\nstudents_made_6_frames = 19\nanswer = students_made_6_frames\nprint(answer)", "# Store the frequency of how many picture frames students made in a dictionary\npicture_frames_frequency = {\n    0: 2,\n    1: 10,\n    2: 3,\n    3: 18,\n    4: 17,\n    5: 11,\n    6: 19\n}\n\n# Get the number of students who made exactly 6 picture frames\nstudents_made_6_frames = picture_frames_frequency[6]\nanswer = students_made_6_frames  # This will be an integer\n\nprint(answer)", "# Define the frequency of picture frames made by students\npicture_frames_frequency = {\n    0: 2,\n    1: 10,\n    2: 3,\n    3: 18,\n    4: 17,\n    5: 11,\n    6: 19\n}\n\n# Retrieve the number of students who made exactly 6 picture frames\nstudents_made_6_frames = picture_frames_frequency[6]\nanswer = students_made_6_frames  # This will be an integer\n\nprint(answer)", "# Define the frequency of picture frames made by students\npicture_frames_frequency = {\n    0: 2,\n    1: 10,\n    2: 3,\n    3: 18,\n    4: 17,\n    5: 11,\n    6: 19\n}\n\n# Get the number of students who made exactly 6 picture frames\nstudents_made_6_frames = picture_frames_frequency[6]\nanswer = students_made_6_frames  # This will be an integer\nprint(answer)"], "prediction": [19.0, 19.0, 19.0, 19.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npiece of gum | $0.17\npiece of mint chocolate | $0.24\ngumball | $0.16\npeanut butter cup | $0.24\nbutterscotch candy | $0.13", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npiece of gum | $0.17\npiece of mint chocolate | $0.24\ngumball | $0.16\npeanut butter cup | $0.24\nbutterscotch candy | $0.13\n\nCaleb has $0.34. Does he have enough to buy a piece of mint chocolate and a butterscotch candy? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# Prices of items\nprice_mint_chocolate = 0.24 \nprice_butterscotch_candy = 0.13 \n\n# Total cost for one piece of mint chocolate and one butterscotch candy\ntotal_cost = price_mint_chocolate + price_butterscotch_candy\n\n# Caleb's amount\ncaleb_money = 0.34\n\n# Check if Caleb has enough money\nif caleb_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "price_mint_chocolate = 0.24 \nprice_butterscotch_candy = 0.13 \ntotal_cost = price_mint_chocolate + price_butterscotch_candy\ncaleb_money = 0.34\nif caleb_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "# Prices of the items\nprice_mint_chocolate = 0.24 \nprice_butterscotch_candy = 0.13 \n\n# Total cost of the items\ntotal_cost = price_mint_chocolate + price_butterscotch_candy\n\n# Amount of money Caleb has\ncaleb_money = 0.34\n\n# Check if Caleb has enough money\nif caleb_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Prices of items\nprice_mint_chocolate = 0.24 \nprice_butterscotch_candy = 0.13 \n\n# Total cost calculation\ntotal_cost = price_mint_chocolate + price_butterscotch_candy\n\n# Caleb's money\ncaleb_money = 0.34\n\n# Check if Caleb has enough money\nif caleb_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)  # Output should be 'no' since $0.34 is not enough for $0.37"
], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Flowers plants\" and then answer a question.\n\nDay | Number of flowers\nTuesday | 22\nWednesday | 39\nThursday | 29\nFriday | 35\nSaturday | 33", "question": "Read the following table regarding \"Flowers plants\" and then write Python code to answer a question.\n\nDay | Number of flowers\nTuesday | 22\nWednesday | 39\nThursday | 29\nFriday | 35\nSaturday | 33\n\nSean paid attention to how many flowers he planted in the garden during the past 5 days. What is the range of the numbers?", "answer": "17", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of flowers planted each day\nflowers = [22, 39, 29, 35, 33]\n# Calculate the range\nrange_flowers = max(flowers) - min(flowers)\nanswer = range_flowers\nprint(answer)", "flowers = [22, 39, 29, 35, 33]\nrange_flowers = max(flowers) - min(flowers)\nanswer = range_flowers\nprint(int(answer))  # Convert to integer for cleaner output", "flowers = [22, 39, 29, 35, 33]\nrange_flowers = max(flowers) - min(flowers)\nanswer = range_flowers\nprint(answer)  # This will output the integer value directly", "flowers = [22, 39, 29, 35, 33]\nrange_flowers = max(flowers) - min(flowers)\nanswer = range_flowers  # This will be an integer\nprint(answer)  # Output the integer value directly"], "prediction": [17.0, 17.0, 17.0, 17.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Scores on a board game\" and then answer a question.\n\nScore | Frequency\n6 | 7\n7 | 6\n8 | 20\n9 | 4\n10 | 19", "question": "Read the following table regarding \"Scores on a board game\" and then write Python code to answer a question.\n\nScore | Frequency\n6 | 7\n7 | 6\n8 | 20\n9 | 4\n10 | 19\n\nTrudy and her friends recorded their scores while playing a board game. How many people scored more than 8?", "answer": "23", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of scores\nscores_frequency = {\n    6: 7,\n    7: 6,\n    8: 20,\n    9: 4,\n    10: 19\n}\n\n# Calculate the total number of people who scored more than 8\npeople_scored_more_than_8 = scores_frequency[9] + scores_frequency[10]\nanswer = people_scored_more_than_8\nprint(answer)", "scores_frequency = {\n    6: 7,\n    7: 6,\n    8: 20,\n    9: 4,\n    10: 19\n}\n\n# Calculate the total number of people who scored more than 8\npeople_scored_more_than_8 = scores_frequency[9] + scores_frequency[10]\nanswer = int(people_scored_more_than_8)  # Ensure the result is an integer\nprint(answer)", "scores_frequency = {\n    6: 7,\n    7: 6,\n    8: 20,\n    9: 4,\n    10: 19\n}\n\npeople_scored_more_than_8 = scores_frequency[9] + scores_frequency[10]\nanswer = people_scored_more_than_8  # No need to convert to int, as it's already an integer\nprint(answer)", "scores_frequency = {\n    6: 7,\n    7: 6,\n    8: 20,\n    9: 4,\n    10: 19\n}\npeople_scored_more_than_8 = scores_frequency[9] + scores_frequency[10]\nanswer = int(people_scored_more_than_8)  # Convert to int for clarity\nprint(answer)"], "prediction": [23.0, 23.0, 23.0, 23.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"House sales\" and then answer a question.\n\nCity | Number of houses sold\nMelville | 71\nLiberty City | 74\nCenter City | 71\nNew Hamburg | 71\nParville | 74\nFremont | 68\nBriggs Corner | 68", "question": "Read the following table regarding \"House sales\" and then write Python code to answer a question.\n\nCity | Number of houses sold\nMelville | 71\nLiberty City | 74\nCenter City | 71\nNew Hamburg | 71\nParville | 74\nFremont | 68\nBriggs Corner | 68\n\nA real estate agent looked into how many houses were sold in different cities. What is the mode of the numbers?", "answer": "71", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nfrom statistics import mode\n\n# Number of houses sold in each city\nhouses_sold = [71, 74, 71, 71, 74, 68, 68]\n\n# Calculate the mode\nmode_houses_sold = mode(houses_sold)\nanswer = mode_houses_sold\nprint(answer)", "from statistics import mode\n\nhouses_sold = [71, 74, 71, 71, 74, 68, 68]\nmode_houses_sold = mode(houses_sold)\nanswer = int(mode_houses_sold)  # Convert to integer for the expected format\nprint(answer)", "from statistics import mode\n\nhouses_sold = [71, 74, 71, 71, 74, 68, 68]\nmode_houses_sold = mode(houses_sold)\nanswer = mode_houses_sold  # No need to convert to int as mode already returns an integer\nprint(answer)", "from statistics import mode\n\nhouses_sold = [71, 74, 71, 71, 74, 68, 68]\nmode_houses_sold = mode(houses_sold)\nanswer = int(mode_houses_sold)  # Convert to integer\nprint(answer)"], "prediction": [71.0, 71.0, 71.0, 71.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ndenim jacket | $17.18\npair of shorts | $27.55\npair of brown pants | $19.92\nblack jacket | $10.33", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ndenim jacket | $17.18\npair of shorts | $27.55\npair of brown pants | $19.92\nblack jacket | $10.33\n\nPercy has $49.50. Does he have enough to buy a pair of brown pants and a pair of shorts? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \ncost_brown_pants = 19.92 \ncost_shorts = 27.55 \ntotal_cost = cost_brown_pants + cost_shorts \npercy_budget = 49.50 \n\nif total_cost <= percy_budget: \n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "# Define the costs of the items\ncost_brown_pants = 19.92 \ncost_shorts = 27.55 \n\n# Calculate the total cost\ntotal_cost = cost_brown_pants + cost_shorts \n\n# Percy's budget\npercy_budget = 49.50 \n\n# Determine if Percy can afford the items\nif total_cost <= percy_budget: \n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the costs of the items\ncost_brown_pants = 19.92 \ncost_shorts = 27.55 \n\n# Calculate the total cost\ntotal_cost = cost_brown_pants + cost_shorts \n\n# Define Percy's budget\npercy_budget = 49.50 \n\n# Determine if Percy has enough money\nif total_cost <= percy_budget: \n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "cost_brown_pants = 19.92 \ncost_shorts = 27.55 \ntotal_cost = cost_brown_pants + cost_shorts \npercy_budget = 49.50 \n\nif total_cost <= percy_budget: \n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)"], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbutterfly stamp | $0.30\ntulip stamp | $0.23\nroll of packaging tape | $0.63\nlarge cardboard box | $0.41\nbird postcard | $0.61\nlarge yellow envelope | $0.53", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbutterfly stamp | $0.30\ntulip stamp | $0.23\nroll of packaging tape | $0.63\nlarge cardboard box | $0.41\nbird postcard | $0.61\nlarge yellow envelope | $0.53\n\nHow much more does a roll of packaging tape cost than a large yellow envelope?", "answer": "0.10", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_packaging_tape = 0.63\ncost_large_yellow_envelope = 0.53\n# Calculate the difference in cost\ncost_difference = cost_packaging_tape - cost_large_yellow_envelope\nanswer = cost_difference\nprint(answer)", "cost_packaging_tape = 0.63\ncost_large_yellow_envelope = 0.53\ncost_difference = cost_packaging_tape - cost_large_yellow_envelope\nanswer = f\"{cost_difference:.2f}\"  # Formatting to two decimal places\nprint(answer)", "cost_packaging_tape = 0.63\ncost_large_yellow_envelope = 0.53\ncost_difference = cost_packaging_tape - cost_large_yellow_envelope\nanswer = f\"{cost_difference:.2f}\"  # Formatting to two decimal places\nprint(answer)", "cost_packaging_tape = 0.63\ncost_large_yellow_envelope = 0.53\ncost_difference = cost_packaging_tape - cost_large_yellow_envelope\nanswer = f\"{cost_difference:.2f}\"  # Formatting to two decimal places\nprint(answer)  # This will output '0.10'"], "prediction": [0.1, 0.1, 0.1, 0.1], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Quiz scores\" and then answer a question.\n\nStem | Leaf \n2 | 0, 2, 6, 9\n3 | 4, 5, 7, 7, 8\n4 | 1, 9\n5 | 1, 8, 8", "question": "Read the following table regarding \"Quiz scores\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 0, 2, 6, 9\n3 | 4, 5, 7, 7, 8\n4 | 1, 9\n5 | 1, 8, 8\n\nMs. Sherman reported her students' scores on the most recent quiz. How many students scored fewer than 58 points?", "answer": "12", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Count the number of students who scored fewer than 58 points\n# From the stem-and-leaf display, the scores are as follows:\nscores = [20, 22, 26, 29, 34, 35, 37, 37, 38, 41, 49, 51, 58, 58]  # Including the scores represented in the display\nstudents_fewer_than_58 = [score for score in scores if score < 58]\n\n# Count the number of students\nanswer = len(students_fewer_than_58)\nprint(answer)", "scores = [20, 22, 26, 29, 34, 35, 37, 37, 38, 41, 49, 51, 58, 58]  # Including the scores represented in the display\nstudents_fewer_than_58 = [score for score in scores if score < 58]\nanswer = len(students_fewer_than_58)  # This will be an integer\nprint(answer)", "```", "# List of scores based on the stem-and-leaf display\nscores = [20, 22, 26, 29, 34, 35, 37, 37, 38, 41, 49, 51]  # Only scores below 58\n\n# Count how many students scored fewer than 58 points\nstudents_fewer_than_58 = len([score for score in scores if score < 58])\n\n# Store the result in the answer variable\nanswer = students_fewer_than_58\n\n# Output the answer\nprint(answer)"], "prediction": [12.0, 12.0, null, 12.0], "report": ["Done", "Done", "SyntaxError('invalid syntax', ('<string>', 1, 1, '```\\n', 1, 2))", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\njar of olives | $3.08\ncan of mushrooms | $1.37\njar of pickles | $1.55\ncan of fruit cocktail | $2.23", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\njar of olives | $3.08\ncan of mushrooms | $1.37\njar of pickles | $1.55\ncan of fruit cocktail | $2.23\n\nHow much money does Rhianna need to buy a can of fruit cocktail and a jar of pickles?", "answer": "3.78", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_can_fruit_cocktail = 2.23 \nprice_jar_pickles = 1.55 \n# Total cost for both items\ntotal_cost = price_can_fruit_cocktail + price_jar_pickles\nanswer = total_cost\nprint(answer)", "# Define the prices of the items\nprice_can_fruit_cocktail = 2.23 \nprice_jar_pickles = 1.55 \n\n# Calculate the total cost\ntotal_cost = price_can_fruit_cocktail + price_jar_pickles\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the prices of the items\nprice_can_fruit_cocktail = 2.23 \nprice_jar_pickles = 1.55 \n\n# Calculate the total cost\ntotal_cost = price_can_fruit_cocktail + price_jar_pickles\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the prices of the items\nprice_can_fruit_cocktail = 2.23 \nprice_jar_pickles = 1.55 \n\n# Calculate the total cost\ntotal_cost = price_can_fruit_cocktail + price_jar_pickles\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)"], "prediction": [3.78, 3.78, 3.78, 3.78], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Goals made\" and then answer a question.\n\nDay | Number of goals\nSunday | 5\nMonday | 0\nTuesday | 3\nWednesday | 8\nThursday | 4\nFriday | 10\nSaturday | 9", "question": "Read the following table regarding \"Goals made\" and then write Python code to answer a question.\n\nDay | Number of goals\nSunday | 5\nMonday | 0\nTuesday | 3\nWednesday | 8\nThursday | 4\nFriday | 10\nSaturday | 9\n\nMitchell recalled how many goals he had made in soccer practice each day. What is the median of the numbers?", "answer": "5", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of the number of goals made each day\ngoals = [5, 0, 3, 8, 4, 10, 9]\n# Sort the list to find the median\ngoals.sort()\n# Calculate the median\nn = len(goals)\nif n % 2 == 1:\n    median = goals[n // 2]\nelse:\n    median = (goals[n // 2 - 1] + goals[n // 2]) / 2\nanswer = median\nprint(answer)", "goals = [5, 0, 3, 8, 4, 10, 9]\ngoals.sort()\nn = len(goals)\nif n % 2 == 1:\n    answer = goals[n // 2]\nelse:\n    answer = (goals[n // 2 - 1] + goals[n // 2]) / 2\n\nprint(answer)", "# List of goals made each day\ngoals = [5, 0, 3, 8, 4, 10, 9]  \ngoals.sort()  # Sort the goals to find the median\nn = len(goals)  # Get the number of entries\n\n# Calculate the median\nif n % 2 == 1:  # If the number of goals is odd\n    answer = goals[n // 2]\nelse:  # If the number of goals is even\n    answer = (goals[n // 2 - 1] + goals[n // 2]) / 2\n\nprint(answer)  # Output the answer", "# Define the number of goals made each day\ngoals = [5, 0, 3, 8, 4, 10, 9]  \n\n# Sort the goals to find the median\ngoals.sort()  \n\n# Get the number of entries\nn = len(goals)  \n\n# Calculate the median\nif n % 2 == 1:  # If the number of goals is odd\n    answer = goals[n // 2]\nelse:  # If the number of goals is even\n    answer = (goals[n // 2 - 1] + goals[n // 2]) / 2\n\nprint(answer)  # Output the answer"], "prediction": [5.0, 5.0, 5.0, 5.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Watermelons harvested\" and then answer a question.\n\nDay | Number of watermelons\nThursday | 40\nFriday | 49\nSaturday | 42\nSunday | 46", "question": "Read the following table regarding \"Watermelons harvested\" and then write Python code to answer a question.\n\nDay | Number of watermelons\nThursday | 40\nFriday | 49\nSaturday | 42\nSunday | 46\n\nA farmer recalled how many watermelons were harvested in the past 4 days. On which day were the fewest watermelons harvested? Choose from the the options: ['Thursday', 'Friday', 'Saturday', 'Sunday']", "answer": "Thursday", "ques_type": "multi_choice", "choices": ["Thursday", "Friday", "Saturday", "Sunday"], "code": [
  "# Python code, return answer \nwatermelons = {\n    'Thursday': 40,\n    'Friday': 49,\n    'Saturday': 42,\n    'Sunday': 46\n}\n# Find the day with the fewest watermelons harvested\nfewest_watermelons_day = min(watermelons, key=watermelons.get)\nanswer = fewest_watermelons_day\nprint(answer)", "# Store the number of watermelons harvested each day in a dictionary  \nwatermelons = {  \n    'Thursday': 40,  \n    'Friday': 49,  \n    'Saturday': 42,  \n    'Sunday': 46  \n}  \n  \n# Find the day with the fewest watermelons harvested  \nfewest_watermelons_day = min(watermelons, key=watermelons.get)  \nanswer = fewest_watermelons_day  \nprint(answer)", "# Store the number of watermelons harvested each day in a dictionary\nwatermelons = {  \n    'Thursday': 40,  \n    'Friday': 49,  \n    'Saturday': 42,  \n    'Sunday': 46  \n}  \n\n# Find the day with the fewest watermelons harvested\nfewest_watermelons_day = min(watermelons, key=watermelons.get)  \nanswer = fewest_watermelons_day  \n\n# Output the answer\nprint(answer)", "# Store the number of watermelons harvested each day in a dictionary\nwatermelons = {  \n    'Thursday': 40,  \n    'Friday': 49,  \n    'Saturday': 42,  \n    'Sunday': 46  \n}  \n\n# Find the day with the fewest watermelons harvested\nfewest_watermelons_day = min(watermelons, key=watermelons.get)  \nanswer = fewest_watermelons_day  \n\nprint(answer)"
], "prediction": ["Thursday", "Thursday", "Thursday", "Thursday"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of roofs | Number of seagulls\n1 | 5\n2 | 10\n3 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of roofs | Number of seagulls\n1 | 5\n2 | 10\n3 | ?\n\nEach roof has 5 seagulls. How many seagulls are on 3 roofs?", "answer": "15", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nseagulls_per_roof = 5\nnumber_of_roofs = 3\n# Calculate the total number of seagulls\ntotal_seagulls = seagulls_per_roof * number_of_roofs\nanswer = total_seagulls\nprint(answer)", "seagulls_per_roof = 5\nnumber_of_roofs = 3\ntotal_seagulls = seagulls_per_roof * number_of_roofs\nanswer = int(total_seagulls)  # Convert to integer\nprint(answer)", "seagulls_per_roof = 5\nnumber_of_roofs = 3\ntotal_seagulls = seagulls_per_roof * number_of_roofs\nanswer = total_seagulls  # No need to convert to integer since the result is already an integer\nprint(answer)", "seagulls_per_roof = 5\nnumber_of_roofs = 3\ntotal_seagulls = seagulls_per_roof * number_of_roofs\nanswer = int(total_seagulls)  # Convert the result to an integer\nprint(answer)"], "prediction": [15.0, 15.0, 15.0, 15.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Basketball hoops\" and then answer a question.\n\nPark | Number of basketball hoops\nPalm Park | 9\nMooreland Park | 8\nCrestview Park | 8\nRiverfront Park | 9\nWestfield Park | 8\nLinden Park | 9\nHeron Park | 2\nOtter Park | 9", "question": "Read the following table regarding \"Basketball hoops\" and then write Python code to answer a question.\n\nPark | Number of basketball hoops\nPalm Park | 9\nMooreland Park | 8\nCrestview Park | 8\nRiverfront Park | 9\nWestfield Park | 8\nLinden Park | 9\nHeron Park | 2\nOtter Park | 9\n\nThe parks department compared how many basketball hoops there are at each park. What is the mode of the numbers?", "answer": "9", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# List of the number of basketball hoops at each park\nhoops = [9, 8, 8, 9, 8, 9, 2, 9]\n\n# Finding the mode\nfrom statistics import mode\nanswer = mode(hoops)\nprint(answer)", "# Define the number of basketball hoops at each park\nhoops = [9, 8, 8, 9, 8, 9, 2, 9]\n\n# Count the occurrences of each number of hoops\nfrom collections import Counter\n\nhoop_counts = Counter(hoops)\n\n# Find the mode (the number with the highest count)\nmode_hoops = max(hoop_counts.values())\nmodes = [hoop for hoop, count in hoop_counts.items() if count == mode_hoops]\n\n# Since we are looking for the mode, we'll take the first one if there are multiple\nanswer = modes[0] if modes else None\nprint(answer)", "from collections import Counter\n\nhoops = [9, 8, 8, 9, 8, 9, 2, 9]\nhoop_counts = Counter(hoops)\nmode_hoops = max(hoop_counts.values())\nmodes = [hoop for hoop, count in hoop_counts.items() if count == mode_hoops]\n\n# Since we want the mode, we can just take the first one if there are multiple\nanswer = modes[0] if modes else None\nprint(answer)", "from collections import Counter\n\n# List of basketball hoops in each park\nhoops = [9, 8, 8, 9, 8, 9, 2, 9]\n\n# Count the occurrences of each number of hoops\nhoop_counts = Counter(hoops)\n\n# Find the maximum frequency\nmax_frequency = max(hoop_counts.values())\n\n# Find all modes (hoop counts that have the maximum frequency)\nmodes = [hoop for hoop, count in hoop_counts.items() if count == max_frequency]\n\n# Since we want the mode, we can select the first one in the list of modes\nanswer = modes[0] if modes else None\n\nprint(answer)"
], "prediction": [9.0, 9.0, 9.0, 9.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Brianna's yearly finances\" and then answer a question.\n\nEarnings from job as a birthday party princess | $11,650\nEarnings from acting in children's plays | $13,200\nIncome tax and other payroll taxes | $3,083", "question": "Read the following table regarding \"Brianna's yearly finances\" and then write Python code to answer a question.\n\nEarnings from job as a birthday party princess | $11,650\nEarnings from acting in children's plays | $13,200\nIncome tax and other payroll taxes | $3,083\n\nBrianna has two part-time jobs as a children's entertainer. Here are her yearly finances. What is Brianna's gross income for the year?", "answer": "24,850", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Earnings from both jobs\nearnings_birthday_princess = 11650\nearnings_acting = 13200\n# Calculate gross income\ngross_income = earnings_birthday_princess + earnings_acting\nanswer = gross_income\nprint(answer)", "earnings_birthday_princess = 11650\nearnings_acting = 13200\ngross_income = earnings_birthday_princess + earnings_acting\nanswer = f\"Brianna's gross income for the year is ${gross_income:,.2f}.\"\nprint(answer)", "# Define Brianna's earnings from her jobs\nearnings_birthday_princess = 11650\nearnings_acting = 13200\n\n# Calculate Brianna's gross income\ngross_income = earnings_birthday_princess + earnings_acting\n\n# Store the result in the answer variable\nanswer = gross_income\n\n# Print the answer\nprint(answer)", "# Define Brianna's earnings from her two jobs\nearnings_birthday_princess = 11650\nearnings_acting = 13200\n\n# Calculate gross income\ngross_income = earnings_birthday_princess + earnings_acting\n\n# Store the result in the variable 'answer'\nanswer = gross_income\n\n# Print the answer\nprint(answer)"], "prediction": [24850.0, "Brianna's gross income for the year is $24,850.00.", 24850.0, 24850.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ndesigner handbag | $3,238.00\ndesigner watch | $1,024.00\npair of designer shoes | $4,738.00\ndesigner ball gown | $3,907.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ndesigner handbag | $3,238.00\ndesigner watch | $1,024.00\npair of designer shoes | $4,738.00\ndesigner ball gown | $3,907.00\n\nHow much money does Erica need to buy 5 pairs of designer shoes?", "answer": "23,690", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pair_of_shoes = 4738.00 \nnumber_of_pairs = 5 \n# Calculate the total cost for 5 pairs of designer shoes\ntotal_cost = price_per_pair_of_shoes * number_of_pairs\nanswer = total_cost\nprint(answer)", "price_per_pair_of_shoes = 4738.00 \nnumber_of_pairs = 5 \ntotal_cost = price_per_pair_of_shoes * number_of_pairs\nanswer = \"{:.2f}\".format(total_cost)  # Format the total cost to two decimal places\nprint(answer)", "price_per_pair_of_shoes = 4738.00  \nnumber_of_pairs = 5  \ntotal_cost = price_per_pair_of_shoes * number_of_pairs  \nanswer = total_cost  \nprint(answer)", "price_per_pair_of_shoes = 4738.00  \nnumber_of_pairs = 5  \ntotal_cost = price_per_pair_of_shoes * number_of_pairs  \nanswer = f\"${total_cost:,.2f}\"  # Format the output as currency with two decimal places\nprint(answer)"], "prediction": [23690.0, 23690.0, 23690.0, "$23,690.00"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Addison's summer finances\" and then answer a question.\n\nEarnings from job at the water park | $6,840\nIncome tax and other payroll taxes | $620", "question": "Read the following table regarding \"Addison's summer finances\" and then write Python code to answer a question.\n\nEarnings from job at the water park | $6,840\nIncome tax and other payroll taxes | $620\n\nAddison worked at a water park last summer. Here are Addison's finances for the summer. What was Addison's net income last summer?", "answer": "6,220", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nearnings = 6840  # Earnings from job at the water park\ntaxes = 620  # Income tax and other payroll taxes\n# Calculate net income\nnet_income = earnings - taxes\nanswer = net_income\nprint(answer)", "earnings = 6840  # Earnings from job at the water park\ntaxes = 620  # Income tax and other payroll taxes\nnet_income = earnings - taxes\nanswer = f\"${net_income:,.2f}\"  # Format as a currency string\nprint(answer)", "# Define Addison's earnings and taxes\nearnings = 6840  # Earnings from job at the water park\ntaxes = 620  # Income tax and other payroll taxes\n\n# Calculate net income\nnet_income = earnings - taxes\n\n# Store the formatted net income in the answer variable\nanswer = f\"${net_income:,.2f}\"  # Format as a currency string\n\n# Output the answer\nprint(answer)", "# Define the earnings and taxes\nearnings = 6840  # Earnings from job at the water park\ntaxes = 620  # Income tax and other payroll taxes\n\n# Calculate net income\nnet_income = earnings - taxes\n\n# Format the net income as a currency string\nanswer = f\"${net_income:,.2f}\"\nprint(answer)"], "prediction": [6220.0, "$6,220.00", "$6,220.00", "$6,220.00"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Temperature at noon\" and then answer a question.\n\nDay | Temperature (\u00c2\u00b0C)\nThursday | 6\nFriday | 6\nSaturday | 9\nSunday | 6\nMonday | 9\nTuesday | 7", "question": "Read the following table regarding \"Temperature at noon\" and then write Python code to answer a question.\n\nDay | Temperature (\u00c2\u00b0C)\nThursday | 6\nFriday | 6\nSaturday | 9\nSunday | 6\nMonday | 9\nTuesday | 7\n\nCole graphed the temperature at noon for 6 days. What is the mode of the numbers?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ntemperatures = [6, 6, 9, 6, 9, 7]\n# Finding the mode\nfrom statistics import mode\nmode_temperature = mode(temperatures)\nanswer = mode_temperature\nprint(answer)", "temperatures = [6, 6, 9, 6, 9, 7]\nfrom statistics import mode\nmode_temperature = mode(temperatures)\nanswer = int(mode_temperature)  # Convert to integer\nprint(answer)", "temperatures = [6, 6, 9, 6, 9, 7]\nfrom statistics import mode\n\n# Calculate the mode of the temperatures\nmode_temperature = mode(temperatures)\n\n# Store the mode as an integer\nanswer = int(mode_temperature)  # Convert to integer\nprint(answer)", "temperatures = [6, 6, 9, 6, 9, 7]\nfrom statistics import mode\nmode_temperature = mode(temperatures)\nanswer = int(mode_temperature)  # Convert to integer\nprint(answer)"], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npackage of purple streamers | $2.58\nbirthday balloon | $1.04\ngreeting card | $3.18\nwhistle | $1.42", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npackage of purple streamers | $2.58\nbirthday balloon | $1.04\ngreeting card | $3.18\nwhistle | $1.42\n\nHow much money does Rudy need to buy 4 whistles?", "answer": "5.68", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_whistle = 1.42 \nnumber_of_whistles = 4 \n# Calculate total cost for 4 whistles\ntotal_cost = price_per_whistle * number_of_whistles\nanswer = total_cost\nprint(answer)", "# Define the price per whistle and the number of whistles\nprice_per_whistle = 1.42  \nnumber_of_whistles = 4  \n\n# Calculate the total cost\ntotal_cost = price_per_whistle * number_of_whistles  \n\n# Assign the result to the variable 'answer'\nanswer = total_cost  \n\n# Print the answer\nprint(answer)", "price_per_whistle = 1.42  \nnumber_of_whistles = 4  \ntotal_cost = price_per_whistle * number_of_whistles  \nanswer = f\"${total_cost:.2f}\"  # Format the output to two decimal places\nprint(answer)", "price_per_whistle = 1.42  \nnumber_of_whistles = 4  \ntotal_cost = price_per_whistle * number_of_whistles  \nanswer = total_cost  # Store the numeric value of the total cost\nprint(answer)"], "prediction": [5.68, 5.68, "$5.68", 5.68], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Apples picked\" and then answer a question.\n\nDay | Number of apples\nFriday | 8,131\nSaturday | 4,145\nSunday | 8,137\nMonday | 1,569\nTuesday | 2,068", "question": "Read the following table regarding \"Apples picked\" and then write Python code to answer a question.\n\nDay | Number of apples\nFriday | 8,131\nSaturday | 4,145\nSunday | 8,137\nMonday | 1,569\nTuesday | 2,068\n\nThe owner of an orchard kept records about how many apples were picked in the past 5 days. How many apples in total were picked on Friday and Saturday?", "answer": "12,276", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Apples picked on Friday and Saturday\napples_friday = 8131\napples_saturday = 4145\n# Total apples picked on Friday and Saturday\ntotal_apples_friday_saturday = apples_friday + apples_saturday\nanswer = total_apples_friday_saturday\nprint(answer)", "apples_friday = 8131\napples_saturday = 4145\ntotal_apples_friday_saturday = apples_friday + apples_saturday\nanswer = total_apples_friday_saturday\nprint(int(answer))  # Output as an integer", "# Number of apples picked on each day\napples_friday = 8131\napples_saturday = 4145\n\n# Calculate total apples picked on Friday and Saturday\ntotal_apples_friday_saturday = apples_friday + apples_saturday\n\n# Store the result as an integer\nanswer = total_apples_friday_saturday\n\n# Output the answer\nprint(answer)", "apples_friday = 8131\napples_saturday = 4145\ntotal_apples_friday_saturday = apples_friday + apples_saturday\nanswer = int(total_apples_friday_saturday)  # Convert to integer\nprint(answer)"], "prediction": [12276.0, 12276.0, 12276.0, 12276.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Broken crayons per box\" and then answer a question.\n\nStem | Leaf \n1 | 2\n2 | 7, 8\n3 | 0, 3\n4 | \n5 | 0\n6 | \n7 | \n8 | 2, 8\n9 | 0", "question": "Read the following table regarding \"Broken crayons per box\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 2\n2 | 7, 8\n3 | 0, 3\n4 | \n5 | 0\n6 | \n7 | \n8 | 2, 8\n9 | 0\n\nA crayon factory monitored the number of broken crayons per box during the past day. What is the smallest number of broken crayons?", "answer": "12", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The smallest number of broken crayons corresponds to the smallest value in the stem-and-leaf display.\nsmallest_broken_crayons = 12  # From the stem \"1 | 2\", the value is 12 broken crayons.\nanswer = smallest_broken_crayons\nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [(1, [2]), (2, [7, 8]), (3, [0, 3]), (4, []), (5, [0]), (6, []), (7, []), (8, [2, 8]), (9, [0])]\n\n# Initialize variable to track the smallest number of broken crayons\nsmallest_broken_crayons = float('inf')\n\n# Iterate through the stem and leaf data structure to find the smallest number of broken crayons\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        broken_crayons = stem * 10 + leaf\n        if broken_crayons < smallest_broken_crayons:\n            smallest_broken_crayons = broken_crayons\n\nanswer = smallest_broken_crayons\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(1, [2]), (2, [7, 8]), (3, [0, 3]), (4, []), (5, [0]), (6, []), (7, []), (8, [2, 8]), (9, [0])]\n\n# Initialize a variable to hold the smallest number of broken crayons\nsmallest_broken_crayons = float('inf')\n\n# Iterate through the stem and leaf data structure\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        # Calculate broken crayons by combining stem and leaf\n        broken_crayons = stem * 10 + leaf\n        # Update the smallest broken crayons if the current one is smaller\n        if broken_crayons < smallest_broken_crayons:\n            smallest_broken_crayons = broken_crayons\n\n# Check for stems with no leaves\nfor stem in range(1, 10):\n    if stem not in [s[0] for s in stem_and_leaf]:\n        # If a stem has no leaves, the smallest number is the stem itself\n        broken_crayons = stem * 10\n        if broken_crayons < smallest_broken_crayons:\n            smallest_broken_crayons = broken_crayons\n\nanswer = smallest_broken_crayons\nprint(answer)", "# Define the stem and leaf data structure  \nstem_and_leaf = [(1, [2]), (2, [7, 8]), (3, [0, 3]), (4, []), (5, [0]), (6, []), (7, []), (8, [2, 8]), (9, [0])]  \n\n# Initialize a variable to store the smallest number of broken crayons  \nsmallest_broken_crayons = float('inf')  \n\n# Iterate through the stem and leaf data structure  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        # Calculate broken crayons by combining stem and leaf  \n        broken_crayons = stem * 10 + leaf  \n        # Update the smallest broken crayons if the current one is smaller  \n        if broken_crayons < smallest_broken_crayons:  \n            smallest_broken_crayons = broken_crayons  \n\n# Assign the result to the answer variable  \nanswer = smallest_broken_crayons  \nprint(answer)"
], "prediction": [12.0, 12.0, 12.0, 12.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n16 | 2\n17 | 11\n18 | 18", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n16 | 2\n17 | 11\n18 | 18\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "nonlinear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for equal intervals of x-values.\nx_values = [16, 17, 18]\ny_values = [2, 11, 18]\n\n# Calculate the differences\ndifferences = [y_values[i] - y_values[i - 1] for i in range(1, len(y_values))]\n\n# If the differences are not constant, the function is nonlinear.\nis_linear = all(difference == differences[0] for difference in differences)\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values\nx_values = [16, 17, 18]\ny_values = [2, 11, 18]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i] - y_values[i - 1] for i in range(1, len(y_values))]\n\n# Check if all differences are the same\nis_linear = all(difference == differences[0] for difference in differences)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values\nx_values = [16, 17, 18]\ny_values = [2, 11, 18]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i] - y_values[i - 1] for i in range(1, len(y_values))]\n\n# Check if all differences are the same to determine if the function is linear\nis_linear = all(difference == differences[0] for difference in differences)\n\n# Assign the result to answer based on whether the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values from the table\nx_values = [16, 17, 18]\ny_values = [2, 11, 18]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i] - y_values[i - 1] for i in range(1, len(y_values))]\n\n# Check if all differences are the same\nis_linear = all(difference == differences[0] for difference in differences)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")"]
}
{
  "context": "Read the following table regarding \"Quiz scores\" and then answer a question.\n\nStem | Leaf \n2 | 2, 2, 9\n3 | 0, 2, 3\n4 | 1, 5, 8\n5 | 7, 9\n6 | \n7 | 5\n8 | 1, 9", "question": "Read the following table regarding \"Quiz scores\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 2, 2, 9\n3 | 0, 2, 3\n4 | 1, 5, 8\n5 | 7, 9\n6 | \n7 | 5\n8 | 1, 9\n\nMs. McCormick reported her students' scores on the most recent quiz. How many students scored at least 65 points?", "answer": "3", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Scores from the stem-and-leaf display\nscores = [22, 22, 29, 30, 32, 33, 41, 45, 48, 57, 59, 65, 75, 81, 89]\n\n# Count the number of students who scored at least 65 points\nstudents_scored_at_least_65 = sum(1 for score in scores if score >= 65)\nanswer = students_scored_at_least_65\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(2, [2, 2, 9]), (3, [0, 2, 3]), (4, [1, 5, 8]), (5, [7, 9]), (6, []), (7, [5]), (8, [1, 9])]\n\n# Initialize a list to collect scores\nscores = []\n\n# Iterate through the stem and leaf data structure to generate scores\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        score = stem * 10 + leaf\n        scores.append(score)\n\n# Count the number of students who scored at least 65 points\nstudents_scored_at_least_65 = sum(1 for score in scores if score >= 65)\n\n# Store the result in the answer variable\nanswer = students_scored_at_least_65\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [2, 2, 9]), (3, [0, 2, 3]), (4, [1, 5, 8]), (5, [7, 9]), (6, []), (7, [5]), (8, [1, 9])]  \n\n# Initialize counter for students who scored at least 65 points  \nstudents_scored_at_least_65 = 0  \n\n# Iterate through the stem and leaf data structure and count relevant scores  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        score = stem * 10 + leaf  \n        if score >= 65:  \n            students_scored_at_least_65 += 1  \n\nanswer = students_scored_at_least_65  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [2, 2, 9]), (3, [0, 2, 3]), (4, [1, 5, 8]), (5, [7, 9]), (6, []), (7, [5]), (8, [1, 9])]  \n\n# Initialize counter for students who scored at least 65 points  \nstudents_scored_at_least_65 = 0  \n\n# Iterate through the stem and leaf data structure and count relevant scores  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        score = stem * 10 + leaf  \n        if score >= 65:  \n            students_scored_at_least_65 += 1  \n\n# Store the result as an integer  \nanswer = students_scored_at_least_65  \nprint(answer)"
], "prediction": [4.0, 3.0, 3.0, 3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of soccer fields | Number of sprinklers\n1 | 5\n2 | 10\n3 | 15\n4 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of soccer fields | Number of sprinklers\n1 | 5\n2 | 10\n3 | 15\n4 | ?\n\nEach soccer field has 5 sprinklers. How many sprinklers are on 4 soccer fields?", "answer": "20", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of soccer fields\nsoccer_fields = 4\n# Each soccer field has 5 sprinklers\nsprinklers_per_field = 5\n# Calculate the total number of sprinklers for 4 fields\ntotal_sprinklers = soccer_fields * sprinklers_per_field\nanswer = total_sprinklers\nprint(answer)", "soccer_fields = 4\nsprinklers_per_field = 5\ntotal_sprinklers = soccer_fields * sprinklers_per_field\nanswer = int(total_sprinklers)  # Convert to integer\nprint(answer)", "soccer_fields = 4\nsprinklers_per_field = 5\ntotal_sprinklers = soccer_fields * sprinklers_per_field\nanswer = total_sprinklers  # No need to convert to integer, as the result is already an integer\nprint(answer)", "soccer_fields = 4\nsprinklers_per_field = 5\ntotal_sprinklers = soccer_fields * sprinklers_per_field\nanswer = int(total_sprinklers)  # Convert to integer for a cleaner output\nprint(answer)"], "prediction": [20.0, 20.0, 20.0, 20.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nDate | Description | Received | Expenses | Available Funds\n | Balance: end of November | | | $328.20\n12/5 | wrapping paper | | $4.95 | $323.25\n12/16 | watching Ms. Simon's cat | $15.00 | | $338.25\n12/29 | calendar | | $7.80 | $330.45", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nDate | Description | Received | Expenses | Available Funds\n | Balance: end of November | | | $328.20\n12/5 | wrapping paper | | $4.95 | $323.25\n12/16 | watching Ms. Simon's cat | $15.00 | | $338.25\n12/29 | calendar | | $7.80 | $330.45\n\nThis is Sandra's complete financial record for December. How much money did Sandra spend on December 29?", "answer": "7.80", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# From the table, the amount Sandra spent on December 29 is provided directly.\nexpenses_dec_29 = 7.80 \nanswer = expenses_dec_29\nprint(answer)", "# Amount spent by Sandra on December 29\namount_spent_dec_29 = 7.80  \nanswer = amount_spent_dec_29  \nprint(answer)", "amount_spent_dec_29 = 7.80  \nanswer = f\"${amount_spent_dec_29:.2f}\"  \nprint(answer)", "amount_spent_dec_29 = 7.80  \nanswer = amount_spent_dec_29  \nprint(answer)"], "prediction": [7.8, 7.8, "$7.80", 7.8], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npumpkin pie | $10.53\nalmond tart | $20.72\nbirthday cake | $28.48\nbanana cream pie | $10.94", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npumpkin pie | $10.53\nalmond tart | $20.72\nbirthday cake | $28.48\nbanana cream pie | $10.94\n\nHow much more does a banana cream pie cost than a pumpkin pie?", "answer": "0.41", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_banana_cream_pie = 10.94\ncost_pumpkin_pie = 10.53\n# Calculate the difference in cost\ndifference_cost = cost_banana_cream_pie - cost_pumpkin_pie\nanswer = difference_cost\nprint(answer)", "cost_banana_cream_pie = 10.94\ncost_pumpkin_pie = 10.53\ndifference_cost = cost_banana_cream_pie - cost_pumpkin_pie\nanswer = f\"${difference_cost:.2f}\"  # Format as currency\nprint(answer)", "cost_banana_cream_pie = 10.94\ncost_pumpkin_pie = 10.53\ndifference_cost = cost_banana_cream_pie - cost_pumpkin_pie\nanswer = f\"${difference_cost:.2f}\"  # Format as currency", "cost_banana_cream_pie = 10.94\ncost_pumpkin_pie = 10.53\ncost_difference = cost_banana_cream_pie - cost_pumpkin_pie\nanswer = f\"${cost_difference:.2f}\"  # Format as currency"], "prediction": [0.41, "$0.41", "$0.41", "$0.41"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Reptiles in zoos\" and then answer a question.\n\nZoo | Turtles | Lizards\nNorthside Zoo | 8 | 12\nEastern Zoo | 14 | 5\nWilderness Zoo | 13 | 18\nSouth Zoo | 5 | 7\nPacific Zoo | 13 | 15", "question": "Read the following table regarding \"Reptiles in zoos\" and then write Python code to answer a question.\n\nZoo | Turtles | Lizards\nNorthside Zoo | 8 | 12\nEastern Zoo | 14 | 5\nWilderness Zoo | 13 | 18\nSouth Zoo | 5 | 7\nPacific Zoo | 13 | 15\n\nA zoologist counted the number of reptiles at each of the state's zoos. Are there more reptiles at the Eastern Zoo or the Northside Zoo? Choose from the the options: ['Northside Zoo', 'Eastern Zoo']", "answer": "Northside Zoo", "ques_type": "multi_choice", "choices": ["Northside Zoo", "Eastern Zoo"], "code": [
  "# Python code, return answer \n# Number of reptiles at each zoo\nnorthside_zoo_reptiles = 8 + 12  # Turtles + Lizards\neastern_zoo_reptiles = 14 + 5  # Turtles + Lizards\n\n# Determine which zoo has more reptiles\nif northside_zoo_reptiles > eastern_zoo_reptiles:\n    answer = 'Northside Zoo'\nelse:\n    answer = 'Eastern Zoo'\n\nprint(answer)", "# Count the number of reptiles in each zoo\nnorthside_zoo_reptiles = 8 + 12  # Turtles + Lizards\neastern_zoo_reptiles = 14 + 5  # Turtles + Lizards\n\n# Determine which zoo has more reptiles\nif northside_zoo_reptiles > eastern_zoo_reptiles:\n    answer = 'Northside Zoo'\nelse:\n    answer = 'Eastern Zoo'\n\nprint(answer)", "# Define the number of reptiles at each zoo\nnorthside_zoo_reptiles = 8 + 12  # Turtles + Lizards\neastern_zoo_reptiles = 14 + 5  # Turtles + Lizards\n\n# Compare the total number of reptiles and determine which zoo has more\nif northside_zoo_reptiles > eastern_zoo_reptiles:\n    answer = 'Northside Zoo'\nelse:\n    answer = 'Eastern Zoo'\n\nprint(answer)", "# Define the number of turtles and lizards for each zoo\nnorthside_zoo_turtles = 8\nnorthside_zoo_lizards = 12\neastern_zoo_turtles = 14\neastern_zoo_lizards = 5\n\n# Calculate the total number of reptiles in each zoo\nnorthside_zoo_reptiles = northside_zoo_turtles + northside_zoo_lizards  # Total reptiles in Northside Zoo\neastern_zoo_reptiles = eastern_zoo_turtles + eastern_zoo_lizards  # Total reptiles in Eastern Zoo\n\n# Determine which zoo has more reptiles\nif northside_zoo_reptiles > eastern_zoo_reptiles:\n    answer = 'Northside Zoo'\nelse:\n    answer = 'Eastern Zoo'\n\nprint(answer)"
], "prediction": ["Northside Zoo", "Northside Zoo", "Northside Zoo", "Northside Zoo"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbottle of vinegar | $0.81\njar of tomato sauce | $0.94\njar of salsa | $0.95\nbottle of hot sauce | $0.85\nbottle of soy sauce | $0.84\nbottle of mustard | $0.79", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbottle of vinegar | $0.81\njar of tomato sauce | $0.94\njar of salsa | $0.95\nbottle of hot sauce | $0.85\nbottle of soy sauce | $0.84\nbottle of mustard | $0.79\n\nAnna has $2.00. Does she have enough to buy a jar of tomato sauce and a bottle of hot sauce? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# Prices of the items\nprice_tomato_sauce = 0.94\nprice_hot_sauce = 0.85\n# Total cost for both items\ntotal_cost = price_tomato_sauce + price_hot_sauce\n# Anna's available money\nanna_money = 2.00\n# Determine if Anna has enough money\nif anna_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "# Define the prices of the items\nprice_tomato_sauce = 0.94\nprice_hot_sauce = 0.85\n\n# Calculate the total cost\ntotal_cost = price_tomato_sauce + price_hot_sauce\n\n# Define the amount of money Anna has\nanna_money = 2.00\n\n# Check if Anna has enough money to buy both items\nanswer = 'yes' if anna_money >= total_cost else 'no'\n\nprint(answer)", "# Define the prices of the items\nprice_tomato_sauce = 0.94\nprice_hot_sauce = 0.85\n\n# Calculate the total cost\ntotal_cost = price_tomato_sauce + price_hot_sauce\n\n# Define the amount of money Anna has\nanna_money = 2.00\n\n# Determine if Anna has enough money\nanswer = 'yes' if anna_money >= total_cost else 'no'\n\n# Output the answer\nprint(answer)", "# Prices of the items\nprice_tomato_sauce = 0.94\nprice_hot_sauce = 0.85\n\n# Total cost calculation\ntotal_cost = price_tomato_sauce + price_hot_sauce\n\n# Amount of money Anna has\nanna_money = 2.00\n\n# Check if Anna has enough money\nanswer = 'yes' if anna_money >= total_cost else 'no'\n\n# Output the answer\nprint(answer)"
], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nDate | Description | Received | Expenses | Available Funds\n | Balance: end of November | | | $328.20\n12/5 | wrapping paper | | $4.95 | $323.25\n12/16 | watching Ms. Bowen's cat | $15.00 | | $338.25\n12/29 | calendar | | $7.80 | $330.45", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nDate | Description | Received | Expenses | Available Funds\n | Balance: end of November | | | $328.20\n12/5 | wrapping paper | | $4.95 | $323.25\n12/16 | watching Ms. Bowen's cat | $15.00 | | $338.25\n12/29 | calendar | | $7.80 | $330.45\n\nThis is Sandra's complete financial record for December. How much money did Sandra spend on December 29?", "answer": "7.80", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# From the table, the amount Sandra spent on December 29 is provided directly.\nexpenses_dec_29 = 7.80 \nanswer = expenses_dec_29\nprint(answer)", "# Define the expenses for December 29\nexpenses_dec_29 = 7.80\n\n# Store the information in a dictionary for clarity\nfinancial_record = {\n    \"Balance_end_of_November\": 328.20,\n    \"Transactions\": [\n        {\"Date\": \"12/5\", \"Description\": \"wrapping paper\", \"Received\": 0, \"Expenses\": 4.95, \"Available Funds\": 323.25},\n        {\"Date\": \"12/16\", \"Description\": \"watching Ms. Bowen's cat\", \"Received\": 15.00, \"Expenses\": 0, \"Available Funds\": 338.25},\n        {\"Date\": \"12/29\", \"Description\": \"calendar\", \"Received\": 0, \"Expenses\": 7.80, \"Available Funds\": 330.45}\n    ]\n}\n\n# Assign the expense amount for December 29 to the answer variable\nanswer = expenses_dec_29\nprint(answer)", "# Define Sandra's financial record as a dictionary\nfinancial_record = {\n    \"Balance_end_of_November\": 328.20,\n    \"Transactions\": [\n        {\"Date\": \"12/5\", \"Description\": \"wrapping paper\", \"Received\": 0, \"Expenses\": 4.95, \"Available Funds\": 323.25},\n        {\"Date\": \"12/16\", \"Description\": \"watching Ms. Bowen's cat\", \"Received\": 15.00, \"Expenses\": 0, \"Available Funds\": 338.25},\n        {\"Date\": \"12/29\", \"Description\": \"calendar\", \"Received\": 0, \"Expenses\": 7.80, \"Available Funds\": 330.45}\n    ]\n}\n\n# Extract the expenses for December 29 directly from the financial record\nexpenses_dec_29 = financial_record[\"Transactions\"][2][\"Expenses\"]\nanswer = expenses_dec_29\nprint(answer)", "financial_record = {\n    \"Balance_end_of_November\": 328.20,\n    \"Transactions\": [\n        {\"Date\": \"12/5\", \"Description\": \"wrapping paper\", \"Received\": 0, \"Expenses\": 4.95, \"Available Funds\": 323.25},\n        {\"Date\": \"12/16\", \"Description\": \"watching Ms. Bowen's cat\", \"Received\": 15.00, \"Expenses\": 0, \"Available Funds\": 338.25},\n        {\"Date\": \"12/29\", \"Description\": \"calendar\", \"Received\": 0, \"Expenses\": 7.80, \"Available Funds\": 330.45}\n    ]\n}\n\nexpenses_dec_29 = financial_record[\"Transactions\"][2][\"Expenses\"]\nanswer = round(expenses_dec_29, 2)  # Ensure the answer is rounded to two decimal places\nprint(answer)"
], "prediction": [7.8, 7.8, 7.8, 7.8], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Pretzels sold\" and then answer a question.\n\nDay | Number of pretzels\nFriday | 678\nSaturday | 364\nSunday | 476", "question": "Read the following table regarding \"Pretzels sold\" and then write Python code to answer a question.\n\nDay | Number of pretzels\nFriday | 678\nSaturday | 364\nSunday | 476\n\nA pretzel stand owner kept track of the number of pretzels sold during the past 3 days. How many more pretzels did the stand sell on Friday than on Sunday?", "answer": "202", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \npretzels_friday = 678\npretzels_sunday = 476\n# Calculate the difference in pretzels sold\ndifference = pretzels_friday - pretzels_sunday\nanswer = difference\nprint(answer)", "pretzels_friday = 678\npretzels_sunday = 476\ndifference = pretzels_friday - pretzels_sunday\nanswer = int(difference)  # Convert the result to an integer\nprint(answer)", "pretzels_friday = 678\npretzels_sunday = 476\ndifference = pretzels_friday - pretzels_sunday\nanswer = difference  # The result is already an integer\nprint(answer)", "pretzels_friday = 678\npretzels_sunday = 476\ndifference = pretzels_friday - pretzels_sunday\nanswer = difference  # The result is already an integer\nprint(answer)"], "prediction": [202.0, 202.0, 202.0, 202.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Trips to the mall last month\" and then answer a question.\n\nNumber of trips | Frequency\n0 | 10\n1 | 7\n2 | 11\n3 | 20\n4 | 9\n5 | 5\n6 | 15", "question": "Read the following table regarding \"Trips to the mall last month\" and then write Python code to answer a question.\n\nNumber of trips | Frequency\n0 | 10\n1 | 7\n2 | 11\n3 | 20\n4 | 9\n5 | 5\n6 | 15\n\nA marketing research firm asked people how many times they visited the mall last month. How many people went to the mall twice last month?", "answer": "11", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of people who went to the mall twice\nfrequency_twice = 11\nanswer = frequency_twice\nprint(answer)", "# Define the frequency of trips to the mall\ntrips_frequency = {\n    0: 10,\n    1: 7,\n    2: 11,\n    3: 20,\n    4: 9,\n    5: 5,\n    6: 15\n}\n\n# Get the number of people who went to the mall twice last month\nanswer = trips_frequency[2]\n\nprint(answer)", "trips_frequency = {\n    0: 10,\n    1: 7,\n    2: 11,\n    3: 20,\n    4: 9,\n    5: 5,\n    6: 15\n}\nanswer = int(trips_frequency[2])  # Ensure the answer is an integer\nprint(answer)", "trips_frequency = {\n    0: 10,\n    1: 7,\n    2: 11,\n    3: 20,\n    4: 9,\n    5: 5,\n    6: 15\n}\nanswer = trips_frequency[2]  # Directly access the value without conversion\nprint(answer)"], "prediction": [11.0, 11.0, 11.0, 11.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ncream cheese | $2 per lb\ncottage cheese | $5 per lb\nbutter | $2 per lb\nplain yogurt | $4 per lb\nGreek yogurt | $2 per lb", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ncream cheese | $2 per lb\ncottage cheese | $5 per lb\nbutter | $2 per lb\nplain yogurt | $4 per lb\nGreek yogurt | $2 per lb\n\nJustin went to the store. He bought 3.4 pounds of cream cheese. How much did he spend?", "answer": "6.80", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_cream_cheese = 2  # price of cream cheese per pound\npounds_bought = 3.4  # pounds of cream cheese purchased\n# Calculate total cost\ntotal_cost = price_per_pound_cream_cheese * pounds_bought\nanswer = total_cost\nprint(answer)", "# Price of cream cheese per pound\nprice_per_pound_cream_cheese = 2  \n\n# Pounds of cream cheese purchased\npounds_bought = 3.4  \n\n# Calculate total cost\ntotal_cost = price_per_pound_cream_cheese * pounds_bought  \n\n# Store the result in the variable 'answer'\nanswer = total_cost  \n\n# Print the answer\nprint(answer)", "price_per_pound_cream_cheese = 2  \npounds_bought = 3.4  \ntotal_cost = price_per_pound_cream_cheese * pounds_bought  \nanswer = round(total_cost, 2)  # Round to two decimal places for currency formatting\nprint(answer)", "# Define the price per pound of cream cheese and the amount bought\nprice_per_pound_cream_cheese = 2  \npounds_bought = 3.4  \n\n# Calculate the total cost\ntotal_cost = price_per_pound_cream_cheese * pounds_bought  \n\n# Round to two decimal places for currency formatting\nanswer = round(total_cost, 2)  \n\n# Output the answer\nprint(answer)"], "prediction": [6.8, 6.8, 6.8, 6.8], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Hockey games won by Sullivan High\" and then answer a question.\n\nYear | Games won\n2011 | 7\n2012 | 5\n2013 | 1\n2014 | 16\n2015 | 9", "question": "Read the following table regarding \"Hockey games won by Sullivan High\" and then write Python code to answer a question.\n\nYear | Games won\n2011 | 7\n2012 | 5\n2013 | 1\n2014 | 16\n2015 | 9\n\nA pair of Sullivan High School hockey fans counted the number of games won by the school each year. According to the table, what was the rate of change between 2011 and 2012?", "answer": "-2", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of games won in 2011 and 2012\ngames_won_2011 = 7\ngames_won_2012 = 5\n\n# Calculate the rate of change\nrate_of_change = games_won_2012 - games_won_2011\nanswer = rate_of_change\nprint(answer)", "# Define the number of games won in 2011 and 2012\ngames_won_2011 = 7\ngames_won_2012 = 5\n\n# Calculate the change in games won\nchange_in_games = games_won_2012 - games_won_2011\n\n# Calculate the rate of change (change in games won over the change in years)\nrate_of_change = change_in_games / 1  # The change in years is 1 year\n\n# Store the result in the answer variable\nanswer = rate_of_change\n\n# Output the answer\nprint(answer)", "games_won_2011 = 7\ngames_won_2012 = 5\nchange_in_games = games_won_2012 - games_won_2011\nrate_of_change = change_in_games / 1  # The change in years is 1 year\nanswer = f\"The rate of change in games won from 2011 to 2012 is {rate_of_change} games per year.\"\nprint(answer)", "# Define the number of games won in each year\ngames_won_2011 = 7\ngames_won_2012 = 5\n\n# Calculate the change in games won\nchange_in_games = games_won_2012 - games_won_2011\n\n# Calculate the rate of change (change in games won per year)\nrate_of_change = change_in_games / 1  # The change in years is 1 year\n\n# Store the numerical value of the rate of change in the variable 'answer'\nanswer = rate_of_change\n\nprint(answer)"], "prediction": [-2.0, -2.0, "The rate of change in games won from 2011 to 2012 is -2.0 games per year.", -2.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Zoo ticket prices\" and then answer a question.\n\nZoo | Adult | Child\nCentral Park | $10 | $5\nSouthern Nevada | $8 | $6\nCentral Florida | $11 | $7\nBronx | $15 | $11\nBoise | $6 | $3", "question": "Read the following table regarding \"Zoo ticket prices\" and then write Python code to answer a question.\n\nZoo | Adult | Child\nCentral Park | $10 | $5\nSouthern Nevada | $8 | $6\nCentral Florida | $11 | $7\nBronx | $15 | $11\nBoise | $6 | $3\n\nDr. Pratt, a zoo director, researched ticket prices at other zoos around the country. Of the zoos shown, which charges the most for a child ticket? Choose from the the options: ['Bronx', 'Central Florida', 'Central Park', 'Boise']", "answer": "Bronx", "ques_type": "multi_choice", "choices": ["Bronx", "Central Florida", "Central Park", "Boise"], "code": [
  "# Python code, return answer \n# Define the zoo ticket prices for children\nticket_prices = {\n    'Central Park': 5,\n    'Southern Nevada': 6,\n    'Central Florida': 7,\n    'Bronx': 11,\n    'Boise': 3\n}\n# Find the zoo that charges the most for a child ticket\nmost_expensive_child_ticket_zoo = max(ticket_prices, key=ticket_prices.get)\nanswer = most_expensive_child_ticket_zoo\nprint(answer)", "# Store the zoo names and their corresponding child ticket prices in a dictionary  \nticket_prices = {\n    'Central Park': 5,\n    'Southern Nevada': 6,\n    'Central Florida': 7,\n    'Bronx': 11,\n    'Boise': 3\n}\n\n# Find the zoo that charges the most for a child ticket  \nmost_expensive_child_ticket_zoo = max(ticket_prices, key=ticket_prices.get)\nanswer = most_expensive_child_ticket_zoo  \nprint(answer)", "# Store the ticket prices for child tickets at different zoos in a dictionary  \nticket_prices = {\n    'Central Park': 5,\n    'Southern Nevada': 6,\n    'Central Florida': 7,\n    'Bronx': 11,\n    'Boise': 3\n}\n\n# Find the zoo with the most expensive child ticket  \nmost_expensive_child_ticket_zoo = max(ticket_prices, key=ticket_prices.get)\nmost_expensive_child_ticket_price = ticket_prices[most_expensive_child_ticket_zoo]\n\n# Store the result in the answer variable\nanswer = most_expensive_child_ticket_zoo  # holds the name of the zoo with the highest child ticket price\nprint(answer)", "# Define the ticket prices for each zoo\nticket_prices = {\n    'Central Park': 5,\n    'Southern Nevada': 6,\n    'Central Florida': 7,\n    'Bronx': 11,\n    'Boise': 3\n}\n\n# Find the zoo that charges the most for a child ticket\nmost_expensive_child_ticket_zoo = max(ticket_prices, key=ticket_prices.get)\nanswer = most_expensive_child_ticket_zoo  # holds the name of the zoo with the highest child ticket price\n\nprint(answer)"
], "prediction": ["Bronx", "Bronx", "Bronx", "Bronx"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Class size\" and then answer a question.\n\nTeacher | Number of students\nMr. Watson | 14\nMr. Chen | 35\nMrs. Truman | 17\nMiss Urban | 27\nMs. Hershfeld | 31\nMrs. King | 19", "question": "Read the following table regarding \"Class size\" and then write Python code to answer a question.\n\nTeacher | Number of students\nMr. Watson | 14\nMr. Chen | 35\nMrs. Truman | 17\nMiss Urban | 27\nMs. Hershfeld | 31\nMrs. King | 19\n\nSome teachers compared how many students are in their classes. What is the range of the numbers?", "answer": "21", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of the number of students in each class\nclass_sizes = [14, 35, 17, 27, 31, 19]\n# Calculate the range\nrange_of_classes = max(class_sizes) - min(class_sizes)\nanswer = range_of_classes\nprint(answer)", "class_sizes = [14, 35, 17, 27, 31, 19]\nrange_of_classes = max(class_sizes) - min(class_sizes)\nanswer = int(range_of_classes)  # Convert to integer\nprint(answer)", "class_sizes = [14, 35, 17, 27, 31, 19]\nrange_of_classes = max(class_sizes) - min(class_sizes)\nanswer = range_of_classes  # No need to convert to integer\nprint(answer)", "class_sizes = [14, 35, 17, 27, 31, 19]\nrange_of_classes = max(class_sizes) - min(class_sizes)\nanswer = int(range_of_classes)  # Convert to integer for clarity\nprint(answer)"], "prediction": [21.0, 21.0, 21.0, 21.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Pages per magazine\" and then answer a question.\n\nStem | Leaf \n2 | 1\n3 | 5, 6\n4 | 2, 2, 9\n5 | 3, 3, 8, 9", "question": "Read the following table regarding \"Pages per magazine\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 1\n3 | 5, 6\n4 | 2, 2, 9\n5 | 3, 3, 8, 9\n\nSadie, a journalism student, counted the number of pages in several major magazines. What is the smallest number of pages?", "answer": "21", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The smallest number of pages corresponds to the smallest value in the stem-and-leaf display.\nsmallest_pages = 21  # From the stem \"2 | 1\", the value is 21 pages.\nanswer = smallest_pages\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(2, [1]), (3, [5, 6]), (4, [2, 2, 9]), (5, [3, 3, 8, 9])]\n\n# Initialize variable for the smallest number of pages\nsmallest_pages = float('inf')\n\n# Iterate through the stem and leaf data structure to find the smallest number of pages\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        pages = stem * 10 + leaf\n        if pages < smallest_pages:\n            smallest_pages = pages\n\nanswer = smallest_pages\nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [(2, [1]), (3, [5, 6]), (4, [2, 2, 9]), (5, [3, 3, 8, 9])]\n\n# Initialize the smallest number of pages with a high integer value\nsmallest_pages = float('inf')\n\n# Iterate through the stem and leaf data structure\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        pages = stem * 10 + leaf\n        if pages < smallest_pages:\n            smallest_pages = pages\n\n# Store the smallest number of pages as an integer\nanswer = int(smallest_pages)\nprint(answer)", "stem_and_leaf = [(2, [1]), (3, [5, 6]), (4, [2, 2, 9]), (5, [3, 3, 8, 9])]\nsmallest_pages = float('inf')\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        pages = stem * 10 + leaf\n        if pages < smallest_pages:\n            smallest_pages = pages\nanswer = smallest_pages  # No need to convert to int since it's already an integer\nprint(answer)"
], "prediction": [21.0, 21.0, 21.0, 21.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nshirt signed by a famous soccer player | $1,906.00\npainting signed by a famous artist | $1,914.00\nbat signed by a famous baseball player | $6,338.00\nphotograph signed by a famous television star | $4,057.00\njersey signed by a famous basketball player | $3,096.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nshirt signed by a famous soccer player | $1,906.00\npainting signed by a famous artist | $1,914.00\nbat signed by a famous baseball player | $6,338.00\nphotograph signed by a famous television star | $4,057.00\njersey signed by a famous basketball player | $3,096.00\n\nChloe has $7,949.00. Does she have enough to buy a painting signed by a famous artist and a bat signed by a famous baseball player? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# Prices of the items\nprice_painting = 1914.00\nprice_bat = 6338.00\n# Total cost of both items\ntotal_cost = price_painting + price_bat\n# Chloe's available funds\nchloe_funds = 7949.00\n# Check if Chloe has enough money\nif chloe_funds >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "# Define the prices of the items\nprice_painting = 1914.00\nprice_bat = 6338.00\n\n# Calculate the total cost\ntotal_cost = price_painting + price_bat  # Total cost is 1914.00 + 6338.00\n\n# Chloe's available funds\nchloe_funds = 7949.00\n\n# Determine if Chloe has enough funds\nanswer = 'yes' if chloe_funds >= total_cost else 'no'\n\nprint(answer)", "# Define the prices of the items\nprice_painting = 1914.00\nprice_bat = 6338.00\n\n# Calculate the total cost of the painting and the bat\ntotal_cost = price_painting + price_bat  # Total cost is 1914.00 + 6338.00\n\n# Chloe's available funds\nchloe_funds = 7949.00\n\n# Determine if Chloe has enough money\nanswer = 'yes' if chloe_funds >= total_cost else 'no'\nprint(answer)", "price_painting = 1914.00\nprice_bat = 6338.00\ntotal_cost = price_painting + price_bat  # Total cost is 1914.00 + 6338.00 = 8252.00\nchloe_funds = 7949.00\nanswer = 'yes' if chloe_funds >= total_cost else 'no'\nprint(answer)"
], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Pop quiz scores\" and then answer a question.\n\nStem | Leaf \n1 | 2, 2, 5, 7\n2 | 1, 3\n3 | 1, 2, 2, 3, 8\n4 | 6, 6, 7\n5 | 0, 8\n6 | 1\n7 | 5\n8 | 5", "question": "Read the following table regarding \"Pop quiz scores\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 2, 2, 5, 7\n2 | 1, 3\n3 | 1, 2, 2, 3, 8\n4 | 6, 6, 7\n5 | 0, 8\n6 | 1\n7 | 5\n8 | 5\n\nProfessor Harrell released the results of yesterday's pop quiz. How many students scored fewer than 63 points?", "answer": "17", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The scores represented in the stem-and-leaf display\nscores = [12, 12, 15, 17, 21, 23, 31, 32, 32, 33, 38, 46, 46, 47, 50, 58, 61, 75, 85, 85]\n\n# Count how many students scored fewer than 63\nfewer_than_63_count = sum(1 for score in scores if score < 63)\nanswer = fewer_than_63_count\nprint(answer)", "# List of scores from the pop quiz\nscores = [12, 12, 15, 17, 21, 23, 31, 32, 32, 33, 38, 46, 46, 47, 50, 58, 61, 75, 85, 85]\n\n# Count the number of students who scored fewer than 63 points\nfewer_than_63_count = sum(1 for score in scores if score < 63)\n\n# Store the result as an integer\nanswer = fewer_than_63_count\n\n# Output the answer\nprint(answer)", "# Define the scores of the students\nscores = [12, 12, 15, 17, 21, 23, 31, 32, 32, 33, 38, 46, 46, 47, 50, 58, 61, 75, 85, 85]\n\n# Count how many students scored fewer than 63 points\nfewer_than_63_count = sum(1 for score in scores if score < 63)\n\n# Store the result as an integer\nanswer = int(fewer_than_63_count)\n\nprint(answer)", "scores = [12, 12, 15, 17, 21, 23, 31, 32, 32, 33, 38, 46, 46, 47, 50, 58, 61, 75, 85, 85]\nfewer_than_63_count = sum(1 for score in scores if score < 63)\nanswer = fewer_than_63_count  # No need to convert to int as it's already an integer\nprint(answer)"
], "prediction": [17.0, 17.0, 17.0, 17.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of packages | Number of pens\n1 | 10\n2 | 20\n3 | 30\n4 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of packages | Number of pens\n1 | 10\n2 | 20\n3 | 30\n4 | ?\n\nEach package has 10 pens. How many pens are in 4 packages?", "answer": "40", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \npens_per_package = 10 \nnumber_of_packages = 4 \n# Calculate the total number of pens in 4 packages\ntotal_pens = pens_per_package * number_of_packages\nanswer = total_pens\nprint(answer)", "pens_per_package = 10 \nnumber_of_packages = 4 \ntotal_pens = pens_per_package * number_of_packages\nanswer = total_pens\nprint(int(answer))  # Convert to integer for a whole number output", "pens_per_package = 10 \nnumber_of_packages = 4 \ntotal_pens = pens_per_package * number_of_packages\nanswer = int(total_pens)  # Store as an integer directly\nprint(answer)", "pens_per_package = 10 \nnumber_of_packages = 4 \ntotal_pens = pens_per_package * number_of_packages\nanswer = total_pens  # No need to convert to int, as the result is already an integer\nprint(answer)"], "prediction": [40.0, 40.0, 40.0, 40.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ngreen Anjou pears | $1/lb\nred Anjou pears | $3/lb\nBartlett pears | $4/lb\nConcorde pears | $2/lb\nOsband pears | $3/lb\nBosc pears | $1/lb", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ngreen Anjou pears | $1/lb\nred Anjou pears | $3/lb\nBartlett pears | $4/lb\nConcorde pears | $2/lb\nOsband pears | $3/lb\nBosc pears | $1/lb\n\nGarrett buys 0.8 pounds of Concorde pears. What is the total cost?", "answer": "1.60", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \nprice_per_pound_concorde = 2  # Price of Concorde pears\npounds_bought = 0.8  # Pounds of pears bought\n# Calculate total cost\ntotal_cost = price_per_pound_concorde * pounds_bought\nanswer = total_cost\nprint(answer)", "# Define the price per pound for Concorde pears\nprice_per_pound_concorde = 2.00  # Price of Concorde pears in dollars\n\n# Define the number of pounds bought\npounds_bought = 0.8  # Pounds of Concorde pears bought\n\n# Calculate the total cost\ntotal_cost = price_per_pound_concorde * pounds_bought\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the price per pound for Concorde pears\nprice_per_pound_concorde = 2.00  # Price of Concorde pears in dollars\n\n# Define the amount of pounds bought\npounds_bought = 0.8  # Pounds of Concorde pears bought\n\n# Calculate the total cost\ntotal_cost = price_per_pound_concorde * pounds_bought\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the result\nprint(answer)", "# Define the price per pound for Concorde pears\nprice_per_pound_concorde = 2.00  # Price of Concorde pears in dollars\n\n# Define the amount of pounds bought\npounds_bought = 0.8  # Pounds of Concorde pears bought\n\n# Calculate the total cost\ntotal_cost = price_per_pound_concorde * pounds_bought\n\n# Format the answer to include a dollar sign\nanswer = f\"${total_cost:.2f}\"\n\n# Print the answer\nprint(answer)"
], "prediction": [1.6, 1.6, 1.6, "$1.60"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Movie schedule\" and then answer a question.\n\nMovie | Begin | End\nTwo Funny Guys in a Big City | 7:50 A.M. | 10:50 A.M.\nA Mysterious Mystery | 10:20 A.M. | 11:55 A.M.\nWitches and Wizards on Broomsticks | 11:25 A.M. | 12:45 P.M.\nTime Traveler II | 12:10 P.M. | 1:50 P.M.\nCartoon Penguin Adventure | 1:10 P.M. | 4:05 P.M.\nAliens from Outer Space | 3:20 P.M. | 4:45 P.M.\nReturn to Tumbleweed City | 3:50 P.M. | 6:20 P.M.", "question": "Read the following table regarding \"Movie schedule\" and then write Python code to answer a question.\n\nMovie | Begin | End\nTwo Funny Guys in a Big City | 7:50 A.M. | 10:50 A.M.\nA Mysterious Mystery | 10:20 A.M. | 11:55 A.M.\nWitches and Wizards on Broomsticks | 11:25 A.M. | 12:45 P.M.\nTime Traveler II | 12:10 P.M. | 1:50 P.M.\nCartoon Penguin Adventure | 1:10 P.M. | 4:05 P.M.\nAliens from Outer Space | 3:20 P.M. | 4:45 P.M.\nReturn to Tumbleweed City | 3:50 P.M. | 6:20 P.M.\n\nLook at the following schedule. Which movie ends at 6.20 P.M.? Choose from the the options: ['Witches and Wizards on Broomsticks', 'A Mysterious Mystery', 'Time Traveler II', 'Return to Tumbleweed City']", "answer": "Return to Tumbleweed City", "ques_type": "multi_choice", "choices": ["Witches and Wizards on Broomsticks", "A Mysterious Mystery", "Time Traveler II", "Return to Tumbleweed City"], "code": [
  "# Python code, return answer \n# The movie that ends at 6:20 P.M.\nanswer = 'Return to Tumbleweed City'\nprint(answer)", "# Define the movie schedule as a list of dictionaries\nmovies = [\n    {\"title\": \"Two Funny Guys in a Big City\", \"end\": \"10:50 A.M.\"},\n    {\"title\": \"A Mysterious Mystery\", \"end\": \"11:55 A.M.\"},\n    {\"title\": \"Witches and Wizards on Broomsticks\", \"end\": \"12:45 P.M.\"},\n    {\"title\": \"Time Traveler II\", \"end\": \"1:50 P.M.\"},\n    {\"title\": \"Cartoon Penguin Adventure\", \"end\": \"4:05 P.M.\"},\n    {\"title\": \"Aliens from Outer Space\", \"end\": \"4:45 P.M.\"},\n    {\"title\": \"Return to Tumbleweed City\", \"end\": \"6:20 P.M.\"},\n]\n\n# Initialize a variable to hold the answer\nanswer = None\n\n# Iterate through the movie schedule to find the movie that ends at 6:20 P.M.\nfor movie in movies:\n    if movie[\"end\"] == \"6:20 P.M.\":\n        answer = movie[\"title\"]\n        break\n\nprint(answer)", "# Define the list of movies with their titles and end times\nmovies = [\n    {\"title\": \"Two Funny Guys in a Big City\", \"end\": \"10:50 A.M.\"},\n    {\"title\": \"A Mysterious Mystery\", \"end\": \"11:55 A.M.\"},\n    {\"title\": \"Witches and Wizards on Broomsticks\", \"end\": \"12:45 P.M.\"},\n    {\"title\": \"Time Traveler II\", \"end\": \"1:50 P.M.\"},\n    {\"title\": \"Cartoon Penguin Adventure\", \"end\": \"4:05 P.M.\"},\n    {\"title\": \"Aliens from Outer Space\", \"end\": \"4:45 P.M.\"},\n    {\"title\": \"Return to Tumbleweed City\", \"end\": \"6:20 P.M.\"},\n]\n\n# Initialize the answer variable\nanswer = None\n\n# Iterate through the movies to find the one that ends at 6:20 P.M.\nfor movie in movies:\n    if movie[\"end\"] == \"6:20 P.M.\":\n        answer = movie[\"title\"]\n        break\n\n# Output the answer\nprint(answer)", "movies = [\n    {\"title\": \"Two Funny Guys in a Big City\", \"end\": \"10:50 A.M.\"},\n    {\"title\": \"A Mysterious Mystery\", \"end\": \"11:55 A.M.\"},\n    {\"title\": \"Witches and Wizards on Broomsticks\", \"end\": \"12:45 P.M.\"},\n    {\"title\": \"Time Traveler II\", \"end\": \"1:50 P.M.\"},\n    {\"title\": \"Cartoon Penguin Adventure\", \"end\": \"4:05 P.M.\"},\n    {\"title\": \"Aliens from Outer Space\", \"end\": \"4:45 P.M.\"},\n    {\"title\": \"Return to Tumbleweed City\", \"end\": \"6:20 P.M.\"},\n]\n\n# Use a list comprehension to find the movie title that ends at 6:20 P.M.\nanswer = next((movie[\"title\"] for movie in movies if movie[\"end\"] == \"6:20 P.M.\"), None)\n\nprint(answer)"
], "prediction": ["Return to Tumbleweed City", "Return to Tumbleweed City", "Return to Tumbleweed City", "Return to Tumbleweed City"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nOption | Change in phone price\nAdd an upgrade | $60\nBuy a used phone | -$75", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nOption | Change in phone price\nAdd an upgrade | $60\nBuy a used phone | -$75\n\nBecky is looking at the price of new cell phones online. Her favorite company, OrangeTech, has a special this weekend. Becky can add an upgrade to a phone for an additional cost, or she can buy a used phone to get a discount. The change in price for each option is shown in the table. Which option results in a greater change in price? Choose from the the options: ['adding an upgrade', 'buying a used phone']", "answer": "buying a used phone", "ques_type": "multi_choice", "choices": ["adding an upgrade", "buying a used phone"], "code": ["# Python code, return answer \nchange_upgrade = 60 \nchange_used_phone = -75 \n# Compare the changes in price (considering the absolute values for comparison)\nif change_upgrade > abs(change_used_phone): \n    answer = 'adding an upgrade'\nelse:\n    answer = 'buying a used phone'\nprint(answer)", "change_upgrade = 60 \nchange_used_phone = -75 \n\n# Determine which option results in a greater change in price\nif change_upgrade > abs(change_used_phone): \n    answer = 'adding an upgrade'\nelse:\n    answer = 'buying a used phone'\n\n# Output the answer\nprint(answer)", "change_upgrade = 60 \nchange_used_phone = -75 \n\n# Compare the changes directly\nif change_upgrade > abs(change_used_phone): \n    answer = 'adding an upgrade'\nelse:\n    answer = 'buying a used phone'\n\nprint(answer)", "change_upgrade = 60 \nchange_used_phone = -75 \n\n# Compare the change in price directly\nif change_upgrade > abs(change_used_phone): \n    answer = 'adding an upgrade'\nelse:\n    answer = 'buying a used phone'\n\nprint(answer)"], "prediction": ["buying a used phone", "buying a used phone", "buying a used phone", "buying a used phone"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nmap of Canada | $9.08\nbook of crossword puzzles | $7.05\nmagazine | $1.89\nmap of the world | $3.06\nbook of piano music | $9.78", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nmap of Canada | $9.08\nbook of crossword puzzles | $7.05\nmagazine | $1.89\nmap of the world | $3.06\nbook of piano music | $9.78\n\nHow much money does Damon need to buy 6 magazines?", "answer": "11.34", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_magazine = 1.89 \nnumber_of_magazines = 6 \ntotal_cost = price_per_magazine * number_of_magazines\nanswer = total_cost\nprint(answer)", "price_per_magazine = 1.89 \nnumber_of_magazines = 6 \ntotal_cost = price_per_magazine * number_of_magazines\nanswer = total_cost\nprint(answer)", "# Calculate the total cost for 6 magazines\nprice_per_magazine = 1.89 \nnumber_of_magazines = 6 \ntotal_cost = price_per_magazine * number_of_magazines\nanswer = total_cost\nprint(answer)", "# Calculate the total cost for 6 magazines\nprice_per_magazine = 1.89 \nnumber_of_magazines = 6 \ntotal_cost = price_per_magazine * number_of_magazines\n\n# Format the total cost as a monetary value with two decimal places\nanswer = f\"${total_cost:.2f}\"\nprint(answer)"], "prediction": [11.34, 11.34, 11.34, "$11.34"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Fish per tank\" and then answer a question.\n\nStem | Leaf \n2 | 5\n3 | 0, 4\n4 | 2, 8, 9\n5 | 5, 7\n6 | 4, 7\n7 | 1, 2, 5\n8 | 2, 6", "question": "Read the following table regarding \"Fish per tank\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 5\n3 | 0, 4\n4 | 2, 8, 9\n5 | 5, 7\n6 | 4, 7\n7 | 1, 2, 5\n8 | 2, 6\n\nA pet store owner had her staff count the number of fish in each tank. How many tanks have at least 28 fish?", "answer": "14", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Listing the number of fish per tank from the stem-and-leaf display\nfish_counts = [25, 30, 34, 42, 48, 49, 55, 57, 64, 67, 71, 72, 75, 82, 86]\n\n# Count how many tanks have at least 28 fish\ntanks_with_at_least_28_fish = len([count for count in fish_counts if count >= 28])\nanswer = tanks_with_at_least_28_fish\nprint(answer)", "# Define the fish counts based on the stem-and-leaf plot\nfish_counts = [25, 30, 34, 42, 48, 49, 55, 57, 64, 67, 71, 72, 75, 82, 86]\n\n# Count the number of tanks with at least 28 fish\ntanks_with_at_least_28_fish = len([count for count in fish_counts if count >= 28])\n\n# Store the result as an integer\nanswer = tanks_with_at_least_28_fish\n\nprint(answer)", "# Define the fish counts based on the stem and leaf data structure  \nfish_counts = [25, 30, 34, 42, 48, 49, 55, 57, 64, 67, 71, 72, 75, 82, 86]  \n\n# Count the number of tanks with at least 28 fish  \ntanks_with_at_least_28_fish = len([count for count in fish_counts if count >= 28])  \n\n# Store the result as an integer  \nanswer = int(tanks_with_at_least_28_fish)  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(2, [5]), (3, [0, 4]), (4, [2, 8, 9]), (5, [5, 7]), (6, [4, 7]), (7, [1, 2, 5]), (8, [2, 6])]\n\n# Initialize a list to hold the fish counts\nfish_counts = []\n\n# Iterate through the stem and leaf data structure to calculate fish counts\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        fish_counts.append(stem * 10 + leaf)\n\n# Count the tanks with at least 28 fish\ntanks_with_at_least_28_fish = len([count for count in fish_counts if count >= 28])\n\n# Store the result in the answer variable\nanswer = tanks_with_at_least_28_fish\n\nprint(answer)"
], "prediction": [14.0, 14.0, 14.0, 14.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nLocation | Elevation (m)\nTop of the skyscraper | 275\nBottom of the mine | -260", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nLocation | Elevation (m)\nTop of the skyscraper | 275\nBottom of the mine | -260\n\nMabel likes watching the show Engineering Marvels. In last night's episode, the engineering team visited a tall skyscraper and a deep mine. A banner at the bottom of the screen showed the elevation of each location the team visited. Which location is closer to sea level? Choose from the the options: ['top of the skyscraper', 'bottom of the mine']", "answer": "bottom of the mine", "ques_type": "multi_choice", "choices": ["top of the skyscraper", "bottom of the mine"], "code": ["# Python code, return answer \nelevation_skyscraper = 275  # meters\nelevation_mine = -260  # meters\n\n# Determine which location is closer to sea level (0 meters)\nif elevation_skyscraper > elevation_mine:\n    answer = 'top of the skyscraper'\nelse:\n    answer = 'bottom of the mine'\n    \nprint(answer)", "elevation_skyscraper = 275  # meters\nelevation_mine = -260  # meters\n\n# Compare the absolute values of the elevations to determine which is closer to sea level\nif abs(elevation_skyscraper) < abs(elevation_mine):\n    answer = 'top of the skyscraper'\nelse:\n    answer = 'bottom of the mine'\n\nprint(answer)", "elevation_skyscraper = 275  # meters\nelevation_mine = -260  # meters\n\n# Compare the elevations directly to determine which is closer to sea level\nif elevation_skyscraper < abs(elevation_mine):\n    answer = 'top of the skyscraper'\nelse:\n    answer = 'bottom of the mine'\n\nprint(answer)", "elevation_skyscraper = 275  # meters\nelevation_mine = -260  # meters\n\n# Calculate the absolute distance from sea level for both locations\ndistance_to_sea_level_skyscraper = abs(elevation_skyscraper)\ndistance_to_sea_level_mine = abs(elevation_mine)\n\n# Determine which location is closer to sea level\nif distance_to_sea_level_skyscraper < distance_to_sea_level_mine:\n    answer = 'top of the skyscraper'\nelse:\n    answer = 'bottom of the mine'\n\nprint(answer)"], "prediction": ["top of the skyscraper", "bottom of the mine", "bottom of the mine", "bottom of the mine"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Quiz show scores\" and then answer a question.\n\nName | Score\nBarbara | 48\nHanson | 45\nEzra | 46\nPatrick | 43", "question": "Read the following table regarding \"Quiz show scores\" and then write Python code to answer a question.\n\nName | Score\nBarbara | 48\nHanson | 45\nEzra | 46\nPatrick | 43\n\nThe players on a quiz show received the following scores. Who had the lowest score? Choose from the the options: ['Barbara', 'Hanson', 'Ezra', 'Patrick']", "answer": "Patrick", "ques_type": "multi_choice", "choices": ["Barbara", "Hanson", "Ezra", "Patrick"], "code": ["# Python code, return answer \nscores = {\n    'Barbara': 48,\n    'Hanson': 45,\n    'Ezra': 46,\n    'Patrick': 43\n}\n# Find the player with the lowest score\nlowest_score_player = min(scores, key=scores.get)\nanswer = lowest_score_player\nprint(answer)", "# Store the scores of the players in a dictionary\nscores = {\n    'Barbara': 48,\n    'Hanson': 45,\n    'Ezra': 46,\n    'Patrick': 43\n}\n\n# Find the player with the lowest score\nlowest_score_player = min(scores, key=scores.get)\nanswer = lowest_score_player  # Store the result in 'answer'\nprint(answer)", "scores = {\n    'Barbara': 48,\n    'Hanson': 45,\n    'Ezra': 46,\n    'Patrick': 43\n}\nlowest_score_player = min(scores, key=scores.get)\nanswer = lowest_score_player  # Store the result in 'answer'\nprint(answer)  # Output the result as specified", "scores = {\n    'Barbara': 48,\n    'Hanson': 45,\n    'Ezra': 46,\n    'Patrick': 43\n}\nlowest_score_player = min(scores, key=scores.get)\nanswer = lowest_score_player  # Store the result in 'answer'\nprint(answer)  # Output the result as specified"], "prediction": ["Patrick", "Patrick", "Patrick", "Patrick"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Sheep owned\" and then answer a question.\n\nFarmer | Number of sheep\nFarmer Jo | 60\nFarmer Bob | 86\nFarmer Betty | 67\nFarmer Sally | 57\nFarmer Wendy | 76", "question": "Read the following table regarding \"Sheep owned\" and then write Python code to answer a question.\n\nFarmer | Number of sheep\nFarmer Jo | 60\nFarmer Bob | 86\nFarmer Betty | 67\nFarmer Sally | 57\nFarmer Wendy | 76\n\nSome farmers compared how many sheep were in their flocks. What is the median of the numbers?", "answer": "67", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of the number of sheep owned by each farmer\nsheep_counts = [60, 86, 67, 57, 76]\n# Sort the counts to find the median\nsheep_counts.sort()\n# Calculate the median\nn = len(sheep_counts)\nif n % 2 == 1:\n    median = sheep_counts[n // 2]\nelse:\n    median = (sheep_counts[n // 2 - 1] + sheep_counts[n // 2]) / 2\nanswer = median\nprint(answer)", "sheep_counts = [60, 86, 67, 57, 76]\nsheep_counts.sort()\nn = len(sheep_counts)\n\nif n % 2 == 1:\n    median = sheep_counts[n // 2]\nelse:\n    median = (sheep_counts[n // 2 - 1] + sheep_counts[n // 2]) / 2\n\nanswer = median\nprint(answer)", "sheep_counts = [60, 86, 67, 57, 76]\nsheep_counts.sort()\nn = len(sheep_counts)\n\n# Since the number of sheep counts is odd, we can directly access the middle element\nmedian = sheep_counts[n // 2]\nanswer = median\nprint(answer)", "# List of sheep counts\nsheep_counts = [60, 86, 67, 57, 76]\n\n# Sort the list\nsheep_counts.sort()\n\n# Calculate the median\nn = len(sheep_counts)\nif n % 2 == 1:\n    median = sheep_counts[n // 2]  # For odd number of elements\nelse:\n    median = (sheep_counts[n // 2 - 1] + sheep_counts[n // 2]) / 2  # For even number of elements\n\nanswer = median\nprint(answer)"], "prediction": [67.0, 67.0, 67.0, 67.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Push-up competition (number of push-ups)\" and then answer a question.\n\nStem | Leaf \n2 | 3, 3, 7, 8\n3 | 8\n4 | 2, 4, 5\n5 | 0, 0, 6, 6, 8, 9\n6 | 5, 9\n7 | 6\n8 | 3\n9 | 0, 0", "question": "Read the following table regarding \"Push-up competition (number of push-ups)\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 3, 3, 7, 8\n3 | 8\n4 | 2, 4, 5\n5 | 0, 0, 6, 6, 8, 9\n6 | 5, 9\n7 | 6\n8 | 3\n9 | 0, 0\n\nCassie's P.E. class participated in a push-up competition, and Cassie wrote down how many push-ups each person could do. How many people did fewer than 55 push-ups?", "answer": "10", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Count how many people did fewer than 55 push-ups based on the stem-and-leaf display\n# The stem values represent tens, and the leaves represent units.\npush_ups = [\n    23, 23, 27, 28,  # Stem 2\n    38,              # Stem 3\n    42, 44, 45,     # Stem 4\n    50, 50, 56, 56, 58, 59,  # Stem 5\n    65, 69,         # Stem 6\n    76,             # Stem 7\n    83,             # Stem 8\n    90, 90          # Stem 9\n]\n\n# Count how many did fewer than 55 push-ups\nfewer_than_55 = sum(1 for push_up in push_ups if push_up < 55)\nanswer = fewer_than_55\nprint(answer)", "push_ups = [\n    23, 23, 27, 28,  # Stem 2\n    38,              # Stem 3\n    42, 44, 45,     # Stem 4\n    50, 50, 56, 56, 58, 59,  # Stem 5\n    65, 69,         # Stem 6\n    76,             # Stem 7\n    83,             # Stem 8\n    90, 90          # Stem 9\n]\n\nfewer_than_55 = len([push_up for push_up in push_ups if push_up < 55])\nanswer = fewer_than_55\nprint(answer)", "push_ups = [\n    23, 23, 27, 28,  # Stem 2\n    38,              # Stem 3\n    42, 44, 45,     # Stem 4\n    50, 50, 56, 56, 58, 59,  # Stem 5\n    65, 69,         # Stem 6\n    76,             # Stem 7\n    83,             # Stem 8\n    90, 90          # Stem 9\n]\n\n# Count the number of people who did fewer than 55 push-ups\nfewer_than_55 = len([push_up for push_up in push_ups if push_up < 55])\nanswer = fewer_than_55  # This will be an integer\nprint(answer)", "push_ups = [\n    23, 23, 27, 28,  # Stem 2\n    38,              # Stem 3\n    42, 44, 45,     # Stem 4\n    50, 50, 56, 56, 58, 59,  # Stem 5\n    65, 69,         # Stem 6\n    76,             # Stem 7\n    83,             # Stem 8\n    90, 90          # Stem 9\n]\nfewer_than_55 = len([push_up for push_up in push_ups if push_up < 55])\nanswer = fewer_than_55  # This will be an integer\nprint(answer)"
], "prediction": [10.0, 10.0, 10.0, 10.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Clubs\" and then answer a question.\n\nName | Number of clubs\nFinn | 8\nSam | 10\nNellie | 10\nKaren | 4\nLuther | 7\nDale | 9\nMason | 2\nWesley | 2", "question": "Read the following table regarding \"Clubs\" and then write Python code to answer a question.\n\nName | Number of clubs\nFinn | 8\nSam | 10\nNellie | 10\nKaren | 4\nLuther | 7\nDale | 9\nMason | 2\nWesley | 2\n\nSome students compared how many clubs they belong to. What is the range of the numbers?", "answer": "8", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of clubs for each student\nclubs = [8, 10, 10, 4, 7, 9, 2, 2]\n# Calculate the range\nrange_of_clubs = max(clubs) - min(clubs)\nanswer = range_of_clubs\nprint(answer)", "clubs = [8, 10, 10, 4, 7, 9, 2, 2]\nrange_of_clubs = max(clubs) - min(clubs)\nanswer = range_of_clubs  # This will naturally be an integer\nprint(answer)", "clubs = [8, 10, 10, 4, 7, 9, 2, 2]\nrange_of_clubs = max(clubs) - min(clubs)\nanswer = int(range_of_clubs)  # Convert to integer\nprint(answer)", "clubs = [8, 10, 10, 4, 7, 9, 2, 2]\nrange_of_clubs = max(clubs) - min(clubs)\nanswer = range_of_clubs  # No need to convert to integer since range_of_clubs is already an integer\nprint(answer)"], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ncomic book | $1.57\nhistory book | $7.02\ncookbook | $8.95\nmap of Africa | $3.29\ndog calendar | $7.51", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ncomic book | $1.57\nhistory book | $7.02\ncookbook | $8.95\nmap of Africa | $3.29\ndog calendar | $7.51\n\nHow much more does a cookbook cost than a map of Africa?", "answer": "5.66", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_cookbook = 8.95 \ncost_map_of_africa = 3.29 \n# Calculate the difference in cost\ndifference_in_cost = cost_cookbook - cost_map_of_africa\nanswer = difference_in_cost\nprint(answer)", "# Define the costs of the items\ncost_cookbook = 8.95 \ncost_map_of_africa = 3.29 \n\n# Calculate the difference in cost\ndifference_in_cost = cost_cookbook - cost_map_of_africa\n\n# Store the result in the variable 'answer'\nanswer = difference_in_cost\n\n# Output the answer\nprint(answer)", "cost_cookbook = 8.95 \ncost_map_of_africa = 3.29 \ndifference_in_cost = cost_cookbook - cost_map_of_africa\nanswer = difference_in_cost\nprint(f\"The cookbook costs ${answer:.2f} more than the map of Africa.\")", "cost_cookbook = 8.95 \ncost_map_of_africa = 3.29 \ndifference_in_cost = cost_cookbook - cost_map_of_africa\nanswer = difference_in_cost\nprint(answer)"], "prediction": [5.66, 5.66, 5.66, 5.66], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Stuffed animal collections\" and then answer a question.\n\nName | Number of stuffed animals\nMeg | 263\nBecky | 232\nSavannah | 226\nEvelyn | 236", "question": "Read the following table regarding \"Stuffed animal collections\" and then write Python code to answer a question.\n\nName | Number of stuffed animals\nMeg | 263\nBecky | 232\nSavannah | 226\nEvelyn | 236\n\nSome friends compared the sizes of their stuffed animal collections. Who has the most stuffed animals? Choose from the the options: ['Meg', 'Becky', 'Savannah', 'Evelyn']", "answer": "Meg", "ques_type": "multi_choice", "choices": ["Meg", "Becky", "Savannah", "Evelyn"], "code": [
  "# Python code, return answer \nstuffed_animal_collections = {\n    'Meg': 263,\n    'Becky': 232,\n    'Savannah': 226,\n    'Evelyn': 236\n}\n# Find the friend with the most stuffed animals\nmost_stuffed_animals_friend = max(stuffed_animal_collections, key=stuffed_animal_collections.get)\nanswer = most_stuffed_animals_friend\nprint(answer)", "stuffed_animal_collections = {\n    'Meg': 263,\n    'Becky': 232,\n    'Savannah': 226,\n    'Evelyn': 236\n}\nmost_stuffed_animals_friend = max(stuffed_animal_collections, key=stuffed_animal_collections.get)\nanswer = most_stuffed_animals_friend\nprint(answer)", "# Define the stuffed animal collections in a dictionary\nstuffed_animal_collections = {\n    'Meg': 263,\n    'Becky': 232,\n    'Savannah': 226,\n    'Evelyn': 236\n}\n\n# Find the friend with the most stuffed animals\nmost_stuffed_animals_friend = max(stuffed_animal_collections, key=stuffed_animal_collections.get)\n\n# Store the result in the variable 'answer'\nanswer = most_stuffed_animals_friend\n\n# Output the result\nprint(answer)", "stuffed_animal_collections = {\n    'Meg': 263,\n    'Becky': 232,\n    'Savannah': 226,\n    'Evelyn': 236\n}\nmost_stuffed_animals_friend = max(stuffed_animal_collections, key=stuffed_animal_collections.get)\nanswer = most_stuffed_animals_friend\nprint(answer)"
], "prediction": ["Meg", "Meg", "Meg", "Meg"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Average waiting time at a doctor's office\" and then answer a question.\n\nMonth | Waiting time (minutes)\nMay | 28\nJune | 34\nJuly | 36\nAugust | 33\nSeptember | 22", "question": "Read the following table regarding \"Average waiting time at a doctor's office\" and then write Python code to answer a question.\n\nMonth | Waiting time (minutes)\nMay | 28\nJune | 34\nJuly | 36\nAugust | 33\nSeptember | 22\n\nBarry, a doctor's office receptionist, tracked the average waiting time at the office each month. According to the table, what was the rate of change between May and June?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nwaiting_time_may = 28\nwaiting_time_june = 34\n\n# Calculate the rate of change\nrate_of_change = waiting_time_june - waiting_time_may\nanswer = rate_of_change\nprint(answer)", "waiting_time_may = 28\nwaiting_time_june = 34\nrate_of_change = waiting_time_june - waiting_time_may\nanswer = f\"The rate of change in waiting time from May to June is {rate_of_change} minutes.\"\nprint(answer)", "waiting_time_may = 28\nwaiting_time_june = 34\nrate_of_change = waiting_time_june - waiting_time_may\nanswer = rate_of_change  # Store the rate of change directly\nprint(answer)", "waiting_time_may = 28\nwaiting_time_june = 34\n\n# Calculate the change in waiting time\nchange_in_waiting_time = waiting_time_june - waiting_time_may\n\n# Calculate the rate of change as a percentage of the original value\nrate_of_change_percentage = (change_in_waiting_time / waiting_time_may) * 100\n\nanswer = rate_of_change_percentage\nprint(answer)"], "prediction": [6.0, "The rate of change in waiting time from May to June is 6 minutes.", 6.0, 21.42857], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Characters per book\" and then answer a question.\n\nStem | Leaf \n1 | 0, 2, 3, 7, 7\n2 | 0, 2, 4\n3 | 0, 4, 5, 6, 6, 8, 9\n4 | 0, 3, 6, 7\n5 | 4, 4, 7, 9", "question": "Read the following table regarding \"Characters per book\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 0, 2, 3, 7, 7\n2 | 0, 2, 4\n3 | 0, 4, 5, 6, 6, 8, 9\n4 | 0, 3, 6, 7\n5 | 4, 4, 7, 9\n\nReagan kept track of the number of characters in each book she read. How many books had at least 30 characters?", "answer": "15", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Extracting the number of characters from the stem-and-leaf display.\ncharacters = [\n    10, 12, 13, 17, 17,  # From stem 1\n    20, 22, 24,          # From stem 2\n    30, 34, 35, 36, 36, 38, 39,  # From stem 3\n    40, 43, 46, 47,      # From stem 4\n    54, 54, 57, 59       # From stem 5\n]\n\n# Counting how many books had at least 30 characters\ncount_at_least_30 = sum(1 for char in characters if char >= 30)\nanswer = count_at_least_30\nprint(answer)", "characters = [\n    10, 12, 13, 17, 17,  # From stem 1\n    20, 22, 24,          # From stem 2\n    30, 34, 35, 36, 36, 38, 39,  # From stem 3\n    40, 43, 46, 47,      # From stem 4\n    54, 54, 57, 59       # From stem 5\n]\n\ncount_at_least_30 = sum(1 for char in characters if char >= 30)\nanswer = count_at_least_30  # No need to convert to int, as sum will return an int\nprint(answer)", "characters = [\n    10, 12, 13, 17, 17,  # From stem 1\n    20, 22, 24,          # From stem 2\n    30, 34, 35, 36, 36, 38, 39,  # From stem 3\n    40, 43, 46, 47,      # From stem 4\n    54, 54, 57, 59       # From stem 5\n]\ncount_at_least_30 = sum(1 for char in characters if char >= 30)\nanswer = int(count_at_least_30)  # Ensure the answer is an integer\nprint(answer)", "characters = [\n    10, 12, 13, 17, 17,  # From stem 1\n    20, 22, 24,          # From stem 2\n    30, 34, 35, 36, 36, 38, 39,  # From stem 3\n    40, 43, 46, 47,      # From stem 4\n    54, 54, 57, 59       # From stem 5\n]\n\n# Count the number of books with at least 30 characters\ncount_at_least_30 = sum(1 for char in characters if char >= 30)\nanswer = count_at_least_30  # No need for explicit conversion to int\n\nprint(answer)"
], "prediction": [15.0, 15.0, 15.0, 15.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Hockey games won by Knox High\" and then answer a question.\n\nYear | Games won\n2015 | 10\n2016 | 8\n2017 | 12\n2018 | 15\n2019 | 12", "question": "Read the following table regarding \"Hockey games won by Knox High\" and then write Python code to answer a question.\n\nYear | Games won\n2015 | 10\n2016 | 8\n2017 | 12\n2018 | 15\n2019 | 12\n\nA pair of Knox High School hockey fans counted the number of games won by the school each year. According to the table, what was the rate of change between 2018 and 2019?", "answer": "-3", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of games won in 2018 and 2019\ngames_won_2018 = 15\ngames_won_2019 = 12\n\n# Calculate the rate of change\nrate_of_change = games_won_2019 - games_won_2018\nanswer = rate_of_change\nprint(answer)", "games_won_2018 = 15\ngames_won_2019 = 12\nchange_in_games_won = games_won_2019 - games_won_2018\nchange_in_years = 2019 - 2018\nrate_of_change = change_in_games_won / change_in_years\nanswer = rate_of_change\nprint(answer)", "# Define the number of games won for each year\ngames_won = {\n    2018: 15,\n    2019: 12\n}\n\n# Calculate the change in games won and the rate of change\nchange_in_games_won = games_won[2019] - games_won[2018]\nchange_in_years = 2019 - 2018\nrate_of_change = change_in_games_won / change_in_years\n\nanswer = rate_of_change\nprint(answer)", "# Store the number of games won by Knox High School in a dictionary\ngames_won = {\n    2018: 15,\n    2019: 12\n}\n\n# Calculate the change in games won\nchange_in_games_won = games_won[2019] - games_won[2018]\nchange_in_years = 2019 - 2018\n\n# Calculate the rate of change\nrate_of_change = change_in_games_won / change_in_years\n\n# Store the result in the answer variable\nanswer = rate_of_change\n\n# Output the answer\nprint(answer)"], "prediction": [-3.0, -3.0, -3.0, -3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Web pages visited\" and then answer a question.\n\nPerson | Number of Web pages\nTim | 7\nReba | 10\nJustin | 10\nCooper | 9\nValeria | 4\nGrace | 2\nHarry | 8\nEric | 7", "question": "Read the following table regarding \"Web pages visited\" and then write Python code to answer a question.\n\nPerson | Number of Web pages\nTim | 7\nReba | 10\nJustin | 10\nCooper | 9\nValeria | 4\nGrace | 2\nHarry | 8\nEric | 7\n\nSeveral people compared how many Web pages they had visited. What is the range of the numbers?", "answer": "8", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of web pages visited by each person\nweb_pages_visited = [7, 10, 10, 9, 4, 2, 8, 7]\n# Calculate the range\nrange_of_web_pages = max(web_pages_visited) - min(web_pages_visited)\nanswer = range_of_web_pages\nprint(answer)", "web_pages_visited = [7, 10, 10, 9, 4, 2, 8, 7]\nrange_of_web_pages = max(web_pages_visited) - min(web_pages_visited)\nanswer = int(range_of_web_pages)  # Convert to integer\nprint(answer)", "web_pages_visited = [7, 10, 10, 9, 4, 2, 8, 7]\nrange_of_web_pages = max(web_pages_visited) - min(web_pages_visited)\nanswer = range_of_web_pages  # No need to convert to integer as it's already an integer\nprint(answer)", "web_pages_visited = [7, 10, 10, 9, 4, 2, 8, 7]\nrange_of_web_pages = max(web_pages_visited) - min(web_pages_visited)\nanswer = range_of_web_pages  # The result is already an integer\nprint(answer)"], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Ice cream cones sold\" and then answer a question.\n\nDay | Number of ice cream cones\nTuesday | 848\nWednesday | 847\nThursday | 887\nFriday | 878", "question": "Read the following table regarding \"Ice cream cones sold\" and then write Python code to answer a question.\n\nDay | Number of ice cream cones\nTuesday | 848\nWednesday | 847\nThursday | 887\nFriday | 878\n\nAn ice cream shop kept track of how many ice cream cones it sold in the past 4 days. On which day did the shop sell the most ice cream cones? Choose from the the options: ['Tuesday', 'Wednesday', 'Thursday', 'Friday']", "answer": "Thursday", "ques_type": "multi_choice", "choices": ["Tuesday", "Wednesday", "Thursday", "Friday"], "code": ["# Python code, return answer \nice_cream_sales = {\n    'Tuesday': 848,\n    'Wednesday': 847,\n    'Thursday': 887,\n    'Friday': 878\n}\n# Find the day with the most ice cream cones sold\nmost_cones_day = max(ice_cream_sales, key=ice_cream_sales.get)\nanswer = most_cones_day\nprint(answer)", "ice_cream_sales = {\n    'Tuesday': 848,\n    'Wednesday': 847,\n    'Thursday': 887,\n    'Friday': 878\n}\nmost_cones_day = max(ice_cream_sales, key=ice_cream_sales.get)\nanswer = most_cones_day\nprint(answer)", "# Store the ice cream sales in a dictionary\nice_cream_sales = {\n    'Tuesday': 848,\n    'Wednesday': 847,\n    'Thursday': 887,\n    'Friday': 878\n}\n\n# Find the day with the most ice cream cones sold\nmost_cones_day = max(ice_cream_sales, key=ice_cream_sales.get)\nanswer = most_cones_day\n\nprint(answer)", "ice_cream_sales = {\n    'Tuesday': 848,\n    'Wednesday': 847,\n    'Thursday': 887,\n    'Friday': 878\n}\nmost_cones_day = max(ice_cream_sales, key=ice_cream_sales.get)\nanswer = most_cones_day\nprint(answer)"], "prediction": ["Thursday", "Thursday", "Thursday", "Thursday"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Game show scores\" and then answer a question.\n\nStem | Leaf \n1 | 1, 4\n2 | 1, 1, 2, 2, 4, 7\n3 | 2, 2, 6, 9\n4 | 0, 3\n5 | 0, 1, 5, 9\n6 | 1, 6\n7 | 1, 3, 5, 6\n8 | 4", "question": "Read the following table regarding \"Game show scores\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 1, 4\n2 | 1, 1, 2, 2, 4, 7\n3 | 2, 2, 6, 9\n4 | 0, 3\n5 | 0, 1, 5, 9\n6 | 1, 6\n7 | 1, 3, 5, 6\n8 | 4\n\nThe staff of a game show tracked the performance of all the contestants during the past season. How many people scored at least 45 points but fewer than 70 points?", "answer": "6", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Extract scores from the stem-and-leaf display for scores between 45 and 69\nscores = [\n    41, 44,   # From stem 1\n    21, 21, 22, 22, 24, 27,  # From stem 2\n    32, 32, 36, 39,  # From stem 3\n    40, 43,  # From stem 4\n    50, 51, 55, 59,  # From stem 5\n    61, 66,  # From stem 6\n    71, 73, 75, 76,  # From stem 7\n    84  # From stem 8\n]\n\n# Count scores that are >= 45 and < 70\ncount_scores = sum(1 for score in scores if 45 <= score < 70)\nanswer = count_scores\nprint(answer)", "scores = [\n    41, 44,   # From stem 1\n    21, 21, 22, 22, 24, 27,  # From stem 2\n    32, 32, 36, 39,  # From stem 3\n    40, 43,  # From stem 4\n    50, 51, 55, 59,  # From stem 5\n    61, 66,  # From stem 6\n    71, 73, 75, 76,  # From stem 7\n    84  # From stem 8\n]\ncount_scores = sum(1 for score in scores if 45 <= score < 70)\nanswer = int(count_scores)  # Ensure the result is an integer\nprint(answer)", "scores = [\n    41, 44,   # From stem 1\n    21, 21, 22, 22, 24, 27,  # From stem 2\n    32, 32, 36, 39,  # From stem 3\n    40, 43,  # From stem 4\n    50, 51, 55, 59,  # From stem 5\n    61, 66,  # From stem 6\n    71, 73, 75, 76,  # From stem 7\n    84  # From stem 8\n]\ncount_scores = sum(1 for score in scores if 45 <= score < 70)\nanswer = count_scores  # Store the result directly as an integer\nprint(answer)", "scores = [\n    41, 44,   # From stem 1\n    21, 21, 22, 22, 24, 27,  # From stem 2\n    32, 32, 36, 39,  # From stem 3\n    40, 43,  # From stem 4\n    50, 51, 55, 59,  # From stem 5\n    61, 66,  # From stem 6\n    71, 73, 75, 76,  # From stem 7\n    84  # From stem 8\n]\ncount_scores = sum(1 for score in scores if 45 <= score < 70)\nanswer = int(count_scores)  # Ensure the result is an integer\nprint(answer)"
], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Coin collections\" and then answer a question.\n\nName | Number of coins\nCora | 76\nHarold | 74\nAntonio | 86\nWayne | 65\nEliana | 65\nShannon | 67\nLogan | 80\nKendra | 71", "question": "Read the following table regarding \"Coin collections\" and then write Python code to answer a question.\n\nName | Number of coins\nCora | 76\nHarold | 74\nAntonio | 86\nWayne | 65\nEliana | 65\nShannon | 67\nLogan | 80\nKendra | 71\n\nSome friends discussed the sizes of their coin collections. What is the range of the numbers?", "answer": "21", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of the number of coins collected by each person\ncoin_counts = [76, 74, 86, 65, 65, 67, 80, 71]\n\n# Calculate the range\nrange_of_coins = max(coin_counts) - min(coin_counts)\nanswer = range_of_coins\nprint(answer)", "coin_counts = [76, 74, 86, 65, 65, 67, 80, 71]\nrange_of_coins = max(coin_counts) - min(coin_counts)\nanswer = int(range_of_coins)  # Convert to integer\nprint(answer)", "coin_counts = [76, 74, 86, 65, 65, 67, 80, 71]\nrange_of_coins = max(coin_counts) - min(coin_counts)\nanswer = range_of_coins  # No need to convert to integer\nprint(answer)", "coin_counts = [76, 74, 86, 65, 65, 67, 80, 71]\nrange_of_coins = max(coin_counts) - min(coin_counts)\nanswer = range_of_coins  # This will be an integer\nprint(answer)"], "prediction": [21.0, 21.0, 21.0, 21.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Web pages visited\" and then answer a question.\n\nPerson | Number of Web pages\nTisha | 7\nWyatt | 7\nShawn | 8\nChristine | 9\nLee | 3\nRafi | 4\nVince | 3\nKamal | 2", "question": "Read the following table regarding \"Web pages visited\" and then write Python code to answer a question.\n\nPerson | Number of Web pages\nTisha | 7\nWyatt | 7\nShawn | 8\nChristine | 9\nLee | 3\nRafi | 4\nVince | 3\nKamal | 2\n\nSeveral people compared how many Web pages they had visited. What is the range of the numbers?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of Web pages visited by each person\nweb_pages_visited = [7, 7, 8, 9, 3, 4, 3, 2]\n\n# Calculate the range\nrange_of_web_pages = max(web_pages_visited) - min(web_pages_visited)\nanswer = range_of_web_pages\nprint(answer)", "web_pages_visited = [7, 7, 8, 9, 3, 4, 3, 2]\nrange_of_web_pages = max(web_pages_visited) - min(web_pages_visited)\nanswer = range_of_web_pages  # This will be an integer\nprint(answer)", "web_pages_visited = [7, 7, 8, 9, 3, 4, 3, 2]\nrange_of_web_pages = max(web_pages_visited) - min(web_pages_visited)\nanswer = range_of_web_pages  # This will be an integer\nprint(answer)", "web_pages_visited = [7, 7, 8, 9, 3, 4, 3, 2]\nrange_of_web_pages = max(web_pages_visited) - min(web_pages_visited)\nanswer = int(range_of_web_pages)  # Ensure the result is an integer\nprint(answer)"], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Zoo ticket prices\" and then answer a question.\n\nZoo | Adult | Child\nLos Angeles | $13 | $8\nHouston | $10 | $6\nCleveland | $10 | $7\nBrookfield | $12 | $8", "question": "Read the following table regarding \"Zoo ticket prices\" and then write Python code to answer a question.\n\nZoo | Adult | Child\nLos Angeles | $13 | $8\nHouston | $10 | $6\nCleveland | $10 | $7\nBrookfield | $12 | $8\n\nDr. Hatfield, a zoo director, researched ticket prices at other zoos around the country. How much does an adult ticket to the Cleveland Zoo cost?", "answer": "10", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# The price of an adult ticket to the Cleveland Zoo\ncleveland_adult_ticket_price = 10  # From the table\nanswer = cleveland_adult_ticket_price\nprint(answer)", "# Define the ticket prices for the Cleveland Zoo\ncleveland_adult_ticket_price = 10  # Correct price from the table\nanswer = cleveland_adult_ticket_price\nprint(answer)", "# Define the ticket prices for each zoo in a dictionary\nzoo_ticket_prices = {\n    'Los Angeles': {'Adult': 13, 'Child': 8},\n    'Houston': {'Adult': 10, 'Child': 6},\n    'Cleveland': {'Adult': 10, 'Child': 7},\n    'Brookfield': {'Adult': 12, 'Child': 8}\n}\n\n# Get the price of an adult ticket to the Cleveland Zoo\ncleveland_adult_ticket_price = zoo_ticket_prices['Cleveland']['Adult']\nanswer = cleveland_adult_ticket_price\nprint(answer)", "# Store the zoo ticket prices in a dictionary\nzoo_ticket_prices = {\n    'Los Angeles': {'Adult': 13, 'Child': 8},\n    'Houston': {'Adult': 10, 'Child': 6},\n    'Cleveland': {'Adult': 10, 'Child': 7},\n    'Brookfield': {'Adult': 12, 'Child': 8}\n}\n\n# Retrieve the Cleveland adult ticket price as an integer\ncleveland_adult_ticket_price = zoo_ticket_prices['Cleveland']['Adult']\nanswer = int(cleveland_adult_ticket_price)  # Ensure it's an integer\nprint(answer)"], "prediction": [10.0, 10.0, 10.0, 10.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Next trip\" and then answer a question.\n\nSeason | Frequency\nfall | 12\nspring | 19\nsummer | 47\nwinter | 13", "question": "Read the following table regarding \"Next trip\" and then write Python code to answer a question.\n\nSeason | Frequency\nfall | 12\nspring | 19\nsummer | 47\nwinter | 13\n\nWanderlust Travel Agency asked customers when they plan to take their next trip. This frequency chart shows their answers. How many fewer people said their next trip will be in winter than in summer?", "answer": "34", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of trips planned in winter and summer\nwinter_frequency = 13\nsummer_frequency = 47\n# Calculate the difference\ndifference = summer_frequency - winter_frequency\nanswer = difference\nprint(answer)", "winter_frequency = 13\nsummer_frequency = 47\ndifference = summer_frequency - winter_frequency\nanswer = difference  # This will be an integer\nprint(answer)", "winter_frequency = 13\nsummer_frequency = 47\ndifference = summer_frequency - winter_frequency\nanswer = int(difference)  # Ensure the result is an integer\nprint(answer)", "winter_frequency = 13\nsummer_frequency = 47\ndifference = summer_frequency - winter_frequency\nanswer = difference  # The result is already an integer\nprint(answer)"], "prediction": [34.0, 34.0, 34.0, 34.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nfountain | $987.00\nbarbecue grill | $795.00\niron bench | $493.00\npicnic table | $529.00\nlawn mower | $173.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nfountain | $987.00\nbarbecue grill | $795.00\niron bench | $493.00\npicnic table | $529.00\nlawn mower | $173.00\n\nHow much money does Mitch need to buy a picnic table, an iron bench, and a lawn mower?", "answer": "1,195", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\npicnic_table_price = 529.00\niron_bench_price = 493.00\nlawn_mower_price = 173.00\n\n# Total amount needed\ntotal_cost = picnic_table_price + iron_bench_price + lawn_mower_price\nanswer = total_cost\nprint(answer)", "# Define the prices of the items Mitch wants to buy\npicnic_table_price = 529.00\niron_bench_price = 493.00\nlawn_mower_price = 173.00\n\n# Calculate the total cost\nanswer = picnic_table_price + iron_bench_price + lawn_mower_price\n\n# Output the answer\nprint(answer)", "picnic_table_price = 529.00\niron_bench_price = 493.00\nlawn_mower_price = 173.00\ntotal_cost = picnic_table_price + iron_bench_price + lawn_mower_price\nanswer = int(total_cost)  # Convert to integer for cleaner output\nprint(answer)", "# Prices of the items\npicnic_table_price = 529.00\niron_bench_price = 493.00\nlawn_mower_price = 173.00\n\n# Calculate total cost\ntotal_cost = picnic_table_price + iron_bench_price + lawn_mower_price\n\n# Store the result in 'answer' variable\nanswer = total_cost\n\n# Print the answer\nprint(answer)"], "prediction": [1195.0, 1195.0, 1195.0, 1195.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Games won by the Oakland baseball team\" and then answer a question.\n\nYear | Games won\n2014 | 46\n2015 | 45\n2016 | 42\n2017 | 38\n2018 | 45", "question": "Read the following table regarding \"Games won by the Oakland baseball team\" and then write Python code to answer a question.\n\nYear | Games won\n2014 | 46\n2015 | 45\n2016 | 42\n2017 | 38\n2018 | 45\n\nFans of the Oakland baseball team compared the number of games won by their team each year. According to the table, what was the rate of change between 2016 and 2017?", "answer": "-4", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Games won in 2016 and 2017\ngames_won_2016 = 42\ngames_won_2017 = 38\n\n# Rate of change calculation\nrate_of_change = games_won_2017 - games_won_2016\nanswer = rate_of_change\nprint(answer)", "games_won_2016 = 42\ngames_won_2017 = 38\nchange_in_games_won = games_won_2017 - games_won_2016\nchange_in_time = 1  # The change is over 1 year\nrate_of_change = change_in_games_won / change_in_time\nanswer = rate_of_change\nprint(answer)", "games_won_2016 = 42\ngames_won_2017 = 38\nchange_in_games_won = games_won_2017 - games_won_2016\nchange_in_time = 1  # The change is over 1 year\nrate_of_change = change_in_games_won / change_in_time\n\nanswer = f\"The rate of change in games won from 2016 to 2017 is {rate_of_change} games per year.\"\nprint(answer)", "games_won_2016 = 42\ngames_won_2017 = 38\nchange_in_games_won = games_won_2017 - games_won_2016\nchange_in_time = 1  # The change is over 1 year\nrate_of_change = change_in_games_won / change_in_time\nanswer = rate_of_change\nprint(answer)"], "prediction": [-4.0, -4.0, "The rate of change in games won from 2016 to 2017 is -4.0 games per year.", -4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Biking last week\" and then answer a question.\n\nName | Miles\nPaul | 18\nAnthony | 16\nKeith | 12\nLauren | 19", "question": "Read the following table regarding \"Biking last week\" and then write Python code to answer a question.\n\nName | Miles\nPaul | 18\nAnthony | 16\nKeith | 12\nLauren | 19\n\nThe members of the cycling club compared how many miles they biked last week. Who biked the fewest miles? Choose from the the options: ['Paul', 'Anthony', 'Keith', 'Lauren']", "answer": "Keith", "ques_type": "multi_choice", "choices": ["Paul", "Anthony", "Keith", "Lauren"], "code": ["# Python code, return answer \nmiles_biked = {\n    'Paul': 18,\n    'Anthony': 16,\n    'Keith': 12,\n    'Lauren': 19\n}\n# Find the member who biked the fewest miles\nfewest_miles_member = min(miles_biked, key=miles_biked.get)\nanswer = fewest_miles_member\nprint(answer)", "miles_biked = {\n    'Paul': 18,\n    'Anthony': 16,\n    'Keith': 12,\n    'Lauren': 19\n}\nfewest_miles_member = min(miles_biked, key=miles_biked.get)\nanswer = fewest_miles_member\nprint(answer)", "# Define the miles biked by each member in a dictionary\nmiles_biked = {\n    'Paul': 18,\n    'Anthony': 16,\n    'Keith': 12,\n    'Lauren': 19\n}\n\n# Find the member who biked the fewest miles\nfewest_miles_member = min(miles_biked, key=miles_biked.get)\nanswer = fewest_miles_member\n\nprint(answer)", "# Store the miles biked by each member in a dictionary  \nmiles_biked = {\n    'Paul': 18,\n    'Anthony': 16,\n    'Keith': 12,\n    'Lauren': 19\n}\n\n# Find the member who biked the fewest miles  \nfewest_miles_member = min(miles_biked, key=miles_biked.get)\n\n# Store the result in the answer variable  \nanswer = fewest_miles_member  \nprint(answer)"], "prediction": ["Keith", "Keith", "Keith", "Keith"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Movies checked out\" and then answer a question.\n\nDay | Number of movies\nThursday | 387\nFriday | 122\nSaturday | 546", "question": "Read the following table regarding \"Movies checked out\" and then write Python code to answer a question.\n\nDay | Number of movies\nThursday | 387\nFriday | 122\nSaturday | 546\n\nA video store clerk looked up the number of movies checked out each day. How many more movies were checked out on Saturday than on Friday?", "answer": "424", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nmovies_checked_out_friday = 122\nmovies_checked_out_saturday = 546\n# Calculate the difference\ndifference = movies_checked_out_saturday - movies_checked_out_friday\nanswer = difference\nprint(answer)", "# Define the number of movies checked out on each day\nmovies_checked_out_friday = 122\nmovies_checked_out_saturday = 546\n\n# Calculate the difference\ndifference = movies_checked_out_saturday - movies_checked_out_friday\n\n# Store the result in the answer variable\nanswer = difference\n\n# Print the answer\nprint(answer)", "# Number of movies checked out each day\nmovies_checked_out_friday = 122\nmovies_checked_out_saturday = 546\n\n# Calculate the difference in movies checked out\ndifference_in_movies = movies_checked_out_saturday - movies_checked_out_friday\n\n# Store the result as an integer\nanswer = int(difference_in_movies)\nprint(answer)", "movies_checked_out_friday = 122\nmovies_checked_out_saturday = 546\ndifference_in_movies = movies_checked_out_saturday - movies_checked_out_friday\nanswer = difference_in_movies  # No need to convert to int, as the result is already an integer\nprint(answer)"], "prediction": [424.0, 424.0, 424.0, 424.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Pages read\" and then answer a question.\n\nMonth | Number of pages\nJune | 60\nJuly | 69\nAugust | 64\nSeptember | 61", "question": "Read the following table regarding \"Pages read\" and then write Python code to answer a question.\n\nMonth | Number of pages\nJune | 60\nJuly | 69\nAugust | 64\nSeptember | 61\n\nDalton kept a log of how many pages he read each month. In which month did Dalton read the most pages? Choose from the the options: ['June', 'July', 'August', 'September']", "answer": "July", "ques_type": "multi_choice", "choices": ["June", "July", "August", "September"], "code": ["# Python code, return answer \npages_read = {\n    'June': 60,\n    'July': 69,\n    'August': 64,\n    'September': 61\n}\n# Find the month with the most pages read\nmost_pages_month = max(pages_read, key=pages_read.get)\nanswer = most_pages_month\nprint(answer)", "# Define the number of pages read each month\npages_read = {\n    'June': 60,\n    'July': 69,\n    'August': 64,\n    'September': 61\n}\n\n# Find the month in which Dalton read the most pages\nmost_pages_month = max(pages_read, key=pages_read.get)\nanswer = most_pages_month\n\n# Output the answer\nprint(answer)", "# Store the number of pages read each month in a dictionary\npages_read = {\n    'June': 60,\n    'July': 69,\n    'August': 64,\n    'September': 61\n}\n\n# Find the month in which Dalton read the most pages\nmost_pages_month = max(pages_read, key=pages_read.get)\nanswer = most_pages_month\n\nprint(answer)  # This will print \"July\"", "# Store the number of pages read each month in a dictionary\npages_read = {\n    'June': 60,\n    'July': 69,\n    'August': 64,\n    'September': 61\n}\n\n# Find the month in which Dalton read the most pages\nmost_pages_month = max(pages_read, key=pages_read.get)\nanswer = most_pages_month\n\nprint(answer)  # This will print \"July\""], "prediction": ["July", "July", "July", "July"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Club sizes (number of members)\" and then answer a question.\n\nStem | Leaf \n1 | 2, 4, 6, 7, 7\n2 | 0\n3 | 2\n4 | 2, 4, 6\n5 | 2\n6 | \n7 | 1, 6, 9\n8 | 0, 1, 4, 6, 9", "question": "Read the following table regarding \"Club sizes (number of members)\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 2, 4, 6, 7, 7\n2 | 0\n3 | 2\n4 | 2, 4, 6\n5 | 2\n6 | \n7 | 1, 6, 9\n8 | 0, 1, 4, 6, 9\n\nWarren found out the sizes of all the clubs at his school. How many clubs have exactly 64 members?", "answer": "0", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# To find the number of clubs with exactly 64 members from the stem-and-leaf display\n# The stem '6' represents the tens place, and the leaf '4' represents the ones place.\nclubs_with_64_members = 1  # There is one leaf corresponding to 64 members in the stem '6'\nanswer = clubs_with_64_members\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [2, 4, 6, 7, 7]), (2, [0]), (3, [2]), (4, [2, 4, 6]), (5, [2]), (6, []), (7, [1, 6, 9]), (8, [0, 1, 4, 6, 9])]  \n  \n# Initialize counter for clubs with exactly 64 members  \nclubs_with_64_members = 0  \n  \n# Iterate through the stem and leaf data structure and count relevant clubs  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        if stem == 6 and leaf == 4:  # Corresponds to 64 members\n            clubs_with_64_members += 1  \n  \nanswer = clubs_with_64_members  \nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [\n    (1, [2, 4, 6, 7, 7]),\n    (2, [0]),\n    (3, [2]),\n    (4, [2, 4, 6]),\n    (5, [2]),\n    (6, []),\n    (7, [1, 6, 9]),\n    (8, [0, 1, 4, 6, 9])\n]\n\n# Initialize counter for clubs with exactly 64 members\nclubs_with_64_members = 0  \n\n# Iterate through the stem and leaf data structure\nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        if stem == 6 and leaf == 4:  # Corresponds to 64 members\n            clubs_with_64_members += 1  \n\nanswer = clubs_with_64_members  \nprint(answer)  # Output: 0", "stem_and_leaf = [\n    (1, [2, 4, 6, 7, 7]),\n    (2, [0]),\n    (3, [2]),\n    (4, [2, 4, 6]),\n    (5, [2]),\n    (6, []),\n    (7, [1, 6, 9]),\n    (8, [0, 1, 4, 6, 9])\n]\n\nclubs_with_64_members = 0  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        if stem == 6 and leaf == 4:  # Corresponds to 64 members\n            clubs_with_64_members += 1  \n\nanswer = clubs_with_64_members  # Ensure answer is an integer\nprint(answer)  # Output: 0"
], "prediction": [1.0, 0.0, 0.0, 0.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Going to the library last month\" and then answer a question.\n\nNumber of trips | Frequency\n1 | 1\n2 | 10\n3 | 19\n4 | 7", "question": "Read the following table regarding \"Going to the library last month\" and then write Python code to answer a question.\n\nNumber of trips | Frequency\n1 | 1\n2 | 10\n3 | 19\n4 | 7\n\nIn considering whether to open a new branch, the city council examined the number of times some typical residents went to the library last month. How many people went to the library more than 3 times last month?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of trips to the library\nfrequency = {\n    1: 1,\n    2: 10,\n    3: 19,\n    4: 7\n}\n# Calculate the number of people who went to the library more than 3 times\npeople_more_than_3_times = frequency.get(4, 0)  # Only 4 trips are more than 3\nanswer = people_more_than_3_times\nprint(answer)", "frequency = {\n    1: 1,\n    2: 10,\n    3: 19,\n    4: 7\n}\npeople_more_than_3_times = frequency[4]  # Only 4 trips are more than 3\nanswer = int(people_more_than_3_times)  # Ensure it's an integer\nprint(answer)", "# Define the frequency of library trips\nfrequency = {\n    1: 1,\n    2: 10,\n    3: 19,\n    4: 7\n}\n\n# Count the number of people who went to the library more than 3 times\npeople_more_than_3_times = frequency[4]  # Only those who made 4 trips\n\n# Store the result as an integer\nanswer = people_more_than_3_times  \nprint(answer)", "# Define the frequency of trips to the library\nfrequency = {\n    1: 1,  # 1 person went 1 time\n    2: 10, # 10 people went 2 times\n    3: 19, # 19 people went 3 times\n    4: 7   # 7 people went 4 times\n}\n\n# Count the number of people who went to the library more than 3 times\npeople_more_than_3_times = frequency[4]  # Only those who made 4 trips\nanswer = people_more_than_3_times  \nprint(answer)"], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Daily low temperature\" and then answer a question.\n\nDay | Temperature (\u00c2\u00b0C)\nWednesday | 5\nThursday | 14\nFriday | 13\nSaturday | 9\nSunday | 6\nMonday | 7", "question": "Read the following table regarding \"Daily low temperature\" and then write Python code to answer a question.\n\nDay | Temperature (\u00c2\u00b0C)\nWednesday | 5\nThursday | 14\nFriday | 13\nSaturday | 9\nSunday | 6\nMonday | 7\n\nDwayne graphed the daily low temperature for 6 days. What is the mean of the numbers?", "answer": "9", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ntemperatures = [5, 14, 13, 9, 6, 7]\n# Calculate the mean temperature\nmean_temperature = sum(temperatures) / len(temperatures)\nanswer = mean_temperature\nprint(answer)", "temperatures = [5, 14, 13, 9, 6, 7]\nmean_temperature = sum(temperatures) / len(temperatures)\nanswer = round(mean_temperature)  # Round to the nearest integer\nprint(answer)", "temperatures = [5, 14, 13, 9, 6, 7]\nmean_temperature = sum(temperatures) / len(temperatures)\nanswer = int(round(mean_temperature))  # Round to the nearest integer and convert to int\nprint(answer)", "temperatures = [5, 14, 13, 9, 6, 7]\nmean_temperature = sum(temperatures) / len(temperatures)\nanswer = round(mean_temperature)  # Round to the nearest integer\nprint(answer)"], "prediction": [9.0, 9.0, 9.0, 9.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Charity donations\" and then answer a question.\n\nMonth | Number of donations\nJuly | 353\nAugust | 331\nSeptember | 358\nOctober | 385", "question": "Read the following table regarding \"Charity donations\" and then write Python code to answer a question.\n\nMonth | Number of donations\nJuly | 353\nAugust | 331\nSeptember | 358\nOctober | 385\n\nA charity recorded how many donations it received each month. In which month did the charity receive the most donations? Choose from the the options: ['July', 'August', 'September', 'October']", "answer": "October", "ques_type": "multi_choice", "choices": ["July", "August", "September", "October"], "code": ["# Python code, return answer \ndonations = {\n    'July': 353,\n    'August': 331,\n    'September': 358,\n    'October': 385\n}\n# Find the month with the most donations\nmost_donations_month = max(donations, key=donations.get)\nanswer = most_donations_month\nprint(answer)", "# Store the number of donations for each month in a dictionary  \ndonations = {  \n    'July': 353,  \n    'August': 331,  \n    'September': 358,  \n    'October': 385  \n}  \n  \n# Find the month with the most donations  \nmost_donations_month = max(donations, key=donations.get)  \nanswer = most_donations_month  \nprint(answer)", "donations = {  \n    'July': 353,  \n    'August': 331,  \n    'September': 358,  \n    'October': 385  \n}  \nmost_donations_month = max(donations, key=donations.get)  \nanswer = most_donations_month  \nprint(answer)", "# Store the number of donations received each month in a dictionary\ndonations = {  \n    'July': 353,  \n    'August': 331,  \n    'September': 358,  \n    'October': 385  \n}  \n\n# Find the month with the most donations\nmost_donations_month = max(donations, key=donations.get)  \nanswer = most_donations_month  \n\nprint(answer)"], "prediction": ["October", "October", "October", "October"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nfunnel cake stand | $5,293.00\npopsicle stand | $7,784.00\nhot dog stand | $9,372.00\nshaved ice cart | $5,576.00\nice cream truck | $6,382.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nfunnel cake stand | $5,293.00\npopsicle stand | $7,784.00\nhot dog stand | $9,372.00\nshaved ice cart | $5,576.00\nice cream truck | $6,382.00\n\nAmanda has $11,631.00. Does she have enough to buy a funnel cake stand and an ice cream truck? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \nfunnel_cake_stand_price = 5293.00\nice_cream_truck_price = 6382.00\ntotal_cost = funnel_cake_stand_price + ice_cream_truck_price\namanda_budget = 11631.00\n\nif amanda_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Prices of the stands\nfunnel_cake_stand_price = 5293.00\nice_cream_truck_price = 6382.00\n\n# Calculate total cost\ntotal_cost = funnel_cake_stand_price + ice_cream_truck_price\n\n# Amanda's budget\namanda_budget = 11631.00\n\n# Check if Amanda has enough money\nif amanda_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "funnel_cake_stand_price = 5293.00\nice_cream_truck_price = 6382.00\ntotal_cost = funnel_cake_stand_price + ice_cream_truck_price\namanda_budget = 11631.00\nif amanda_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "funnel_cake_stand_price = 5293.00\nice_cream_truck_price = 6382.00\ntotal_cost = funnel_cake_stand_price + ice_cream_truck_price\namanda_budget = 11631.00\n\nanswer = 'yes' if amanda_budget >= total_cost else 'no'\nprint(answer)"], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Baseball runs scored last season\" and then answer a question.\n\nRuns scored | Frequency\n0 | 1\n1 | 9\n2 | 12\n3 | 8\n4 | 4", "question": "Read the following table regarding \"Baseball runs scored last season\" and then write Python code to answer a question.\n\nRuns scored | Frequency\n0 | 1\n1 | 9\n2 | 12\n3 | 8\n4 | 4\n\nA statistician analyzed the number of runs scored by players last season. How many players scored at least 3 runs last season?", "answer": "12", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of players scoring runs\nfrequency = {\n    0: 1,\n    1: 9,\n    2: 12,\n    3: 8,\n    4: 4\n}\n\n# Calculate the number of players who scored at least 3 runs\nplayers_at_least_3_runs = frequency[3] + frequency[4]\nanswer = players_at_least_3_runs\nprint(answer)", "frequency = {\n    0: 1,\n    1: 9,\n    2: 12,\n    3: 8,\n    4: 4\n}\n\n# Calculate the number of players who scored at least 3 runs\nplayers_at_least_3_runs = frequency[3] + frequency[4]\nanswer = int(players_at_least_3_runs)  # Ensure the result is an integer\nprint(answer)", "frequency = {\n    0: 1,\n    1: 9,\n    2: 12,\n    3: 8,\n    4: 4\n}\n\n# Calculate the number of players who scored at least 3 runs\nplayers_at_least_3_runs = frequency[3] + frequency[4]\nanswer = players_at_least_3_runs  # No need to convert to int\n\nprint(answer)", "frequency = {\n    0: 1,\n    1: 9,\n    2: 12,\n    3: 8,\n    4: 4\n}\n\n# Calculate the number of players who scored at least 3 runs\nplayers_at_least_3_runs = frequency[3] + frequency[4]\nanswer = int(players_at_least_3_runs)  # Ensure the result is an integer\nprint(answer)"], "prediction": [12.0, 12.0, 12.0, 12.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of offices | Number of stools\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of offices | Number of stools\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | ?\n\nEach office has 5 stools. How many stools are in 5 offices?", "answer": "25", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Each office has 5 stools\nstools_per_office = 5 \n# Number of offices\nnumber_of_offices = 5 \n# Total stools in 5 offices\ntotal_stools = stools_per_office * number_of_offices \nanswer = total_stools\nprint(answer)", "stools_per_office = 5 \nnumber_of_offices = 5 \ntotal_stools = stools_per_office * number_of_offices \nanswer = total_stools  # This will be an integer since we are multiplying integers\nprint(answer)", "stools_per_office = 5 \nnumber_of_offices = 5 \ntotal_stools = stools_per_office * number_of_offices \nanswer = int(total_stools)  # Convert to integer to ensure no floating-point representation\nprint(answer)", "stools_per_office = 5 \nnumber_of_offices = 5 \ntotal_stools = stools_per_office * number_of_offices \nanswer = total_stools  # No need to convert to integer, as the multiplication will result in an integer\nprint(answer)"], "prediction": [25.0, 25.0, 25.0, 25.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npopsicle stand | $5,600\npeanut cart | $6,730\nshaved ice cart | $7,510\npretzel stand | $8,591\npopcorn cart | $8,947", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npopsicle stand | $5,600\npeanut cart | $6,730\nshaved ice cart | $7,510\npretzel stand | $8,591\npopcorn cart | $8,947\n\nPaula has $13,967. Does she have enough to buy a pretzel stand and a popsicle stand? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \npopsicle_stand_price = 5600\npretzel_stand_price = 8591\ntotal_cost = popsicle_stand_price + pretzel_stand_price\npaula_money = 13967\n\nif paula_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "# Prices of the stands\npopsicle_stand_price = 5600\npretzel_stand_price = 8591\n\n# Total cost of both stands\ntotal_cost = popsicle_stand_price + pretzel_stand_price\n\n# Amount of money Paula has\npaula_money = 13967\n\n# Determine if Paula has enough money\nif paula_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the prices of the stands\npopsicle_stand_price = 5600\npretzel_stand_price = 8591\n\n# Calculate the total cost\ntotal_cost = popsicle_stand_price + pretzel_stand_price\n\n# Amount of money Paula has\npaula_money = 13967\n\n# Check if Paula has enough money\nif paula_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the prices of the stands\npopsicle_stand_price = 5600\npretzel_stand_price = 8591\n\n# Calculate the total cost for both stands\ntotal_cost = popsicle_stand_price + pretzel_stand_price\n\n# Amount of money Paula has\npaula_money = 13967\n\n# Determine if Paula has enough money\nif paula_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)"], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nhockey ticket | $69.12\ngolf ticket | $68.63\nfootball ticket | $16.48\nsoccer ticket | $62.14", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nhockey ticket | $69.12\ngolf ticket | $68.63\nfootball ticket | $16.48\nsoccer ticket | $62.14\n\nHow much more does a hockey ticket cost than a football ticket?", "answer": "52.64", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nhockey_ticket_price = 69.12\nfootball_ticket_price = 16.48\n# Calculate the difference in price\ndifference = hockey_ticket_price - football_ticket_price\nanswer = difference\nprint(answer)", "hockey_ticket_price = 69.12\nfootball_ticket_price = 16.48\ndifference = hockey_ticket_price - football_ticket_price\nanswer = difference\nprint(f\"The difference in price between a hockey ticket and a football ticket is: ${answer:.2f}\")", "hockey_ticket_price = 69.12\nfootball_ticket_price = 16.48\nanswer = hockey_ticket_price - football_ticket_price\nprint(f\"The difference in price between a hockey ticket and a football ticket is: ${answer:.2f}\")", "hockey_ticket_price = 69.12\nfootball_ticket_price = 16.48\nanswer = hockey_ticket_price - football_ticket_price\nprint(answer)"], "prediction": [52.64, 52.64, 52.64, 52.64], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Eating macaroni and cheese last month\" and then answer a question.\n\nTimes eaten | Frequency\n0 | 1\n1 | 8\n2 | 19\n3 | 16\n4 | 12\n5 | 10", "question": "Read the following table regarding \"Eating macaroni and cheese last month\" and then write Python code to answer a question.\n\nTimes eaten | Frequency\n0 | 1\n1 | 8\n2 | 19\n3 | 16\n4 | 12\n5 | 10\n\nA food manufacturer surveyed consumers about their macaroni and cheese consumption. How many people ate macaroni and cheese more than 1 time?", "answer": "57", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Frequency of consumption\nfrequency = {\n    0: 1,\n    1: 8,\n    2: 19,\n    3: 16,\n    4: 12,\n    5: 10\n}\n# Calculate the number of people who ate macaroni and cheese more than 1 time\npeople_more_than_once = sum(frequency[times] for times in frequency if times > 1)\nanswer = people_more_than_once\nprint(answer)", "# Define the frequency of macaroni and cheese consumption\nfrequency = {\n    0: 1,\n    1: 8,\n    2: 19,\n    3: 16,\n    4: 12,\n    5: 10\n}\n\n# Calculate the number of people who ate macaroni and cheese more than 1 time\npeople_more_than_once = sum(frequency[times] for times in frequency if times > 1)\nanswer = people_more_than_once\n\nprint(answer)", "# Define the frequency dictionary\nfrequency = {\n    0: 1,\n    1: 8,\n    2: 19,\n    3: 16,\n    4: 12,\n    5: 10\n}\n\n# Calculate the number of people who ate macaroni and cheese more than 1 time\npeople_more_than_once = sum(frequency[times] for times in frequency if times > 1)\n\n# Store the result in the variable 'answer'\nanswer = people_more_than_once\n\n# Output the answer\nprint(answer)", "# Define the frequency dictionary\nfrequency = {\n    0: 1,\n    1: 8,\n    2: 19,\n    3: 16,\n    4: 12,\n    5: 10\n}\n\n# Calculate the number of people who ate macaroni and cheese more than 1 time\npeople_more_than_once = sum(frequency[times] for times in frequency if times > 1)\n\n# Store the result in the answer variable\nanswer = people_more_than_once\n\n# Print the answer\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'frequency' is not defined\")", "NameError(\"name 'frequency' is not defined\")", "NameError(\"name 'frequency' is not defined\")", "NameError(\"name 'frequency' is not defined\")"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n17 | 2\n18 | 11\n19 | 20", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n17 | 2\n18 | 11\n19 | 20\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "linear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for equal differences in x-values.\nx_values = [17, 18, 19]\ny_values = [2, 11, 20]\n\n# Calculate the differences\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n# Check if the differences are constant\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Determine the type of function\nif is_linear:\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\n\nprint(answer)", "# Define the x and y values\nx_values = [17, 18, 19]\ny_values = [2, 11, 20]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if all differences are the same\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Determine if the function is linear or nonlinear\nif is_linear:\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\n\nprint(answer)", "x_values = [17, 18, 19]\ny_values = [2, 11, 20]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if all differences are equal\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Determine if the function is linear or nonlinear\nif is_linear:\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\n\nprint(answer)", "# Define the x and y values based on the table\nx_values = [17, 18, 19]\ny_values = [2, 11, 20]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if the differences are the same for a linear function\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Assign the answer based on whether the function is linear or nonlinear\nif is_linear:\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\n\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")"]
}
{
  "context": "Read the following table regarding \"Blocks from school\" and then answer a question.\n\nName | Number of blocks\nRosa | 6\nCeline | 5\nNaomi | 5\nJake | 7\nHector | 6\nEduardo | 7\nDestiny | 7", "question": "Read the following table regarding \"Blocks from school\" and then write Python code to answer a question.\n\nName | Number of blocks\nRosa | 6\nCeline | 5\nNaomi | 5\nJake | 7\nHector | 6\nEduardo | 7\nDestiny | 7\n\nSome students compared how many blocks they live from school. What is the mode of the numbers?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nfrom statistics import mode\n\n# Number of blocks from school for each student\nblocks = [6, 5, 5, 7, 6, 7, 7]\n\n# Calculate the mode\nmode_blocks = mode(blocks)\nanswer = mode_blocks\nprint(answer)", "from statistics import mode\n\nblocks = [6, 5, 5, 7, 6, 7, 7]\nmode_blocks = mode(blocks)\nanswer = int(mode_blocks)  # Convert to integer for clarity\nprint(answer)", "from statistics import mode\n\n# List of blocks from school for each student\nblocks = [6, 5, 5, 7, 6, 7, 7]\n\n# Calculate the mode of the blocks\nmode_blocks = mode(blocks)\n\n# Store the result as an integer\nanswer = int(mode_blocks)  # Convert to integer for clarity\nprint(answer)", "from statistics import mode\n\nblocks = [6, 5, 5, 7, 6, 7, 7]\nmode_blocks = mode(blocks)\nanswer = mode_blocks  # No need to convert to int since mode already returns an integer\nprint(answer)"], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbarbecue grill | $548.00\nfountain | $965.00\nwooden bench | $291.00\niron bench | $140.00\npicnic table | $598.00\nlawn mower | $145.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbarbecue grill | $548.00\nfountain | $965.00\nwooden bench | $291.00\niron bench | $140.00\npicnic table | $598.00\nlawn mower | $145.00\n\nShelley has $272.00. Does she have enough to buy a lawn mower and an iron bench? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \n# Prices of the lawn mower and iron bench\nlawn_mower_price = 145.00\niron_bench_price = 140.00\n# Total cost\ntotal_cost = lawn_mower_price + iron_bench_price\n# Amount Shelley has\nshelley_amount = 272.00\n# Determine if Shelley has enough money\nif shelley_amount >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "lawn_mower_price = 145.00\niron_bench_price = 140.00\ntotal_cost = lawn_mower_price + iron_bench_price\nshelley_amount = 272.00\nanswer = 'yes' if shelley_amount >= total_cost else 'no'\nprint(answer)", "lawn_mower_price = 145.00\niron_bench_price = 140.00\ntotal_cost = lawn_mower_price + iron_bench_price\nshelley_amount = 272.00\nanswer = 'yes' if shelley_amount >= total_cost else 'no'\nprint(answer)", "# Prices of the items\nlawn_mower_price = 145.00\niron_bench_price = 140.00\n\n# Calculate total cost\ntotal_cost = lawn_mower_price + iron_bench_price\n\n# Amount Shelley has\nshelley_amount = 272.00\n\n# Determine if Shelley has enough money\nanswer = 'yes' if shelley_amount >= total_cost else 'no'\n\nprint(answer)"], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Menu items per restaurant\" and then answer a question.\n\nStem | Leaf \n1 | 0, 0, 2, 6\n2 | 4, 4, 4, 4, 5, 7\n3 | 4\n4 | 0, 2, 5, 6, 8", "question": "Read the following table regarding \"Menu items per restaurant\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 0, 0, 2, 6\n2 | 4, 4, 4, 4, 5, 7\n3 | 4\n4 | 0, 2, 5, 6, 8\n\nA food critic counted the number of menu items at each restaurant in town. How many restaurants have exactly 24 menu items?", "answer": "4", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The number of restaurants with exactly 24 menu items corresponds to the stem \"2\" with leaves indicating the values.\n# The stem \"2\" corresponds to 20 to 29 items, so we need to find the leaf that indicates 4, which corresponds to 24 items.\n# The stem-and-leaf indicates that there are four \"4\" leaves for the stem \"2\". This represents 24 (2 | 4).\n\n# Therefore, there are 4 restaurants with exactly 24 menu items.\nanswer = 4\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [0, 0, 2, 6]), (2, [4, 4, 4, 4, 5, 7]), (3, [4]), (4, [0, 2, 5, 6, 8])]  \n\n# Initialize counter for restaurants with exactly 24 menu items  \nrestaurants_with_24_items = 0  \n\n# Iterate through the stem and leaf data structure and count relevant restaurants  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        menu_items = stem * 10 + leaf  \n        if menu_items == 24:  \n            restaurants_with_24_items += 1  \n\nanswer = restaurants_with_24_items  \nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [(1, [0, 0, 2, 6]), (2, [4, 4, 4, 4, 5, 7]), (3, [4]), (4, [0, 2, 5, 6, 8])]\n\n# Initialize counter for restaurants with exactly 24 menu items\nrestaurants_with_24_items = 0\n\n# Iterate through the stem and leaf data structure and count relevant restaurants\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        menu_items = stem * 10 + leaf\n        if menu_items == 24:\n            restaurants_with_24_items += 1\n\nanswer = restaurants_with_24_items\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [0, 0, 2, 6]), (2, [4, 4, 4, 4, 5, 7]), (3, [4]), (4, [0, 2, 5, 6, 8])]  \n  \n# Initialize counter for restaurants with exactly 24 menu items  \nrestaurants_with_24_items = 0  \n  \n# Iterate through the stem and leaf data structure and count relevant restaurants  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        menu_items = stem * 10 + leaf  \n        if menu_items == 24:  \n            restaurants_with_24_items += 1  \n  \nanswer = restaurants_with_24_items  \nprint(answer)"
], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ngreen beads | $3/kilogram\nwhite beads | $2/kilogram\nblue beads | $3/kilogram\npurple beads | $2/kilogram\norange beads | $2/kilogram\nred beads | $2/kilogram\nblack beads | $3/kilogram", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ngreen beads | $3/kilogram\nwhite beads | $2/kilogram\nblue beads | $3/kilogram\npurple beads | $2/kilogram\norange beads | $2/kilogram\nred beads | $2/kilogram\nblack beads | $3/kilogram\n\nDonald went to the store. He bought 1/2 of a kilogram of purple beads. How much did he spend?", "answer": "1", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \nprice_per_kilogram_purple_beads = 2  # $2 per kilogram for purple beads\nkilograms_bought = 0.5  # 1/2 kilogram\n# Calculate total spent\ntotal_spent = price_per_kilogram_purple_beads * kilograms_bought\nanswer = total_spent\nprint(answer)", "# Define the price per kilogram for purple beads\nprice_per_kilogram_purple_beads = 2  # $2 per kilogram for purple beads\n\n# Define the amount of kilograms bought\nkilograms_bought = 0.5  # 1/2 kilogram\n\n# Calculate total amount spent\ntotal_spent = price_per_kilogram_purple_beads * kilograms_bought\n\n# Store the result in the variable 'answer'\nanswer = total_spent\n\n# Output the answer\nprint(answer)", "# Define the price per kilogram for purple beads\nprice_per_kilogram_purple_beads = 2  # $2 per kilogram\n\n# Define the quantity of purple beads bought in kilograms\nkilograms_bought = 0.5  # 1/2 kilogram\n\n# Calculate the total amount spent\ntotal_spent = price_per_kilogram_purple_beads * kilograms_bought\n\n# Store the result in the variable 'answer'\nanswer = total_spent\n\n# Output the answer\nprint(answer)", "# Define the price per kilogram for purple beads\nprice_per_kilogram_purple_beads = 2  # $2 per kilogram\n\n# Define the amount of kilograms bought\nkilograms_bought = 0.5  # 1/2 kilogram\n\n# Calculate the total amount spent\ntotal_spent = price_per_kilogram_purple_beads * kilograms_bought\n\n# Store the result in the variable 'answer'\nanswer = total_spent\n\n# Output the answer\nprint(answer)"
], "prediction": [1.0, 1.0, 1.0, 1.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Schools in each town\" and then answer a question.\n\nTown | Number of schools\nChesterton | 10\nAshland | 10\nWatertown | 7\nRiverside | 4\nMayfield | 6", "question": "Read the following table regarding \"Schools in each town\" and then write Python code to answer a question.\n\nTown | Number of schools\nChesterton | 10\nAshland | 10\nWatertown | 7\nRiverside | 4\nMayfield | 6\n\nThe county released data about how many schools there are in each town. What is the range of the numbers?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of schools in each town\nschools_count = [10, 10, 7, 4, 6]\n# Calculate the range\nrange_of_schools = max(schools_count) - min(schools_count)\nanswer = range_of_schools\nprint(answer)", "```python\nschools_count = [10,", "schools_count = [10, 10, 7, 4, 6]\nrange_of_schools = max(schools_count) - min(schools_count)\nanswer = int(range_of_schools)  # Convert to integer\nprint(answer)", "schools_count = [10, 10, 7, 4, 6]\nrange_of_schools = max(schools_count) - min(schools_count)\nanswer = range_of_schools  # No need to convert to integer\nprint(answer)"], "prediction": [6.0, null, 6.0, 6.0], "report": ["Done", "SyntaxError('invalid syntax', ('<string>', 1, 1, '```python\\n', 1, 2))", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nlawn sprinkler | $13.00\nladder | $36.00\nwheelbarrow | $30.00\nwrench | $11.00\nlawn mower | $96.00\ncan of paint | $15.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nlawn sprinkler | $13.00\nladder | $36.00\nwheelbarrow | $30.00\nwrench | $11.00\nlawn mower | $96.00\ncan of paint | $15.00\n\nHow much money does Kylie need to buy a ladder and a wrench?", "answer": "47", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nprice_ladder = 36.00\nprice_wrench = 11.00\n# Total cost for the ladder and the wrench\ntotal_cost = price_ladder + price_wrench\nanswer = total_cost\nprint(answer)", "# Define the prices of the items\nprice_ladder = 36.00\nprice_wrench = 11.00\n\n# Calculate the total cost\ntotal_cost = price_ladder + price_wrench\n\n# Store the result in the answer variable\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "price_ladder = 36.00\nprice_wrench = 11.00\ntotal_cost = price_ladder + price_wrench\nanswer = round(total_cost, 2)  # Ensures the answer is rounded to two decimal places\nprint(answer)", "price_ladder = 36.00\nprice_wrench = 11.00\ntotal_cost = price_ladder + price_wrench\nanswer = f\"{total_cost:.2f}\"  # Formats the answer as a string with two decimal places\nprint(answer)"], "prediction": [47.0, 47.0, 47.0, 47.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nticket for a Hawaiian cruise | $7,072.00\nticket for an Australian cruise | $4,739.00\nticket for a South American cruise | $6,857.00\nticket for a Caribbean cruise | $6,039.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nticket for a Hawaiian cruise | $7,072.00\nticket for an Australian cruise | $4,739.00\nticket for a South American cruise | $6,857.00\nticket for a Caribbean cruise | $6,039.00\n\nHow much money does Levi need to buy a ticket for a Hawaiian cruise and a ticket for a Caribbean cruise?", "answer": "13,111", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_hawaiian_cruise = 7072.00 \ncost_caribbean_cruise = 6039.00 \n# Calculate total cost for both tickets\ntotal_cost = cost_hawaiian_cruise + cost_caribbean_cruise\nanswer = total_cost\nprint(answer)", "cost_hawaiian_cruise = 7072.00 \ncost_caribbean_cruise = 6039.00 \ntotal_cost = cost_hawaiian_cruise + cost_caribbean_cruise\nanswer = f\"${total_cost:,.2f}\"  # Format the total cost as currency\nprint(answer)", "cost_hawaiian_cruise = 7072.00 \ncost_caribbean_cruise = 6039.00 \ntotal_cost = cost_hawaiian_cruise + cost_caribbean_cruise\nanswer = total_cost  # Store the numerical total cost\nprint(f\"${answer:,.2f}\")  # Format the total cost as currency for output", "# Define the costs of the tickets\ncost_hawaiian_cruise = 7072.00\ncost_caribbean_cruise = 6039.00\n\n# Calculate the total cost\ntotal_cost = cost_hawaiian_cruise + cost_caribbean_cruise\n\n# Store the numerical total cost in the variable 'answer'\nanswer = total_cost\n\n# Print the total cost formatted as currency\nprint(f\"${answer:,.2f}\")  # This will display the total cost in a readable format"], "prediction": [13111.0, "$13,111.00", 13111.0, 13111.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Billboards per city\" and then answer a question.\n\nStem | Leaf \n1 | 5\n2 | 2, 6, 8, 8\n3 | 3, 6, 6, 8, 8, 9\n4 | 7\n5 | 0, 0, 3, 9\n6 | 0, 2, 4, 9\n7 | 5\n8 | 7, 7\n9 | 0", "question": "Read the following table regarding \"Billboards per city\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 5\n2 | 2, 6, 8, 8\n3 | 3, 6, 6, 8, 8, 9\n4 | 7\n5 | 0, 0, 3, 9\n6 | 0, 2, 4, 9\n7 | 5\n8 | 7, 7\n9 | 0\n\nThe advertising agency counted the number of billboards in each city in the state. What is the largest number of billboards?", "answer": "90", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number of billboards corresponds to the largest value in the stem-and-leaf display.\nlargest_billboards = 90  # From the stem \"9 | 0\", the value is 90 billboards.\nanswer = largest_billboards\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [5]), (2, [2, 6, 8, 8]), (3, [3, 6, 6, 8, 8, 9]), \n                 (4, [7]), (5, [0, 0, 3, 9]), (6, [0, 2, 4, 9]), \n                 (7, [5]), (8, [7, 7]), (9, [0])]  \n\n# Initialize variable to store the largest number of billboards  \nlargest_billboards = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        billboards = stem * 10 + leaf  # Calculate the number of billboards  \n        if billboards > largest_billboards:  \n            largest_billboards = billboards  # Update if it's the largest found  \n\nanswer = largest_billboards  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [5]), (2, [2, 6, 8, 8]), (3, [3, 6, 6, 8, 8, 9]), \n                 (4, [7]), (5, [0, 0, 3, 9]), (6, [0, 2, 4, 9]), \n                 (7, [5]), (8, [7, 7]), (9, [0])]  \n\n# Initialize largest_billboards as an integer  \nlargest_billboards = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number of billboards  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        billboards = stem * 10 + leaf  # Calculate the number of billboards  \n        if billboards > largest_billboards:  \n            largest_billboards = billboards  # Update if it's the largest found  \n\nanswer = largest_billboards  \nprint(answer)  # Output will be an integer", "stem_and_leaf = [(1, [5]), (2, [2, 6, 8, 8]), (3, [3, 6, 6, 8, 8, 9]), \n                 (4, [7]), (5, [0, 0, 3, 9]), (6, [0, 2, 4, 9]), \n                 (7, [5]), (8, [7, 7]), (9, [0])]  \n\nlargest_billboards = 0  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        billboards = stem * 10 + leaf  # Calculate the number of billboards  \n        if billboards > largest_billboards:  \n            largest_billboards = billboards  # Update if it's the largest found  \n\nanswer = largest_billboards  # Ensure answer is an integer\nprint(answer)  # Output will be an integer"
], "prediction": [90.0, 90.0, 90.0, 90.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ncumin | $5.12/lb\ncinnamon | $6.60/lb\npaprika | $4.76/lb\ncoriander | $5.39/lb", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ncumin | $5.12/lb\ncinnamon | $6.60/lb\npaprika | $4.76/lb\ncoriander | $5.39/lb\n\nTanner went to the store and bought 5 pounds of cumin and 1 pound of cinnamon. How much did he spend?", "answer": "32.20", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \nprice_per_pound_cumin = 5.12 \nprice_per_pound_cinnamon = 6.60 \n\npounds_cumin = 5 \npounds_cinnamon = 1 \n\n# Calculate total cost\ntotal_cost = (price_per_pound_cumin * pounds_cumin) + (price_per_pound_cinnamon * pounds_cinnamon)\nanswer = total_cost\nprint(answer)", "price_per_pound_cumin = 5.12 \nprice_per_pound_cinnamon = 6.60 \npounds_cumin = 5 \npounds_cinnamon = 1 \n\n# Calculate the total cost\ntotal_cost = (price_per_pound_cumin * pounds_cumin) + (price_per_pound_cinnamon * pounds_cinnamon)\n\n# Format the output to two decimal places\nanswer = f\"${total_cost:.2f}\"\nprint(answer)", "# Define the prices per pound\nprice_per_pound_cumin = 5.12 \nprice_per_pound_cinnamon = 6.60 \n\n# Define the quantities purchased\npounds_cumin = 5 \npounds_cinnamon = 1 \n\n# Calculate the total cost\ntotal_cost = (price_per_pound_cumin * pounds_cumin) + (price_per_pound_cinnamon * pounds_cinnamon)\n\n# Store the numeric value of the total cost in the variable answer\nanswer = total_cost  \n\n# Print the formatted output\nprint(f\"${answer:.2f}\")", "price_per_pound_cumin = 5.12 \nprice_per_pound_cinnamon = 6.60 \npounds_cumin = 5 \npounds_cinnamon = 1 \ntotal_cost = (price_per_pound_cumin * pounds_cumin) + (price_per_pound_cinnamon * pounds_cinnamon)\nanswer = total_cost  \nprint(f\"${answer:.2f}\")"
], "prediction": [32.2, "$32.20", 32.2, 32.2], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Law firm hours billed\" and then answer a question.\n\nPartner | Hours billed\nRudy | 870\nErica | 790\nLucas | 810\nJill | 560\nGordon | 610", "question": "Read the following table regarding \"Law firm hours billed\" and then write Python code to answer a question.\n\nPartner | Hours billed\nRudy | 870\nErica | 790\nLucas | 810\nJill | 560\nGordon | 610\n\nA law firm in Princeton kept track of how many hours were billed by each partner last year. What fraction of the hours were billed by Gordon? Simplify your answer.", "answer": "61/364", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total hours billed by all partners\ntotal_hours = 870 + 790 + 810 + 560 + 610\n# Hours billed by Gordon\ngordon_hours = 610\n# Calculate the fraction of hours billed by Gordon\nfraction_gordon = gordon_hours / total_hours\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_fraction = Fraction(gordon_hours, total_hours).limit_denominator()\nanswer = simplified_fraction\nprint(answer)", "# Define the hours billed by each partner\nhours_billed = {\n    'Rudy': 870,\n    'Erica': 790,\n    'Lucas': 810,\n    'Jill': 560,\n    'Gordon': 610\n}\n\n# Calculate total hours billed\ntotal_hours = sum(hours_billed.values())\n\n# Get Gordon's hours\ngordon_hours = hours_billed['Gordon']\n\n# Calculate the fraction of hours billed by Gordon\nfrom fractions import Fraction\nfraction_gordon = Fraction(gordon_hours, total_hours).limit_denominator()\n\n# Store the simplified fraction as the answer\nanswer = fraction_gordon\nprint(answer)", "# Store the hours billed by each partner in a dictionary\nhours_billed = {\n    'Rudy': 870,\n    'Erica': 790,\n    'Lucas': 810,\n    'Jill': 560,\n    'Gordon': 610\n}\n\n# Calculate the total hours billed\ntotal_hours = sum(hours_billed.values())\n\n# Get the hours billed by Gordon\ngordon_hours = hours_billed['Gordon']\n\n# Calculate the fraction of hours billed by Gordon and simplify it\nfrom fractions import Fraction\nfraction_gordon = Fraction(gordon_hours, total_hours).limit_denominator()\n\n# Store the result in the answer variable\nanswer = fraction_gordon\n\n# Print the answer\nprint(answer)", "# Define the hours billed by each partner in a dictionary\nhours_billed = {\n    'Rudy': 870,\n    'Erica': 790,\n    'Lucas': 810,\n    'Jill': 560,\n    'Gordon': 610\n}\n\n# Calculate the total hours billed\ntotal_hours = sum(hours_billed.values())\n\n# Get the hours billed by Gordon\ngordon_hours = hours_billed['Gordon']\n\n# Import Fraction class to calculate the fraction in simplest form\nfrom fractions import Fraction\n\n# Calculate the fraction of hours billed by Gordon\nfraction_gordon = Fraction(gordon_hours, total_hours).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = fraction_gordon\n\n# Output the answer\nprint(answer)"
], "prediction": [0.16758, 0.16758, 0.16758, 0.16758], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nphoto album | $45.00\nairplane calendar | $13.00\ndictionary | $16.00\nmap of Africa | $10.00\nmath book | $19.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nphoto album | $45.00\nairplane calendar | $13.00\ndictionary | $16.00\nmap of Africa | $10.00\nmath book | $19.00\n\nHow much money does Destiny need to buy a math book and a dictionary?", "answer": "35", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_math_book = 19.00 \nprice_dictionary = 16.00 \n# Total cost for the math book and the dictionary\ntotal_cost = price_math_book + price_dictionary\nanswer = total_cost\nprint(answer)", "# Define the prices of the items\nprice_math_book = 19.00 \nprice_dictionary = 16.00 \n\n# Calculate the total cost for both items\ntotal_cost = price_math_book + price_dictionary\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "# Define the prices of the items\nprice_math_book = 19.00 \nprice_dictionary = 16.00 \n\n# Calculate the total cost\ntotal_cost = price_math_book + price_dictionary\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the prices of the items\nprice_math_book = 19.00 \nprice_dictionary = 16.00 \n\n# Calculate the total cost\ntotal_cost = price_math_book + price_dictionary\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)"], "prediction": [35.0, 35.0, 35.0, 35.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Cans of food collected\" and then answer a question.\n\nName | Number of cans of food\nAiden | 6\nHaley | 10\nChandler | 9\nTroy | 9\nJared | 10", "question": "Read the following table regarding \"Cans of food collected\" and then write Python code to answer a question.\n\nName | Number of cans of food\nAiden | 6\nHaley | 10\nChandler | 9\nTroy | 9\nJared | 10\n\nAiden's class recorded how many cans of food each student collected for their canned food drive. What is the median of the numbers?", "answer": "9", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nimport statistics\n\n# List of cans collected by each student\ncans_collected = [6, 10, 9, 9, 10]\n\n# Calculate the median\nmedian_cans = statistics.median(cans_collected)\nanswer = median_cans\nprint(answer)", "import statistics\n\ncans_collected = [6, 10, 9, 9, 10]\nmedian_cans = statistics.median(cans_collected)\nanswer = int(median_cans)  # Convert the median to an integer\nprint(answer)", "import statistics\n\ncans_collected = [6, 10, 9, 9, 10]\nmedian_cans = statistics.median(cans_collected)\nanswer = median_cans  # No need to convert to an integer\nprint(answer)", "import statistics\n\ncans_collected = [6, 10, 9, 9, 10]\nmedian_cans = statistics.median(cans_collected)\nanswer = int(median_cans)  # Convert to integer\nprint(answer)"], "prediction": [9.0, 9.0, 9.0, 9.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Tickets sold\" and then answer a question.\n\nDay | Number of tickets\nTuesday | 317\nWednesday | 371\nThursday | 313\nFriday | 337", "question": "Read the following table regarding \"Tickets sold\" and then write Python code to answer a question.\n\nDay | Number of tickets\nTuesday | 317\nWednesday | 371\nThursday | 313\nFriday | 337\n\nMartin tracked the attendance at the school play. On which day did the fewest people attend the play? Choose from the the options: ['Tuesday', 'Wednesday', 'Thursday', 'Friday']", "answer": "Thursday", "ques_type": "multi_choice", "choices": ["Tuesday", "Wednesday", "Thursday", "Friday"], "code": ["# Python code, return answer \ntickets_sold = {\n    'Tuesday': 317,\n    'Wednesday': 371,\n    'Thursday': 313,\n    'Friday': 337\n}\n# Find the day with the fewest tickets sold\nfewest_tickets_day = min(tickets_sold, key=tickets_sold.get)\nanswer = fewest_tickets_day\nprint(answer)", "# Store the number of tickets sold for each day in a dictionary\ntickets_sold = {\n    'Tuesday': 317,\n    'Wednesday': 371,\n    'Thursday': 313,\n    'Friday': 337\n}\n\n# Find the day with the fewest tickets sold\nfewest_tickets_day = min(tickets_sold, key=tickets_sold.get)\n\n# Store the result in the answer variable\nanswer = fewest_tickets_day\n\n# Output the answer\nprint(answer)", "tickets_sold = {\n    'Tuesday': 317,\n    'Wednesday': 371,\n    'Thursday': 313,\n    'Friday': 337\n}\nfewest_tickets_day = min(tickets_sold, key=tickets_sold.get)\nanswer = fewest_tickets_day\nprint(answer)", "# Store the number of tickets sold for each day in a dictionary\ntickets_sold = {\n    'Tuesday': 317,\n    'Wednesday': 371,\n    'Thursday': 313,\n    'Friday': 337\n}\n\n# Find the day with the fewest tickets sold\nfewest_tickets_day = min(tickets_sold, key=tickets_sold.get)\n\n# Store the result in the variable 'answer'\nanswer = fewest_tickets_day\n\n# Print the answer\nprint(answer)"], "prediction": ["Thursday", "Thursday", "Thursday", "Thursday"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Pairs of shoes per store\" and then answer a question.\n\nStem | Leaf \n2 | 9\n3 | 4, 9\n4 | 0, 7, 7\n5 | 7, 9\n6 | 5, 6, 6, 6, 8\n7 | 2, 3, 3, 4, 8\n8 | 0, 4", "question": "Read the following table regarding \"Pairs of shoes per store\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 9\n3 | 4, 9\n4 | 0, 7, 7\n5 | 7, 9\n6 | 5, 6, 6, 6, 8\n7 | 2, 3, 3, 4, 8\n8 | 0, 4\n\nEdwin counted the number of pairs of shoes for sale at each of the shoe stores in the mall. How many stores have exactly 66 pairs of shoes?", "answer": "3", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The value 66 corresponds to the stem \"6\" and the leaf \"6\".\nstores_with_66_pairs = 1  # Only one store has exactly 66 pairs of shoes.\nanswer = stores_with_66_pairs\nprint(answer)", "# Define the stem and leaf data structure as a list of tuples\nstem_and_leaf = [(2, [9]), (3, [4, 9]), (4, [0, 7, 7]), (5, [7, 9]), (6, [5, 6, 6, 6, 8]), (7, [2, 3, 3, 4, 8]), (8, [0, 4])]\n\n# Initialize counter for stores with exactly 66 pairs of shoes\nstores_with_66_pairs = 0\n\n# Iterate through the stem and leaf data structure and count relevant stores\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        pairs_of_shoes = stem * 10 + leaf\n        if pairs_of_shoes == 66:\n            stores_with_66_pairs += 1\n\nanswer = stores_with_66_pairs\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [9]), (3, [4, 9]), (4, [0, 7, 7]), (5, [7, 9]), (6, [5, 6, 6, 6, 8]), (7, [2, 3, 3, 4, 8]), (8, [0, 4])]  \n\n# Initialize counter for stores with exactly 66 pairs of shoes  \nstores_with_66_pairs = 0  \n\n# Iterate through the stem and leaf data structure and count relevant stores  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        pairs_of_shoes = stem * 10 + leaf  \n        if pairs_of_shoes == 66:  \n            stores_with_66_pairs += 1  \n\n# Ensure the answer is stored as an integer  \nanswer = stores_with_66_pairs  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [9]), (3, [4, 9]), (4, [0, 7, 7]), (5, [7, 9]), (6, [5, 6, 6, 6, 8]), (7, [2, 3, 3, 4, 8]), (8, [0, 4])]  \n  \n# Initialize counter for stores with exactly 66 pairs of shoes  \nstores_with_66_pairs = 0  \n  \n# Iterate through the stem and leaf data structure and count relevant stores  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        pairs_of_shoes = stem * 10 + leaf  \n        if pairs_of_shoes == 66:  \n            stores_with_66_pairs += 1  \n  \nanswer = stores_with_66_pairs  \nprint(answer)"
], "prediction": [1.0, 3.0, 3.0, 3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Trips to an amusement park last year\" and then answer a question.\n\nNumber of trips | Frequency\n1 | 13\n2 | 10\n3 | 1\n4 | 16\n5 | 5", "question": "Read the following table regarding \"Trips to an amusement park last year\" and then write Python code to answer a question.\n\nNumber of trips | Frequency\n1 | 13\n2 | 10\n3 | 1\n4 | 16\n5 | 5\n\nLogan surveyed people at the amusement park where he works and asked them how many times they visited last year. How many people went to an amusement park more than 2 times?", "answer": "22", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of trips greater than 2\nfrequency_data = {\n    1: 13,\n    2: 10,\n    3: 1,\n    4: 16,\n    5: 5\n}\n\n# Calculating the number of people who went more than 2 times\npeople_more_than_2_times = frequency_data[3] + frequency_data[4] + frequency_data[5]\nanswer = people_more_than_2_times\nprint(answer)", "frequency_data = {\n    1: 13,\n    2: 10,\n    3: 1,\n    4: 16,\n    5: 5\n}\n\n# Calculate the number of people who went to an amusement park more than 2 times\npeople_more_than_2_times = frequency_data[3] + frequency_data[4] + frequency_data[5]\nanswer = people_more_than_2_times  # This will be an integer\nprint(answer)", "frequency_data = {\n    1: 13,\n    2: 10,\n    3: 1,\n    4: 16,\n    5: 5\n}\npeople_more_than_2_times = frequency_data[3] + frequency_data[4] + frequency_data[5]\nanswer = int(people_more_than_2_times)  # Ensuring the result is an integer\nprint(answer)", "frequency_data = {\n    1: 13,\n    2: 10,\n    3: 1,\n    4: 16,\n    5: 5\n}\npeople_more_than_2_times = frequency_data[3] + frequency_data[4] + frequency_data[5]\nanswer = people_more_than_2_times  # No need to convert to int, it's already an integer\nprint(answer)"], "prediction": [22.0, 22.0, 22.0, 22.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Stuffed animal collections\" and then answer a question.\n\nName | Number of stuffed animals\nIsaac | 281\nEdgar | 221\nJustin | 282\nKatie | 218", "question": "Read the following table regarding \"Stuffed animal collections\" and then write Python code to answer a question.\n\nName | Number of stuffed animals\nIsaac | 281\nEdgar | 221\nJustin | 282\nKatie | 218\n\nSome friends compared the sizes of their stuffed animal collections. Who has the fewest stuffed animals? Choose from the the options: ['Isaac', 'Edgar', 'Justin', 'Katie']", "answer": "Katie", "ques_type": "multi_choice", "choices": ["Isaac", "Edgar", "Justin", "Katie"], "code": ["# Python code, return answer \nstuffed_animals = {\n    'Isaac': 281,\n    'Edgar': 221,\n    'Justin': 282,\n    'Katie': 218\n}\n# Find the friend with the fewest stuffed animals\nfewest_animals_friend = min(stuffed_animals, key=stuffed_animals.get)\nanswer = fewest_animals_friend\nprint(answer)", "stuffed_animals = {\n    'Isaac': 281,\n    'Edgar': 221,\n    'Justin': 282,\n    'Katie': 218\n}\n\n# Find the friend with the fewest stuffed animals\nanswer = min(stuffed_animals, key=stuffed_animals.get)  # Store the result in 'answer'\nprint(answer)", "stuffed_animals = {\n    'Isaac': 281,\n    'Edgar': 221,\n    'Justin': 282,\n    'Katie': 218\n}\nanswer = min(stuffed_animals, key=stuffed_animals.get)  # Store the result in 'answer'\nprint(answer)  # Output the answer", "stuffed_animals = {\n    'Isaac': 281,\n    'Edgar': 221,\n    'Justin': 282,\n    'Katie': 218\n}\nanswer = min(stuffed_animals, key=stuffed_animals.get)  # Store the result in 'answer'\nprint(answer)  # Output the answer"], "prediction": ["Katie", "Katie", "Katie", "Katie"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nballet ticket | $15\ncar show ticket | $21\norchestra ticket | $38\nopera ticket | $65", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nballet ticket | $15\ncar show ticket | $21\norchestra ticket | $38\nopera ticket | $65\n\nPedro has $82. Does he have enough to buy a ballet ticket and an opera ticket? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \nballet_ticket_price = 15\nopera_ticket_price = 65\ntotal_cost = ballet_ticket_price + opera_ticket_price\npedro_budget = 82\n\n# Check if Pedro has enough money\nif pedro_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the prices of the tickets\nballet_ticket_price = 15\nopera_ticket_price = 65\n\n# Calculate total cost for both tickets\ntotal_cost = ballet_ticket_price + opera_ticket_price\n\n# Pedro's budget\npedro_budget = 82\n\n# Check if Pedro has enough money\nanswer = 'yes' if pedro_budget >= total_cost else 'no'\n\n# Output the answer\nprint(answer)", "ballet_ticket_price = 15\nopera_ticket_price = 65\ntotal_cost = ballet_ticket_price + opera_ticket_price\npedro_budget = 82\nanswer = 'yes' if pedro_budget >= total_cost else 'no'\nprint(answer)", "ballet_ticket_price = 15\nopera_ticket_price = 65\ntotal_cost = ballet_ticket_price + opera_ticket_price\npedro_budget = 82\nanswer = 'yes' if pedro_budget >= total_cost else 'no'\nprint(answer)"], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Dance studio schedule\" and then answer a question.\n\nClass | Begin | End\nhip hop dance | 8:45 A.M. | 9:15 A.M.\nswing dance | 9:25 A.M. | 10:35 A.M.\nmodern dance | 10:40 A.M. | 11:50 A.M.\nballroom dance | 12:05 P.M. | 1:00 P.M.\nadvanced ballet | 1:05 P.M. | 2:15 P.M.\ntap dance | 2:25 P.M. | 3:30 P.M.\nsalsa dance | 3:40 P.M. | 5:15 P.M.\nwestern dance | 5:20 P.M. | 6:55 P.M.", "question": "Read the following table regarding \"Dance studio schedule\" and then write Python code to answer a question.\n\nClass | Begin | End\nhip hop dance | 8:45 A.M. | 9:15 A.M.\nswing dance | 9:25 A.M. | 10:35 A.M.\nmodern dance | 10:40 A.M. | 11:50 A.M.\nballroom dance | 12:05 P.M. | 1:00 P.M.\nadvanced ballet | 1:05 P.M. | 2:15 P.M.\ntap dance | 2:25 P.M. | 3:30 P.M.\nsalsa dance | 3:40 P.M. | 5:15 P.M.\nwestern dance | 5:20 P.M. | 6:55 P.M.\n\nLook at the following schedule. Which class ends at 3.30 P.M.? Choose from the the options: ['salsa dance class', 'hip hop dance class', 'tap dance class', 'ballroom dance class']", "answer": "tap dance class", "ques_type": "multi_choice", "choices": ["salsa dance class", "hip hop dance class", "tap dance class", "ballroom dance class"], "code": [
  "# Python code, return answer \n# Class that ends at 3:30 P.M. based on the given schedule\nclass_ending_at_330 = 'tap dance'  # According to the schedule\nanswer = class_ending_at_330 + ' class'\nprint(answer)", "# Define the classes and their end times\ndance_classes = {\n    'hip hop dance': '9:15 A.M.',\n    'swing dance': '10:35 A.M.',\n    'modern dance': '11:50 A.M.',\n    'ballroom dance': '1:00 P.M.',\n    'advanced ballet': '2:15 P.M.',\n    'tap dance': '3:30 P.M.',\n    'salsa dance': '5:15 P.M.',\n    'western dance': '6:55 P.M.'\n}\n\n# Determine which class ends at 3:30 P.M.\nclass_ending_at_330 = 'tap dance'  # According to the schedule\nanswer = class_ending_at_330 + ' class'\nprint(answer)", "# Define the dance classes and their ending times\ndance_classes = {\n    'hip hop dance': '9:15 A.M.',\n    'swing dance': '10:35 A.M.',\n    'modern dance': '11:50 A.M.',\n    'ballroom dance': '1:00 P.M.',\n    'advanced ballet': '2:15 P.M.',\n    'tap dance': '3:30 P.M.',\n    'salsa dance': '5:15 P.M.',\n    'western dance': '6:55 P.M.'\n}\n\n# Identify the class that ends at 3:30 P.M.\nclass_ending_at_330 = 'tap dance'  # According to the schedule\n\n# Format the answer to match the options\nanswer = class_ending_at_330 + ' class'\nprint(answer)", "# Define the dance classes and their ending times\ndance_classes = {\n    'hip hop dance': '9:15 A.M.',\n    'swing dance': '10:35 A.M.',\n    'modern dance': '11:50 A.M.',\n    'ballroom dance': '1:00 P.M.',\n    'advanced ballet': '2:15 P.M.',\n    'tap dance': '3:30 P.M.',\n    'salsa dance': '5:15 P.M.',\n    'western dance': '6:55 P.M.'\n}\n\n# Initialize the variable to hold the class ending at 3:30 P.M.\nclass_ending_at_330 = None\n\n# Iterate through the dance classes to find the one that ends at 3:30 P.M.\nfor dance_class, end_time in dance_classes.items():\n    if end_time == '3:30 P.M.':\n        class_ending_at_330 = dance_class\n        break\n\n# Prepare the answer\nanswer = class_ending_at_330 + ' class'\nprint(answer)"
], "prediction": ["tap dance class", "tap dance class", "tap dance class", "tap dance class"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Birds per flock\" and then answer a question.\n\nStem | Leaf \n2 | 3, 3, 7\n3 | \n4 | 4\n5 | 4\n6 | \n7 | 3", "question": "Read the following table regarding \"Birds per flock\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 3, 3, 7\n3 | \n4 | 4\n5 | 4\n6 | \n7 | 3\n\nThe bird watcher counted the number of birds in each flock that passed overhead. How many flocks had exactly 23 birds?", "answer": "2", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# From the stem-and-leaf display, we can see that the stem \"2\" corresponds to 20s\n# The leaves are 3, 3, and 7, representing the counts 23, 23, and 27.\n# Therefore, the flocks with exactly 23 birds can be counted.\nflocks_with_23_birds = 2  # There are two '3's in the leaf of stem '2'\nanswer = flocks_with_23_birds\nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [(2, [3, 3, 7]), (3, []), (4, [4]), (5, [4]), (6, []), (7, [3])]\n\n# Initialize counter for flocks with exactly 23 birds\nflocks_with_23_birds = 0\n\n# Iterate through the stem and leaf data structure and count relevant flocks\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        birds_per_flock = stem * 10 + leaf\n        if birds_per_flock == 23:\n            flocks_with_23_birds += 1\n\nanswer = flocks_with_23_birds\nprint(answer)", "stem_and_leaf = [(2, [3, 3, 7]), (3, []), (4, [4]), (5, [4]), (6, []), (7, [3])]\nflocks_with_23_birds = 0\n\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        birds_per_flock = stem * 10 + leaf\n        if birds_per_flock == 23:\n            flocks_with_23_birds += 1\n\nanswer = flocks_with_23_birds  # Ensure answer is an integer\nprint(answer)", "stem_and_leaf = [(2, [3, 3, 7]), (3, []), (4, [4]), (5, [4]), (6, []), (7, [3])]\nflocks_with_23_birds = 0\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        birds_per_flock = stem * 10 + leaf\n        if birds_per_flock == 23:\n            flocks_with_23_birds += 1\n            \nanswer = int(flocks_with_23_birds)  # Ensure answer is an integer\nprint(answer)"
], "prediction": [2.0, 2.0, 2.0, 2.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Commute time (minutes)\" and then answer a question.\n\nStem | Leaf \n2 | 6\n3 | 5, 8, 9\n4 | 0, 4, 4\n5 | 3, 5\n6 | 3, 5, 9, 9\n7 | 0, 2, 8\n8 | 1, 5, 8\n9 | 0", "question": "Read the following table regarding \"Commute time (minutes)\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 6\n3 | 5, 8, 9\n4 | 0, 4, 4\n5 | 3, 5\n6 | 3, 5, 9, 9\n7 | 0, 2, 8\n8 | 1, 5, 8\n9 | 0\n\nA business magazine surveyed its readers about their commute times. What is the longest commute time?", "answer": "90", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The longest commute time corresponds to the largest value in the stem-and-leaf display.\nlongest_commute_time = 90  # From the stem \"9 | 0\", the value is 90 minutes.\nanswer = longest_commute_time\nprint(answer)", "# Define the stem and leaf data structure as a list of tuples\nstem_and_leaf = [(2, [6]), (3, [5, 8, 9]), (4, [0, 4, 4]), (5, [3, 5]), (6, [3, 5, 9, 9]), (7, [0, 2, 8]), (8, [1, 5, 8]), (9, [0])]\n\n# Initialize variable for the longest commute time\nlongest_commute_time = 0\n\n# Iterate through the stem and leaf data structure to find the longest commute time\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        commute_time = stem * 10 + leaf  # Calculate the full commute time\n        if commute_time > longest_commute_time:  # Check if it's the longest\n            longest_commute_time = commute_time\n\nanswer = longest_commute_time\nprint(answer)", "stem_and_leaf = [(2, [6]), (3, [5, 8, 9]), (4, [0, 4, 4]), (5, [3, 5]), (6, [3, 5, 9, 9]), (7, [0, 2, 8]), (8, [1, 5, 8]), (9, [0])]\nlongest_commute_time = 0\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        commute_time = stem * 10 + leaf  # Calculate the full commute time\n        if commute_time > longest_commute_time:  # Check if it's the longest\n            longest_commute_time = commute_time\nanswer = int(longest_commute_time)  # Convert to integer\nprint(answer)", "stem_and_leaf = [(2, [6]), (3, [5, 8, 9]), (4, [0, 4, 4]), (5, [3, 5]), (6, [3, 5, 9, 9]), (7, [0, 2, 8]), (8, [1, 5, 8]), (9, [0])]\nlongest_commute_time = 0\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        commute_time = stem * 10 + leaf  # Calculate the full commute time\n        if commute_time > longest_commute_time:  # Check if it's the longest\n            longest_commute_time = commute_time\nanswer = longest_commute_time  # No need to convert to int, it is already an integer\nprint(answer)"
], "prediction": [90.0, 90.0, 90.0, 90.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Bus schedule\" and then answer a question.\n\nthe grocery store | 9:00 A.M. | 9:15 A.M. | 9:30 A.M. | 9:45 A.M. | 10:30 A.M.\nthe library | 9:15 A.M. | 9:30 A.M. | 9:45 A.M. | 10:00 A.M. | 10:45 A.M.\nthe doctor's office | 10:15 A.M. | 10:30 A.M. | 10:45 A.M. | 11:00 A.M. | 11:45 A.M.\nthe zoo | 10:45 A.M. | 11:00 A.M. | 11:15 A.M. | 11:30 A.M. | 12:15 P.M.\nthe movie theater | 11:45 A.M. | 12:00 P.M. | 12:15 P.M. | 12:30 P.M. | 1:15 P.M.\nthe science museum | 12:15 P.M. | 12:30 P.M. | 12:45 P.M. | 1:00 P.M. | 1:45 P.M.\nthe playground | 1:00 P.M. | 1:15 P.M. | 1:30 P.M. | 1:45 P.M. | 2:30 P.M.", "question": "Read the following table regarding \"Bus schedule\" and then write Python code to answer a question.\n\nthe grocery store | 9:00 A.M. | 9:15 A.M. | 9:30 A.M. | 9:45 A.M. | 10:30 A.M.\nthe library | 9:15 A.M. | 9:30 A.M. | 9:45 A.M. | 10:00 A.M. | 10:45 A.M.\nthe doctor's office | 10:15 A.M. | 10:30 A.M. | 10:45 A.M. | 11:00 A.M. | 11:45 A.M.\nthe zoo | 10:45 A.M. | 11:00 A.M. | 11:15 A.M. | 11:30 A.M. | 12:15 P.M.\nthe movie theater | 11:45 A.M. | 12:00 P.M. | 12:15 P.M. | 12:30 P.M. | 1:15 P.M.\nthe science museum | 12:15 P.M. | 12:30 P.M. | 12:45 P.M. | 1:00 P.M. | 1:45 P.M.\nthe playground | 1:00 P.M. | 1:15 P.M. | 1:30 P.M. | 1:45 P.M. | 2:30 P.M.\n\nLook at the following schedule. How long does it take to get from the doctor's office to the playground? Choose from the the options: ['15 minutes', '2 hours and 30 minutes', '1 hour and 45 minutes', '2 hours and 45 minutes']", "answer": "2 hours and 45 minutes", "ques_type": "multi_choice", "choices": ["15 minutes", "2 hours and 30 minutes", "1 hour and 45 minutes", "2 hours and 45 minutes"], "code": [
  "# Python code, return answer \n# The next bus from the doctor's office to the playground\ndeparture_doctors_office = \"10:45 A.M.\" # last bus time from doctor's office\narrival_playground = \"1:00 P.M.\" # first bus time at playground after doctor's office\n\n# Convert times to minutes since the start of the day\ndef time_to_minutes(time_str):\n    period = time_str[-2:]\n    time_parts = time_str[:-3].split(':')\n    hours = int(time_parts[0]) + (12 if period == \"P.M.\" and time_parts[0] != '12' else 0)\n    minutes = int(time_parts[1])\n    return hours * 60 + minutes\n\ndeparture_time = time_to_minutes(departure_doctors_office)\narrival_time = time_to_minutes(arrival_playground)\n\n# Calculate the duration\nduration = arrival_time - departure_time\n\n# Convert duration back to hours and minutes\nhours = duration // 60\nminutes = duration % 60\nanswer = f\"{hours} hours and {minutes} minutes\"\nprint(answer)", "# Define the departure and arrival times as strings\ndeparture_doctors_office = \"10:45 A.M.\"  # last bus time from doctor's office\narrival_playground = \"1:00 P.M.\"  # first bus time at playground after doctor's office\n\n# Function to convert time string to minutes\ndef time_to_minutes(time_str):\n    period = time_str[-2:]  # Get AM or PM\n    time_parts = time_str[:-3].split(':')  # Split hours and minutes\n    hours = int(time_parts[0]) + (12 if period == \"P.M.\" and time_parts[0] != '12' else 0)\n    minutes = int(time_parts[1])\n    return hours * 60 + minutes\n\n# Convert both times to minutes\ndeparture_time = time_to_minutes(departure_doctors_office)\narrival_time = time_to_minutes(arrival_playground)  # Corrected variable name\n\n# Calculate the duration\nduration = arrival_time - departure_time\nhours = duration // 60\nminutes = duration % 60\n\n# Format the answer\nanswer = f\"{hours} hours and {minutes} minutes\"\nprint(answer)", "# Define the departure and arrival times\ndeparture_doctors_office = \"10:45 A.M.\"  # last bus time from doctor's office\narrival_playground = \"1:00 P.M.\"  # first bus time at playground after doctor's office\n\n# Function to convert time string to total minutes\ndef time_to_minutes(time_str):\n    period = time_str[-2:]\n    time_parts = time_str[:-3].split(':')\n    hours = int(time_parts[0]) + (12 if period == \"P.M.\" and time_parts[0] != '12' else 0)\n    minutes = int(time_parts[1])\n    return hours * 60 + minutes\n\n# Convert departure and arrival times to minutes\ndeparture_time = time_to_minutes(departure_doctors_office)\narrival_time = time_to_minutes(arrival_playground)\n\n# Calculate the duration in minutes\nduration = arrival_time - departure_time\n\n# Convert duration to hours and minutes\nhours = duration // 60\nminutes = duration % 60\n\n# Format the answer\nanswer = f\"{hours} hours and {minutes} minutes\"\nprint(answer)", "# Define the departure time from the doctor's office and arrival time at the playground\ndeparture_doctors_office = \"10:45 A.M.\"  # last bus time from doctor's office\narrival_playground = \"1:00 P.M.\"  # first bus time at playground after doctor's office\n\n# Function to convert time in \"HH:MM A.M./P.M.\" format to total minutes\ndef time_to_minutes(time_str):\n    period = time_str[-2:]  # Get the period (A.M. or P.M.)\n    time_parts = time_str[:-3].split(':')  # Split into hours and minutes\n    hours = int(time_parts[0]) + (12 if period == \"P.M.\" and time_parts[0] != '12' else 0)\n    minutes = int(time_parts[1])\n    return hours * 60 + minutes\n\n# Calculate departure and arrival times in minutes\ndeparture_time = time_to_minutes(departure_doctors_office)\narrival_time = time_to_minutes(arrival_playground)\n\n# Calculate duration in minutes\nduration = arrival_time - departure_time\n\n# Convert duration to hours and minutes\nhours = duration // 60\nminutes = duration % 60\n\n# Format the answer\nanswer = f\"{hours} hours and {minutes} minutes\"\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["ValueError(\"invalid literal for int() with base 10: '45 A'\")", "ValueError(\"invalid literal for int() with base 10: '45 A'\")", "ValueError(\"invalid literal for int() with base 10: '45 A'\")", "ValueError(\"invalid literal for int() with base 10: '45 A'\")"]
}
{
  "context": "Read the following table regarding \"Company sizes (number of employees)\" and then answer a question.\n\nStem | Leaf \n0 | 5, 5, 7, 7, 9\n1 | \n2 | 1, 1, 1, 6, 9, 9\n3 | 0, 8, 9\n4 | 2, 5\n5 | 0, 0, 4, 4", "question": "Read the following table regarding \"Company sizes (number of employees)\" and then write Python code to answer a question.\n\nStem | Leaf \n0 | 5, 5, 7, 7, 9\n1 | \n2 | 1, 1, 1, 6, 9, 9\n3 | 0, 8, 9\n4 | 2, 5\n5 | 0, 0, 4, 4\n\nThe Lancaster Chamber of Commerce researched the number of employees working at local companies. How many companies have exactly 5 employees?", "answer": "2", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# From the stem-and-leaf display, we can see the leaf for stem \"0\" which indicates 0 to 9 employees.\n# The only entry that corresponds to exactly 5 employees is in the stem \"0\" with leaf \"5\".\n\n# Count of companies with exactly 5 employees\ncount_companies_exactly_5 = 2  # There are two '5's in the leaves for stem \"0\".\nanswer = count_companies_exactly_5\nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = {\n    0: [5, 5, 7, 7, 9],\n    1: [],\n    2: [1, 1, 1, 6, 9, 9],\n    3: [0, 8, 9],\n    4: [2, 5],\n    5: [0, 0, 4, 4]\n}\n\n# Count the number of companies with exactly 5 employees\ncount_companies_exactly_5 = 0\n\n# Iterate through the stem and leaf data structure\nfor leaf in stem_and_leaf[0]:  # Only check the stem '0'\n    if leaf == 5:\n        count_companies_exactly_5 += 1\n\nanswer = count_companies_exactly_5\nprint(answer)", "# Define the stem and leaf structure\nstem_and_leaf = {\n    0: [5, 5, 7, 7, 9],\n    1: [],\n    2: [1, 1, 1, 6, 9, 9],\n    3: [0, 8, 9],\n    4: [2, 5],\n    5: [0, 0, 4, 4]\n}\n\n# Initialize count for companies with exactly 5 employees\ncount_companies_exactly_5 = 0\n\n# Check the leaves for stem '0' to count companies with exactly 5 employees\nfor leaf in stem_and_leaf[0]:  \n    if leaf == 5:\n        count_companies_exactly_5 += 1\n\n# Store the result as an integer\nanswer = count_companies_exactly_5\nprint(answer)", "# Define the stem and leaf data structure as a dictionary  \nstem_and_leaf = {\n    0: [5, 5, 7, 7, 9],\n    1: [],\n    2: [1, 1, 1, 6, 9, 9],\n    3: [0, 8, 9],\n    4: [2, 5],\n    5: [0, 0, 4, 4]\n}\n\n# Initialize counter for companies with exactly 5 employees  \ncount_companies_exactly_5 = 0  \n\n# Count the number of companies with exactly 5 employees  \nfor leaf in stem_and_leaf[0]:  \n    if leaf == 5:\n        count_companies_exactly_5 += 1  \n\n# Store the result in the answer variable  \nanswer = count_companies_exactly_5  \nprint(answer)"
], "prediction": [2.0, 2.0, 2.0, 2.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Fish per tank\" and then answer a question.\n\nStem | Leaf \n2 | 2\n3 | 0, 1, 6\n4 | 2, 3, 3, 3, 3, 4, 6, 7, 7\n5 | 2, 6, 6, 8, 9\n6 | 6, 9\n7 | 0, 7, 8", "question": "Read the following table regarding \"Fish per tank\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 2\n3 | 0, 1, 6\n4 | 2, 3, 3, 3, 3, 4, 6, 7, 7\n5 | 2, 6, 6, 8, 9\n6 | 6, 9\n7 | 0, 7, 8\n\nA pet store owner had his staff count the number of fish in each tank. How many tanks have exactly 43 fish?", "answer": "4", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The tanks with exactly 43 fish can be found in the stem-and-leaf display.\ntanks_with_43_fish = 1  # From the stem \"4 | 3\", there is one occurrence of 43 fish.\nanswer = tanks_with_43_fish\nprint(answer)", "# Define the stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [2]), (3, [0, 1, 6]), (4, [2, 3, 3, 3, 3, 4, 6, 7, 7]), (5, [2, 6, 6, 8, 9]), (6, [6, 9]), (7, [0, 7, 8])]  \n\n# Initialize counter for tanks with exactly 43 fish  \ntanks_with_43_fish = 0  \n\n# Iterate through the stem and leaf data structure and count relevant tanks  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        fish_per_tank = stem * 10 + leaf  \n        if fish_per_tank == 43:  \n            tanks_with_43_fish += 1  \n\nanswer = tanks_with_43_fish  \nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [(2, [2]), (3, [0, 1, 6]), (4, [2, 3, 3, 3, 3, 4, 6, 7, 7]), (5, [2, 6, 6, 8, 9]), (6, [6, 9]), (7, [0, 7, 8])]\n\n# Initialize counter for tanks with exactly 43 fish\ntanks_with_43_fish = 0\n\n# Iterate through the stem and leaf data structure and count relevant tanks\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        fish_per_tank = stem * 10 + leaf\n        if fish_per_tank == 43:\n            tanks_with_43_fish += 1\n\n# Store the result as an integer\nanswer = int(tanks_with_43_fish)\nprint(answer)", "# Define the stem and leaf data structure as a list of tuples\nstem_and_leaf = [(2, [2]), (3, [0, 1, 6]), (4, [2, 3, 3, 3, 3, 4, 6, 7, 7]), (5, [2, 6, 6, 8, 9]), (6, [6, 9]), (7, [0, 7, 8])]\n\n# Initialize counter for tanks with exactly 43 fish\ntanks_with_43_fish = 0\n\n# Iterate through the stem and leaf data structure and count relevant tanks\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        fish_per_tank = stem * 10 + leaf\n        if fish_per_tank == 43:\n            tanks_with_43_fish += 1\n\nanswer = tanks_with_43_fish  # No need to cast to int, it's already an integer\nprint(answer)"
], "prediction": [1.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Company sizes\" and then answer a question.\n\nCompany | Number of employees\nDavidson Insurance | 668\nMadison Corporation | 646\nABC Electronics | 648\nBenson and Blakely | 684", "question": "Read the following table regarding \"Company sizes\" and then write Python code to answer a question.\n\nCompany | Number of employees\nDavidson Insurance | 668\nMadison Corporation | 646\nABC Electronics | 648\nBenson and Blakely | 684\n\nThe board of commerce recorded how many employees work at each company. Which company has the fewest employees? Choose from the the options: ['Davidson Insurance', 'Madison Corporation', 'ABC Electronics', 'Benson and Blakely']", "answer": "Madison Corporation", "ques_type": "multi_choice", "choices": ["Davidson Insurance", "Madison Corporation", "ABC Electronics", "Benson and Blakely"], "code": [
  "# Python code, return answer \ncompanies = {\n    'Davidson Insurance': 668,\n    'Madison Corporation': 646,\n    'ABC Electronics': 648,\n    'Benson and Blakely': 684\n}\n# Find the company with the fewest employees\nfewest_employees_company = min(companies, key=companies.get)\nanswer = fewest_employees_company\nprint(answer)", "# Define the companies and their corresponding number of employees\ncompanies = {\n    'Davidson Insurance': 668,\n    'Madison Corporation': 646,\n    'ABC Electronics': 648,\n    'Benson and Blakely': 684\n}\n\n# Find the company with the fewest employees\nfewest_employees_company = min(companies, key=companies.get)\nanswer = fewest_employees_company\n\nprint(answer)", "# Store the company names and their corresponding number of employees in a dictionary  \ncompanies = {\n    'Davidson Insurance': 668,\n    'Madison Corporation': 646,\n    'ABC Electronics': 648,\n    'Benson and Blakely': 684\n}\n\n# Find the company with the fewest employees  \nfewest_employees_company = min(companies, key=companies.get)\nanswer = fewest_employees_company\nprint(answer)", "# Store the company names and their corresponding number of employees in a dictionary  \ncompanies = {\n    'Davidson Insurance': 668,\n    'Madison Corporation': 646,\n    'ABC Electronics': 648,\n    'Benson and Blakely': 684\n}\n\n# Find the company with the fewest employees  \nfewest_employees_company = min(companies, key=companies.get)\nanswer = fewest_employees_company  \nprint(answer)"
], "prediction": ["Madison Corporation", "Madison Corporation", "Madison Corporation", "Madison Corporation"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Spelling bee results\" and then answer a question.\n\nName | Number of words spelled correctly\nErnest | 45\nCooper | 45\nNora | 47\nKylie | 44\nAlexa | 48\nFrank | 47\nBrendan | 44\nLaura | 45", "question": "Read the following table regarding \"Spelling bee results\" and then write Python code to answer a question.\n\nName | Number of words spelled correctly\nErnest | 45\nCooper | 45\nNora | 47\nKylie | 44\nAlexa | 48\nFrank | 47\nBrendan | 44\nLaura | 45\n\nAfter a spelling bee, some students compared how many words they spelled correctly. What is the mode of the numbers?", "answer": "45", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nfrom statistics import mode\n\n# List of words spelled correctly by each student\nwords_spelled_correctly = [45, 45, 47, 44, 48, 47, 44, 45]\n\n# Calculate the mode\nmode_value = mode(words_spelled_correctly)\nanswer = mode_value\nprint(answer)", "from statistics import mode\n\n# List of words spelled correctly by each student\nwords_spelled_correctly = [45, 45, 47, 44, 48, 47, 44, 45]\n\n# Calculate the mode and convert to integer\nmode_value = int(mode(words_spelled_correctly))\nanswer = mode_value\n\nprint(answer)", "from statistics import mode\n\n# List of words spelled correctly by each student\nwords_spelled_correctly = [45, 45, 47, 44, 48, 47, 44, 45]\n\n# Calculate the mode\nmode_value = mode(words_spelled_correctly)\n\n# Ensure the answer is an integer\nanswer = int(mode_value)\n\nprint(answer)", "from statistics import mode\n\n# List of the number of words spelled correctly by each student\nwords_spelled_correctly = [45, 45, 47, 44, 48, 47, 44, 45]\n\n# Calculate the mode\nmode_value = mode(words_spelled_correctly)\n\n# Convert the mode to an integer\nanswer = int(mode_value)\n\n# Print the answer\nprint(answer)"], "prediction": [45.0, 45.0, 45.0, 45.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\norange envelope | $0.03\npiece of pink paper | $0.08\npiece of elegant stationery | $0.05\nwhite note card | $0.04\npiece of floral stationery | $0.02", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\norange envelope | $0.03\npiece of pink paper | $0.08\npiece of elegant stationery | $0.05\nwhite note card | $0.04\npiece of floral stationery | $0.02\n\nMike has $0.04. Does he have enough to buy a piece of floral stationery and a white note card? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# Prices of the items\nprice_floral_stationery = 0.02\nprice_white_note_card = 0.04\n\n# Total cost of both items\ntotal_cost = price_floral_stationery + price_white_note_card\n\n# Amount Mike has\nmike_money = 0.04\n\n# Check if Mike has enough money\nif mike_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the prices of the items\nprice_floral_stationery = 0.02\nprice_white_note_card = 0.04\n\n# Calculate the total cost of the items\ntotal_cost = price_floral_stationery + price_white_note_card\n\n# Define the amount of money Mike has\nmike_money = 0.04\n\n# Check if Mike has enough money to buy both items\nif mike_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Prices of the items\nprice_floral_stationery = 0.02\nprice_white_note_card = 0.04\n\n# Calculate the total cost\ntotal_cost = price_floral_stationery + price_white_note_card\n\n# Amount of money Mike has\nmike_money = 0.04\n\n# Determine if Mike has enough money\nif mike_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Prices of the items\nprice_floral_stationery = 0.02\nprice_white_note_card = 0.04\n\n# Calculate total cost\ntotal_cost = price_floral_stationery + price_white_note_card\n\n# Money Mike has\nmike_money = 0.04\n\n# Check if Mike has enough money\nif mike_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)"
], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Planet Volume (km3) Primary composition\" and then answer a question.\n\nMercury | 6.08 x | 1010 rock\nVenus | 9.28 x | 1011 rock\nEarth | 1.08 x | 1012 rock\nMars | 1.63 x | 1011 rock\nJupiter | 1.43 x | 1015 gas\nSaturn | 8.27 x | 1014 gas\nUranus | 6.83 x | 1013 ice\nNeptune | 6.25 x | 1013 ice", "question": "Read the following table regarding \"Planet Volume (km3) Primary composition\" and then write Python code to answer a question.\n\nMercury | 6.08 x | 1010 rock\nVenus | 9.28 x | 1011 rock\nEarth | 1.08 x | 1012 rock\nMars | 1.63 x | 1011 rock\nJupiter | 1.43 x | 1015 gas\nSaturn | 8.27 x | 1014 gas\nUranus | 6.83 x | 1013 ice\nNeptune | 6.25 x | 1013 ice\n\nUse the data to answer the question below. Is the following statement about our solar system true or false? Three-quarters of the planets are larger than Earth. Choose from the the options: ['true', 'false']", "answer": "false", "ques_type": "multi_choice", "choices": ["true", "false"], "code": [
  "# Python code, return answer\n# Given volumes for the planets in km^3\nplanet_volumes = {\n    'Mercury': 6.08e10,\n    'Venus': 9.28e11,\n    'Earth': 1.08e12,\n    'Mars': 1.63e11,\n    'Jupiter': 1.43e15,\n    'Saturn': 8.27e14,\n    'Uranus': 6.83e13,\n    'Neptune': 6.25e13\n}\n\n# Count how many planets are larger than Earth\nearth_volume = planet_volumes['Earth']\nlarger_than_earth = sum(1 for volume in planet_volumes.values() if volume > earth_volume)\n\n# Total number of planets\ntotal_planets = len(planet_volumes)\n\n# Determine if three-quarters are larger than Earth\nif larger_than_earth > (3/4) * total_planets:\n    answer = 'true'\nelse:\n    answer = 'false'\n\nprint(answer)", "# Define the planet volumes in a dictionary\nplanet_volumes = {\n    'Mercury': 6.08e10,\n    'Venus': 9.28e11,\n    'Earth': 1.08e12,\n    'Mars': 1.63e11,\n    'Jupiter': 1.43e15,\n    'Saturn': 8.27e14,\n    'Uranus': 6.83e13,\n    'Neptune': 6.25e13\n}\n\n# Get the volume of Earth\nearth_volume = planet_volumes['Earth']\n\n# Count how many planets are larger than Earth\nlarger_than_earth = sum(1 for volume in planet_volumes.values() if volume > earth_volume)\n\n# Total number of planets\ntotal_planets = len(planet_volumes)\n\n# Check if more than three-quarters of the planets are larger than Earth\nif larger_than_earth > (3/4) * total_planets:\n    answer = 'true'\nelse:\n    answer = 'false'\n\nprint(answer)", "# Define the planet volumes in a dictionary\nplanet_volumes = {\n    'Mercury': 6.08e10,\n    'Venus': 9.28e11,\n    'Earth': 1.08e12,\n    'Mars': 1.63e11,\n    'Jupiter': 1.43e15,\n    'Saturn': 8.27e14,\n    'Uranus': 6.83e13,\n    'Neptune': 6.25e13\n}\n\n# Get the volume of Earth\nearth_volume = planet_volumes['Earth']\n\n# Count how many planets are larger than Earth\nlarger_than_earth = sum(1 for volume in planet_volumes.values() if volume > earth_volume)\n\n# Total number of planets\ntotal_planets = len(planet_volumes)\n\n# Check if three-quarters of the planets are larger than Earth\nif larger_than_earth > (3/4) * total_planets:\n    answer = 'true'\nelse:\n    answer = 'false'\n\nprint(answer)", "# Define the volume of each planet in a dictionary\nplanet_volumes = {\n    'Mercury': 6.08e10,\n    'Venus': 9.28e11,\n    'Earth': 1.08e12,\n    'Mars': 1.63e11,\n    'Jupiter': 1.43e15,\n    'Saturn': 8.27e14,\n    'Uranus': 6.83e13,\n    'Neptune': 6.25e13\n}\n\n# Get the volume of Earth\nearth_volume = planet_volumes['Earth']\n\n# Count how many planets are larger than Earth\nlarger_than_earth = sum(1 for volume in planet_volumes.values() if volume > earth_volume)\n\n# Total number of planets\ntotal_planets = len(planet_volumes)\n\n# Check if more than three-quarters of the planets are larger than Earth\nif larger_than_earth > (3/4) * total_planets:\n    answer = 'true'\nelse:\n    answer = 'false'\n\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'earth_volume' is not defined\")", "NameError(\"name 'earth_volume' is not defined\")", "NameError(\"name 'earth_volume' is not defined\")", "NameError(\"name 'earth_volume' is not defined\")"]
}
{
  "context": "Read the following table regarding \"Broken crayons per box\" and then answer a question.\n\nStem | Leaf \n0 | 0, 1, 5, 5\n1 | \n2 | 0\n3 | 1, 2, 6, 8\n4 | 2, 8\n5 | 1, 2\n6 | 2, 4\n7 | 1, 5\n8 | 8\n9 | 0, 0", "question": "Read the following table regarding \"Broken crayons per box\" and then write Python code to answer a question.\n\nStem | Leaf \n0 | 0, 1, 5, 5\n1 | \n2 | 0\n3 | 1, 2, 6, 8\n4 | 2, 8\n5 | 1, 2\n6 | 2, 4\n7 | 1, 5\n8 | 8\n9 | 0, 0\n\nA crayon factory monitored the number of broken crayons per box during the past day. How many boxes had at least 60 broken crayons?", "answer": "7", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Extract the values from the stem-and-leaf display\nbroken_crayons = [\n    0, 1, 5, 5,  # Stem 0\n    10,           # Stem 1 (no leaves)\n    20,           # Stem 2\n    31, 32, 36, 38,  # Stem 3\n    42, 48,      # Stem 4\n    51, 52,      # Stem 5\n    62, 64,      # Stem 6\n    71, 75,      # Stem 7\n    88,          # Stem 8\n    90, 90       # Stem 9\n]\n\n# Count boxes with at least 60 broken crayons\ncount_at_least_60 = sum(1 for crayons in broken_crayons if crayons >= 60)\nanswer = count_at_least_60\nprint(answer)", "broken_crayons = [\n    0, 1, 5, 5,  # Stem 0\n    10,           # Stem 1 (no leaves)\n    20,           # Stem 2\n    31, 32, 36, 38,  # Stem 3\n    42, 48,      # Stem 4\n    51, 52,      # Stem 5\n    62, 64,      # Stem 6\n    71, 75,      # Stem 7\n    88,          # Stem 8\n    90, 90       # Stem 9\n]\n\ncount_at_least_60 = sum(1 for crayons in broken_crayons if crayons >= 60)\nanswer = int(count_at_least_60)  # Ensure the count is an integer\nprint(answer)", "broken_crayons = [\n    0, 1, 5, 5,  # Stem 0\n    10,           # Stem 1 (no leaves)\n    20,           # Stem 2\n    31, 32, 36, 38,  # Stem 3\n    42, 48,      # Stem 4\n    51, 52,      # Stem 5\n    62, 64,      # Stem 6\n    71, 75,      # Stem 7\n    88,          # Stem 8\n    90, 90       # Stem 9\n]\n\n# Count the number of boxes with at least 60 broken crayons\ncount_at_least_60 = sum(1 for crayons in broken_crayons if crayons >= 60)\nanswer = count_at_least_60  # The count is already an integer\nprint(answer)", "broken_crayons = [\n    0, 1, 5, 5,  # Stem 0\n    10,           # Stem 1 (no leaves)\n    20,           # Stem 2\n    31, 32, 36, 38,  # Stem 3\n    42, 48,      # Stem 4\n    51, 52,      # Stem 5\n    62, 64,      # Stem 6\n    71, 75,      # Stem 7\n    88,          # Stem 8\n    90, 90       # Stem 9\n]\n\ncount_at_least_60 = sum(1 for crayons in broken_crayons if crayons >= 60)\nanswer = int(count_at_least_60)  # Ensure the count is an integer\nprint(answer)"
], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Broken lights per string\" and then answer a question.\n\nStem | Leaf \n2 | 1, 4, 9\n3 | 0, 2\n4 | 1, 3, 4\n5 | 5, 5, 6\n6 | 4, 5, 6, 6, 9\n7 | 2, 5", "question": "Read the following table regarding \"Broken lights per string\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 1, 4, 9\n3 | 0, 2\n4 | 1, 3, 4\n5 | 5, 5, 6\n6 | 4, 5, 6, 6, 9\n7 | 2, 5\n\nWhile hanging Christmas lights for neighbors, Zach counted the number of broken lights on each string. What is the largest number of broken lights?", "answer": "75", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number of broken lights corresponds to the highest value in the stem-and-leaf display.\nlargest_broken_lights = 79  # From the stem \"7 | 2, 5\", the value is 75.\nanswer = largest_broken_lights\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(2, [1, 4, 9]), (3, [0, 2]), (4, [1, 3, 4]), (5, [5, 5, 6]), (6, [4, 5, 6, 6, 9]), (7, [2, 5])]\n\n# Initialize variable to track the largest number of broken lights\nlargest_broken_lights = 0\n\n# Iterate through the stem and leaf data structure and find the largest number\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        broken_lights = stem * 10 + leaf\n        if broken_lights > largest_broken_lights:\n            largest_broken_lights = broken_lights\n\nanswer = largest_broken_lights\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [1, 4, 9]), (3, [0, 2]), (4, [1, 3, 4]), (5, [5, 5, 6]), (6, [4, 5, 6, 6, 9]), (7, [2, 5])]  \n  \n# Initialize variable for the largest number of broken lights  \nlargest_broken_lights = 0  \n  \n# Iterate through the stem and leaf data structure to find the largest number of broken lights  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        broken_lights = stem * 10 + leaf  \n        if broken_lights > largest_broken_lights:  \n            largest_broken_lights = broken_lights  \n  \n# Store the result as an integer  \nanswer = int(largest_broken_lights)  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [1, 4, 9]), (3, [0, 2]), (4, [1, 3, 4]), (5, [5, 5, 6]), (6, [4, 5, 6, 6, 9]), (7, [2, 5])]  \n\n# Initialize variable to track the largest number of broken lights  \nlargest_broken_lights = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number of broken lights  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        broken_lights = stem * 10 + leaf  \n        if broken_lights > largest_broken_lights:  \n            largest_broken_lights = broken_lights  \n\n# Store the result in the answer variable  \nanswer = largest_broken_lights  \nprint(answer)"
], "prediction": [79.0, 75.0, 75.0, 75.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nsoftball glove | $9.69\nbicycle helmet | $8.14\nbaseball | $2.18\ngolf ball | $2.33\nswimsuit | $8.80\nbike horn | $5.86", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nsoftball glove | $9.69\nbicycle helmet | $8.14\nbaseball | $2.18\ngolf ball | $2.33\nswimsuit | $8.80\nbike horn | $5.86\n\nHow much money does Ben need to buy a golf ball, a bicycle helmet, and a swimsuit?", "answer": "19.27", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices of the items Ben wants to buy\nprice_golf_ball = 2.33\nprice_bicycle_helmet = 8.14\nprice_swimsuit = 8.80\n# Total cost for the items\ntotal_cost = price_golf_ball + price_bicycle_helmet + price_swimsuit\nanswer = total_cost\nprint(answer)", "# Prices of the items Ben wants to buy\nprice_golf_ball = 2.33\nprice_bicycle_helmet = 8.14\nprice_swimsuit = 8.80\n\n# Calculate the total cost\ntotal_cost = price_golf_ball + price_bicycle_helmet + price_swimsuit\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer with a descriptive message\nprint(f\"Ben needs to spend a total of ${answer:.2f} to buy a golf ball, a bicycle helmet, and a swimsuit.\")", "# Define the prices of the items\nprice_golf_ball = 2.33\nprice_bicycle_helmet = 8.14\nprice_swimsuit = 8.80\n\n# Calculate the total cost\ntotal_cost = price_golf_ball + price_bicycle_helmet + price_swimsuit\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "price_golf_ball = 2.33\nprice_bicycle_helmet = 8.14\nprice_swimsuit = 8.80\ntotal_cost = price_golf_ball + price_bicycle_helmet + price_swimsuit\nanswer = f\"${total_cost:.2f}\"  # Format the output to two decimal places\nprint(answer)"
], "prediction": [19.27, 19.27, 19.27, "$19.27"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"States visited\" and then answer a question.\n\nName | Number of states\nColette | 2\nKayla | 8\nLester | 3\nBrandon | 8\nEdmond | 8\nTammy | 3\nMaddie | 2", "question": "Read the following table regarding \"States visited\" and then write Python code to answer a question.\n\nName | Number of states\nColette | 2\nKayla | 8\nLester | 3\nBrandon | 8\nEdmond | 8\nTammy | 3\nMaddie | 2\n\nColette's class recorded how many states each student has visited. What is the mode of the numbers?", "answer": "8", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nfrom collections import Counter\n\n# List of the number of states visited by each student\nstates_visited = [2, 8, 3, 8, 8, 3, 2]\n\n# Calculate the mode\ncount = Counter(states_visited)\nmode_data = count.most_common()\n\n# The mode is the number with the highest frequency\nmode_value = mode_data[0][0]\nanswer = mode_value\nprint(answer)", "from collections import Counter\n\nstates_visited = [2, 8, 3, 8, 8, 3, 2]\ncount = Counter(states_visited)\nmode_data = count.most_common()\nmode_value = mode_data[0][0]  # This will be the mode value\n\nanswer = int(mode_value)  # Convert to integer if needed\nprint(answer)", "from collections import Counter\n\nstates_visited = [2, 8, 3, 8, 8, 3, 2]\ncount = Counter(states_visited)\nmode_data = count.most_common()\nmode_value = mode_data[0][0]  # This will be the mode value\nanswer = mode_value  # Store the mode value directly as an integer\nprint(answer)", "from collections import Counter\n\n# List of states visited by each student\nstates_visited = [2, 8, 3, 8, 8, 3, 2]\n\n# Count the occurrences of each number\ncount = Counter(states_visited)\n\n# Get the most common number (mode)\nmode_data = count.most_common()\nmode_value = mode_data[0][0]  # This will be the mode value\n\n# Ensure the mode value is stored as an integer\nanswer = int(mode_value)  # Convert to integer if needed\nprint(answer)"], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Phone calls received\" and then answer a question.\n\nDay | Number of calls\nMonday | 632\nTuesday | 222\nWednesday | 374\nThursday | 825\nFriday | 507", "question": "Read the following table regarding \"Phone calls received\" and then write Python code to answer a question.\n\nDay | Number of calls\nMonday | 632\nTuesday | 222\nWednesday | 374\nThursday | 825\nFriday | 507\n\nA technical support line tracked how many calls it received each day. How many more calls did the support line receive on Thursday than on Friday?", "answer": "318", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncalls_thursday = 825\ncalls_friday = 507\n# Calculate the difference in calls received\ndifference = calls_thursday - calls_friday\nanswer = difference\nprint(answer)", "calls_thursday = 825\ncalls_friday = 507\ndifference = calls_thursday - calls_friday\nanswer = int(difference)  # Ensuring the result is an integer\nprint(answer)", "calls_thursday = 825\ncalls_friday = 507\ndifference = calls_thursday - calls_friday\nanswer = difference  # The result is already an integer\nprint(answer)", "calls_thursday = 825\ncalls_friday = 507\ndifference = calls_thursday - calls_friday\nanswer = int(difference)  # Explicitly convert to an integer\nprint(answer)"], "prediction": [318.0, 318.0, 318.0, 318.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Olympic medals\" and then answer a question.\n\nCountry | 2000 | 2004\nBrazil | 12 | 10\nSweden | 12 | 7\nFinland | 4 | 2", "question": "Read the following table regarding \"Olympic medals\" and then write Python code to answer a question.\n\nCountry | 2000 | 2004\nBrazil | 12 | 10\nSweden | 12 | 7\nFinland | 4 | 2\n\nA sports fan decided to examine the pattern of medals won by certain countries at several Olympic games. Which country won fewer medals in 2004, Brazil or Finland? Choose from the the options: ['Finland', 'Brazil']", "answer": "Finland", "ques_type": "multi_choice", "choices": ["Finland", "Brazil"], "code": ["# Python code, return answer \nbrazil_medals_2004 = 10\nfinland_medals_2004 = 2\n\n# Compare the number of medals won by Brazil and Finland in 2004\nif finland_medals_2004 < brazil_medals_2004:\n    answer = 'Finland'\nelse:\n    answer = 'Brazil'\n\nprint(answer)", "# Define the number of medals won by each country in 2004\nbrazil_medals_2004 = 10\nfinland_medals_2004 = 2\n\n# Determine which country won fewer medals in 2004\nif finland_medals_2004 < brazil_medals_2004:\n    answer = 'Finland'\nelif brazil_medals_2004 < finland_medals_2004:\n    answer = 'Brazil'\nelse:\n    answer = 'Both countries won the same number of medals'\n\nprint(answer)", "# Define the number of medals won by Brazil and Finland in 2004\nbrazil_medals_2004 = 10\nfinland_medals_2004 = 2\n\n# Determine which country won fewer medals in 2004\nif finland_medals_2004 < brazil_medals_2004:\n    answer = 'Finland'\nelse:\n    answer = 'Brazil'\n\nprint(answer)", "# Store the medal counts for each country in a dictionary\nmedals = {\n    'Brazil': {2000: 12, 2004: 10},\n    'Finland': {2000: 4, 2004: 2}\n}\n\n# Compare the number of medals won by Brazil and Finland in 2004\nbrazil_medals_2004 = medals['Brazil'][2004]\nfinland_medals_2004 = medals['Finland'][2004]\n\n# Determine which country won fewer medals in 2004\nif finland_medals_2004 < brazil_medals_2004:\n    answer = 'Finland'\nelif brazil_medals_2004 < finland_medals_2004:\n    answer = 'Brazil'\nelse:\n    answer = 'Both countries won the same number of medals'\n\nprint(answer)"], "prediction": ["Finland", "Finland", "Finland", "Finland"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Cheese consumption per capita (kg)\" and then answer a question.\n\nCountry | 1996 | 2006\nArgentina | 11 | 11\nGreat Britain | 9 | 10\nAustria | 10 | 17", "question": "Read the following table regarding \"Cheese consumption per capita (kg)\" and then write Python code to answer a question.\n\nCountry | 1996 | 2006\nArgentina | 11 | 11\nGreat Britain | 9 | 10\nAustria | 10 | 17\n\nAn agricultural agency is researching how much cheese people have been eating in different parts of the world. How much cheese was consumed per capita in Austria in 2006?", "answer": "17", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncheese_consumption_austria_2006 = 17  # From the table, the cheese consumption per capita in Austria in 2006\nanswer = cheese_consumption_austria_2006\nprint(answer)", "# Define cheese consumption data in a dictionary\ncheese_consumption = {\n    'Argentina': {1996: 11, 2006: 11},\n    'Great Britain': {1996: 9, 2006: 10},\n    'Austria': {1996: 10, 2006: 17}\n}\n\n# Extract the cheese consumption per capita in Austria for the year 2006\ncheese_consumption_austria_2006 = cheese_consumption['Austria'][2006]\nanswer = cheese_consumption_austria_2006\nprint(answer)", "cheese_consumption = {\n    'Argentina': {1996: 11, 2006: 11},\n    'Great Britain': {1996: 9, 2006: 10},\n    'Austria': {1996: 10, 2006: 17}\n}\ncheese_consumption_austria_2006 = cheese_consumption['Austria'][2006]\nanswer = int(cheese_consumption_austria_2006)  # Convert to integer for cleaner output\nprint(answer)", "# Define the cheese consumption data\ncheese_consumption = {\n    'Argentina': {1996: 11, 2006: 11},\n    'Great Britain': {1996: 9, 2006: 10},\n    'Austria': {1996: 10, 2006: 17}\n}\n\n# Access the cheese consumption per capita in Austria for the year 2006\nanswer = cheese_consumption['Austria'][2006]\n\n# Print the answer\nprint(answer)"], "prediction": [17.0, 17.0, 17.0, 17.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n17 | 20\n18 | 12\n19 | 4", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n17 | 20\n18 | 12\n19 | 4\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "linear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear or nonlinear, we can check the differences in y-values for equal increments in x-values.\n\nx_values = [17, 18, 19]\ny_values = [20, 12, 4]\n\n# Calculate the differences\ny_diff_1 = y_values[1] - y_values[0]  # Difference when x goes from 17 to 18\ny_diff_2 = y_values[2] - y_values[1]  # Difference when x goes from 18 to 19\n\n# Check if the differences are constant\nif y_diff_1 != y_diff_2:\n    answer = 'nonlinear'\nelse:\n    answer = 'linear'\nprint(answer)", "x_values = [17, 18, 19]\ny_values = [20, 12, 4]\n\n# Calculate the differences between consecutive y-values\ny_diff_1 = y_values[1] - y_values[0]  # Difference when x goes from 17 to 18\ny_diff_2 = y_values[2] - y_values[1]  # Difference when x goes from 18 to 19\n\n# Check if the differences are equal to determine if the function is linear or nonlinear\nif y_diff_1 != y_diff_2:\n    answer = 'nonlinear'\nelse:\n    answer = 'linear'\n\nprint(answer)", "x_values = [17, 18, 19]\ny_values = [20, 12, 4]\n\n# Calculate the differences in y-values\ny_diff_1 = y_values[1] - y_values[0]  # Difference when x goes from 17 to 18\ny_diff_2 = y_values[2] - y_values[1]  # Difference when x goes from 18 to 19\n\n# Calculate the differences in x-values\nx_diff_1 = x_values[1] - x_values[0]  # Difference when x goes from 17 to 18\nx_diff_2 = x_values[2] - x_values[1]  # Difference when x goes from 18 to 19\n\n# Check if the slope (change in y/change in x) is constant\nslope_1 = y_diff_1 / x_diff_1\nslope_2 = y_diff_2 / x_diff_2\n\nif slope_1 != slope_2:\n    answer = 'nonlinear'\nelse:\n    answer = 'linear'\n\nprint(answer)", "x_values = [17, 18, 19]\ny_values = [20, 12, 4]\n\n# Calculate the differences in y-values and x-values\ny_diff_1 = y_values[1] - y_values[0]  # Difference when x goes from 17 to 18\ny_diff_2 = y_values[2] - y_values[1]  # Difference when x goes from 18 to 19\n\n# If the differences in y-values are not the same, the function is nonlinear\nif y_diff_1 != y_diff_2:\n    answer = 'nonlinear'\nelse:\n    answer = 'linear'\n\nprint(answer)"
], "prediction": ["linear", "linear", "linear", "linear"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Biking last week\" and then answer a question.\n\nName | Miles\nClayton | 58\nLauren | 47\nRoger | 53\nKyle | 46\nBrianna | 57\nMiles | 59\nHarold | 50", "question": "Read the following table regarding \"Biking last week\" and then write Python code to answer a question.\n\nName | Miles\nClayton | 58\nLauren | 47\nRoger | 53\nKyle | 46\nBrianna | 57\nMiles | 59\nHarold | 50\n\nThe members of the cycling club compared how many miles they biked last week. What is the median of the numbers?", "answer": "53", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of miles biked by each member\nmiles = [58, 47, 53, 46, 57, 59, 50]\n# Sorting the list to find the median\nmiles.sort()\n\n# Finding the median\nn = len(miles)\nif n % 2 == 1:  # Odd number of elements\n    median = miles[n // 2]\nelse:  # Even number of elements\n    median = (miles[n // 2 - 1] + miles[n // 2]) / 2\n\nanswer = median\nprint(answer)", "miles = [58, 47, 53, 46, 57, 59, 50]\nmiles.sort()\nn = len(miles)\nif n % 2 == 1:  # Odd number of elements\n    answer = miles[n // 2]\nelse:  # Even number of elements\n    answer = (miles[n // 2 - 1] + miles[n // 2]) / 2\n\nprint(answer)", "# List of miles biked by each member of the cycling club\nmiles = [58, 47, 53, 46, 57, 59, 50]\n\n# Sort the list of miles\nmiles.sort()\n\n# Calculate the median\nn = len(miles)\nif n % 2 == 1:  # Odd number of elements\n    answer = miles[n // 2]\nelse:  # Even number of elements\n    answer = (miles[n // 2 - 1] + miles[n // 2]) / 2\n\nprint(answer)", "miles = [58, 47, 53, 46, 57, 59, 50]\nmiles.sort()\nn = len(miles)\nif n % 2 == 1:  # Odd number of elements\n    answer = miles[n // 2]\nelse:  # Even number of elements\n    answer = (miles[n // 2 - 1] + miles[n // 2]) / 2\n\nprint(answer)"], "prediction": [53.0, 53.0, 53.0, 53.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Tractors made\" and then answer a question.\n\nMonth | Number of tractors\nOctober | 887\nNovember | 848\nDecember | 847\nJanuary | 878", "question": "Read the following table regarding \"Tractors made\" and then write Python code to answer a question.\n\nMonth | Number of tractors\nOctober | 887\nNovember | 848\nDecember | 847\nJanuary | 878\n\nA farm equipment company kept a record of the number of tractors made each month. In which month did the company make the most tractors? Choose from the the options: ['October', 'November', 'December', 'January']", "answer": "October", "ques_type": "multi_choice", "choices": ["October", "November", "December", "January"], "code": [
  "# Python code, return answer \ntractors_made = {\n    'October': 887,\n    'November': 848,\n    'December': 847,\n    'January': 878\n}\n# Find the month with the most tractors made\nmost_tractors_month = max(tractors_made, key=tractors_made.get)\nanswer = most_tractors_month\nprint(answer)", "# Store the number of tractors made each month in a dictionary\ntractors_made = {\n    'October': 887,\n    'November': 848,\n    'December': 847,\n    'January': 878\n}\n\n# Find the month with the most tractors made\nmost_tractors_month = max(tractors_made, key=tractors_made.get)\nanswer = most_tractors_month\n\n# Output the answer\nprint(answer)", "# Store the number of tractors made each month in a dictionary\ntractors_made = {\n    'October': 887,\n    'November': 848,\n    'December': 847,\n    'January': 878\n}\n\n# Find the month with the most tractors made\nmost_tractors_month = max(tractors_made, key=tractors_made.get)\n\n# Store the result in the variable 'answer'\nanswer = most_tractors_month\n\n# Output the answer\nprint(answer)", "tractors_made = {\n    'October': 887,\n    'November': 848,\n    'December': 847,\n    'January': 878\n}\nmost_tractors_month = max(tractors_made, key=tractors_made.get)\nanswer = most_tractors_month\nprint(answer)"
], "prediction": ["October", "October", "October", "October"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Going swimming last month\" and then answer a question.\n\nNumber of times | Frequency\n1 | 15\n2 | 2\n3 | 4\n4 | 5", "question": "Read the following table regarding \"Going swimming last month\" and then write Python code to answer a question.\n\nNumber of times | Frequency\n1 | 15\n2 | 2\n3 | 4\n4 | 5\n\nCedarburg will decide whether to extend its public pool's hours by looking at the number of times its residents visited the pool last month. How many people went swimming exactly twice last month?", "answer": "2", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# The frequency of people who went swimming exactly twice\nfrequency_twice = 2\nnumber_of_people_twice = frequency_twice\nanswer = number_of_people_twice\nprint(answer)", "# Number of people who went swimming exactly twice last month\nnumber_of_people_twice = 2\nanswer = number_of_people_twice\nprint(answer)", "# Define the frequency of swimming visits\nfrequency = {\n    1: 15,\n    2: 2,\n    3: 4,\n    4: 5\n}\n\n# Get the number of people who went swimming exactly twice last month\nnumber_of_people_twice = frequency[2]\nanswer = number_of_people_twice\n\nprint(answer)", "frequency = {\n    1: 15,\n    2: 2,\n    3: 4,\n    4: 5\n}\nnumber_of_people_twice = frequency[2]\nanswer = int(number_of_people_twice)  # Ensure the answer is an integer\nprint(answer)"], "prediction": [2.0, 2.0, 2.0, 2.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n3 | 8\n4 | 12\n5 | 16", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n3 | 8\n4 | 12\n5 | 16\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "linear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for constant x differences.\nx_values = [3, 4, 5]\ny_values = [8, 12, 16]\n\n# Calculate the differences\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values) - 1)]\n# If the differences are constant, it's linear\nis_linear = all(diff == differences[0] for diff in differences)\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values based on the table\nx_values = [3, 4, 5]\ny_values = [8, 12, 16]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i + 1] - y_values[i] for i in range(len(y_values) - 1)]\n\n# Check if all differences are the same\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Assign the result to the answer variable\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "x_values = [3, 4, 5]\ny_values = [8, 12, 16]\n\n# Calculate the differences between consecutive y-values\ndifferences = [y_values[i + 1] - y_values[i] for i in range(len(y_values) - 1)]\n\n# Check if all differences are the same\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values from the table\nx_values = [3, 4, 5]\ny_values = [8, 12, 16]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i + 1] - y_values[i] for i in range(len(y_values) - 1)]\n\n# Check if all differences are the same to determine if the function is linear\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Assign the result to the answer variable\nanswer = 'linear' if is_linear else 'nonlinear'\n\n# Print the answer\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")"]
}
{
  "context": "Read the following table regarding \"Record obstacle course completion times\" and then answer a question.\n\nYear | Record time (minutes)\n2007 | 29\n2008 | 27\n2009 | 24\n2010 | 29\n2011 | 30", "question": "Read the following table regarding \"Record obstacle course completion times\" and then write Python code to answer a question.\n\nYear | Record time (minutes)\n2007 | 29\n2008 | 27\n2009 | 24\n2010 | 29\n2011 | 30\n\nEach year, the campers at Keith's summer camp try to set that summer's record for finishing the obstacle course as quickly as possible. According to the table, what was the rate of change between 2010 and 2011?", "answer": "1", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Record times for the years\ntime_2010 = 29\ntime_2011 = 30\n\n# Rate of change calculation\nrate_of_change = time_2011 - time_2010\nanswer = rate_of_change\nprint(answer)", "time_2010 = 29\ntime_2011 = 30\nrate_of_change = time_2011 - time_2010\n\n# Providing context for the rate of change\nif rate_of_change > 0:\n    context = \"The record time increased by {} minutes from 2010 to 2011.\".format(rate_of_change)\nelse:\n    context = \"The record time decreased by {} minutes from 2010 to 2011.\".format(-rate_of_change)\n\nanswer = context\nprint(answer)", "time_2010 = 29\ntime_2011 = 30\nrate_of_change = time_2011 - time_2010\n\nif rate_of_change > 0:\n    context = \"The record time increased by {} minutes from 2010 to 2011, indicating a slower performance.\".format(rate_of_change)\nelse:\n    context = \"The record time decreased by {} minutes from 2010 to 2011, indicating a better performance.\".format(-rate_of_change)\n\nanswer = context\nprint(answer)", "time_2010 = 29\ntime_2011 = 30\nrate_of_change = time_2011 - time_2010\n\nif rate_of_change > 0:\n    answer = \"The record time increased by {} minutes from 2010 to 2011, indicating a slower performance.\".format(rate_of_change)\nelse:\n    answer = \"The record time decreased by {} minutes from 2010 to 2011, indicating a better performance.\".format(-rate_of_change)\n\nprint(answer)"
], "prediction": [1.0, "The record time increased by 1 minutes from 2010 to 2011.", "The record time increased by 1 minutes from 2010 to 2011, indicating a slower performance.", "The record time increased by 1 minutes from 2010 to 2011, indicating a slower performance."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n0 | 5\n7 | 18\n0 | 9\n19 | 7", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n0 | 5\n7 | 18\n0 | 9\n19 | 7\n\nLook at this table. Is this relation a function? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# A relation is a function if each input (x value) is associated with exactly one output (y value).\n# We will check if any x value is repeated with different y values.\n\n# Create a dictionary to store x values and their corresponding y values\nrelation = {\n    0: [5, 9],\n    7: [18],\n    19: [7]\n}\n\n# Check if any x value has more than one corresponding y value\nis_function = all(len(values) == 1 for values in relation.values())\n\nanswer = 'yes' if is_function else 'no'\nprint(answer)", "# Define the relation as a dictionary where each x maps to a single y\nrelation = {\n    0: 5,\n    7: 18,\n    19: 7\n}\n\n# Check if the relation is a function\nis_function = len(relation) == len(set(relation.keys()))\nanswer = 'yes' if is_function else 'no'\nprint(answer)", "# Define the relation as a list of tuples\nrelation = [(0, 5), (7, 18), (0, 9), (19, 7)]\n\n# Use a set to track unique x-values\nx_values = set()\n\n# Flag to determine if the relation is a function\nis_function = True\n\n# Check if any x-value is repeated\nfor x, y in relation:\n    if x in x_values:\n        is_function = False\n        break\n    x_values.add(x)\n\n# Determine the answer based on the is_function flag\nanswer = 'yes' if is_function else 'no'\nprint(answer)", "# Define the relation as a list of tuples\nrelation = [(0, 5), (7, 18), (0, 9), (19, 7)]\n\n# Create a dictionary to track x-values and their corresponding y-values\nx_to_y = {}\n\n# Initialize a flag to determine if the relation is a function\nis_function = True\n\n# Iterate through the relation to check for multiple y-values for the same x-value\nfor x, y in relation:\n    if x in x_to_y:\n        # If the x-value already exists, check if the new y-value is different\n        if x_to_y[x] != y:\n            is_function = False\n            break\n    else:\n        # If x-value does not exist, add it to the dictionary\n        x_to_y[x] = y\n\n# Determine the answer based on whether it's a function or not\nanswer = 'yes' if is_function else 'no'\nprint(answer)"
], "prediction": ["no", "yes", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Miles hiked\" and then answer a question.\n\nDay | Number of miles\nFriday | 9\nSaturday | 14\nSunday | 20\nMonday | 17\nTuesday | 16\nWednesday | 10", "question": "Read the following table regarding \"Miles hiked\" and then write Python code to answer a question.\n\nDay | Number of miles\nFriday | 9\nSaturday | 14\nSunday | 20\nMonday | 17\nTuesday | 16\nWednesday | 10\n\nSadie went on a camping trip and logged the number of miles she hiked each day. What is the range of the numbers?", "answer": "11", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of miles hiked each day\nmiles_hiked = [9, 14, 20, 17, 16, 10]\n# Calculate the range\nrange_miles = max(miles_hiked) - min(miles_hiked)\nanswer = range_miles\nprint(answer)", "miles_hiked = [9, 14, 20, 17, 16, 10]\nrange_miles = max(miles_hiked) - min(miles_hiked)\nanswer = int(range_miles)  # Convert the result to an integer\nprint(answer)", "miles_hiked = [9, 14, 20, 17, 16, 10]\nrange_miles = max(miles_hiked) - min(miles_hiked)\nanswer = range_miles  # No need to convert to int, as the result is already an integer\nprint(answer)", "miles_hiked = [9, 14, 20, 17, 16, 10]\nrange_miles = max(miles_hiked) - min(miles_hiked)\nanswer = int(range_miles)  # Convert the result to an integer\nprint(answer)"], "prediction": [11.0, 11.0, 11.0, 11.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Bricks per building\" and then answer a question.\n\nStem | Leaf \n5 | 2, 4, 5\n6 | 5\n7 | 3, 4\n8 | \n9 | 0, 0, 0", "question": "Read the following table regarding \"Bricks per building\" and then write Python code to answer a question.\n\nStem | Leaf \n5 | 2, 4, 5\n6 | 5\n7 | 3, 4\n8 | \n9 | 0, 0, 0\n\nThe architecture student counted the number of bricks in each building in her neighborhood. How many buildings have exactly 90 bricks?", "answer": "3", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# From the stem-and-leaf display, the leaf for stem '9' indicates the number of bricks.\n# The leaf values show that there are three buildings with exactly 90 bricks.\nbuildings_with_90_bricks = 3\nanswer = buildings_with_90_bricks\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(5, [2, 4, 5]), (6, [5]), (7, [3, 4]), (8, []), (9, [0, 0, 0])]\n\n# Initialize counter for buildings with exactly 90 bricks\nbuildings_with_90_bricks = 0\n\n# Iterate through the stem and leaf data structure and count relevant buildings\nfor stem, leaf_list in stem_and_leaf:\n    if stem == 9:  # Stem '9' corresponds to '90'\n        buildings_with_90_bricks += len(leaf_list)  # Count the number of leaves for stem '9'\n\nanswer = buildings_with_90_bricks\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(5, [2, 4, 5]), (6, [5]), (7, [3, 4]), (8, []), (9, [0, 0, 0])]  \n  \n# Initialize counter for buildings with exactly 90 bricks  \nbuildings_with_90_bricks = 0  \n  \n# Iterate through the stem and leaf data structure and count relevant buildings  \nfor stem, leaf_list in stem_and_leaf:  \n    if stem == 9:  # Stem '9' corresponds to '90'\n        buildings_with_90_bricks += len(leaf_list)  # Count the number of leaves for stem '9'\n  \n# Ensure the answer is an integer  \nanswer = int(buildings_with_90_bricks)  \nprint(answer)", "stem_and_leaf = [(5, [2, 4, 5]), (6, [5]), (7, [3, 4]), (8, []), (9, [0, 0, 0])]  \nbuildings_with_90_bricks = 0  \n\nfor stem, leaf_list in stem_and_leaf:  \n    if stem == 9:  # Stem '9' corresponds to '90'\n        buildings_with_90_bricks += len(leaf_list)  # Count the number of leaves for stem '9'\n\nanswer = buildings_with_90_bricks  \nprint(answer)"
], "prediction": [3.0, 3.0, 3.0, 3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Couches sold\" and then answer a question.\n\nDay | Number of couches\nFriday | 5\nSaturday | 4\nSunday | 10\nMonday | 9\nTuesday | 7", "question": "Read the following table regarding \"Couches sold\" and then write Python code to answer a question.\n\nDay | Number of couches\nFriday | 5\nSaturday | 4\nSunday | 10\nMonday | 9\nTuesday | 7\n\nA furniture store kept a record of how many couches it sold each day. What is the median of the numbers?", "answer": "7", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# List of the number of couches sold each day\ncouches_sold = [5, 4, 10, 9, 7]\n\n# Sort the list to find the median\ncouches_sold.sort()\n\n# Calculate the median\nn = len(couches_sold)\nif n % 2 == 1:\n    median = couches_sold[n // 2]\nelse:\n    median = (couches_sold[n // 2 - 1] + couches_sold[n // 2]) / 2\n\nanswer = median\nprint(answer)", "# List of couches sold each day\ncouches_sold = [5, 4, 10, 9, 7]\n\n# Sort the list to find the median\ncouches_sold.sort()\nn = len(couches_sold)\n\n# Calculate the median\nif n % 2 == 1:\n    median = couches_sold[n // 2]\nelse:\n    median = (couches_sold[n // 2 - 1] + couches_sold[n // 2]) / 2\n\n# Store the result in the variable 'answer'\nanswer = median\n\n# Output the answer\nprint(answer)", "couches_sold = [5, 4, 10, 9, 7]\ncouches_sold.sort()\nn = len(couches_sold)\nif n % 2 == 1:\n    median = couches_sold[n // 2]\nelse:\n    median = (couches_sold[n // 2 - 1] + couches_sold[n // 2]) / 2\nanswer = median\nprint(answer)", "# List of couches sold each day\ncouches_sold = [5, 4, 10, 9, 7]\n\n# Sort the list to find the median\ncouches_sold.sort()\nn = len(couches_sold)\n\n# Calculate the median\nif n % 2 == 1:\n    median = couches_sold[n // 2]\nelse:\n    median = (couches_sold[n // 2 - 1] + couches_sold[n // 2]) / 2\n\nanswer = median\nprint(answer)"
], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nlong white envelope | $0.38\nlighthouse postcard | $0.42\ntulip stamp | $0.14\nrobot stamp | $0.42\ndeer postcard | $0.61\nroll of packaging tape | $0.29", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nlong white envelope | $0.38\nlighthouse postcard | $0.42\ntulip stamp | $0.14\nrobot stamp | $0.42\ndeer postcard | $0.61\nroll of packaging tape | $0.29\n\nHow much money does Gordon need to buy a deer postcard and a roll of packaging tape?", "answer": "0.90", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_deer_postcard = 0.61 \ncost_packaging_tape = 0.29 \n# Total cost for both items\ntotal_cost = cost_deer_postcard + cost_packaging_tape\nanswer = total_cost\nprint(answer)", "cost_deer_postcard = 0.61 \ncost_packaging_tape = 0.29 \ntotal_cost = cost_deer_postcard + cost_packaging_tape\nanswer = f\"${total_cost:.2f}\"  # Format the output to two decimal places\nprint(answer)", "cost_deer_postcard = 0.61 \ncost_packaging_tape = 0.29 \ntotal_cost = cost_deer_postcard + cost_packaging_tape\nanswer = total_cost  # Store the total cost as a numerical value\nprint(answer)", "cost_deer_postcard = 0.61 \ncost_packaging_tape = 0.29 \ntotal_cost = cost_deer_postcard + cost_packaging_tape\nanswer = round(total_cost, 2)  # Round the total cost to two decimal places\nprint(answer)"], "prediction": [0.9, "$0.90", 0.9, 0.9], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Doing cartwheels\" and then answer a question.\n\nDay | Number of cartwheels\nSunday | 11\nMonday | 14\nTuesday | 10\nWednesday | 14\nThursday | 11\nFriday | 11\nSaturday | 10", "question": "Read the following table regarding \"Doing cartwheels\" and then write Python code to answer a question.\n\nDay | Number of cartwheels\nSunday | 11\nMonday | 14\nTuesday | 10\nWednesday | 14\nThursday | 11\nFriday | 11\nSaturday | 10\n\nA gymnast jotted down the number of cartwheels she did each day. What is the mode of the numbers?", "answer": "11", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of cartwheels done each day\ncartwheels = [11, 14, 10, 14, 11, 11, 10]\n# Finding the mode\nfrom statistics import mode\nmode_cartwheels = mode(cartwheels)\nanswer = mode_cartwheels\nprint(answer)", "cartwheels = [11, 14, 10, 14, 11, 11, 10]\nfrom statistics import mode\nmode_cartwheels = mode(cartwheels)\nanswer = int(mode_cartwheels)  # Convert to integer\nprint(answer)", "cartwheels = [11, 14, 10, 14, 11, 11, 10]\nfrom statistics import mode\nmode_cartwheels = mode(cartwheels)\nanswer = mode_cartwheels  # No need for conversion, mode is already an integer\nprint(answer)", "cartwheels = [11, 14, 10, 14, 11, 11, 10]\nfrom statistics import mode\n\n# Calculate the mode and convert it to an integer\nmode_cartwheels = int(mode(cartwheels))\nanswer = mode_cartwheels\nprint(answer)"], "prediction": [11.0, 11.0, 11.0, 11.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Chocolate consumption per capita (kg)\" and then answer a question.\n\nCountry | 2002 | 2005\nPoland | 3 | 4\nAustralia | 4 | 5\nAustria | 8 | 9\nSwitzerland | 11 | 10", "question": "Read the following table regarding \"Chocolate consumption per capita (kg)\" and then write Python code to answer a question.\n\nCountry | 2002 | 2005\nPoland | 3 | 4\nAustralia | 4 | 5\nAustria | 8 | 9\nSwitzerland | 11 | 10\n\nSpencer's Candies has been studying how much chocolate people have been eating in different countries. How much chocolate was consumed per capita in Austria in 2005?", "answer": "9", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Chocolate consumption per capita in Austria in 2005\nchocolate_consumption_austria_2005 = 9\nanswer = chocolate_consumption_austria_2005\nprint(answer)", "# Define a dictionary to store chocolate consumption per capita for each country and year\nchocolate_consumption = {\n    'Poland': {2002: 3, 2005: 4},\n    'Australia': {2002: 4, 2005: 5},\n    'Austria': {2002: 8, 2005: 9},\n    'Switzerland': {2002: 11, 2005: 10}\n}\n\n# Retrieve the chocolate consumption per capita in Austria for the year 2005\naustria_chocolate_consumption_2005 = chocolate_consumption['Austria'][2005]\nanswer = austria_chocolate_consumption_2005\n\nprint(answer)", "chocolate_consumption = {\n    'Poland': {2002: 3, 2005: 4},\n    'Australia': {2002: 4, 2005: 5},\n    'Austria': {2002: 8, 2005: 9},\n    'Switzerland': {2002: 11, 2005: 10}\n}\naustria_chocolate_consumption_2005 = chocolate_consumption['Austria'][2005]\nanswer = int(austria_chocolate_consumption_2005)  # Convert to integer\nprint(answer)", "chocolate_consumption = {\n    'Poland': {2002: 3, 2005: 4},\n    'Australia': {2002: 4, 2005: 5},\n    'Austria': {2002: 8, 2005: 9},\n    'Switzerland': {2002: 11, 2005: 10}\n}\n\n# Get the chocolate consumption per capita in Austria for 2005\naustria_chocolate_consumption_2005 = chocolate_consumption['Austria'][2005]\nanswer = austria_chocolate_consumption_2005  # No conversion needed\nprint(answer)"
], "prediction": [9.0, 9.0, 9.0, 9.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nice cream truck | $7,785\nshaved ice cart | $7,131\nhot dog stand | $6,141\nfunnel cake stand | $7,631", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nice cream truck | $7,785\nshaved ice cart | $7,131\nhot dog stand | $6,141\nfunnel cake stand | $7,631\n\nHow much more does an ice cream truck cost than a funnel cake stand?", "answer": "154", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_ice_cream_truck = 7785 \ncost_funnel_cake_stand = 7631 \n# Calculate the difference in cost\ndifference_in_cost = cost_ice_cream_truck - cost_funnel_cake_stand\nanswer = difference_in_cost\nprint(answer)", "cost_ice_cream_truck = 7785 \ncost_funnel_cake_stand = 7631 \ndifference_in_cost = cost_ice_cream_truck - cost_funnel_cake_stand\nanswer = difference_in_cost\nprint(answer)", "cost_ice_cream_truck = 7785 \ncost_funnel_cake_stand = 7631 \ndifference_in_cost = cost_ice_cream_truck - cost_funnel_cake_stand\nanswer = difference_in_cost\nprint(answer)", "# Define the costs of the ice cream truck and funnel cake stand\ncost_ice_cream_truck = 7785 \ncost_funnel_cake_stand = 7631 \n\n# Calculate the difference in cost\ndifference_in_cost = cost_ice_cream_truck - cost_funnel_cake_stand\n\n# Store the result in the variable 'answer'\nanswer = difference_in_cost\n\n# Output the answer\nprint(answer)"], "prediction": [154.0, 154.0, 154.0, 154.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Vegetables No vegetables Total\" and then answer a question.\n\nMen | 0.15 | 0.25 | 0.40\nWomen | 0.40 | 0.20 | 0.60\nTotal | 0.55 | 0.45 | 1.00", "question": "Read the following table regarding \"Vegetables No vegetables Total\" and then write Python code to answer a question.\n\nMen | 0.15 | 0.25 | 0.40\nWomen | 0.40 | 0.20 | 0.60\nTotal | 0.55 | 0.45 | 1.00\n\nThe manager of Nonno's Pizza asked 40 customers if they prefer to have vegetables or no vegetables on their pizzas. This table shows the relative frequencies from the survey. How many more women than men prefer vegetables on their pizza?", "answer": "10", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total number of customers surveyed\ntotal_customers = 40\n\n# Calculate number of men and women who prefer vegetables\nmen_prefer_vegetables = total_customers * 0.15\nwomen_prefer_vegetables = total_customers * 0.40\n\n# Calculate how many more women prefer vegetables than men\ndifference = women_prefer_vegetables - men_prefer_vegetables\nanswer = difference\nprint(answer)", "# Total number of customers surveyed\ntotal_customers = 40\n\n# Relative frequencies from the table\nmen_prefer_vegetables_percentage = 0.15\nwomen_prefer_vegetables_percentage = 0.40\n\n# Calculate the number of men and women who prefer vegetables\nmen_prefer_vegetables = total_customers * men_prefer_vegetables_percentage\nwomen_prefer_vegetables = total_customers * women_prefer_vegetables_percentage\n\n# Calculate the difference in preference for vegetables\ndifference = women_prefer_vegetables - men_prefer_vegetables\nanswer = difference\n\nprint(answer)", "# Define the total number of customers surveyed\ntotal_customers = 40\n\n# Define the proportions of men and women who prefer vegetables\nmen_prefer_vegetables_percentage = 0.15\nwomen_prefer_vegetables_percentage = 0.40\n\n# Calculate the number of men and women who prefer vegetables\n# Assuming the total percentages for men and women are derived from the total customers\n# For simplicity, we'll assume equal numbers of men and women in the survey\nnumber_of_men = total_customers / 2\nnumber_of_women = total_customers / 2\n\nmen_prefer_vegetables = number_of_men * men_prefer_vegetables_percentage\nwomen_prefer_vegetables = number_of_women * women_prefer_vegetables_percentage\n\n# Calculate the difference in preference for vegetables\ndifference = women_prefer_vegetables - men_prefer_vegetables\nanswer = difference\n\nprint(answer)", "# Total number of customers surveyed\ntotal_customers = 40\n\n# Relative frequencies of preferences\nmen_prefer_vegetables_percentage = 0.15\nwomen_prefer_vegetables_percentage = 0.40\n\n# Calculate the number of men and women based on the percentages\nmen_prefer_vegetables = total_customers * men_prefer_vegetables_percentage\nwomen_prefer_vegetables = total_customers * women_prefer_vegetables_percentage\n\n# Calculate the difference in preferences\ndifference = women_prefer_vegetables - men_prefer_vegetables\nanswer = difference\nprint(answer)"
], "prediction": [10.0, 10.0, 5.0, 10.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Furniture\" and then answer a question.\n\nType of Wood | Beds | Bookcases\nMaple | 6 | 7\nOak | 10 | 20\nPine | 2 | 18\nMahogany | 19 | 9", "question": "Read the following table regarding \"Furniture\" and then write Python code to answer a question.\n\nType of Wood | Beds | Bookcases\nMaple | 6 | 7\nOak | 10 | 20\nPine | 2 | 18\nMahogany | 19 | 9\n\nKim Furniture Exports is shipping pieces of furniture made out of different types of wood. Of which type of wood are the fewest bookcases made? Choose from the the options: ['maple', 'mahogany', 'pine', 'oak']", "answer": "maple", "ques_type": "multi_choice", "choices": ["maple", "mahogany", "pine", "oak"], "code": [
  "# Python code, return answer \n# Define the number of bookcases made from each type of wood\nbookcases = {\n    'maple': 7,\n    'oak': 20,\n    'pine': 18,\n    'mahogany': 9\n}\n\n# Find the type of wood with the fewest bookcases\nfewest_bookcases_wood = min(bookcases, key=bookcases.get)\nanswer = fewest_bookcases_wood\nprint(answer)", "# Store the number of bookcases made from different types of wood in a dictionary\nbookcases = {\n    'maple': 7,\n    'oak': 20,\n    'pine': 18,\n    'mahogany': 9\n}\n\n# Find the type of wood with the fewest bookcases\nfewest_bookcases_wood = min(bookcases, key=bookcases.get)\nanswer = fewest_bookcases_wood\n\nprint(answer)", "# Define the number of bookcases made from each type of wood\nbookcases = {\n    'maple': 7,\n    'oak': 20,\n    'pine': 18,\n    'mahogany': 9\n}\n\n# Find the type of wood with the fewest bookcases\nfewest_bookcases_wood = min(bookcases, key=bookcases.get)\n\n# Store the result in the variable 'answer'\nanswer = fewest_bookcases_wood\n\n# Print the answer\nprint(answer)", "bookcases = {\n    'maple': 7,\n    'oak': 20,\n    'pine': 18,\n    'mahogany': 9\n}\nfewest_bookcases_wood = min(bookcases, key=bookcases.get)\nanswer = fewest_bookcases_wood.lower()  # Ensure the answer matches the expected format\nprint(answer)"
], "prediction": ["maple", "maple", "maple", "maple"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$575 | 17,700 | 15,300\n$695 | 14,300 | 16,800\n$815 | 10,900 | 18,300\n$935 | 7,500 | 19,800\n$1,055 | 4,100 | 21,300", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$575 | 17,700 | 15,300\n$695 | 14,300 | 16,800\n$815 | 10,900 | 18,300\n$935 | 7,500 | 19,800\n$1,055 | 4,100 | 21,300\n\nLook at the table. Then answer the question. At a price of $815, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "surplus", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": ["# Python code, return answer \nquantity_demanded_at_815 = 10900 \nquantity_supplied_at_815 = 18300 \n\n# Determine if there's a shortage or surplus\nif quantity_demanded_at_815 < quantity_supplied_at_815:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the quantities demanded and supplied at the price of $815\nquantity_demanded_at_815 = 10900 \nquantity_supplied_at_815 = 18300 \n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_815 < quantity_supplied_at_815:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the quantities demanded and supplied at the price of $815\nquantity_demanded_at_815 = 10900 \nquantity_supplied_at_815 = 18300 \n\n# Determine whether there is a shortage or surplus\nif quantity_demanded_at_815 < quantity_supplied_at_815:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the quantities demanded and supplied at a price of $815\nquantity_demanded_at_815 = 10900 \nquantity_supplied_at_815 = 18300 \n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_815 < quantity_supplied_at_815:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\n# Output the result\nprint(answer)"], "prediction": ["surplus", "surplus", "surplus", "surplus"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of fields | Number of goats\n1 | 10\n2 | 20\n3 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of fields | Number of goats\n1 | 10\n2 | 20\n3 | ?\n\nEach field has 10 goats. How many goats are in 3 fields?", "answer": "30", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ngoats_per_field = 10\nnumber_of_fields = 3\n# Calculate the total number of goats\ntotal_goats = goats_per_field * number_of_fields\nanswer = total_goats\nprint(answer)", "goats_per_field = 10\nnumber_of_fields = 3\ntotal_goats = goats_per_field * number_of_fields\nanswer = total_goats  # This will be an integer\nprint(answer)", "goats_per_field = 10\nnumber_of_fields = 3\ntotal_goats = goats_per_field * number_of_fields\nanswer = int(total_goats)  # Convert to integer if necessary\nprint(answer)", "goats_per_field = 10\nnumber_of_fields = 3\ntotal_goats = goats_per_field * number_of_fields\nanswer = total_goats  # No need to convert to int, as the calculation results in an integer\nprint(answer)"], "prediction": [30.0, 30.0, 30.0, 30.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Movies checked out\" and then answer a question.\n\nDay | Number of movies\nSunday | 56\nMonday | 58\nTuesday | 58\nWednesday | 60\nThursday | 60\nFriday | 56\nSaturday | 60", "question": "Read the following table regarding \"Movies checked out\" and then write Python code to answer a question.\n\nDay | Number of movies\nSunday | 56\nMonday | 58\nTuesday | 58\nWednesday | 60\nThursday | 60\nFriday | 56\nSaturday | 60\n\nA video store clerk looked up the number of movies checked out each day. What is the mode of the numbers?", "answer": "60", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nfrom statistics import mode\n\n# List of the number of movies checked out each day\nmovies_checked_out = [56, 58, 58, 60, 60, 56, 60]\n\n# Calculate the mode\nanswer = mode(movies_checked_out)\nprint(answer)", "from statistics import mode\n\nmovies_checked_out = [56, 58, 58, 60, 60, 56, 60]\nanswer = int(mode(movies_checked_out))  # Convert to integer\nprint(answer)", "from statistics import mode\n\n# List of the number of movies checked out each day\nmovies_checked_out = [56, 58, 58, 60, 60, 56, 60]\n\n# Calculate the mode and convert it to an integer\nanswer = int(mode(movies_checked_out))\n\nprint(answer)", "from statistics import mode\n\nmovies_checked_out = [56, 58, 58, 60, 60, 56, 60]\nanswer = mode(movies_checked_out)  # mode function returns the mode value directly\nprint(answer)  # This will output the mode as an integer"], "prediction": [60.0, 60.0, 60.0, 60.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Cups of lemonade sold\" and then answer a question.\n\nDay | Number of cups\nFriday | 10\nSaturday | 6\nSunday | 8\nMonday | 8\nTuesday | 8\nWednesday | 9\nThursday | 8", "question": "Read the following table regarding \"Cups of lemonade sold\" and then write Python code to answer a question.\n\nDay | Number of cups\nFriday | 10\nSaturday | 6\nSunday | 8\nMonday | 8\nTuesday | 8\nWednesday | 9\nThursday | 8\n\nDevin wrote down how many cups of lemonade he sold in the past 7 days. What is the median of the numbers?", "answer": "8", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# List of cups sold each day\ncups_sold = [10, 6, 8, 8, 8, 9, 8]\n\n# Sort the list to find the median\nsorted_cups = sorted(cups_sold)\n\n# Calculate the median\nn = len(sorted_cups)\nif n % 2 == 1:  # Odd number of elements\n    median = sorted_cups[n // 2]\nelse:  # Even number of elements\n    median = (sorted_cups[n // 2 - 1] + sorted_cups[n // 2]) / 2\n\nanswer = median\nprint(answer)", "# Define the number of cups sold each day\ncups_sold = [10, 6, 8, 8, 8, 9, 8]\n\n# Sort the list of cups sold\nsorted_cups = sorted(cups_sold)\n\n# Calculate the median\nn = len(sorted_cups)\nif n % 2 == 1:  # Odd number of elements\n    median = sorted_cups[n // 2]\nelse:  # Even number of elements\n    median = (sorted_cups[n // 2 - 1] + sorted_cups[n // 2]) / 2\n\n# Store the result in 'answer'\nanswer = median\n\n# Print the answer\nprint(answer)", "cups_sold = [10, 6, 8, 8, 8, 9, 8]\nsorted_cups = sorted(cups_sold)\nn = len(sorted_cups)\n\nif n % 2 == 1:  # Odd number of elements\n    median = sorted_cups[n // 2]\nelse:  # Even number of elements\n    median = (sorted_cups[n // 2 - 1] + sorted_cups[n // 2]) / 2\n\n# Convert median to integer if it's a whole number\nanswer = int(median) if median.is_integer() else median\nprint(answer)", "cups_sold = [10, 6, 8, 8, 8, 9, 8]\nsorted_cups = sorted(cups_sold)\nn = len(sorted_cups)\n\nif n % 2 == 1:  # Odd number of elements\n    median = sorted_cups[n // 2]\nelse:  # Even number of elements\n    median = (sorted_cups[n // 2 - 1] + sorted_cups[n // 2]) / 2\n\nanswer = int(median) if median.is_integer() else median\nprint(answer)"
], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Years of teaching\" and then answer a question.\n\nTeacher | Number of years\nMiss Lim | 9\nMr. Perez | 1\nMs. Chan | 1\nMiss Watson | 9\nMr. Park | 1", "question": "Read the following table regarding \"Years of teaching\" and then write Python code to answer a question.\n\nTeacher | Number of years\nMiss Lim | 9\nMr. Perez | 1\nMs. Chan | 1\nMiss Watson | 9\nMr. Park | 1\n\nSome teachers compared how many years they have been teaching. What is the mode of the numbers?", "answer": "1", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nyears_of_teaching = [9, 1, 1, 9, 1]\n# Finding the mode\nfrom statistics import mode\nmode_years = mode(years_of_teaching)\nanswer = mode_years\nprint(answer)", "from collections import Counter\n\nyears_of_teaching = [9, 1, 1, 9, 1]\n\n# Count occurrences of each number\ncounts = Counter(years_of_teaching)\n\n# Find the maximum frequency\nmax_count = max(counts.values())\n\n# Find all numbers that have the maximum frequency (modes)\nmodes = [year for year, count in counts.items() if count == max_count]\n\nanswer = modes  # This will give us all modes\nprint(answer)", "from collections import Counter\n\nyears_of_teaching = [9, 1, 1, 9, 1]\ncounts = Counter(years_of_teaching)\nmax_count = max(counts.values())\nmodes = [year for year, count in counts.items() if count == max_count]\n\n# Select the smallest mode if there are multiple modes\nanswer = min(modes)\nprint(answer)", "from collections import Counter\n\n# List of years of teaching\nyears_of_teaching = [9, 1, 1, 9, 1]\n\n# Count occurrences of each year\ncounts = Counter(years_of_teaching)\n\n# Find the maximum count to identify the mode\nmax_count = max(counts.values())\n\n# Get the modes (most frequent years)\nmodes = [year for year, count in counts.items() if count == max_count]\n\n# Since we are interested in the mode, we can directly take one of the modes\nanswer = modes[0]  # If there are multiple modes, we can just take the first one\n\nprint(answer)"], "prediction": [1.0, 1.0, 1.0, 1.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Planet Volume (billions of km3) Primary composition\" and then answer a question.\n\nMercury | 60 rock\nVenus | 930 rock\nEarth | 1,090 rock\nMars | 160 rock\nJupiter | 1,431,280 gas\nSaturn | 827,130 gas\nUranus | 68,330 ice\nNeptune | 62,530 ice", "question": "Read the following table regarding \"Planet Volume (billions of km3) Primary composition\" and then write Python code to answer a question.\n\nMercury | 60 rock\nVenus | 930 rock\nEarth | 1,090 rock\nMars | 160 rock\nJupiter | 1,431,280 gas\nSaturn | 827,130 gas\nUranus | 68,330 ice\nNeptune | 62,530 ice\n\nUse the data to answer the question below. Is the following statement about our solar system true or false? 50% of the planets are made mainly of gas. Choose from the the options: ['true', 'false']", "answer": "false", "ques_type": "multi_choice", "choices": ["true", "false"], "code": [
  "# Python code, return answer \n# Count the number of planets and those composed mainly of gas\ntotal_planets = 8\ngas_planets = 4  # Jupiter, Saturn, Uranus, Neptune\n\n# Calculate the percentage of gas planets\npercentage_gas = (gas_planets / total_planets) * 100\n\n# Determine if the statement is true or false\nif percentage_gas == 50:\n    answer = 'true'\nelse:\n    answer = 'false'\n\nprint(answer)", "# Define the total number of planets and the number of gas planets\ntotal_planets = 8\ngas_planets = 2  # Jupiter and Saturn are the only gas planets\n\n# Calculate the percentage of gas planets\npercentage_gas = (gas_planets / total_planets) * 100\n\n# Determine if the statement is true or false\nif percentage_gas == 50:\n    answer = 'true'\nelse:\n    answer = 'false'\n\nprint(answer)", "total_planets = 8\ngas_planets = 2  # Jupiter and Saturn are the only gas planets\npercentage_gas = (gas_planets / total_planets) * 100\n\nif percentage_gas >= 50:\n    answer = 'true'\nelse:\n    answer = 'false'\n\nprint(answer)", "# Define the total number of planets and the number of gas planets\ntotal_planets = 8\ngas_planets = 2  # Jupiter and Saturn are the only gas planets\n\n# Calculate the percentage of gas planets\npercentage_gas = (gas_planets / total_planets) * 100\n\n# Determine if the statement is true or false\nif percentage_gas >= 50:\n    answer = 'true'\nelse:\n    answer = 'false'\n\nprint(answer)"
], "prediction": ["true", "false", "false", "false"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nyellow bath towel | $18\nnavy blue bath mat | $11\nfleece blanket | $10\nbeach blanket | $13", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nyellow bath towel | $18\nnavy blue bath mat | $11\nfleece blanket | $10\nbeach blanket | $13\n\nHow much money does Aaron need to buy 8 yellow bath towels and 3 beach blankets?", "answer": "183", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_yellow_towel = 18 \nprice_beach_blanket = 13 \n# Calculate total cost\ntotal_cost = (8 * price_yellow_towel) + (3 * price_beach_blanket)\nanswer = total_cost\nprint(answer)", "price_yellow_towel = 18 \nprice_beach_blanket = 13 \ntotal_cost = (8 * price_yellow_towel) + (3 * price_beach_blanket)\nanswer = \"${:.2f}\".format(total_cost)  # Format the total cost as currency\nprint(answer)", "# Prices of items\nprice_yellow_towel = 18 \nprice_beach_blanket = 13 \n\n# Calculate total cost for 8 yellow bath towels and 3 beach blankets\ntotal_cost = (8 * price_yellow_towel) + (3 * price_beach_blanket)\n\n# Store the result as a variable named 'answer'\nanswer = total_cost  \n\n# Print the answer\nprint(answer)", "price_yellow_towel = 18 \nprice_beach_blanket = 13 \ntotal_cost = (8 * price_yellow_towel) + (3 * price_beach_blanket)\nanswer = int(total_cost)  # Convert to integer\nprint(answer)"], "prediction": [183.0, "$183.00", 183.0, 183.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Band instruments\" and then answer a question.\n\nInstrument | Girls | Boys\nSaxophone | 18 | 17\nClarinet | 15 | 6\nDrums | 6 | 20\nFlute | 19 | 18\nTrumpet | 19 | 9", "question": "Read the following table regarding \"Band instruments\" and then write Python code to answer a question.\n\nInstrument | Girls | Boys\nSaxophone | 18 | 17\nClarinet | 15 | 6\nDrums | 6 | 20\nFlute | 19 | 18\nTrumpet | 19 | 9\n\nMr. Khan, the band director, counted the number of instruments played by each member of the band. Which instrument do the fewest boys play? Choose from the the options: ['trumpet', 'flute', 'clarinet', 'saxophone']", "answer": "clarinet", "ques_type": "multi_choice", "choices": ["trumpet", "flute", "clarinet", "saxophone"], "code": [
  "# Python code, return answer \n# Number of boys playing each instrument\ninstruments = {\n    'saxophone': 17,\n    'clarinet': 6,\n    'drums': 20,\n    'flute': 18,\n    'trumpet': 9\n}\n\n# Find the instrument with the fewest boys playing\nfewest_boys_instrument = min(instruments, key=instruments.get)\nanswer = fewest_boys_instrument\nprint(answer)", "# Define the instruments and the number of boys playing each instrument\ninstruments = {\n    'saxophone': 17,\n    'clarinet': 6,\n    'drums': 20,\n    'flute': 18,\n    'trumpet': 9\n}\n\n# Define the options\noptions = ['trumpet', 'flute', 'clarinet', 'saxophone']\n\n# Find the instrument played by the fewest boys\nfewest_boys_instrument = min(instruments, key=instruments.get)\n\n# Check if the found instrument is in the provided options\nif fewest_boys_instrument in options:\n    answer = fewest_boys_instrument\nelse:\n    answer = None  # or handle the case where it is not in options\n\nprint(answer)", "# Define the number of boys playing each instrument\ninstruments = {\n    'saxophone': 17,\n    'clarinet': 6,\n    'drums': 20,\n    'flute': 18,\n    'trumpet': 9\n}\n\n# Define the options to choose from\noptions = ['trumpet', 'flute', 'clarinet', 'saxophone']\n\n# Filter the instruments to only include those in the options\nfiltered_instruments = {key: instruments[key] for key in options}\n\n# Find the instrument with the fewest boys playing it among the filtered options\nfewest_boys_instrument = min(filtered_instruments, key=filtered_instruments.get)\n\n# Store the result in the answer variable\nanswer = fewest_boys_instrument\n\nprint(answer)", "# Define the number of boys playing each instrument\ninstruments = {\n    'saxophone': 17,\n    'clarinet': 6,\n    'drums': 20,\n    'flute': 18,\n    'trumpet': 9\n}\n\n# Define the options to choose from\noptions = ['trumpet', 'flute', 'clarinet', 'saxophone']\n\n# Filter the instruments to only include the options\nfiltered_instruments = {key: instruments[key] for key in options}\n\n# Find the instrument with the fewest boys playing it\nfewest_boys_instrument = min(filtered_instruments, key=filtered_instruments.get)\n\n# Store the result in the answer variable\nanswer = fewest_boys_instrument\n\n# Output the answer\nprint(answer)"
], "prediction": ["clarinet", "clarinet", "clarinet", "clarinet"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Baseballs hit\" and then answer a question.\n\nDay | Number of baseballs\nTuesday | 5\nWednesday | 3\nThursday | 5\nFriday | 4\nSaturday | 4", "question": "Read the following table regarding \"Baseballs hit\" and then write Python code to answer a question.\n\nDay | Number of baseballs\nTuesday | 5\nWednesday | 3\nThursday | 5\nFriday | 4\nSaturday | 4\n\nA baseball player paid attention to how many baseballs he hit in practice each day. What is the median of the numbers?", "answer": "4", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# List of baseballs hit each day\nbaseballs_hit = [5, 3, 5, 4, 4]\n\n# Sort the list to find the median\nbaseballs_hit.sort()\n\n# Calculate the median\nn = len(baseballs_hit)\nif n % 2 == 1:  # If the number of observations is odd\n    median = baseballs_hit[n // 2]\nelse:           # If the number of observations is even\n    median = (baseballs_hit[n // 2 - 1] + baseballs_hit[n // 2]) / 2\n\nanswer = median\nprint(answer)", "baseballs_hit = [5, 3, 5, 4, 4]\nbaseballs_hit.sort()\nn = len(baseballs_hit)\nif n % 2 == 1:  # If the number of observations is odd\n    median = baseballs_hit[n // 2]\nelse:           # If the number of observations is even\n    median = (baseballs_hit[n // 2 - 1] + baseballs_hit[n // 2]) / 2\nanswer = median\nprint(answer)", "baseballs_hit = [5, 3, 5, 4, 4]  # List of baseballs hit per day\nbaseballs_hit.sort()  # Sort the list to find the median\nn = len(baseballs_hit)  # Get the number of observations\n\n# Calculate the median\nif n % 2 == 1:  # If the number of observations is odd\n    median = baseballs_hit[n // 2]\nelse:  # If the number of observations is even\n    median = (baseballs_hit[n // 2 - 1] + baseballs_hit[n // 2]) / 2\n\nanswer = median  # Store the result in the answer variable\nprint(answer)  # Output the answer", "baseballs_hit = [5, 3, 5, 4, 4]  # List of baseballs hit per day\nbaseballs_hit.sort()  # Sort the list to find the median\nn = len(baseballs_hit)  # Get the number of observations\nif n % 2 == 1:  # If the number of observations is odd\n    answer = baseballs_hit[n // 2]  # Store the median in the answer variable\nelse:  # If the number of observations is even\n    answer = (baseballs_hit[n // 2 - 1] + baseballs_hit[n // 2]) / 2  # Store the median in the answer variable\n\nprint(answer)  # Output the answer"
], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Baseballs hit\" and then answer a question.\n\nDay | Number of baseballs\nTuesday | 4\nWednesday | 7\nThursday | 9\nFriday | 8\nSaturday | 5\nSunday | 8\nMonday | 4", "question": "Read the following table regarding \"Baseballs hit\" and then write Python code to answer a question.\n\nDay | Number of baseballs\nTuesday | 4\nWednesday | 7\nThursday | 9\nFriday | 8\nSaturday | 5\nSunday | 8\nMonday | 4\n\nA baseball player paid attention to how many baseballs he hit in practice each day. What is the median of the numbers?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of baseballs hit each day\nbaseballs_hit = [4, 7, 9, 8, 5, 8, 4]\n\n# Sort the list to find the median\nbaseballs_hit.sort()\n\n# Calculate the median\nn = len(baseballs_hit)\nif n % 2 == 0:\n    median = (baseballs_hit[n//2 - 1] + baseballs_hit[n//2]) / 2\nelse:\n    median = baseballs_hit[n//2]\n\nanswer = median\nprint(answer)", "baseballs_hit = [4, 7, 9, 8, 5, 8, 4]\nbaseballs_hit.sort()\nn = len(baseballs_hit)\nif n % 2 == 0:\n    answer = (baseballs_hit[n//2 - 1] + baseballs_hit[n//2]) / 2\nelse:\n    answer = baseballs_hit[n//2]\nprint(answer)", "baseballs_hit = [4, 7, 9, 8, 5, 8, 4]  \nbaseballs_hit.sort()  \nn = len(baseballs_hit)  \nif n % 2 == 0:  \n    answer = (baseballs_hit[n//2 - 1] + baseballs_hit[n//2]) / 2  \nelse:  \n    answer = baseballs_hit[n//2]  \nprint(answer)", "# List of baseballs hit each day\nbaseballs_hit = [4, 7, 9, 8, 5, 8, 4]  \n# Sort the list to find the median\nbaseballs_hit.sort()  \n# Calculate the number of entries\nn = len(baseballs_hit)  \n# Calculate the median\nif n % 2 == 0:  \n    answer = (baseballs_hit[n//2 - 1] + baseballs_hit[n//2]) / 2  \nelse:  \n    answer = baseballs_hit[n//2]  \n\nprint(answer)"], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbook about art | $4.00\nbook about snakes | $7.00\nbook about soccer | $9.00\nbook about cars | $1.00\nbook about South America | $5.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbook about art | $4.00\nbook about snakes | $7.00\nbook about soccer | $9.00\nbook about cars | $1.00\nbook about South America | $5.00\n\nHow much money does Sally need to buy a book about soccer and a book about South America?", "answer": "14", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_book_soccer = 9.00 \nprice_book_south_america = 5.00 \n# Total cost for both books\ntotal_cost = price_book_soccer + price_book_south_america\nanswer = total_cost\nprint(answer)", "# Define the prices of the books\nprice_book_soccer = 9.00\nprice_book_south_america = 5.00\n\n# Calculate the total cost for the two books\ntotal_cost = price_book_soccer + price_book_south_america\n\n# Store the result in the answer variable\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "price_book_soccer = 9.00\nprice_book_south_america = 5.00\ntotal_cost = price_book_soccer + price_book_south_america\nanswer = \"${:.2f}\".format(total_cost)  # Format the output as currency\nprint(answer)", "price_book_soccer = 9.00\nprice_book_south_america = 5.00\ntotal_cost = price_book_soccer + price_book_south_america\nanswer = total_cost  # Store the numerical value of the total cost\nprint(answer)"], "prediction": [14.0, 14.0, "$14.00", 14.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nrug | $276\nchandelier | $143\nsilver coat rack | $791\noil painting | $681", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nrug | $276\nchandelier | $143\nsilver coat rack | $791\noil painting | $681\n\nHow much money does Kelly need to buy 5 chandeliers and 3 oil paintings?", "answer": "2,758", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_chandelier = 143 \nprice_oil_painting = 681 \n# Calculate total cost for 5 chandeliers and 3 oil paintings\ntotal_cost = (5 * price_chandelier) + (3 * price_oil_painting)\nanswer = total_cost\nprint(answer)", "price_chandelier = 143 \nprice_oil_painting = 681 \ntotal_cost = (5 * price_chandelier) + (3 * price_oil_painting)\nanswer = total_cost\nprint(answer)", "# Define the prices of the items\nprice_chandelier = 143 \nprice_oil_painting = 681 \n\n# Calculate the total cost for 5 chandeliers and 3 oil paintings\ntotal_cost = (5 * price_chandelier) + (3 * price_oil_painting)\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "price_chandelier = 143 \nprice_oil_painting = 681 \ntotal_cost = (5 * price_chandelier) + (3 * price_oil_painting)\nanswer = f\"${total_cost:,.2f}\"  # Format the total cost as a currency string\nprint(answer)"], "prediction": [2758.0, 2758.0, 2758.0, "$2,758.00"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n7 | 8\n8 | 7\n9 | 3", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n7 | 8\n8 | 7\n9 | 3\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "nonlinear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear or nonlinear, we can check the differences in y-values for equal increments of x.\n# Calculate the differences\nx_values = [7, 8, 9]\ny_values = [8, 7, 3]\n\n# Calculate the differences\ny_differences = [y_values[i+1] - y_values[i] for i in range(len(y_values) - 1)]\n# Check if the differences are constant\nis_linear = all(diff == y_differences[0] for diff in y_differences)\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values\nx_values = [7, 8, 9]\ny_values = [8, 7, 3]\n\n# Calculate the differences between consecutive y-values\ny_differences = [y_values[i + 1] - y_values[i] for i in range(len(y_values) - 1)]\n\n# Check if all differences are the same\nis_linear = all(diff == y_differences[0] for diff in y_differences)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values from the table\nx_values = [7, 8, 9]\ny_values = [8, 7, 3]\n\n# Calculate the differences in y for consecutive x values\ny_differences = [y_values[i + 1] - y_values[i] for i in range(len(y_values) - 1)]\nx_differences = [x_values[i + 1] - x_values[i] for i in range(len(x_values) - 1)]\n\n# Check if the ratio of differences is consistent\nis_linear = all(y_diff / x_diff == y_differences[0] / x_differences[0] for y_diff, x_diff in zip(y_differences, x_differences) if x_diff != 0)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values\nx_values = [7, 8, 9]\ny_values = [8, 7, 3]\n\n# Calculate the slopes between each pair of points\nslopes = []\nfor i in range(len(x_values) - 1):\n    slope = (y_values[i + 1] - y_values[i]) / (x_values[i + 1] - x_values[i])\n    slopes.append(slope)\n\n# Check if all slopes are equal\nis_linear = all(slope == slopes[0] for slope in slopes)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'y_differences' is not defined\")", "NameError(\"name 'y_differences' is not defined\")", "NameError(\"name 'y_differences' is not defined\")", "NameError(\"name 'slopes' is not defined\")"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of tool boxes | Number of nails\n1 | 10\n2 | 20\n3 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of tool boxes | Number of nails\n1 | 10\n2 | 20\n3 | ?\n\nEach tool box has 10 nails. How many nails are in 3 tool boxes?", "answer": "30", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Each tool box contains 10 nails\nnails_per_tool_box = 10 \nnumber_of_tool_boxes = 3 \n# Calculate total nails in 3 tool boxes\ntotal_nails = nails_per_tool_box * number_of_tool_boxes\nanswer = total_nails\nprint(answer)", "nails_per_tool_box = 10 \nnumber_of_tool_boxes = 3 \ntotal_nails = nails_per_tool_box * number_of_tool_boxes\nanswer = total_nails  # This will automatically be an integer\nprint(answer)", "nails_per_tool_box = 10 \nnumber_of_tool_boxes = 3 \ntotal_nails = nails_per_tool_box * number_of_tool_boxes\nanswer = total_nails  # This will automatically be an integer\nprint(answer)", "nails_per_tool_box = 10 \nnumber_of_tool_boxes = 3 \ntotal_nails = nails_per_tool_box * number_of_tool_boxes\nanswer = total_nails  # This will be an integer\nprint(answer)"], "prediction": [30.0, 30.0, 30.0, 30.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nKalamata olives | $7/pound\nSpanish olives | $4/pound\nGreek olives | $3/pound\npimento olives | $6/pound\ngreen olives | $5/pound", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nKalamata olives | $7/pound\nSpanish olives | $4/pound\nGreek olives | $3/pound\npimento olives | $6/pound\ngreen olives | $5/pound\n\nBrenda went to the store and bought 1 pound of Spanish olives. How much did she spend?", "answer": "4", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_spanish_olives = 4  # price of Spanish olives per pound\npounds_bought = 1  # pounds bought by Brenda\nanswer = price_per_pound_spanish_olives * pounds_bought  # total cost\nprint(answer)", "# Define the price per pound of Spanish olives\nprice_per_pound_spanish_olives = 4  # price of Spanish olives per pound\n\n# Define the number of pounds bought by Brenda\npounds_bought = 1  # pounds bought by Brenda\n\n# Calculate the total cost for the olives\nanswer = price_per_pound_spanish_olives * pounds_bought  # total cost\n\n# Output the answer\nprint(answer)", "# Define the price per pound for Spanish olives\nprice_per_pound_spanish_olives = 4  # price of Spanish olives per pound\n\n# Define the number of pounds bought by Brenda\npounds_bought = 1  # pounds bought by Brenda\n\n# Calculate the total cost\nanswer = price_per_pound_spanish_olives * pounds_bought  # total cost\n\n# Output the answer\nprint(answer)", "# Define the price per pound for Spanish olives\nprice_per_pound_spanish_olives = 4  # price of Spanish olives per pound\n\n# Define the amount of pounds bought by Brenda\npounds_bought = 1  # pounds bought by Brenda\n\n# Calculate the total cost for the Spanish olives\nanswer = price_per_pound_spanish_olives * pounds_bought  # total cost for Spanish olives\n\n# Print the answer\nprint(answer)"], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Stock prices\" and then answer a question.\n\nCompany | Wednesday | Thursday\nWatson and Partners | $14 | $8\nComputer Data Company | $14 | $11\nWhite and Company | $13 | $15", "question": "Read the following table regarding \"Stock prices\" and then write Python code to answer a question.\n\nCompany | Wednesday | Thursday\nWatson and Partners | $14 | $8\nComputer Data Company | $14 | $11\nWhite and Company | $13 | $15\n\nA stock broker followed the stock prices of a certain set of companies. On Thursday, how much more did Computer Data Company's stock cost than Watson and Partners's stock?", "answer": "3", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Stock prices on Thursday\ncomputer_data_price = 11\nwatson_partners_price = 8\n# Calculate the difference\nprice_difference = computer_data_price - watson_partners_price\nanswer = price_difference\nprint(answer)", "# Define the stock prices for Thursday\ncomputer_data_price = 11  # Price of Computer Data Company on Thursday\nwatson_partners_price = 8  # Price of Watson and Partners on Thursday\n\n# Calculate the price difference\nprice_difference = computer_data_price - watson_partners_price\nanswer = price_difference\n\nprint(answer)", "# Correct stock prices for Thursday\ncomputer_data_price = 11  # Price of Computer Data Company on Thursday\nwatson_partners_price = 14  # Price of Watson and Partners on Thursday\n\n# Calculate the price difference\nprice_difference = computer_data_price - watson_partners_price\nanswer = price_difference\nprint(answer)", "computer_data_price = 11  # Price of Computer Data Company on Thursday\nwatson_partners_price = 8  # Price of Watson and Partners on Thursday\nprice_difference = computer_data_price - watson_partners_price\nanswer = price_difference\nprint(answer)"], "prediction": [3.0, 3.0, -3.0, 3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Time Leroy spent on homework\" and then answer a question.\n\nDay | Minutes\nTuesday | 45\nWednesday | 43\nThursday | 47\nFriday | 45\nSaturday | 38", "question": "Read the following table regarding \"Time Leroy spent on homework\" and then write Python code to answer a question.\n\nDay | Minutes\nTuesday | 45\nWednesday | 43\nThursday | 47\nFriday | 45\nSaturday | 38\n\nLeroy kept track of how long it took to finish his homework each day. According to the table, what was the rate of change between Thursday and Friday?", "answer": "-2", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Minutes spent on homework\nthursday_minutes = 47\nfriday_minutes = 45\n# Calculate the rate of change between Thursday and Friday\nrate_of_change = friday_minutes - thursday_minutes\nanswer = rate_of_change\nprint(answer)", "# Time Leroy spent on homework in minutes\nthursday_minutes = 47\nfriday_minutes = 45\n\n# Calculate the rate of change\nrate_of_change = friday_minutes - thursday_minutes\n\n# Store the result in the variable answer\nanswer = f\"The rate of change in minutes from Thursday to Friday is {rate_of_change} minutes.\"\n\nprint(answer)", "thursday_minutes = 47\nfriday_minutes = 45\nrate_of_change = friday_minutes - thursday_minutes\nanswer = rate_of_change\nprint(answer)", "# Define the minutes Leroy spent on homework for Thursday and Friday\nthursday_minutes = 47\nfriday_minutes = 45\n\n# Calculate the rate of change between Thursday and Friday\nrate_of_change = friday_minutes - thursday_minutes\n\n# Store the result in the variable 'answer'\nanswer = rate_of_change\n\n# Print the answer\nprint(answer)"], "prediction": [-2.0, "The rate of change in minutes from Thursday to Friday is -2 minutes.", -2.0, -2.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Toy cars\" and then answer a question.\n\nNumber of toy cars | Frequency\n0 | 0\n1 | 7\n2 | 9\n3 | 16\n4 | 2", "question": "Read the following table regarding \"Toy cars\" and then write Python code to answer a question.\n\nNumber of toy cars | Frequency\n0 | 0\n1 | 7\n2 | 9\n3 | 16\n4 | 2\n\nIn order to complete their model of a futuristic highway, students in Ms. Laura's design class find out how many toy cars each student can bring to class. How many students in the class have exactly 2 toy cars?", "answer": "9", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# From the table, we find the frequency of students with exactly 2 toy cars\nfrequency_of_2_toy_cars = 9\nanswer = frequency_of_2_toy_cars\nprint(answer)", "frequency_of_2_toy_cars = 9\nanswer = int(frequency_of_2_toy_cars)  # Ensure answer is an integer\nprint(answer)", "# Frequency of students with exactly 2 toy cars\nfrequency_of_2_toy_cars = 9  \nanswer = frequency_of_2_toy_cars  # No need for conversion\nprint(answer)", "frequency_of_2_toy_cars = 9  \nanswer = frequency_of_2_toy_cars  # Store as an integer\nprint(answer)"], "prediction": [9.0, 9.0, 9.0, 9.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Swimming pool schedule\" and then answer a question.\n\nActivity | Begin | End\ndiving club practice | 8:50 A.M. | 9:20 A.M.\nwater polo practice | 9:30 A.M. | 11:05 A.M.\nwater aerobics | 11:20 A.M. | 12:50 P.M.\nintermediate swimming class | 1:00 P.M. | 2:20 P.M.\nlap swim | 2:25 P.M. | 3:50 P.M.", "question": "Read the following table regarding \"Swimming pool schedule\" and then write Python code to answer a question.\n\nActivity | Begin | End\ndiving club practice | 8:50 A.M. | 9:20 A.M.\nwater polo practice | 9:30 A.M. | 11:05 A.M.\nwater aerobics | 11:20 A.M. | 12:50 P.M.\nintermediate swimming class | 1:00 P.M. | 2:20 P.M.\nlap swim | 2:25 P.M. | 3:50 P.M.\n\nLook at the following schedule. Which activity ends at 3.50 P.M.? Choose from the the options: ['water polo practice', 'water aerobics', 'lap swim', 'diving club practice']", "answer": "lap swim", "ques_type": "multi_choice", "choices": ["water polo practice", "water aerobics", "lap swim", "diving club practice"], "code": [
  "# Python code, return answer \n# The ending time of each activity\nactivities = {\n    'diving club practice': '9:20 A.M.',\n    'water polo practice': '11:05 A.M.',\n    'water aerobics': '12:50 P.M.',\n    'intermediate swimming class': '2:20 P.M.',\n    'lap swim': '3:50 P.M.'\n}\n# Identify the activity that ends at 3:50 P.M.\nactivity_ends_at_350 = [activity for activity, end_time in activities.items() if end_time == '3:50 P.M.']\nanswer = activity_ends_at_350[0]  # There is only one activity that ends at this time\nprint(answer)", "# Define the activities and their end times\nactivities = {\n    'diving club practice': '9:20 A.M.',\n    'water polo practice': '11:05 A.M.',\n    'water aerobics': '12:50 P.M.',\n    'intermediate swimming class': '2:20 P.M.',\n    'lap swim': '3:50 P.M.'\n}\n\n# Check which activity ends at 3:50 P.M.\nactivity_ends_at_350 = [activity for activity, end_time in activities.items() if end_time == '3:50 P.M.']\nanswer = activity_ends_at_350[0]  # There is only one activity that ends at this time\nprint(answer)", "activities = {\n    'diving club practice': '9:20 A.M.',\n    'water polo practice': '11:05 A.M.',\n    'water aerobics': '12:50 P.M.',\n    'intermediate swimming class': '2:20 P.M.',\n    'lap swim': '3:50 P.M.'\n}\n\n# Identify the activity that ends at 3:50 P.M.\nanswer = next(activity for activity, end_time in activities.items() if end_time == '3:50 P.M.')\nprint(answer)", "# Define the activities and their end times in a dictionary\nactivities = {\n    'diving club practice': '9:20 A.M.',\n    'water polo practice': '11:05 A.M.',\n    'water aerobics': '12:50 P.M.',\n    'intermediate swimming class': '2:20 P.M.',\n    'lap swim': '3:50 P.M.'\n}\n\n# Find the activity that ends at 3:50 P.M.\nanswer = next(activity for activity, end_time in activities.items() if end_time == '3:50 P.M.')\nprint(answer)"
], "prediction": ["lap swim", "lap swim", "lap swim", "lap swim"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nsquare washers | $3 per kg\ndock washers | $3 per kg\nlock washers | $3 per kg\nflat washers | $3 per kg", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nsquare washers | $3 per kg\ndock washers | $3 per kg\nlock washers | $3 per kg\nflat washers | $3 per kg\n\nTessa went to the store and bought 4+3/4 kilograms of square washers. How much did she spend?", "answer": "14.25", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_kg = 3 \nkilograms_bought = 4 + 3/4 \n# Calculate the total cost\ntotal_cost = price_per_kg * kilograms_bought\nanswer = total_cost\nprint(answer)", "# Define the price per kilogram for the washers\nprice_per_kg = 3  \n\n# Define the amount of kilograms Tessa bought\nkilograms_bought = 4 + 3/4  \n\n# Calculate the total cost\ntotal_cost = price_per_kg * kilograms_bought  \n\n# Store the result in the answer variable\nanswer = total_cost  \n\n# Print the answer\nprint(answer)", "price_per_kg = 3  \nkilograms_bought = 4 + 3/4  \ntotal_cost = price_per_kg * kilograms_bought  \nanswer = total_cost  \nprint(answer)  # This will output: 14.25", "# Define the price per kilogram and the amount of square washers bought\nprice_per_kg = 3  \nkilograms_bought = 4 + 3/4  \n\n# Calculate the total cost\ntotal_cost = price_per_kg * kilograms_bought  \n\n# Store the result in the answer variable\nanswer = total_cost  \n\n# Output the answer\nprint(answer)  # This will output: 14.25"], "prediction": [14.25, 14.25, 14.25, 14.25], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nshort steel screw | $0.16\nsmall paintbrush | $0.53\npiece of plastic pipe | $0.80\nminiature padlock | $0.17", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nshort steel screw | $0.16\nsmall paintbrush | $0.53\npiece of plastic pipe | $0.80\nminiature padlock | $0.17\n\nHow much money does Elizabeth need to buy a miniature padlock and a piece of plastic pipe?", "answer": "0.97", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nprice_miniature_padlock = 0.17 \nprice_plastic_pipe = 0.80 \n# Total cost for both items\ntotal_cost = price_miniature_padlock + price_plastic_pipe\nanswer = total_cost\nprint(answer)", "# Define the prices of the items\nprice_miniature_padlock = 0.17 \nprice_plastic_pipe = 0.80 \n\n# Calculate the total cost\ntotal_cost = price_miniature_padlock + price_plastic_pipe\n\n# Store the result in the answer variable\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "# Prices of items\nprice_miniature_padlock = 0.17 \nprice_plastic_pipe = 0.80 \n\n# Calculate total cost\ntotal_cost = price_miniature_padlock + price_plastic_pipe\n\n# Format the output as currency\nanswer = f\"${total_cost:.2f}\"\nprint(answer)", "# Prices of items\nprice_miniature_padlock = 0.17 \nprice_plastic_pipe = 0.80 \n\n# Calculate total cost\ntotal_cost = price_miniature_padlock + price_plastic_pipe\n\n# Store the result as a variable named 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)"], "prediction": [0.97, 0.97, "$0.97", 0.97], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nspiral snail shell | $0.01\nscallop shell | $0.03\npolished silver top shell | $0.02\noyster shell | $0.06\npink and white striped shell | $0.04", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nspiral snail shell | $0.01\nscallop shell | $0.03\npolished silver top shell | $0.02\noyster shell | $0.06\npink and white striped shell | $0.04\n\nHow much more does an oyster shell cost than a scallop shell?", "answer": "0.03", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_oyster_shell = 0.06 \ncost_scallop_shell = 0.03 \n# Calculate the difference in cost\ndifference = cost_oyster_shell - cost_scallop_shell\nanswer = difference\nprint(answer)", "# Define the costs of the shells\ncost_oyster_shell = 0.06\ncost_scallop_shell = 0.03\n\n# Calculate the difference in cost\ndifference = cost_oyster_shell - cost_scallop_shell\n\n# Store the result in a variable named 'answer'\nanswer = f\"The oyster shell costs ${difference:.2f} more than the scallop shell.\"\n\n# Print the answer\nprint(answer)", "cost_oyster_shell = 0.06\ncost_scallop_shell = 0.03\ndifference = cost_oyster_shell - cost_scallop_shell\nanswer = difference  # Store the numerical difference\nprint(answer)  # Output the numerical difference", "cost_oyster_shell = 0.06\ncost_scallop_shell = 0.03\ndifference = cost_oyster_shell - cost_scallop_shell\nanswer = f\"The oyster shell costs ${difference:.2f} more than the scallop shell.\"\nprint(answer)"], "prediction": [0.03, "The oyster shell costs $0.03 more than the scallop shell.", 0.03, "The oyster shell costs $0.03 more than the scallop shell."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of baskets | Number of flowers\n1 | 10\n2 | 20\n3 | 30\n4 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of baskets | Number of flowers\n1 | 10\n2 | 20\n3 | 30\n4 | ?\n\nEach basket has 10 flowers. How many flowers are in 4 baskets?", "answer": "40", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of baskets\nnumber_of_baskets = 4\n# Each basket contains 10 flowers\nflowers_per_basket = 10\n# Calculate total flowers\ntotal_flowers = number_of_baskets * flowers_per_basket\nanswer = total_flowers\nprint(answer)", "number_of_baskets = 4  \nflowers_per_basket = 10  \ntotal_flowers = number_of_baskets * flowers_per_basket  \nanswer = total_flowers  \nprint(answer)  # This will output 40", "number_of_baskets = 4  \nflowers_per_basket = 10  \ntotal_flowers = number_of_baskets * flowers_per_basket  \nanswer = int(total_flowers)  # Ensure the result is an integer\nprint(answer)  # This will output 40", "number_of_baskets = 4  \nflowers_per_basket = 10  \ntotal_flowers = number_of_baskets * flowers_per_basket  \nanswer = total_flowers  # This will naturally be an integer\nprint(answer)  # This will output 40"], "prediction": [40.0, 40.0, 40.0, 40.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"People interviewed\" and then answer a question.\n\nDay | Number of people\nSaturday | 13\nSunday | 13\nMonday | 14\nTuesday | 13\nWednesday | 15", "question": "Read the following table regarding \"People interviewed\" and then write Python code to answer a question.\n\nDay | Number of people\nSaturday | 13\nSunday | 13\nMonday | 14\nTuesday | 13\nWednesday | 15\n\nA reporter looked through his notebook to remember how many people he had interviewed in the past 5 days. What is the range of the numbers?", "answer": "2", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of people interviewed each day\npeople_interviewed = [13, 13, 14, 13, 15]\n# Calculate the range\nrange_people_interviewed = max(people_interviewed) - min(people_interviewed)\nanswer = range_people_interviewed\nprint(answer)", "people_interviewed = [13, 13, 14, 13, 15]\nrange_people_interviewed = max(people_interviewed) - min(people_interviewed)\nanswer = int(range_people_interviewed)  # Convert to integer\nprint(answer)", "people_interviewed = [13, 13, 14, 13, 15]\nrange_people_interviewed = max(people_interviewed) - min(people_interviewed)\nanswer = range_people_interviewed  # No need to convert to integer, as it's already an integer\nprint(answer)", "people_interviewed = [13, 13, 14, 13, 15]\nrange_people_interviewed = max(people_interviewed) - min(people_interviewed)\nanswer = int(range_people_interviewed)  # Convert to integer to ensure the output type is correct\nprint(answer)"], "prediction": [2.0, 2.0, 2.0, 2.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Vacation days taken by Katy\" and then answer a question.\n\nYear | Vacation days\n2015 | 27\n2016 | 30\n2017 | 25\n2018 | 16\n2019 | 25", "question": "Read the following table regarding \"Vacation days taken by Katy\" and then write Python code to answer a question.\n\nYear | Vacation days\n2015 | 27\n2016 | 30\n2017 | 25\n2018 | 16\n2019 | 25\n\nTo figure out how many vacation days she had left to use, Katy looked over her old calendars to figure out how many days of vacation she had taken each year. According to the table, what was the rate of change between 2017 and 2018?", "answer": "-9", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Vacation days taken in 2017 and 2018\nvacation_days_2017 = 25\nvacation_days_2018 = 16\n# Calculate the rate of change between 2017 and 2018\nrate_of_change = vacation_days_2018 - vacation_days_2017\nanswer = rate_of_change\nprint(answer)", "# Define the number of vacation days taken in 2017 and 2018\nvacation_days_2017 = 25\nvacation_days_2018 = 16\n\n# Calculate the rate of change in vacation days\nrate_of_change = vacation_days_2018 - vacation_days_2017\n\n# Store the result with a description\nanswer = f\"The rate of change in vacation days taken from 2017 to 2018 is {rate_of_change} days.\"\nprint(answer)", "# Define the vacation days taken in 2017 and 2018\nvacation_days_2017 = 25\nvacation_days_2018 = 16\n\n# Calculate the rate of change\nrate_of_change = vacation_days_2018 - vacation_days_2017\n\n# Store the result in the variable 'answer'\nanswer = rate_of_change\n\n# Print the answer\nprint(answer)", "vacation_days_2017 = 25\nvacation_days_2018 = 16\nrate_of_change = vacation_days_2018 - vacation_days_2017\nanswer = f\"The rate of change in vacation days from 2017 to 2018 is {rate_of_change} days.\"\nprint(answer)"], "prediction": [-9.0, "The rate of change in vacation days taken from 2017 to 2018 is -9 days.", -9.0, "The rate of change in vacation days from 2017 to 2018 is -9 days."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Cheese consumption per capita (kg)\" and then answer a question.\n\nCountry | 1996 | 2006\nGermany | 12 | 20\nAustralia | 10 | 10\nCanada | 10 | 11\nGreat Britain | 9 | 10\nArgentina | 11 | 11", "question": "Read the following table regarding \"Cheese consumption per capita (kg)\" and then write Python code to answer a question.\n\nCountry | 1996 | 2006\nGermany | 12 | 20\nAustralia | 10 | 10\nCanada | 10 | 11\nGreat Britain | 9 | 10\nArgentina | 11 | 11\n\nAn agricultural agency is researching how much cheese people have been eating in different parts of the world. How much cheese was consumed per capita in Argentina in 2006?", "answer": "11", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Cheese consumption per capita in Argentina for the year 2006\ncheese_consumption_argentina_2006 = 11  # kg\nanswer = cheese_consumption_argentina_2006\nprint(answer)", "# Store the cheese consumption data in a dictionary\ncheese_consumption = {\n    'Germany': {1996: 12, 2006: 20},\n    'Australia': {1996: 10, 2006: 10},\n    'Canada': {1996: 10, 2006: 11},\n    'Great Britain': {1996: 9, 2006: 10},\n    'Argentina': {1996: 11, 2006: 11}\n}\n\n# Retrieve the cheese consumption per capita in Argentina for 2006\ncheese_consumption_argentina_2006 = cheese_consumption['Argentina'][2006]\nanswer = cheese_consumption_argentina_2006\nprint(answer)", "cheese_consumption = {\n    'Germany': {1996: 12, 2006: 20},\n    'Australia': {1996: 10, 2006: 10},\n    'Canada': {1996: 10, 2006: 11},\n    'Great Britain': {1996: 9, 2006: 10},\n    'Argentina': {1996: 11, 2006: 11}\n}\ncheese_consumption_argentina_2006 = cheese_consumption['Argentina'][2006]\nanswer = int(cheese_consumption_argentina_2006)  # Convert to integer\nprint(answer)", "# Define the cheese consumption data\ncheese_consumption = {\n    'Germany': {1996: 12, 2006: 20},\n    'Australia': {1996: 10, 2006: 10},\n    'Canada': {1996: 10, 2006: 11},\n    'Great Britain': {1996: 9, 2006: 10},\n    'Argentina': {1996: 11, 2006: 11}\n}\n\n# Retrieve the cheese consumption per capita in Argentina for the year 2006\ncheese_consumption_argentina_2006 = cheese_consumption['Argentina'][2006]\n\n# Store the result in the variable 'answer'\nanswer = cheese_consumption_argentina_2006\n\n# Print the answer\nprint(answer)"
], "prediction": [11.0, 11.0, 11.0, 11.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of tool boxes | Number of hammers\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of tool boxes | Number of hammers\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | ?\n\nEach tool box has 10 hammers. How many hammers are in 5 tool boxes?", "answer": "50", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Each toolbox contains 10 hammers\nhammers_per_toolbox = 10 \n# Number of tool boxes\nnumber_of_tool_boxes = 5 \n# Total number of hammers\ntotal_hammers = hammers_per_toolbox * number_of_tool_boxes\nanswer = total_hammers\nprint(answer)", "hammers_per_toolbox = 10 \nnumber_of_tool_boxes = 5 \ntotal_hammers = hammers_per_toolbox * number_of_tool_boxes\nanswer = int(total_hammers)  # Convert to integer for clarity\nprint(answer)", "hammers_per_toolbox = 10 \nnumber_of_tool_boxes = 5 \ntotal_hammers = hammers_per_toolbox * number_of_tool_boxes\nanswer = total_hammers  # No need to convert to integer as it's already an integer\nprint(answer)", "hammers_per_toolbox = 10 \nnumber_of_tool_boxes = 5 \ntotal_hammers = hammers_per_toolbox * number_of_tool_boxes\nanswer = int(total_hammers)  # Convert to integer for clarity\nprint(answer)"], "prediction": [50.0, 50.0, 50.0, 50.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of shelves | Number of turtleneck sweaters\n1 | 5\n2 | 10\n3 | 15\n4 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of shelves | Number of turtleneck sweaters\n1 | 5\n2 | 10\n3 | 15\n4 | ?\n\nEach shelf has 5 turtleneck sweaters. How many turtleneck sweaters are on 4 shelves?", "answer": "20", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nsweaters_per_shelf = 5\nnumber_of_shelves = 4\n# Calculate the total number of turtleneck sweaters\ntotal_sweaters = sweaters_per_shelf * number_of_shelves\nanswer = total_sweaters\nprint(answer)", "sweaters_per_shelf = 5\nnumber_of_shelves = 4\ntotal_sweaters = sweaters_per_shelf * number_of_shelves\nanswer = int(total_sweaters)  # Convert to integer\nprint(answer)", "sweaters_per_shelf = 5\nnumber_of_shelves = 4\ntotal_sweaters = sweaters_per_shelf * number_of_shelves\nanswer = total_sweaters  # No need to convert to integer as multiplication of integers will yield an integer\nprint(answer)", "sweaters_per_shelf = 5\nnumber_of_shelves = 4\ntotal_sweaters = sweaters_per_shelf * number_of_shelves\nanswer = int(total_sweaters)  # Convert to integer for clarity\nprint(answer)"], "prediction": [20.0, 20.0, 20.0, 20.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ntortillas | $9/kilogram\nrye rolls | $8/kilogram\nFrench rolls | $9/kilogram\nspelt rolls | $5/kilogram\nhamburger buns | $4/kilogram\nhot dog buns | $6/kilogram", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ntortillas | $9/kilogram\nrye rolls | $8/kilogram\nFrench rolls | $9/kilogram\nspelt rolls | $5/kilogram\nhamburger buns | $4/kilogram\nhot dog buns | $6/kilogram\n\nWhat is the total cost for 9/10 of a kilogram of hamburger buns?", "answer": "3.60", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_kilogram_hamburger_buns = 4 \nkilograms_bought = 9/10 \n# Calculate the total cost\ntotal_cost = price_per_kilogram_hamburger_buns * kilograms_bought\nanswer = total_cost\nprint(answer)", "price_per_kilogram_hamburger_buns = 4 \nkilograms_bought = 9/10 \ntotal_cost = price_per_kilogram_hamburger_buns * kilograms_bought\nanswer = round(total_cost, 2)  # Round to 2 decimal places for currency format\nprint(answer)", "price_per_kilogram_hamburger_buns = 4 \nkilograms_bought = 9/10 \ntotal_cost = price_per_kilogram_hamburger_buns * kilograms_bought\nanswer = \"${:.2f}\".format(total_cost)  # Format as currency\nprint(answer)", "price_per_kilogram_hamburger_buns = 4 \nkilograms_bought = 9/10 \ntotal_cost = price_per_kilogram_hamburger_buns * kilograms_bought\nanswer = \"${:.2f}\".format(total_cost)  # Format as currency\nprint(answer)"], "prediction": [3.6, 3.6, "$3.60", "$3.60"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of laundry hampers | Number of blouses\n1 | 5\n2 | 10\n3 | 15\n4 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of laundry hampers | Number of blouses\n1 | 5\n2 | 10\n3 | 15\n4 | ?\n\nEach laundry hamper has 5 blouses. How many blouses are in 4 laundry hampers?", "answer": "20", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Given that each laundry hamper has 5 blouses\nblouses_per_hamper = 5\n# Calculate the number of blouses in 4 laundry hampers\nnumber_of_hampers = 4\nanswer = blouses_per_hamper * number_of_hampers\nprint(answer)", "blouses_per_hamper = 5\nnumber_of_hampers = 4\nanswer = int(blouses_per_hamper * number_of_hampers)  # Cast to int to ensure it's an integer\nprint(answer)", "blouses_per_hamper = 5\nnumber_of_hampers = 4\nanswer = blouses_per_hamper * number_of_hampers  # No need to cast to int\nprint(answer)", "blouses_per_hamper = 5\nnumber_of_hampers = 4\nanswer = blouses_per_hamper * number_of_hampers  # Calculate total blouses\nanswer = int(answer)  # Convert to integer for clarity\nprint(answer)"], "prediction": [20.0, 20.0, 20.0, 20.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Newspapers collected\" and then answer a question.\n\nName | Number of newspapers\nDoug | 85\nXavier | 86\nCarly | 87\nValentina | 86\nEric | 85\nBen | 85\nSam | 86\nMason | 86", "question": "Read the following table regarding \"Newspapers collected\" and then write Python code to answer a question.\n\nName | Number of newspapers\nDoug | 85\nXavier | 86\nCarly | 87\nValentina | 86\nEric | 85\nBen | 85\nSam | 86\nMason | 86\n\nDoug's class tracked how many newspapers each student collected for their recycling project. What is the mode of the numbers?", "answer": "86", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \nfrom collections import Counter\n\n# List of newspapers collected by each student\nnewspapers_collected = [85, 86, 87, 86, 85, 85, 86, 86]\n\n# Find the mode\ncounter = Counter(newspapers_collected)\nmode_data = counter.most_common(1)\nmode_value = mode_data[0][0]\n\nanswer = mode_value\nprint(answer)", "from collections import Counter\n\n# List of newspapers collected by each student\nnewspapers_collected = [85, 86, 87, 86, 85, 85, 86, 86]\n\n# Count the occurrences of each number\ncounter = Counter(newspapers_collected)\n\n# Get the mode (most common value)\nmode_data = counter.most_common(1)\n\n# Extract the mode value and convert it to an integer\nmode_value = mode_data[0][0]\nanswer = int(mode_value)  # Ensure the result is an integer\nprint(answer)", "from collections import Counter\n\nnewspapers_collected = [85, 86, 87, 86, 85, 85, 86, 86]\ncounter = Counter(newspapers_collected)\nmode_data = counter.most_common(1)\nmode_value = mode_data[0][0]\n\nanswer = mode_value  # Store the mode directly as an integer\nprint(answer)", "from collections import Counter\n\n# List of newspapers collected by each student\nnewspapers_collected = [85, 86, 87, 86, 85, 85, 86, 86]\n\n# Count the occurrences of each number\ncounter = Counter(newspapers_collected)\n\n# Find the mode\nmode_data = counter.most_common(1)\nmode_value = mode_data[0][0]\n\n# Store the mode as an integer\nanswer = int(mode_value)  # Convert to integer for clarity\nprint(answer)"
], "prediction": [86.0, 86.0, 86.0, 86.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Web pages visited\" and then answer a question.\n\nPerson | Number of Web pages\nAlexis | 7\nWanda | 7\nRoy | 9\nCharlie | 9\nBetty | 10", "question": "Read the following table regarding \"Web pages visited\" and then write Python code to answer a question.\n\nPerson | Number of Web pages\nAlexis | 7\nWanda | 7\nRoy | 9\nCharlie | 9\nBetty | 10\n\nSeveral people compared how many Web pages they had visited. What is the median of the numbers?", "answer": "9", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# List of the number of web pages visited by each person\nweb_pages_visited = [7, 7, 9, 9, 10]\n# Sort the list to find the median\nweb_pages_visited.sort()\n\n# Calculate the median\nn = len(web_pages_visited)\nif n % 2 == 0:\n    median = (web_pages_visited[n // 2 - 1] + web_pages_visited[n // 2]) / 2\nelse:\n    median = web_pages_visited[n // 2]\n\nanswer = median\nprint(answer)", "web_pages_visited = [7, 7, 9, 9, 10]  # List of web pages visited\nweb_pages_visited.sort()  # Sort the list\nn = len(web_pages_visited)  # Get the number of entries\n\n# Calculate the median\nif n % 2 == 0:\n    median = (web_pages_visited[n // 2 - 1] + web_pages_visited[n // 2]) / 2\nelse:\n    median = web_pages_visited[n // 2]\n\nanswer = median  # Store the median in the answer variable\nprint(answer)  # Print the answer", "web_pages_visited = [7, 7, 9, 9, 10]  # List of web pages visited\nweb_pages_visited.sort()  # Sort the list\nn = len(web_pages_visited)  # Get the number of entries\n\nif n % 2 == 0:\n    median = (web_pages_visited[n // 2 - 1] + web_pages_visited[n // 2]) / 2\nelse:\n    median = web_pages_visited[n // 2]\n\nanswer = int(median) if median.is_integer() else median  # Convert to int if median is whole number\nprint(answer)  # Print the answer", "web_pages_visited = [7, 7, 9, 9, 10]  # List of web pages visited\nweb_pages_visited.sort()  # Sort the list\nn = len(web_pages_visited)  # Get the number of entries\n\nif n % 2 == 0:\n    median = (web_pages_visited[n // 2 - 1] + web_pages_visited[n // 2]) / 2\nelse:\n    median = web_pages_visited[n // 2]\n\nanswer = int(median)  # Convert to int since the median is a whole number\nprint(answer)  # Print the answer"
], "prediction": [9.0, 9.0, 9.0, 9.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Field day schedule\" and then answer a question.\n\nEvent | Begin | End\nparachute ball toss | 11:45 A.M. | 12:15 P.M.\npotato sack race | 12:30 P.M. | 12:55 P.M.\nthree-legged race | 1:00 P.M. | 2:00 P.M.\nobstacle course | 2:15 P.M. | 2:35 P.M.\nhurdles | 2:45 P.M. | 3:10 P.M.\njump rope race | 3:15 P.M. | 3:30 P.M.\nrelay race | 3:45 P.M. | 4:00 P.M.\negg relay | 4:05 P.M. | 4:35 P.M.", "question": "Read the following table regarding \"Field day schedule\" and then write Python code to answer a question.\n\nEvent | Begin | End\nparachute ball toss | 11:45 A.M. | 12:15 P.M.\npotato sack race | 12:30 P.M. | 12:55 P.M.\nthree-legged race | 1:00 P.M. | 2:00 P.M.\nobstacle course | 2:15 P.M. | 2:35 P.M.\nhurdles | 2:45 P.M. | 3:10 P.M.\njump rope race | 3:15 P.M. | 3:30 P.M.\nrelay race | 3:45 P.M. | 4:00 P.M.\negg relay | 4:05 P.M. | 4:35 P.M.\n\nLook at the following schedule. Which event ends at 12.15 P.M.? Choose from the the options: ['relay race', 'jump rope race', 'parachute ball toss', 'egg relay']", "answer": "parachute ball toss", "ques_type": "multi_choice", "choices": ["relay race", "jump rope race", "parachute ball toss", "egg relay"], "code": [
  "# Python code, return answer \n# The event that ends at 12:15 P.M. is from the given table.\nevent_ending_at_1215 = 'parachute ball toss'\nanswer = event_ending_at_1215\nprint(answer)", "# Define the schedule as a list of dictionaries\nschedule = [\n    {\"event\": \"parachute ball toss\", \"begin\": \"11:45 A.M.\", \"end\": \"12:15 P.M.\"},\n    {\"event\": \"potato sack race\", \"begin\": \"12:30 P.M.\", \"end\": \"12:55 P.M.\"},\n    {\"event\": \"three-legged race\", \"begin\": \"1:00 P.M.\", \"end\": \"2:00 P.M.\"},\n    {\"event\": \"obstacle course\", \"begin\": \"2:15 P.M.\", \"end\": \"2:35 P.M.\"},\n    {\"event\": \"hurdles\", \"begin\": \"2:45 P.M.\", \"end\": \"3:10 P.M.\"},\n    {\"event\": \"jump rope race\", \"begin\": \"3:15 P.M.\", \"end\": \"3:30 P.M.\"},\n    {\"event\": \"relay race\", \"begin\": \"3:45 P.M.\", \"end\": \"4:00 P.M.\"},\n    {\"event\": \"egg relay\", \"begin\": \"4:05 P.M.\", \"end\": \"4:35 P.M.\"}\n]\n\n# Find the event that ends at 12:15 P.M.\nevent_ending_at_1215 = None\nfor item in schedule:\n    if item[\"end\"] == \"12:15 P.M.\":\n        event_ending_at_1215 = item[\"event\"]\n        break\n\nanswer = event_ending_at_1215\nprint(answer)", "schedule = [\n    {\"event\": \"parachute ball toss\", \"begin\": \"11:45 A.M.\", \"end\": \"12:15 P.M.\"},\n    {\"event\": \"potato sack race\", \"begin\": \"12:30 P.M.\", \"end\": \"12:55 P.M.\"},\n    {\"event\": \"three-legged race\", \"begin\": \"1:00 P.M.\", \"end\": \"2:00 P.M.\"},\n    {\"event\": \"obstacle course\", \"begin\": \"2:15 P.M.\", \"end\": \"2:35 P.M.\"},\n    {\"event\": \"hurdles\", \"begin\": \"2:45 P.M.\", \"end\": \"3:10 P.M.\"},\n    {\"event\": \"jump rope race\", \"begin\": \"3:15 P.M.\", \"end\": \"3:30 P.M.\"},\n    {\"event\": \"relay race\", \"begin\": \"3:45 P.M.\", \"end\": \"4:00 P.M.\"},\n    {\"event\": \"egg relay\", \"begin\": \"4:05 P.M.\", \"end\": \"4:35 P.M.\"}\n]\n\n# Find the event that ends at 12:15 P.M.\nanswer = next((item[\"event\"] for item in schedule if item[\"end\"] == \"12:15 P.M.\"), None)\n\nprint(answer)", "schedule = [\n    {\"event\": \"parachute ball toss\", \"begin\": \"11:45 A.M.\", \"end\": \"12:15 P.M.\"},\n    {\"event\": \"potato sack race\", \"begin\": \"12:30 P.M.\", \"end\": \"12:55 P.M.\"},\n    {\"event\": \"three-legged race\", \"begin\": \"1:00 P.M.\", \"end\": \"2:00 P.M.\"},\n    {\"event\": \"obstacle course\", \"begin\": \"2:15 P.M.\", \"end\": \"2:35 P.M.\"},\n    {\"event\": \"hurdles\", \"begin\": \"2:45 P.M.\", \"end\": \"3:10 P.M.\"},\n    {\"event\": \"jump rope race\", \"begin\": \"3:15 P.M.\", \"end\": \"3:30 P.M.\"},\n    {\"event\": \"relay race\", \"begin\": \"3:45 P.M.\", \"end\": \"4:00 P.M.\"},\n    {\"event\": \"egg relay\", \"begin\": \"4:05 P.M.\", \"end\": \"4:35 P.M.\"}\n]\n\n# Find the event that ends at 12:15 P.M.\nanswer = next((item[\"event\"] for item in schedule if item[\"end\"] == \"12:15 P.M.\"), None)\nprint(answer)"
], "prediction": ["parachute ball toss", "parachute ball toss", "parachute ball toss", "parachute ball toss"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Olympic medals\" and then answer a question.\n\nCountry | 2004 | 2008\nFinland | 2 | 4\nBrazil | 10 | 15\nSweden | 7 | 5", "question": "Read the following table regarding \"Olympic medals\" and then write Python code to answer a question.\n\nCountry | 2004 | 2008\nFinland | 2 | 4\nBrazil | 10 | 15\nSweden | 7 | 5\n\nA sports fan decided to examine the pattern of medals won by certain countries at several Olympic games. How many more medals did Brazil win in 2008 than in 2004?", "answer": "5", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nmedals_2004_brazil = 10\nmedals_2008_brazil = 15\n# Calculate the difference in medals won by Brazil\ndifference_medals = medals_2008_brazil - medals_2004_brazil\nanswer = difference_medals\nprint(answer)", "medals_2004_brazil = 10\nmedals_2008_brazil = 15\ndifference_medals = medals_2008_brazil - medals_2004_brazil\nanswer = int(difference_medals)  # Convert to integer\nprint(answer)", "medals_2004_brazil = 10\nmedals_2008_brazil = 15\ndifference_medals = medals_2008_brazil - medals_2004_brazil\nanswer = difference_medals  # No need to convert to integer since the result is already an integer\nprint(answer)", "medals_2004_brazil = 10\nmedals_2008_brazil = 15\ndifference_medals = medals_2008_brazil - medals_2004_brazil\nanswer = difference_medals  # The result is already an integer\nprint(answer)"], "prediction": [5.0, 5.0, 5.0, 5.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Fourth grade classes\" and then answer a question.\n\nTeacher | Boys | Girls\nMiss Smith | 10 | 17\nMr. Lopez | 19 | 17\nMiss Fisher | 15 | 11\nMrs. Carpenter | 16 | 18", "question": "Read the following table regarding \"Fourth grade classes\" and then write Python code to answer a question.\n\nTeacher | Boys | Girls\nMiss Smith | 10 | 17\nMr. Lopez | 19 | 17\nMiss Fisher | 15 | 11\nMrs. Carpenter | 16 | 18\n\nThe principal of Stafford Elementary School released statistics about how many boys and girls were in each fourth grade class at her school. How many more boys are in Mr. Lopez's class than Miss Smith's class?", "answer": "9", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nboys_mr_lopez = 19\nboys_miss_smith = 10\n# Calculate the difference in the number of boys\ndifference = boys_mr_lopez - boys_miss_smith\nanswer = difference\nprint(answer)", "boys_mr_lopez = 19\nboys_miss_smith = 10\ndifference = boys_mr_lopez - boys_miss_smith\nanswer = int(difference)  # Convert to integer for clarity\nprint(answer)", "# Define the number of boys in each class\nboys_mr_lopez = 19\nboys_miss_smith = 10\n\n# Calculate the difference in the number of boys\ndifference = boys_mr_lopez - boys_miss_smith\n\n# Store the result as an integer\nanswer = difference  # This will already be an integer\n\nprint(answer)", "boys_mr_lopez = 19\nboys_miss_smith = 10\ndifference = boys_mr_lopez - boys_miss_smith\nanswer = int(difference)  # Convert the result to an integer to ensure it is not a float\nprint(answer)"], "prediction": [9.0, 9.0, 9.0, 9.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Couches sold\" and then answer a question.\n\nDay | Number of couches\nTuesday | 7\nWednesday | 2\nThursday | 2\nFriday | 3\nSaturday | 3\nSunday | 7", "question": "Read the following table regarding \"Couches sold\" and then write Python code to answer a question.\n\nDay | Number of couches\nTuesday | 7\nWednesday | 2\nThursday | 2\nFriday | 3\nSaturday | 3\nSunday | 7\n\nA furniture store kept a record of how many couches it sold each day. What is the range of the numbers?", "answer": "5", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of the number of couches sold each day\ncouches_sold = [7, 2, 2, 3, 3, 7]\n# Calculate the range\nrange_of_couches = max(couches_sold) - min(couches_sold)\nanswer = range_of_couches\nprint(answer)", "couches_sold = [7, 2, 2, 3, 3, 7]\nrange_of_couches = max(couches_sold) - min(couches_sold)\nanswer = range_of_couches  # This will be an integer\nprint(answer)", "couches_sold = [7, 2, 2, 3, 3, 7]\nrange_of_couches = max(couches_sold) - min(couches_sold)\nanswer = int(range_of_couches)  # Convert to integer explicitly\nprint(answer)", "couches_sold = [7, 2, 2, 3, 3, 7]\nrange_of_couches = max(couches_sold) - min(couches_sold)\nanswer = range_of_couches  # No need for explicit conversion, as the result is already an integer\nprint(answer)"], "prediction": [5.0, 5.0, 5.0, 5.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nhair tie | $0.57\nbox of breath mints | $0.94\ntube of toothpaste | $0.97\ncomb | $0.96", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nhair tie | $0.57\nbox of breath mints | $0.94\ntube of toothpaste | $0.97\ncomb | $0.96\n\nHow much money does Naomi need to buy a hair tie, a box of breath mints, and a comb?", "answer": "2.47", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nhair_tie_price = 0.57\nbreath_mints_price = 0.94\ncomb_price = 0.96\n\n# Calculate the total cost\ntotal_cost = hair_tie_price + breath_mints_price + comb_price\nanswer = total_cost\nprint(answer)", "# Prices of the items\nhair_tie_price = 0.57\nbreath_mints_price = 0.94\ncomb_price = 0.96\n\n# Calculate the total cost\ntotal_cost = hair_tie_price + breath_mints_price + comb_price\n\n# Store the result in answer\nanswer = total_cost\n\n# Output the result with context\nprint(f\"Naomi needs ${answer:.2f} to buy a hair tie, a box of breath mints, and a comb.\")", "# Prices of the items\nhair_tie_price = 0.57\nbreath_mints_price = 0.94\ncomb_price = 0.96\n\n# Calculate total cost\ntotal_cost = hair_tie_price + breath_mints_price + comb_price\n\n# Assign the total cost to the answer variable\nanswer = total_cost\n\n# Print the formatted output\nprint(f\"Naomi needs ${answer:.2f} to buy a hair tie, a box of breath mints, and a comb.\")", "hair_tie_price = 0.57\nbreath_mints_price = 0.94\ncomb_price = 0.96\ntotal_cost = hair_tie_price + breath_mints_price + comb_price\nanswer = total_cost\nprint(answer)"], "prediction": [2.47, 2.47, 2.47, 2.47], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nwooden block | $0.08\nshapes stencil | $0.02\nred kazoo | $0.06\ngreen bouncy ball | $0.04\ngreen marble | $0.04\nblue plastic block | $0.09", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nwooden block | $0.08\nshapes stencil | $0.02\nred kazoo | $0.06\ngreen bouncy ball | $0.04\ngreen marble | $0.04\nblue plastic block | $0.09\n\nHow much money does Brennan need to buy a shapes stencil and a green bouncy ball?", "answer": "0.06", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nprice_shapes_stencil = 0.02\nprice_green_bouncy_ball = 0.04\n# Total cost for both items\ntotal_cost = price_shapes_stencil + price_green_bouncy_ball\nanswer = total_cost\nprint(answer)", "price_shapes_stencil = 0.02\nprice_green_bouncy_ball = 0.04\ntotal_cost = price_shapes_stencil + price_green_bouncy_ball\nanswer = f\"Brennan needs ${total_cost:.2f} to buy a shapes stencil and a green bouncy ball.\"\nprint(answer)", "# Define the prices of the items\nprice_shapes_stencil = 0.02\nprice_green_bouncy_ball = 0.04\n\n# Calculate the total cost\ntotal_cost = price_shapes_stencil + price_green_bouncy_ball\n\n# Store the total cost in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "price_shapes_stencil = 0.02\nprice_green_bouncy_ball = 0.04\ntotal_cost = price_shapes_stencil + price_green_bouncy_ball\nanswer = f\"${total_cost:.2f}\"  # Format the output as a monetary value\nprint(answer)"], "prediction": [0.06, "Brennan needs $0.06 to buy a shapes stencil and a green bouncy ball.", 0.06, "$0.06"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Phone calls received\" and then answer a question.\n\nDay | Number of calls\nWednesday | 8,383\nThursday | 2,270\nFriday | 1,356\nSaturday | 8,148", "question": "Read the following table regarding \"Phone calls received\" and then write Python code to answer a question.\n\nDay | Number of calls\nWednesday | 8,383\nThursday | 2,270\nFriday | 1,356\nSaturday | 8,148\n\nA technical support line tracked how many calls it received each day. How many calls total did the support line receive on Friday and Saturday?", "answer": "9,504", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncalls_friday = 1356 \ncalls_saturday = 8148 \n# Calculate total calls received on Friday and Saturday\ntotal_calls_friday_saturday = calls_friday + calls_saturday\nanswer = total_calls_friday_saturday\nprint(answer)", "calls_friday = 1356 \ncalls_saturday = 8148 \ntotal_calls_friday_saturday = calls_friday + calls_saturday\nanswer = int(total_calls_friday_saturday)  # Ensure the result is stored as an integer\nprint(answer)", "# Define the number of calls received on Friday and Saturday\ncalls_friday = 1356\ncalls_saturday = 8148\n\n# Calculate the total number of calls received on Friday and Saturday\ntotal_calls_friday_saturday = calls_friday + calls_saturday\n\n# Store the result in the variable 'answer'\nanswer = total_calls_friday_saturday\n\n# Print the answer\nprint(answer)", "calls_friday = 1356\ncalls_saturday = 8148\ntotal_calls_friday_saturday = calls_friday + calls_saturday\nanswer = total_calls_friday_saturday\nprint(answer)"], "prediction": [9504.0, 9504.0, 9504.0, 9504.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Glasses of water\" and then answer a question.\n\nDay | Number of glasses\nThursday | 5\nFriday | 5\nSaturday | 5\nSunday | 10\nMonday | 7\nTuesday | 9\nWednesday | 8", "question": "Read the following table regarding \"Glasses of water\" and then write Python code to answer a question.\n\nDay | Number of glasses\nThursday | 5\nFriday | 5\nSaturday | 5\nSunday | 10\nMonday | 7\nTuesday | 9\nWednesday | 8\n\nReagan wrote down how many glasses of water she drank during the past 7 days. What is the range of the numbers?", "answer": "5", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of glasses of water for each day\nglasses = [5, 5, 5, 10, 7, 9, 8]\n\n# Calculate the range\nrange_of_glasses = max(glasses) - min(glasses)\nanswer = range_of_glasses\nprint(answer)", "glasses = [5, 5, 5, 10, 7, 9, 8]\nrange_of_glasses = max(glasses) - min(glasses)\nanswer = int(range_of_glasses)  # Convert the result to an integer\nprint(answer)", "glasses = [5, 5, 5, 10, 7, 9, 8]\nrange_of_glasses = max(glasses) - min(glasses)\nanswer = max(glasses) - min(glasses)  # Directly assign the integer result\nprint(answer)", "glasses = [5, 5, 5, 10, 7, 9, 8]\nrange_of_glasses = max(glasses) - min(glasses)\nanswer = range_of_glasses  # Assign the integer result directly\nprint(answer)"], "prediction": [5.0, 5.0, 5.0, 5.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Chocolate consumption per capita (kg)\" and then answer a question.\n\nCountry | 2002 | 2005\nGermany | 10 | 11\nPoland | 3 | 4\nAustralia | 4 | 5", "question": "Read the following table regarding \"Chocolate consumption per capita (kg)\" and then write Python code to answer a question.\n\nCountry | 2002 | 2005\nGermany | 10 | 11\nPoland | 3 | 4\nAustralia | 4 | 5\n\nMarcy's Candies has been studying how much chocolate people have been eating in different countries. In 2005, how much more chocolate did Germany consume per capita than Poland?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Chocolate consumption in 2005\ngermany_consumption_2005 = 11\npoland_consumption_2005 = 4\n# Calculate the difference in consumption\ndifference = germany_consumption_2005 - poland_consumption_2005\nanswer = difference\nprint(answer)", "germany_consumption_2005 = 11\npoland_consumption_2005 = 4\ndifference = germany_consumption_2005 - poland_consumption_2005\nanswer = int(difference)  # Convert to integer for clarity\nprint(answer)", "```python\ngermany_consumption_200", "germany_consumption_2005 = 11\npoland_consumption_2005 = 4\ndifference = germany_consumption_2005 - poland_consumption_2005\nanswer = difference  # Keep it as an integer\nprint(answer)"], "prediction": [7.0, 7.0, null, 7.0], "report": ["Done", "Done", "SyntaxError('invalid syntax', ('<string>', 1, 1, '```python\\n', 1, 2))", "Done"]
}
{
  "context": "Read the following table regarding \"Hitting tennis balls\" and then answer a question.\n\nName | Number of tennis balls\nFred | 76\nRoger | 65\nAdele | 67\nMiranda | 62\nJoy | 63\nTom | 57", "question": "Read the following table regarding \"Hitting tennis balls\" and then write Python code to answer a question.\n\nName | Number of tennis balls\nFred | 76\nRoger | 65\nAdele | 67\nMiranda | 62\nJoy | 63\nTom | 57\n\nThe gym teacher wrote down how many tennis balls his students hit in half an hour. What is the range of the numbers?", "answer": "19", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of tennis balls hit by each student\ntennis_balls = [76, 65, 67, 62, 63, 57]\n\n# Calculate the range\nrange_of_balls = max(tennis_balls) - min(tennis_balls)\nanswer = range_of_balls\nprint(answer)", "tennis_balls = [76, 65, 67, 62, 63, 57]\nrange_of_balls = max(tennis_balls) - min(tennis_balls)\nanswer = range_of_balls  # This will be an integer\nprint(answer)", "tennis_balls = [76, 65, 67, 62, 63, 57]\nrange_of_balls = max(tennis_balls) - min(tennis_balls)\nanswer = int(range_of_balls)  # Convert to integer\nprint(answer)", "tennis_balls = [76, 65, 67, 62, 63, 57]\nrange_of_balls = max(tennis_balls) - min(tennis_balls)\nanswer = range_of_balls  # No need to convert to integer, it's already an integer\nprint(answer)"], "prediction": [19.0, 19.0, 19.0, 19.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Red gumdrops per bag\" and then answer a question.\n\nStem | Leaf \n2 | 4, 6, 8, 9\n3 | 1, 2\n4 | 3\n5 | 2, 9, 9\n6 | 0, 1, 4, 6\n7 | 5, 5, 7\n8 | \n9 | 0", "question": "Read the following table regarding \"Red gumdrops per bag\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 4, 6, 8, 9\n3 | 1, 2\n4 | 3\n5 | 2, 9, 9\n6 | 0, 1, 4, 6\n7 | 5, 5, 7\n8 | \n9 | 0\n\nA machine dispensed red gumdrops into bags of various sizes. How many bags had at least 53 red gumdrops but less than 74 red gumdrops?", "answer": "6", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Extracting values from the stem-and-leaf display to find the number of bags within the specified range (53 to 73)\ngumdrops = [\n    24, 26, 28, 29,  # Stem 2\n    31, 32,          # Stem 3\n    43,              # Stem 4\n    52, 59, 59,      # Stem 5\n    60, 61, 64, 66,  # Stem 6\n    75, 75, 77,      # Stem 7\n    80,              # Stem 8\n    90               # Stem 9\n]\n\n# Count bags with at least 53 but less than 74 red gumdrops\ncount_bags = sum(1 for gumdrop in gumdrops if 53 <= gumdrop < 74)\nanswer = count_bags\nprint(answer)", "gumdrops = [\n    24, 26, 28, 29,  # Stem 2\n    31, 32,          # Stem 3\n    43,              # Stem 4\n    52, 59, 59,      # Stem 5\n    60, 61, 64, 66,  # Stem 6\n    75, 75, 77,      # Stem 7\n    80,              # Stem 8\n    90               # Stem 9\n]\n\ncount_bags = sum(1 for gumdrop in gumdrops if 53 <= gumdrop < 74)\nanswer = int(count_bags)  # Convert to integer\nprint(answer)", "gumdrops = [\n    24, 26, 28, 29,  # Stem 2\n    31, 32,          # Stem 3\n    43,              # Stem 4\n    52, 59, 59,      # Stem 5\n    60, 61, 64, 66,  # Stem 6\n    75, 75, 77,      # Stem 7\n    80,              # Stem 8\n    90               # Stem 9\n]\ncount_bags = sum(1 for gumdrop in gumdrops if 53 <= gumdrop < 74)\nanswer = count_bags  # Store as integer directly\nprint(answer)", "gumdrops = [\n    24, 26, 28, 29,  # Stem 2\n    31, 32,          # Stem 3\n    43,              # Stem 4\n    52, 59, 59,      # Stem 5\n    60, 61, 64, 66,  # Stem 6\n    75, 75, 77,      # Stem 7\n    80,              # Stem 8\n    90               # Stem 9\n]\n\n# Count the number of bags with at least 53 and less than 74 red gumdrops\ncount_bags = sum(1 for gumdrop in gumdrops if 53 <= gumdrop < 74)\nanswer = int(count_bags)  # Ensure the answer is stored as an integer\nprint(answer)"
], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Students receiving scholarships\" and then answer a question.\n\nYear | Students\n2010 | 21\n2011 | 23\n2012 | 28\n2013 | 25\n2014 | 29", "question": "Read the following table regarding \"Students receiving scholarships\" and then write Python code to answer a question.\n\nYear | Students\n2010 | 21\n2011 | 23\n2012 | 28\n2013 | 25\n2014 | 29\n\nThe financial aid office at Jordan University produced an internal report on the number of students receiving scholarships. According to the table, what was the rate of change between 2012 and 2013?", "answer": "-3", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of students receiving scholarships in 2012 and 2013\nstudents_2012 = 28\nstudents_2013 = 25\n# Calculate the rate of change\nrate_of_change = students_2013 - students_2012\nanswer = rate_of_change\nprint(answer)", "students_2012 = 28\nstudents_2013 = 25\nrate_of_change = (students_2013 - students_2012) / students_2012\nanswer = rate_of_change\nprint(answer)", "students_2012 = 28\nstudents_2013 = 25\nrate_of_change = (students_2013 - students_2012) / students_2012 * 100\nanswer = rate_of_change\nprint(answer)", "students_2012 = 28\nstudents_2013 = 25\nrate_of_change = (students_2013 - students_2012) / students_2012 * 100\nanswer = round(rate_of_change, 2)  # Round to two decimal places\nprint(answer)"], "prediction": [-3.0, -0.10714, -10.71429, -10.71], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Number of cars\" and then answer a question.\n\nDay | Number of cars\nThursday | 324\nFriday | 323\nSaturday | 342\nSunday | 334", "question": "Read the following table regarding \"Number of cars\" and then write Python code to answer a question.\n\nDay | Number of cars\nThursday | 324\nFriday | 323\nSaturday | 342\nSunday | 334\n\nSue's family went on a road trip and counted the number of cars they saw each day. On which day did they see the fewest cars? Choose from the the options: ['Thursday', 'Friday', 'Saturday', 'Sunday']", "answer": "Friday", "ques_type": "multi_choice", "choices": ["Thursday", "Friday", "Saturday", "Sunday"], "code": ["# Python code, return answer \n# Dictionary of the number of cars seen on each day\ncars_count = {\n    'Thursday': 324,\n    'Friday': 323,\n    'Saturday': 342,\n    'Sunday': 334\n}\n# Find the day with the fewest cars\nfewest_cars_day = min(cars_count, key=cars_count.get)\nanswer = fewest_cars_day\nprint(answer)", "cars_count = {\n    'Thursday': 324,\n    'Friday': 323,\n    'Saturday': 342,\n    'Sunday': 334\n}\nfewest_cars_day = min(cars_count, key=cars_count.get)\nanswer = fewest_cars_day\nprint(answer)", "cars_count = {\n    'Thursday': 324,\n    'Friday': 323,\n    'Saturday': 342,\n    'Sunday': 334\n}\nfewest_cars_day = min(cars_count, key=cars_count.get)\nfewest_cars_count = cars_count[fewest_cars_day]\nanswer = (fewest_cars_day, fewest_cars_count)\nprint(answer)", "cars_count = {\n    'Thursday': 324,\n    'Friday': 323,\n    'Saturday': 342,\n    'Sunday': 334\n}\n\n# Find the day with the fewest cars\nanswer = min(cars_count, key=cars_count.get)\nprint(answer)"], "prediction": ["Friday", "Friday", "Friday", "Friday"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Magazines sold\" and then answer a question.\n\nMonth | Number of magazines\nMarch | 6,337\nApril | 3,287\nMay | 5,123", "question": "Read the following table regarding \"Magazines sold\" and then write Python code to answer a question.\n\nMonth | Number of magazines\nMarch | 6,337\nApril | 3,287\nMay | 5,123\n\nA magazine editor looked at her sales figures for the past 3 months. How many more copies were sold in May than in April?", "answer": "1,836", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nmagazines_sold_may = 5123\nmagazines_sold_april = 3287\n# Calculate the difference in copies sold between May and April\ndifference = magazines_sold_may - magazines_sold_april\nanswer = difference\nprint(answer)", "magazines_sold_may = 5123\nmagazines_sold_april = 3287\ndifference = magazines_sold_may - magazines_sold_april\nanswer = int(difference)  # Convert to integer for clarity\nprint(answer)", "magazines_sold_may = 5123\nmagazines_sold_april = 3287\ndifference = magazines_sold_may - magazines_sold_april\nanswer = difference  # No need to convert to int, as the result is already an integer\nprint(answer)", "magazines_sold_may = 5123\nmagazines_sold_april = 3287\ndifference = magazines_sold_may - magazines_sold_april\nanswer = int(difference)  # Explicitly convert to int if needed\nprint(answer)"], "prediction": [1836.0, 1836.0, 1836.0, 1836.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nEmployee | Pay period |\nRaphael Cruz | November |\nTotal earnings | | $2,400.00\nFederal income tax | $266.60 |\nState income tax | $142.00 |\nOther taxes | $183.60 |\nTotal taxes | | ?\nPay after taxes | | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nEmployee | Pay period |\nRaphael Cruz | November |\nTotal earnings | | $2,400.00\nFederal income tax | $266.60 |\nState income tax | $142.00 |\nOther taxes | $183.60 |\nTotal taxes | | ?\nPay after taxes | | ?\n\nLook at Raphael's pay stub. Raphael lives in a state that has state income tax. How much did Raphael make after taxes?", "answer": "1,807.80", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total earnings before taxes\ntotal_earnings = 2400.00\n# Total taxes calculation\nfederal_income_tax = 266.60\nstate_income_tax = 142.00\nother_taxes = 183.60\ntotal_taxes = federal_income_tax + state_income_tax + other_taxes\n# Calculate pay after taxes\npay_after_taxes = total_earnings - total_taxes\nanswer = pay_after_taxes\nprint(answer)", "total_earnings = 2400.00\nfederal_income_tax = 266.60\nstate_income_tax = 142.00\nother_taxes = 183.60\ntotal_taxes = federal_income_tax + state_income_tax + other_taxes\npay_after_taxes = total_earnings - total_taxes\n\n# Format the answer as a currency string\nanswer = \"${:,.2f}\".format(pay_after_taxes)\nprint(answer)", "# Define the earnings and taxes\ntotal_earnings = 2400.00\nfederal_income_tax = 266.60\nstate_income_tax = 142.00\nother_taxes = 183.60\n\n# Calculate total taxes and pay after taxes\ntotal_taxes = federal_income_tax + state_income_tax + other_taxes\npay_after_taxes = total_earnings - total_taxes\n\n# Format the pay after taxes\nanswer = \"${:,.2f}\".format(pay_after_taxes)\n\n# Output the answer\nprint(answer)", "# Define the earnings and taxes\ntotal_earnings = 2400.00\nfederal_income_tax = 266.60\nstate_income_tax = 142.00\nother_taxes = 183.60\n\n# Calculate total taxes and pay after taxes\ntotal_taxes = federal_income_tax + state_income_tax + other_taxes\npay_after_taxes = total_earnings - total_taxes\n\n# Store the result in the answer variable\nanswer = pay_after_taxes\nprint(answer)"
], "prediction": [1807.8, "$1,807.80", "$1,807.80", 1807.8], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Hockey games won by Howard High\" and then answer a question.\n\nYear | Games won\n2015 | 11\n2016 | 15\n2017 | 20\n2018 | 15\n2019 | 4", "question": "Read the following table regarding \"Hockey games won by Howard High\" and then write Python code to answer a question.\n\nYear | Games won\n2015 | 11\n2016 | 15\n2017 | 20\n2018 | 15\n2019 | 4\n\nA pair of Howard High School hockey fans counted the number of games won by the school each year. According to the table, what was the rate of change between 2017 and 2018?", "answer": "-5", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of games won in 2017 and 2018\ngames_won_2017 = 20\ngames_won_2018 = 15\n\n# Calculate the rate of change\nrate_of_change = games_won_2018 - games_won_2017\nanswer = rate_of_change\nprint(answer)", "# Define the number of games won for the years 2017 and 2018\ngames_won_2017 = 20\ngames_won_2018 = 15\n\n# Define the years\nyear_2017 = 2017\nyear_2018 = 2018\n\n# Calculate the rate of change\nrate_of_change = (games_won_2018 - games_won_2017) / (year_2018 - year_2017)\n\n# Store the result in the variable 'answer'\nanswer = rate_of_change\n\n# Print the answer\nprint(answer)", "games_won_2017 = 20\ngames_won_2018 = 15\nyear_2017 = 2017\nyear_2018 = 2018\n\n# Calculate the rate of change\nrate_of_change = (games_won_2018 - games_won_2017) / (year_2018 - year_2017)\n\n# The answer is the rate of change in games won per year\nanswer = rate_of_change\n\nprint(answer)", "games_won_2017 = 20\ngames_won_2018 = 15\nyear_2017 = 2017\nyear_2018 = 2018\nrate_of_change = games_won_2018 - games_won_2017  # Calculate the change in games won\nanswer = f\"The rate of change in games won from 2017 to 2018 is {rate_of_change} games.\"\nprint(answer)"], "prediction": [-5.0, -5.0, -5.0, "The rate of change in games won from 2017 to 2018 is -5 games."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Vehicle sales\" and then answer a question.\n\nDealership | Number of vehicles\nAffordable Cars | 19\nRV City | 19\nTruck City | 13\nLedbetter Auto Mall | 17\nBen's Used Cars | 27\nCars of Pryor Falls | 13", "question": "Read the following table regarding \"Vehicle sales\" and then write Python code to answer a question.\n\nDealership | Number of vehicles\nAffordable Cars | 19\nRV City | 19\nTruck City | 13\nLedbetter Auto Mall | 17\nBen's Used Cars | 27\nCars of Pryor Falls | 13\n\nSome dealerships compared their vehicle sales. What is the range of the numbers?", "answer": "14", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of vehicle sales from each dealership\nvehicle_sales = [19, 19, 13, 17, 27, 13]\n\n# Calculate the range\nrange_sales = max(vehicle_sales) - min(vehicle_sales)\nanswer = range_sales\nprint(answer)", "# Store the number of vehicles sold by each dealership in a list\nvehicle_sales = [19, 19, 13, 17, 27, 13]\n\n# Calculate the range of the vehicle sales\nrange_sales = max(vehicle_sales) - min(vehicle_sales)\n\n# Store the result in the variable 'answer'\nanswer = range_sales\n\n# Output the answer\nprint(answer)", "vehicle_sales = [19, 19, 13, 17, 27, 13]\nrange_sales = max(vehicle_sales) - min(vehicle_sales)\nanswer = int(range_sales)  # Convert to integer for the final output\nprint(answer)", "# List of vehicle sales from various dealerships\nvehicle_sales = [19, 19, 13, 17, 27, 13]\n\n# Calculate the range of the numbers\nrange_sales = max(vehicle_sales) - min(vehicle_sales)\n\n# Store the result as an integer\nanswer = range_sales  # This will already be an integer\n\nprint(answer)"], "prediction": [14.0, 14.0, 14.0, 14.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nroll of electrical tape | $0.39\nbrass clip | $0.17\nspool of gold wire | $0.40\nshort steel screw | $0.17\nelastic band | $0.17\ngold tack | $0.18", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nroll of electrical tape | $0.39\nbrass clip | $0.17\nspool of gold wire | $0.40\nshort steel screw | $0.17\nelastic band | $0.17\ngold tack | $0.18\n\nNaomi has $0.50. Does she have enough to buy an elastic band and a spool of gold wire? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# Prices of the items\nprice_elastic_band = 0.17\nprice_spool_gold_wire = 0.40\n# Total cost for both items\ntotal_cost = price_elastic_band + price_spool_gold_wire\n# Amount Naomi has\nnaomi_amount = 0.50\n# Determine if Naomi has enough money\nif naomi_amount >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "# Define the prices of the items\nprice_elastic_band = 0.17\nprice_spool_gold_wire = 0.40\n\n# Calculate the total cost\ntotal_cost = price_elastic_band + price_spool_gold_wire\n\n# Amount Naomi has\nnaomi_amount = 0.50\n\n# Check if Naomi has enough money\nif naomi_amount >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Prices of the items\nprice_elastic_band = 0.17\nprice_spool_gold_wire = 0.40\n\n# Calculate total cost\ntotal_cost = price_elastic_band + price_spool_gold_wire\n\n# Amount Naomi has\nnaomi_amount = 0.50\n\n# Check if Naomi has enough money\nif naomi_amount >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the prices of the items\nprice_elastic_band = 0.17\nprice_spool_gold_wire = 0.40\n\n# Calculate the total cost of the items\ntotal_cost = price_elastic_band + price_spool_gold_wire\n\n# Amount of money Naomi has\nnaomi_amount = 0.50\n\n# Check if Naomi has enough money to buy both items\nif naomi_amount >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)"
], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n1 | 16\n2 | 6\n3 | 5", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n1 | 16\n2 | 6\n3 | 5\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "nonlinear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear or nonlinear, we can check the ratios of change between x and y.\n\n# Calculate the differences\nx_values = [1, 2, 3]\ny_values = [16, 6, 5]\n\n# Calculate the changes in y for each change in x\nchange_y_1 = y_values[1] - y_values[0]  # from 1 to 2\nchange_y_2 = y_values[2] - y_values[1]  # from 2 to 3\n\n# Calculate the change in x\nchange_x_1 = x_values[1] - x_values[0]  # from 1 to 2\nchange_x_2 = x_values[2] - x_values[1]  # from 2 to 3\n\n# Check if the slope (change in y/change in x) is constant\nslope_1 = change_y_1 / change_x_1\nslope_2 = change_y_2 / change_x_2\n\n# Determine if the function is linear or nonlinear\nif slope_1 == slope_2:\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\n\nprint(answer)", "# Define the x and y values\nx_values = [1, 2, 3]\ny_values = [16, 6, 5]\n\n# Calculate slopes between all consecutive points\nslopes = []\nfor i in range(len(x_values) - 1):\n    change_y = y_values[i + 1] - y_values[i]\n    change_x = x_values[i + 1] - x_values[i]\n    slope = change_y / change_x\n    slopes.append(slope)\n\n# Check if all slopes are the same\nif all(s == slopes[0] for s in slopes):\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\n\nprint(answer)", "x_values = [1, 2, 3]\ny_values = [16, 6, 5]\n\n# Calculate the differences\ndifferences = [(y_values[i+1] - y_values[i], x_values[i+1] - x_values[i]) for i in range(len(x_values) - 1)]\n\n# Check if the ratios of differences are constant\nratios = [dy/dx for dy, dx in differences if dx != 0]  # Avoid division by zero\n\nif len(set(ratios)) == 1:\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\n\nprint(answer)", "x_values = [1, 2, 3]\ny_values = [16, 6, 5]\n\n# Calculate the slopes between consecutive points\nslopes = []\nfor i in range(len(x_values) - 1):\n    dy = y_values[i + 1] - y_values[i]\n    dx = x_values[i + 1] - x_values[i]\n    if dx != 0:  # Avoid division by zero\n        slopes.append(dy / dx)\n\n# Check if all slopes are the same\nif len(set(slopes)) == 1:\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\n\nprint(answer)"
], "prediction": ["nonlinear", null, "nonlinear", "nonlinear"], "report": ["Done", "NameError(\"name 'slopes' is not defined\")", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of necklaces | Number of pearls\n1 | 5\n2 | 10\n3 | 15\n4 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of necklaces | Number of pearls\n1 | 5\n2 | 10\n3 | 15\n4 | ?\n\nEach necklace has 5 pearls. How many pearls are on 4 necklaces?", "answer": "20", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of pearls on 4 necklaces\nnumber_of_pearls_per_necklace = 5\nnumber_of_necklaces = 4\npearls_on_4_necklaces = number_of_pearls_per_necklace * number_of_necklaces\nanswer = pearls_on_4_necklaces\nprint(answer)", "number_of_pearls_per_necklace = 5\nnumber_of_necklaces = 4\npearls_on_4_necklaces = number_of_pearls_per_necklace * number_of_necklaces\nanswer = int(pearls_on_4_necklaces)  # Convert to integer\nprint(answer)", "number_of_pearls_per_necklace = 5\nnumber_of_necklaces = 4\npearls_on_4_necklaces = number_of_pearls_per_necklace * number_of_necklaces\nanswer = pearls_on_4_necklaces  # No need to convert to integer\nprint(answer)", "number_of_pearls_per_necklace = 5\nnumber_of_necklaces = 4\npearls_on_4_necklaces = number_of_pearls_per_necklace * number_of_necklaces\nanswer = int(pearls_on_4_necklaces)  # Convert to integer for whole number representation\nprint(answer)"], "prediction": [20.0, 20.0, 20.0, 20.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Pizza slices sold\" and then answer a question.\n\nRestaurant | Number of slices sold\nAntonio's Pizzeria | 2,364\nPizzas Only | 1,470\nMario's Pizzeria | 1,207\nThe Big Cheese | 1,667", "question": "Read the following table regarding \"Pizza slices sold\" and then write Python code to answer a question.\n\nRestaurant | Number of slices sold\nAntonio's Pizzeria | 2,364\nPizzas Only | 1,470\nMario's Pizzeria | 1,207\nThe Big Cheese | 1,667\n\nSome pizza restaurants compared their pizza sales. In all, how many pizza slices did Pizzas Only and Mario's Pizzeria sell?", "answer": "2,677", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nslices_pizzas_only = 1470 \nslices_marios_pizzeria = 1207 \n# Calculate total slices sold by Pizzas Only and Mario's Pizzeria\ntotal_slices = slices_pizzas_only + slices_marios_pizzeria\nanswer = total_slices\nprint(answer)", "# Define the number of slices sold by each restaurant as integers\nslices_pizzas_only = 1470\nslices_marios_pizzeria = 1207\n\n# Calculate the total slices sold by Pizzas Only and Mario's Pizzeria\ntotal_slices = slices_pizzas_only + slices_marios_pizzeria\n\n# Store the result in the variable 'answer'\nanswer = total_slices\n\n# Print the answer\nprint(answer)", "# Define the number of slices sold by each restaurant\nslices_pizzas_only = 1470\nslices_marios_pizzeria = 1207\n\n# Calculate the total slices sold by Pizzas Only and Mario's Pizzeria\ntotal_slices = slices_pizzas_only + slices_marios_pizzeria\n\n# Ensure the result is stored as an integer\nanswer = int(total_slices)\nprint(answer)", "slices_pizzas_only = 1470\nslices_marios_pizzeria = 1207\ntotal_slices = slices_pizzas_only + slices_marios_pizzeria\nanswer = total_slices  # No need to convert to int as total_slices is already an integer\nprint(answer)"], "prediction": [2677.0, 2677.0, 2677.0, 2677.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Zoo schedule\" and then answer a question.\n\nEvent | Begin | End\nreptile show | 9:10 A.M. | 9:50 A.M.\npenguin feeding | 9:55 A.M. | 11:15 A.M.\ntiger lecture | 11:05 A.M. | 12:10 P.M.\npanda lecture | 12:50 P.M. | 1:20 P.M.\nkoala feeding | 1:50 P.M. | 3:10 P.M.\nbear lecture | 3:15 P.M. | 4:20 P.M.\nbird show | 4:15 P.M. | 4:55 P.M.\ngiraffe feeding | 5:00 P.M. | 6:20 P.M.\nzebra feeding | 6:15 P.M. | 6:55 P.M.", "question": "Read the following table regarding \"Zoo schedule\" and then write Python code to answer a question.\n\nEvent | Begin | End\nreptile show | 9:10 A.M. | 9:50 A.M.\npenguin feeding | 9:55 A.M. | 11:15 A.M.\ntiger lecture | 11:05 A.M. | 12:10 P.M.\npanda lecture | 12:50 P.M. | 1:20 P.M.\nkoala feeding | 1:50 P.M. | 3:10 P.M.\nbear lecture | 3:15 P.M. | 4:20 P.M.\nbird show | 4:15 P.M. | 4:55 P.M.\ngiraffe feeding | 5:00 P.M. | 6:20 P.M.\nzebra feeding | 6:15 P.M. | 6:55 P.M.\n\nLook at the following schedule. When does the zebra feeding end? Choose from the the options: ['9:10 A.M.', '4:55 P.M.', '6:15 P.M.', '6:55 P.M.']", "answer": "6:55 P.M.", "ques_type": "multi_choice", "choices": ["9:10 A.M.", "4:55 P.M.", "6:15 P.M.", "6:55 P.M."], "code": ["# Python code, return answer \n# The end time of zebra feeding is specified in the schedule.\nzebra_feeding_end = \"6:55 P.M.\"\nanswer = zebra_feeding_end\nprint(answer)", "# Define the end time for zebra feeding\nzebra_feeding_end = \"6:55 P.M.\"\n\n# Define the options\noptions = ['9:10 A.M.', '4:55 P.M.', '6:15 P.M.', '6:55 P.M.']\n\n# Check if the zebra feeding end time is in the options\nif zebra_feeding_end in options:\n    answer = zebra_feeding_end\nelse:\n    answer = \"Not a valid option\"\n\nprint(answer)", "# Define the end time for zebra feeding\nzebra_feeding_end = \"6:55 P.M.\"\n\n# Define the options\noptions = ['9:10 A.M.', '4:55 P.M.', '6:15 P.M.', '6:55 P.M.']\n\n# Check if the zebra feeding end time is in the options\nif zebra_feeding_end in options:\n    answer = zebra_feeding_end\nelse:\n    answer = \"Not a valid option\"\n\nprint(answer)", "# Define the end time for zebra feeding\nzebra_feeding_end = \"6:55 P.M.\"\n\n# Define the options\noptions = ['9:10 A.M.', '4:55 P.M.', '6:15 P.M.', '6:55 P.M.']\n\n# Check if zebra feeding end time is in options\nif zebra_feeding_end in options:\n    answer = zebra_feeding_end\nelse:\n    answer = \"Not a valid option\"\n\nprint(answer)"], "prediction": ["6:55 P.M.", "6:55 P.M.", "6:55 P.M.", "6:55 P.M."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Pumpkins sold\" and then answer a question.\n\nDay | Number of pumpkins\nMonday | 164\nTuesday | 401\nWednesday | 769\nThursday | 283\nFriday | 544", "question": "Read the following table regarding \"Pumpkins sold\" and then write Python code to answer a question.\n\nDay | Number of pumpkins\nMonday | 164\nTuesday | 401\nWednesday | 769\nThursday | 283\nFriday | 544\n\nA pumpkin patch monitored the number of pumpkins sold each day. How many more pumpkins did the pumpkin patch sell on Wednesday than on Thursday?", "answer": "486", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \npumpkins_wednesday = 769\npumpkins_thursday = 283\n# Calculate the difference in pumpkins sold\ndifference = pumpkins_wednesday - pumpkins_thursday\nanswer = difference\nprint(answer)", "pumpkins_wednesday = 769\npumpkins_thursday = 283\ndifference = pumpkins_wednesday - pumpkins_thursday\nanswer = difference  # The result will naturally be an integer\nprint(answer)", "pumpkins_wednesday = 769\npumpkins_thursday = 283\ndifference = pumpkins_wednesday - pumpkins_thursday\nanswer = difference  # The result will be an integer\nprint(answer)", "pumpkins_wednesday = 769\npumpkins_thursday = 283\ndifference = pumpkins_wednesday - pumpkins_thursday\nanswer = difference  # The result will be an integer\nprint(answer)  # This will output the difference as an integer"], "prediction": [486.0, 486.0, 486.0, 486.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of shelves | Number of blocks of cheese\n1 | 2\n2 | 4\n3 | 6\n4 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of shelves | Number of blocks of cheese\n1 | 2\n2 | 4\n3 | 6\n4 | ?\n\nEach shelf has 2 blocks of cheese. How many blocks of cheese are on 4 shelves?", "answer": "8", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of blocks of cheese per shelf\nblocks_per_shelf = 2 \n# Number of shelves\nnumber_of_shelves = 4 \n# Calculate the total number of blocks of cheese\ntotal_blocks = blocks_per_shelf * number_of_shelves\nanswer = total_blocks\nprint(answer)", "blocks_per_shelf = 2 \nnumber_of_shelves = 4 \ntotal_blocks = blocks_per_shelf * number_of_shelves\nanswer = total_blocks  # The result is already an integer\nprint(answer)", "blocks_per_shelf = 2 \nnumber_of_shelves = 4 \ntotal_blocks = blocks_per_shelf * number_of_shelves\nanswer = int(total_blocks)  # Convert the result to an integer\nprint(answer)", "blocks_per_shelf = 2  \nnumber_of_shelves = 4  \ntotal_blocks = blocks_per_shelf * number_of_shelves  \nanswer = total_blocks  # No need for conversion to int, as the multiplication will yield an integer\nprint(answer)"], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nblue glass bead | $0.08\nbead with green and blue swirls | $0.08\npurple and red clay bead | $0.02\nwhite bead with black spots | $0.06", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nblue glass bead | $0.08\nbead with green and blue swirls | $0.08\npurple and red clay bead | $0.02\nwhite bead with black spots | $0.06\n\nJason has $0.15. Does he have enough to buy a bead with green and blue swirls and a white bead with black spots? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \ncost_green_blue_swirl = 0.08 \ncost_white_black_spots = 0.06 \ntotal_cost = cost_green_blue_swirl + cost_white_black_spots\njason_money = 0.15\n\n# Check if Jason has enough money\nif jason_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the costs of the beads\ncost_green_blue_swirl = 0.08 \ncost_white_black_spots = 0.06 \n\n# Calculate the total cost\ntotal_cost = cost_green_blue_swirl + cost_white_black_spots\n\n# Amount of money Jason has\njason_money = 0.15\n\n# Determine if Jason has enough money\nanswer = 'yes' if jason_money >= total_cost else 'no'\n\nprint(answer)", "# Define the costs of the beads\ncost_green_blue_swirl = 0.08 \ncost_white_black_spots = 0.06 \n\n# Calculate the total cost for both beads\ntotal_cost = cost_green_blue_swirl + cost_white_black_spots\n\n# Jason's available money\njason_money = 0.15\n\n# Determine if Jason has enough money and assign the result to 'answer'\nanswer = 'yes' if jason_money >= total_cost else 'no'\n\n# Print the result\nprint(answer)", "# Define the costs of the beads\ncost_green_blue_swirl = 0.08 \ncost_white_black_spots = 0.06 \n\n# Calculate the total cost\ntotal_cost = cost_green_blue_swirl + cost_white_black_spots\n\n# Amount of money Jason has\njason_money = 0.15\n\n# Determine if Jason has enough money\nanswer = 'yes' if jason_money >= total_cost else 'no'\n\n# Print the answer\nprint(answer)"
], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$475 | 14,400 | 1,000\n$555 | 11,400 | 5,800\n$635 | 8,400 | 10,600\n$715 | 5,400 | 15,400\n$795 | 2,400 | 20,200", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$475 | 14,400 | 1,000\n$555 | 11,400 | 5,800\n$635 | 8,400 | 10,600\n$715 | 5,400 | 15,400\n$795 | 2,400 | 20,200\n\nLook at the table. Then answer the question. At a price of $635, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "surplus", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": ["# Python code, return answer \n# Given values at a price of $635\nquantity_demanded = 8400\nquantity_supplied = 10600\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the quantities at the price of $635\nquantity_demanded = 8400\nquantity_supplied = 10600\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the quantity demanded and supplied at the price of $635\nquantity_demanded = 8400\nquantity_supplied = 10600\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\n# Print the answer\nprint(answer)", "quantity_demanded = 8400\nquantity_supplied = 10600\n\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelse:\n    answer = 'equilibrium'\n\nprint(answer)"], "prediction": ["surplus", "surplus", "surplus", "surplus"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of baskets | Number of lilies\n1 | 10\n2 | 20\n3 | 30\n4 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of baskets | Number of lilies\n1 | 10\n2 | 20\n3 | 30\n4 | ?\n\nEach basket has 10 lilies. How many lilies are in 4 baskets?", "answer": "40", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nlilies_per_basket = 10\nnumber_of_baskets = 4\n# Calculate the total number of lilies in 4 baskets\ntotal_lilies = lilies_per_basket * number_of_baskets\nanswer = total_lilies\nprint(answer)", "lilies_per_basket = 10\nnumber_of_baskets = 4\ntotal_lilies = lilies_per_basket * number_of_baskets\nanswer = total_lilies  # This will be an integer\nprint(answer)", "lilies_per_basket = 10\nnumber_of_baskets = 4\ntotal_lilies = lilies_per_basket * number_of_baskets\nanswer = int(total_lilies)  # Convert to integer to avoid float output\nprint(answer)", "lilies_per_basket = 10\nnumber_of_baskets = 4\ntotal_lilies = lilies_per_basket * number_of_baskets\nanswer = total_lilies  # No need to convert to int since it's already an integer\nprint(answer)"], "prediction": [40.0, 40.0, 40.0, 40.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Peppermint candies per jar\" and then answer a question.\n\nStem | Leaf \n1 | 1, 1, 1, 4\n2 | 1, 2, 3, 5, 6\n3 | 3, 4, 6\n4 | 3, 6, 7\n5 | 4, 8", "question": "Read the following table regarding \"Peppermint candies per jar\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 1, 1, 1, 4\n2 | 1, 2, 3, 5, 6\n3 | 3, 4, 6\n4 | 3, 6, 7\n5 | 4, 8\n\nSofia, a candy store employee, placed peppermint candies into jars of various sizes. How many jars had at least 10 peppermint candies?", "answer": "17", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Extracting the number of peppermint candies from the stem-and-leaf display\ncandies_per_jar = [\n    11, 11, 11, 14,  # From stem 1\n    21, 22, 23, 25, 26,  # From stem 2\n    33, 34, 36,  # From stem 3\n    43, 46, 47,  # From stem 4\n    54, 58  # From stem 5\n]\n\n# Counting jars with at least 10 peppermint candies\njars_with_at_least_10 = sum(1 for candies in candies_per_jar if candies >= 10)\nanswer = jars_with_at_least_10\nprint(answer)", "candies_per_jar = [\n    11, 11, 11, 14,  # From stem 1\n    21, 22, 23, 25, 26,  # From stem 2\n    33, 34, 36,  # From stem 3\n    43, 46, 47,  # From stem 4\n    54, 58  # From stem 5\n]\njars_with_at_least_10 = sum(1 for candies in candies_per_jar if candies >= 10)\nanswer = int(jars_with_at_least_10)  # Convert to integer explicitly\nprint(answer)", "# Define the number of peppermint candies per jar based on the stem and leaf representation\ncandies_per_jar = [\n    11, 11, 11, 14,  # From stem 1\n    21, 22, 23, 25, 26,  # From stem 2\n    33, 34, 36,  # From stem 3\n    43, 46, 47,  # From stem 4\n    54, 58  # From stem 5\n]\n\n# Count the number of jars with at least 10 peppermint candies\njars_with_at_least_10 = sum(1 for candies in candies_per_jar if candies >= 10)\n\n# Store the result as an integer\nanswer = jars_with_at_least_10\n\n# Print the answer\nprint(answer)", "candies_per_jar = [\n    11, 11, 11, 14,  # From stem 1\n    21, 22, 23, 25, 26,  # From stem 2\n    33, 34, 36,  # From stem 3\n    43, 46, 47,  # From stem 4\n    54, 58  # From stem 5\n]\njars_with_at_least_10 = sum(1 for candies in candies_per_jar if candies >= 10)\nanswer = int(jars_with_at_least_10)  # Convert to integer\nprint(answer)"
], "prediction": [17.0, 17.0, 17.0, 17.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Building heights (meters)\" and then answer a question.\n\nStem | Leaf \n1 | 0, 1\n2 | \n3 | 6\n4 | 2\n5 | \n6 | 0, 3, 3, 5, 6\n7 | 4, 7\n8 | 5, 6", "question": "Read the following table regarding \"Building heights (meters)\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 0, 1\n2 | \n3 | 6\n4 | 2\n5 | \n6 | 0, 3, 3, 5, 6\n7 | 4, 7\n8 | 5, 6\n\nAn architecture student measured the heights of all the buildings downtown. How many buildings are exactly 77 meters tall?", "answer": "1", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The height of 77 meters corresponds to the stem \"7\" and leaf \"7\".\n# So, there is exactly one building that is 77 meters tall.\nnumber_of_buildings_77_meters = 1\nanswer = number_of_buildings_77_meters\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(1, [0, 1]), (2, []), (3, [6]), (4, [2]), (5, []), (6, [0, 3, 3, 5, 6]), (7, [4, 7]), (8, [5, 6])]\n\n# Initialize counter for buildings exactly 77 meters tall\nbuildings_77_meters = 0\n\n# Iterate through the stem and leaf data structure and count buildings at 77 meters\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        height = stem * 10 + leaf\n        if height == 77:\n            buildings_77_meters += 1\n\nanswer = buildings_77_meters\nprint(answer)", "# Define the stem and leaf data structure for building heights\nstem_and_leaf = [(1, [0, 1]), (2, []), (3, [6]), (4, [2]), (5, []), (6, [0, 3, 3, 5, 6]), (7, [4, 7]), (8, [5, 6])]\n\n# Initialize counter for buildings that are exactly 77 meters tall\nbuildings_77_meters = 0\n\n# Iterate through the stem and leaf data structure and count buildings of height 77 meters\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        height = stem * 10 + leaf\n        if height == 77:\n            buildings_77_meters += 1\n\n# Store the result as an integer\nanswer = buildings_77_meters\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [0, 1]), (2, []), (3, [6]), (4, [2]), (5, []), (6, [0, 3, 3, 5, 6]), (7, [4, 7]), (8, [5, 6])]  \n\n# Initialize counter for buildings that are exactly 77 meters tall  \nbuildings_77_meters = 0  \n\n# Iterate through the stem and leaf data structure and count relevant buildings  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        height = stem * 10 + leaf  \n        if height == 77:  \n            buildings_77_meters += 1  \n\n# Ensure the answer is an integer  \nanswer = int(buildings_77_meters)  \nprint(answer)"
], "prediction": [1.0, 1.0, 1.0, 1.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Phone calls received\" and then answer a question.\n\nDay | Number of calls\nFriday | 139\nSaturday | 193\nSunday | 192\nMonday | 113", "question": "Read the following table regarding \"Phone calls received\" and then write Python code to answer a question.\n\nDay | Number of calls\nFriday | 139\nSaturday | 193\nSunday | 192\nMonday | 113\n\nA technical support line tracked how many calls it received each day. On which day did the support line receive the most calls? Choose from the the options: ['Friday', 'Saturday', 'Sunday', 'Monday']", "answer": "Saturday", "ques_type": "multi_choice", "choices": ["Friday", "Saturday", "Sunday", "Monday"], "code": ["# Python code, return answer \ncalls_received = {\n    'Friday': 139,\n    'Saturday': 193,\n    'Sunday': 192,\n    'Monday': 113\n}\n# Find the day with the most calls\nmost_calls_day = max(calls_received, key=calls_received.get)\nanswer = most_calls_day\nprint(answer)", "calls_received = {\n    'Friday': 139,\n    'Saturday': 193,\n    'Sunday': 192,\n    'Monday': 113\n}\nmost_calls_day = max(calls_received, key=calls_received.get)\nanswer = most_calls_day\nprint(answer)", "# Store the number of calls received on each day in a dictionary\ncalls_received = {\n    'Friday': 139,\n    'Saturday': 193,\n    'Sunday': 192,\n    'Monday': 113\n}\n\n# Use max function to find the day with the most calls\nmost_calls_day = max(calls_received, key=calls_received.get)\n\n# Store the result in the answer variable\nanswer = most_calls_day\n\n# Print the answer\nprint(answer)", "# Store the number of calls received each day in a dictionary\ncalls_received = {\n    'Friday': 139,\n    'Saturday': 193,\n    'Sunday': 192,\n    'Monday': 113\n}\n\n# Find the day with the most calls\nmost_calls_day = max(calls_received, key=calls_received.get)\nanswer = most_calls_day\n\n# Output the result\nprint(answer)"], "prediction": ["Saturday", "Saturday", "Saturday", "Saturday"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nshiny red bead | $0.05\norange glass bead | $0.06\nsquare yellow bead | $0.06\nbrown cat's eye bead | $0.08\nshiny metal bead | $0.07", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nshiny red bead | $0.05\norange glass bead | $0.06\nsquare yellow bead | $0.06\nbrown cat's eye bead | $0.08\nshiny metal bead | $0.07\n\nTracy has $0.14. Does she have enough to buy a brown cat's eye bead and a shiny red bead? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \ncost_brown_cats_eye_bead = 0.08\ncost_shiny_red_bead = 0.05\ntotal_cost = cost_brown_cats_eye_bead + cost_shiny_red_bead\ntracy_money = 0.14\n\n# Check if Tracy has enough money\nif tracy_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "cost_brown_cats_eye_bead = 0.08\ncost_shiny_red_bead = 0.05\ntotal_cost = cost_brown_cats_eye_bead + cost_shiny_red_bead\ntracy_money = 0.14\n\nanswer = 'yes' if tracy_money >= total_cost else 'no'\nprint(answer)", "# Define the costs of the beads\ncost_brown_cats_eye_bead = 0.08\ncost_shiny_red_bead = 0.05\n\n# Calculate the total cost\ntotal_cost = cost_brown_cats_eye_bead + cost_shiny_red_bead\n\n# Define the amount of money Tracy has\ntracy_money = 0.14\n\n# Determine if Tracy has enough money and store the result\nanswer = 'yes' if tracy_money >= total_cost else 'no'\n\n# Output the answer\nprint(answer)", "# Define the costs of the beads\ncost_brown_cats_eye_bead = 0.08\ncost_shiny_red_bead = 0.05\n\n# Calculate the total cost of the beads\ntotal_cost = cost_brown_cats_eye_bead + cost_shiny_red_bead\n\n# Amount of money Tracy has\ntracy_money = 0.14\n\n# Determine if Tracy has enough money and store the answer\nanswer = 'yes' if tracy_money >= total_cost else 'no'\n\n# Output the answer\nprint(answer)"], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Eating ice cream last month\" and then answer a question.\n\nTimes eaten | Frequency\n0 | 10\n1 | 19\n2 | 15\n3 | 20\n4 | 7\n5 | 2\n6 | 4", "question": "Read the following table regarding \"Eating ice cream last month\" and then write Python code to answer a question.\n\nTimes eaten | Frequency\n0 | 10\n1 | 19\n2 | 15\n3 | 20\n4 | 7\n5 | 2\n6 | 4\n\nJosiah's Treats counted how many times its most frequent customers ate ice cream last month. How many customers ate ice cream fewer than 2 times?", "answer": "29", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Frequency of customers who ate ice cream fewer than 2 times\ncustomers_0_times = 10  # customers who ate ice cream 0 times\ncustomers_1_time = 19   # customers who ate ice cream 1 time\n# Total customers who ate ice cream fewer than 2 times\ncustomers_fewer_than_2 = customers_0_times + customers_1_time\nanswer = customers_fewer_than_2\nprint(answer)", "# Count of customers who ate ice cream 0 times and 1 time\ncustomers_fewer_than_2 = 10 + 19\nanswer = customers_fewer_than_2\nprint(answer)", "# Define the frequency of customers based on the number of times they ate ice cream\nfrequency = {\n    0: 10,  # 0 times eaten\n    1: 19,  # 1 time eaten\n    2: 15,  # 2 times eaten\n    3: 20,  # 3 times eaten\n    4: 7,   # 4 times eaten\n    5: 2,   # 5 times eaten\n    6: 4    # 6 times eaten\n}\n\n# Calculate the number of customers who ate ice cream fewer than 2 times\ncustomers_fewer_than_2 = frequency[0] + frequency[1]\nanswer = customers_fewer_than_2\n\nprint(answer)", "frequency = {\n    0: 10,  # 0 times eaten\n    1: 19,  # 1 time eaten\n    2: 15,  # 2 times eaten\n    3: 20,  # 3 times eaten\n    4: 7,   # 4 times eaten\n    5: 2,   # 5 times eaten\n    6: 4    # 6 times eaten\n}\n\n# Calculate the number of customers who ate ice cream fewer than 2 times\ncustomers_fewer_than_2 = frequency[0] + frequency[1]\nanswer = int(customers_fewer_than_2)  # Ensure the result is an integer\nprint(answer)"
], "prediction": [29.0, 29.0, 29.0, 29.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Inn guests\" and then answer a question.\n\nDay | Number of guests\nMonday | 9\nTuesday | 9\nWednesday | 10\nThursday | 9\nFriday | 8", "question": "Read the following table regarding \"Inn guests\" and then write Python code to answer a question.\n\nDay | Number of guests\nMonday | 9\nTuesday | 9\nWednesday | 10\nThursday | 9\nFriday | 8\n\nThe owner of a bed and breakfast inn recalled how many guests the inn had hosted each day. What is the mean of the numbers?", "answer": "9", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of guests for each day\nguests = [9, 9, 10, 9, 8]\n# Calculate the mean number of guests\nmean_guests = sum(guests) / len(guests)\nanswer = mean_guests\nprint(answer)", "guests = [9, 9, 10, 9, 8]\nmean_guests = sum(guests) / len(guests)\nanswer = int(mean_guests)  # Convert to integer for clarity\nprint(answer)", "guests = [9, 9, 10, 9, 8]\nmean_guests = sum(guests) / len(guests)\nanswer = mean_guests  # Keep it as a float for accuracy\nprint(answer)", ""], "prediction": [9.0, 9.0, 9.0, null], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Laps swum\" and then answer a question.\n\nDay | Number of laps\nThursday | 5\nFriday | 10\nSaturday | 6\nSunday | 8\nMonday | 10", "question": "Read the following table regarding \"Laps swum\" and then write Python code to answer a question.\n\nDay | Number of laps\nThursday | 5\nFriday | 10\nSaturday | 6\nSunday | 8\nMonday | 10\n\nAlvin kept track of how many laps he swam during the past 5 days. What is the median of the numbers?", "answer": "8", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Number of laps swum each day\nlaps = [5, 10, 6, 8, 10]\n# Sort the laps to find the median\nlaps.sort()\n# Calculate the median\nn = len(laps)\nif n % 2 == 1:\n    median = laps[n // 2]\nelse:\n    median = (laps[n // 2 - 1] + laps[n // 2]) / 2\n\nanswer = median\nprint(answer)", "laps = [5, 10, 6, 8, 10]\nlaps.sort()\nn = len(laps)\nif n % 2 == 1:\n    median = laps[n // 2]\nelse:\n    median = (laps[n // 2 - 1] + laps[n // 2]) / 2\n\n# Convert median to an integer if it is a whole number\nanswer = int(median) if median.is_integer() else median\nprint(answer)", "laps = [5, 10, 6, 8, 10]  # List of laps swum\nlaps.sort()  # Sort the list to find the median\nn = len(laps)  # Get the number of laps\n\n# Calculate the median\nif n % 2 == 1:\n    median = laps[n // 2]  # Middle element for odd length\nelse:\n    median = (laps[n // 2 - 1] + laps[n // 2]) / 2  # Average of two middle elements for even length\n\nanswer = median  # Assign the median to the answer variable\nprint(answer)  # Output the answer", "# Define the number of laps swum\nlaps = [5, 10, 6, 8, 10]\n\n# Sort the list to find the median\nlaps.sort()\n\n# Calculate the median\nn = len(laps)\nif n % 2 == 1:\n    median = laps[n // 2]  # Middle element for odd length\nelse:\n    median = (laps[n // 2 - 1] + laps[n // 2]) / 2  # Average of two middle elements for even length\n\n# Store the median in the answer variable\nanswer = median\n\n# Output the answer\nprint(answer)"
], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Boxes of cookies sold\" and then answer a question.\n\nType | Frequency\ncoconut caramel | 5\nlemon | ?\nmint chocolate | 11\nmarshmallow | 2\npeanut butter | 9", "question": "Read the following table regarding \"Boxes of cookies sold\" and then write Python code to answer a question.\n\nType | Frequency\ncoconut caramel | 5\nlemon | ?\nmint chocolate | 11\nmarshmallow | 2\npeanut butter | 9\n\nLila sold boxes of cookies to raise money for her scout troop. She used a frequency chart to track her sales. Lila sold 1/3 as many boxes of lemon cookies as peanut butter cookies. How many boxes of lemon cookies did she sell?", "answer": "3", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Given the frequency of peanut butter cookies\npeanut_butter_cookies = 9\n# Calculate the frequency of lemon cookies\nlemon_cookies = peanut_butter_cookies / 3\nanswer = int(lemon_cookies)  # Convert to an integer\nprint(answer)", "peanut_butter_cookies = 9\nlemon_cookies = peanut_butter_cookies / 3\nanswer = int(lemon_cookies)  # Convert to an integer\nprint(answer)", "peanut_butter_cookies = 9\nlemon_cookies = peanut_butter_cookies // 3  # Use integer division to get an integer result\nanswer = lemon_cookies\nprint(answer)", "peanut_butter_cookies = 9\nlemon_cookies = peanut_butter_cookies // 3  # Use integer division to get an integer result\nanswer = lemon_cookies\nprint(answer)"], "prediction": [3.0, 3.0, 3.0, 3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Ducks per pond\" and then answer a question.\n\nStem | Leaf \n1 | 6\n2 | 8\n3 | 6\n4 | \n5 | 1, 3\n6 | \n7 | \n8 | 8\n9 | 0", "question": "Read the following table regarding \"Ducks per pond\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 6\n2 | 8\n3 | 6\n4 | \n5 | 1, 3\n6 | \n7 | \n8 | 8\n9 | 0\n\nMichelle counted the number of ducks at each pond in the city. What is the largest number of ducks?", "answer": "90", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number of ducks corresponds to the largest value in the stem-and-leaf display.\nlargest_ducks_count = 90  # From the stem \"9 | 0\", the value is 90 ducks.\nanswer = largest_ducks_count\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(1, [6]), (2, [8]), (3, [6]), (4, []), (5, [1, 3]), (6, []), (7, []), (8, [8]), (9, [0])]\n\n# Initialize a variable to keep track of the largest number of ducks\nlargest_ducks_count = 0\n\n# Iterate through the stem and leaf data structure to find the largest count\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        ducks_count = stem * 10 + leaf\n        if ducks_count > largest_ducks_count:\n            largest_ducks_count = ducks_count\n\nanswer = float(largest_ducks_count)  # Ensure the answer is a float\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [6]), (2, [8]), (3, [6]), (4, []), (5, [1, 3]), (6, []), (7, []), (8, [8]), (9, [0])]  \n  \n# Initialize variable to store the largest number of ducks  \nlargest_ducks_count = 0  \n  \n# Iterate through the stem and leaf data structure to find the largest count of ducks  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        ducks_count = stem * 10 + leaf  \n        if ducks_count > largest_ducks_count:  \n            largest_ducks_count = ducks_count  \n  \nanswer = largest_ducks_count  # Keep the answer as an integer  \nprint(answer)", "```python\n#"
], "prediction": [90.0, 90.0, 90.0, null], "report": ["Done", "Done", "Done", "SyntaxError('invalid syntax', ('<string>', 1, 1, '```python\\n', 1, 2))"]
}
{
  "context": "Read the following table regarding \"Club sizes (number of members)\" and then answer a question.\n\nStem | Leaf \n2 | 2, 4\n3 | 9\n4 | 0, 2, 3, 4, 4, 5\n5 | 0, 4, 7, 7\n6 | 0\n7 | 0, 7\n8 | 1, 4\n9 | 0", "question": "Read the following table regarding \"Club sizes (number of members)\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 2, 4\n3 | 9\n4 | 0, 2, 3, 4, 4, 5\n5 | 0, 4, 7, 7\n6 | 0\n7 | 0, 7\n8 | 1, 4\n9 | 0\n\nRon found out the sizes of all the clubs at his school. What is the size of the smallest club?", "answer": "22", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The smallest club corresponds to the smallest value in the stem-and-leaf display.\nsmallest_club_size = 22  # From the stem \"2 | 2\", the value is 22 members.\nanswer = smallest_club_size\nprint(answer)", "# Define the stem and leaf data structure as a list of tuples\nstem_and_leaf = [\n    (2, [2, 4]),\n    (3, [9]),\n    (4, [0, 2, 3, 4, 4, 5]),\n    (5, [0, 4, 7, 7]),\n    (6, [0]),\n    (7, [0, 7]),\n    (8, [1, 4]),\n    (9, [0])\n]\n\n# Initialize a variable to hold the smallest club size\nsmallest_club_size = float('inf')\n\n# Iterate through the stem and leaf data structure to find the smallest club size\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        club_size = stem * 10 + leaf\n        if club_size < smallest_club_size:\n            smallest_club_size = club_size\n\nanswer = smallest_club_size\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [\n    (2, [2, 4]),\n    (3, [9]),\n    (4, [0, 2, 3, 4, 4, 5]),\n    (5, [0, 4, 7, 7]),\n    (6, [0]),\n    (7, [0, 7]),\n    (8, [1, 4]),\n    (9, [0])\n]\n\n# Initialize variable to find the smallest club size\nsmallest_club_size = float('inf')\n\n# Iterate through the stem and leaf data structure to find the smallest club size\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        club_size = stem * 10 + leaf  # Correctly calculate the club size\n        if club_size < smallest_club_size:\n            smallest_club_size = club_size\n\nanswer = smallest_club_size\nprint(answer)", "# Define the stem and leaf data structure for club sizes\nstem_and_leaf = [\n    (2, [2, 4]),\n    (3, [9]),\n    (4, [0, 2, 3, 4, 4, 5]),\n    (5, [0, 4, 7, 7]),\n    (6, [0]),\n    (7, [0, 7]),\n    (8, [1, 4]),\n    (9, [0])\n]\n\n# Initialize the smallest club size to a very large number\nsmallest_club_size = float('inf')\n\n# Iterate through the stem and leaf data structure to find the smallest club size\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        club_size = stem * 10 + leaf  # Calculate the club size correctly\n        if club_size < smallest_club_size:\n            smallest_club_size = club_size  # Update if a smaller size is found\n\nanswer = smallest_club_size\nprint(answer)"
], "prediction": [22.0, 22.0, 22.0, 22.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Population per square mile\" and then answer a question.\n\nState | 1990 | 2000\nSouth Dakota | 9 | 10\nNorth Dakota | 9 | 9\nNevada | 10 | 18\nWyoming | 4 | 5\nMontana | 5 | 6", "question": "Read the following table regarding \"Population per square mile\" and then write Python code to answer a question.\n\nState | 1990 | 2000\nSouth Dakota | 9 | 10\nNorth Dakota | 9 | 9\nNevada | 10 | 18\nWyoming | 4 | 5\nMontana | 5 | 6\n\nWhile looking through an almanac at the library, Tucker noticed some data showing the population density of various states. How many people per square mile lived in South Dakota in 2000?", "answer": "10", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Population per square mile in South Dakota for the year 2000\nsouth_dakota_population_2000 = 10\nanswer = south_dakota_population_2000\nprint(answer)", "# Define the population density for South Dakota in the year 2000\nsouth_dakota_population_2000 = 10\n\n# Store the answer in a variable\nanswer = south_dakota_population_2000\n\n# Print the answer with context\nprint(f\"The population per square mile in South Dakota in 2000 was {answer}.\")", "south_dakota_population_2000 = 10\nanswer = south_dakota_population_2000\nprint(answer)", "south_dakota_population_2000 = 10\nanswer = f\"The population density in South Dakota in 2000 was {south_dakota_population_2000} people per square mile.\"\nprint(answer)"], "prediction": [10.0, 10.0, 10.0, "The population density in South Dakota in 2000 was 10 people per square mile."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Broken crayons per box\" and then answer a question.\n\nStem | Leaf \n2 | 3, 4, 5, 5, 8\n3 | 1, 5, 5, 6\n4 | 1, 5, 6\n5 | 6\n6 | 0, 1, 3, 8\n7 | 5, 6, 7\n8 | 8\n9 | 0", "question": "Read the following table regarding \"Broken crayons per box\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 3, 4, 5, 5, 8\n3 | 1, 5, 5, 6\n4 | 1, 5, 6\n5 | 6\n6 | 0, 1, 3, 8\n7 | 5, 6, 7\n8 | 8\n9 | 0\n\nA crayon factory monitored the number of broken crayons per box during the past day. How many boxes had at least 30 broken crayons?", "answer": "17", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The leaf plot represents the number of broken crayons per box.\n# Let's first compile the data into a list of broken crayons per box.\nbroken_crayons = [\n    23, 24, 25, 25, 28,  # 2 | 3, 4, 5, 5, 8\n    31, 35, 35, 36,      # 3 | 1, 5, 5, 6\n    41, 45, 46,          # 4 | 1, 5, 6\n    56,                   # 5 | 6\n    60, 61, 63, 68,      # 6 | 0, 1, 3, 8\n    75, 76, 77,          # 7 | 5, 6, 7\n    88,                   # 8 | 8\n    90                    # 9 | 0\n]\n\n# Count the number of boxes with at least 30 broken crayons\nboxes_with_at_least_30 = sum(1 for count in broken_crayons if count >= 30)\nanswer = boxes_with_at_least_30\nprint(answer)", "broken_crayons = [\n    23, 24, 25, 25, 28,  # 2 | 3, 4, 5, 5, 8\n    31, 35, 35, 36,      # 3 | 1, 5, 5, 6\n    41, 45, 46,          # 4 | 1, 5, 6\n    56,                   # 5 | 6\n    60, 61, 63, 68,      # 6 | 0, 1, 3, 8\n    75, 76, 77,          # 7 | 5, 6, 7\n    88,                   # 8 | 8\n    90                    # 9 | 0\n]\n\n# Count the number of boxes with at least 30 broken crayons\nboxes_with_at_least_30 = sum(1 for count in broken_crayons if count >= 30)\nanswer = int(boxes_with_at_least_30)  # Ensure the answer is an integer\nprint(answer)", "broken_crayons = [\n    23, 24, 25, 25, 28,  # 2 | 3, 4, 5, 5, 8\n    31, 35, 35, 36,      # 3 | 1, 5, 5, 6\n    41, 45, 46,          # 4 | 1, 5, 6\n    56,                   # 5 | 6\n    60, 61, 63, 68,      # 6 | 0, 1, 3, 8\n    75, 76, 77,          # 7 | 5, 6, 7\n    88,                   # 8 | 8\n    90                    # 9 | 0\n]\n\n# Count how many boxes had at least 30 broken crayons\nboxes_with_at_least_30 = sum(1 for count in broken_crayons if count >= 30)\nanswer = boxes_with_at_least_30  # No need to convert to int, it's already an integer\nprint(answer)", "broken_crayons = [\n    23, 24, 25, 25, 28,  # 2 | 3, 4, 5, 5, 8\n    31, 35, 35, 36,      # 3 | 1, 5, 5, 6\n    41, 45, 46,          # 4 | 1, 5, 6\n    56,                   # 5 | 6\n    60, 61, 63, 68,      # 6 | 0, 1, 3, 8\n    75, 76, 77,          # 7 | 5, 6, 7\n    88,                   # 8 | 8\n    90                    # 9 | 0\n]\n\nboxes_with_at_least_30 = sum(1 for count in broken_crayons if count >= 30)\nanswer = boxes_with_at_least_30  # This will be an integer\nprint(answer)"
], "prediction": [17.0, 17.0, 17.0, 17.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of shelves | Number of cups\n1 | 2\n2 | 4\n3 | 6\n4 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of shelves | Number of cups\n1 | 2\n2 | 4\n3 | 6\n4 | ?\n\nEach shelf has 2 cups. How many cups are on 4 shelves?", "answer": "8", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of cups per shelf\ncups_per_shelf = 2 \n# Number of shelves\nshelves = 4 \n# Calculate total number of cups\ntotal_cups = cups_per_shelf * shelves\nanswer = total_cups\nprint(answer)", "cups_per_shelf = 2 \nshelves = 4 \ntotal_cups = cups_per_shelf * shelves\nanswer = total_cups\nprint(int(answer))  # Convert to integer for output", "cups_per_shelf = 2 \nshelves = 4 \ntotal_cups = cups_per_shelf * shelves\nanswer = total_cups\nprint(int(answer))  # Convert to integer for output", "cups_per_shelf = 2 \nshelves = 4 \ntotal_cups = cups_per_shelf * shelves\nanswer = total_cups  # This will already be an integer\nprint(answer)  # Output the answer directly as an integer"], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Ferry fares\" and then answer a question.\n\nFerry | Car | Bicycle\nFauntleroy-Vashon | $15 | $5\nSeattle-Bremerton | $12 | $8\nMukilteu-Clinton | $7 | $5\nSouthport-Fort Fisher | $5 | $2\nOcracoke | $15 | $3", "question": "Read the following table regarding \"Ferry fares\" and then write Python code to answer a question.\n\nFerry | Car | Bicycle\nFauntleroy-Vashon | $15 | $5\nSeattle-Bremerton | $12 | $8\nMukilteu-Clinton | $7 | $5\nSouthport-Fort Fisher | $5 | $2\nOcracoke | $15 | $3\n\nFor an economics project, Mitch determined the cost of ferry rides for bicycles and cars. How much does it cost to take a bicycle on the Southport-Fort Fisher ferry?", "answer": "2", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Cost for taking a bicycle on the Southport-Fort Fisher ferry\ncost_bicycle_southport_fort_fisher = 2\nanswer = cost_bicycle_southport_fort_fisher\nprint(answer)", "# Define the cost of taking a bicycle on the Southport-Fort Fisher ferry\ncost_bicycle_southport_fort_fisher = 2.00\n\n# Assign the cost to the answer variable for clarity\nanswer = f\"${cost_bicycle_southport_fort_fisher:.2f}\"\n\n# Print the answer\nprint(answer)", "# Define the ferry fares as a dictionary\nferry_fares = {\n    'Fauntleroy-Vashon': {'Car': 15, 'Bicycle': 5},\n    'Seattle-Bremerton': {'Car': 12, 'Bicycle': 8},\n    'Mukilteu-Clinton': {'Car': 7, 'Bicycle': 5},\n    'Southport-Fort Fisher': {'Car': 5, 'Bicycle': 2},\n    'Ocracoke': {'Car': 15, 'Bicycle': 3}\n}\n\n# Get the cost of taking a bicycle on the Southport-Fort Fisher ferry\ncost_bicycle_southport_fort_fisher = ferry_fares['Southport-Fort Fisher']['Bicycle']\nanswer = f\"${cost_bicycle_southport_fort_fisher:.2f}\"\nprint(answer)", "# Define ferry fares in a dictionary\nferry_fares = {\n    'Fauntleroy-Vashon': {'Car': 15, 'Bicycle': 5},\n    'Seattle-Bremerton': {'Car': 12, 'Bicycle': 8},\n    'Mukilteu-Clinton': {'Car': 7, 'Bicycle': 5},\n    'Southport-Fort Fisher': {'Car': 5, 'Bicycle': 2},\n    'Ocracoke': {'Car': 15, 'Bicycle': 3}\n}\n\n# Get the cost of taking a bicycle on the Southport-Fort Fisher ferry\ncost_bicycle_southport_fort_fisher = ferry_fares['Southport-Fort Fisher']['Bicycle']\n\n# Assign the numeric value to the answer variable\nanswer = cost_bicycle_southport_fort_fisher\n\n# Print the answer\nprint(answer)"
], "prediction": [2.0, "$2.00", "$2.00", 2.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Festival schedule\" and then answer a question.\n\nEvent | Begin | End\nbanquet | 10:55 A.M. | 12:35 P.M.\nband concert | 12:40 P.M. | 2:00 P.M.\nchoir concert | 1:45 P.M. | 3:55 P.M.\naward ceremony | 3:20 P.M. | 4:30 P.M.\ndance performance | 4:20 P.M. | 5:25 P.M.\ndrumming performance | 5:35 P.M. | 7:55 P.M.", "question": "Read the following table regarding \"Festival schedule\" and then write Python code to answer a question.\n\nEvent | Begin | End\nbanquet | 10:55 A.M. | 12:35 P.M.\nband concert | 12:40 P.M. | 2:00 P.M.\nchoir concert | 1:45 P.M. | 3:55 P.M.\naward ceremony | 3:20 P.M. | 4:30 P.M.\ndance performance | 4:20 P.M. | 5:25 P.M.\ndrumming performance | 5:35 P.M. | 7:55 P.M.\n\nLook at the following schedule. When does the banquet end? Choose from the the options: ['12:35 P.M.', '7:55 P.M.', '5:25 P.M.', '2:00 P.M.']", "answer": "12:35 P.M.", "ques_type": "multi_choice", "choices": ["12:35 P.M.", "7:55 P.M.", "5:25 P.M.", "2:00 P.M."], "code": ["# Python code, return answer \nbanquet_end_time = '12:35 P.M.' \nanswer = banquet_end_time\nprint(answer)", "# Define the end time of the banquet\nbanquet_end_time = '12:35 P.M.'\n\n# Store the answer in the variable 'answer'\nanswer = banquet_end_time\n\n# Print the answer\nprint(answer)", "# Define the end time of the banquet\nbanquet_end_time = '12:35 P.M.'\n\n# Define the options\noptions = ['12:35 P.M.', '7:55 P.M.', '5:25 P.M.', '2:00 P.M.']\n\n# Check if the banquet end time is in the options\nif banquet_end_time in options:\n    answer = banquet_end_time\nelse:\n    answer = None  # If the answer is not in the options, we can set it to None or handle it accordingly\n\nprint(answer)", "# The end time of the banquet\nbanquet_end_time = '12:35 P.M.'\n\n# Since we know the correct end time, we can directly assign it to the answer variable\nanswer = banquet_end_time\n\nprint(answer)"], "prediction": ["12:35 P.M.", "12:35 P.M.", "12:35 P.M.", "12:35 P.M."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nruby bracelet | $4,256.00\npearl necklace | $1,622.00\ndiamond pendant | $9,221.00\nopal pendant | $3,234.00\nsapphire pendant | $7,084.00\nemerald ring | $5,419.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nruby bracelet | $4,256.00\npearl necklace | $1,622.00\ndiamond pendant | $9,221.00\nopal pendant | $3,234.00\nsapphire pendant | $7,084.00\nemerald ring | $5,419.00\n\nHow much money does Ariana need to buy 3 emerald rings and 7 sapphire pendants?", "answer": "65,845", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nprice_emerald_ring = 5419.00\nprice_sapphire_pendant = 7084.00\n\n# Calculate the total cost for 3 emerald rings and 7 sapphire pendants\ntotal_cost = (3 * price_emerald_ring) + (7 * price_sapphire_pendant)\nanswer = total_cost\nprint(answer)", "# Define the prices of the items\nprice_emerald_ring = 5419.00\nprice_sapphire_pendant = 7084.00\n\n# Calculate the total cost for 3 emerald rings and 7 sapphire pendants\ntotal_cost = (3 * price_emerald_ring) + (7 * price_sapphire_pendant)\n\n# Store the result in the variable 'answer'\nanswer = total_cost\nprint(answer)", "# Define the prices of the items\nprice_emerald_ring = 5419.00\nprice_sapphire_pendant = 7084.00\n\n# Calculate the total cost for 3 emerald rings and 7 sapphire pendants\ntotal_cost = (3 * price_emerald_ring) + (7 * price_sapphire_pendant)\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "# Define the prices of the items\nprice_emerald_ring = 5419.00\nprice_sapphire_pendant = 7084.00\n\n# Calculate the total cost for 3 emerald rings and 7 sapphire pendants\ntotal_cost = (3 * price_emerald_ring) + (7 * price_sapphire_pendant)\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)"], "prediction": [65845.0, 65845.0, 65845.0, 65845.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Quiz scores\" and then answer a question.\n\nStem | Leaf \n1 | 3, 9\n2 | 4, 6, 9\n3 | 2, 3, 6, 6, 7\n4 | 9\n5 | 1, 1, 4, 6, 6, 7, 8\n6 | 0, 1, 7, 7\n7 | 2, 6", "question": "Read the following table regarding \"Quiz scores\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 3, 9\n2 | 4, 6, 9\n3 | 2, 3, 6, 6, 7\n4 | 9\n5 | 1, 1, 4, 6, 6, 7, 8\n6 | 0, 1, 7, 7\n7 | 2, 6\n\nMs. Lester reported her students' scores on the most recent quiz. What is the lowest score?", "answer": "13", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The lowest score corresponds to the smallest value in the stem-and-leaf display.\nlowest_score = 13  # From the stem \"1 | 3\", the value is 13.\nanswer = lowest_score\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [3, 9]), (2, [4, 6, 9]), (3, [2, 3, 6, 6, 7]), (4, [9]), (5, [1, 1, 4, 6, 6, 7, 8]), (6, [0, 1, 7, 7]), (7, [2, 6])]  \n\n# Initialize variable for the lowest score  \nlowest_score = float('inf')  \n\n# Iterate through the stem and leaf data structure to find the lowest score  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        score = stem * 10 + leaf  \n        if score < lowest_score:  \n            lowest_score = score  \n\nanswer = lowest_score  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [3, 9]), (2, [4, 6, 9]), (3, [2, 3, 6, 6, 7]), (4, [9]), (5, [1, 1, 4, 6, 6, 7, 8]), (6, [0, 1, 7, 7]), (7, [2, 6])]  \n\n# Initialize variable for the lowest score  \nlowest_score = float('inf')  \n\n# Iterate through the stem and leaf data structure and find the lowest score  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        score = stem * 10 + leaf  # Calculate the score  \n        if score < lowest_score:  # Update if a new lowest score is found  \n            lowest_score = score  \n\nanswer = lowest_score  # Store the lowest score in the answer variable  \nprint(answer)  # Output the answer", "# Define the stem and leaf data structure\nstem_and_leaf = [(1, [3, 9]), (2, [4, 6, 9]), (3, [2, 3, 6, 6, 7]), (4, [9]), (5, [1, 1, 4, 6, 6, 7, 8]), (6, [0, 1, 7, 7]), (7, [2, 6])]  \n\n# Initialize the variable for the lowest score\nlowest_score = float('inf')  \n\n# Iterate through the stem and leaf data structure to find the lowest score\nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        score = stem * 10 + leaf  # Calculate the score\n        if score < lowest_score:  # Update if a new lowest score is found  \n            lowest_score = score  \n\nanswer = lowest_score  # Store the lowest score in the answer variable  \nprint(answer)  # Output the answer"
], "prediction": [13.0, 13.0, 13.0, 13.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nmountain-biking adventure package | $733.00\ndeep-sea fishing package | $348.00\nsurfing adventure package | $979.00\nwhale-watching adventure package | $530.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nmountain-biking adventure package | $733.00\ndeep-sea fishing package | $348.00\nsurfing adventure package | $979.00\nwhale-watching adventure package | $530.00\n\nHow much more does a surfing adventure package cost than a mountain-biking adventure package?", "answer": "246", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_mountain_biking = 733.00 \ncost_surfing_adventure = 979.00 \n# Calculate the difference in cost\ndifference = cost_surfing_adventure - cost_mountain_biking\nanswer = difference\nprint(answer)", "# Define the costs of the adventure packages\ncost_mountain_biking = 733.00 \ncost_surfing_adventure = 979.00 \n\n# Calculate the difference in cost\ndifference = cost_surfing_adventure - cost_mountain_biking\n\n# Store the result in the variable 'answer'\nanswer = difference\n\n# Print the answer\nprint(answer)", "# Define the costs of the adventure packages\ncost_mountain_biking = 733.00 \ncost_surfing_adventure = 979.00 \n\n# Calculate the difference in cost\ndifference = cost_surfing_adventure - cost_mountain_biking\n\n# Store the result in the variable 'answer'\nanswer = difference\n\n# Print the answer\nprint(answer)", "cost_mountain_biking = 733.00 \ncost_surfing_adventure = 979.00 \ndifference = cost_surfing_adventure - cost_mountain_biking\nanswer = f\"The surfing adventure package costs ${difference:.2f} more than the mountain-biking adventure package.\"\nprint(answer)"], "prediction": [246.0, 246.0, 246.0, "The surfing adventure package costs $246.00 more than the mountain-biking adventure package."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n4 | 18\n7 | 17\n8 | 4", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n4 | 18\n7 | 17\n8 | 4\n\nLook at this table. Is this relation a function? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# A relation is a function if each input (x) maps to exactly one output (y).\n# Here, we check the unique x values in the table.\nx_values = [4, 7, 8]\n# Since all x values are unique, the relation is a function\nis_function = len(x_values) == len(set(x_values))\n\nif is_function:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "# Define the relation as a list of tuples (x, y)\nrelation = [(4, 18), (7, 17), (8, 4)]\n\n# Create a dictionary to track the mapping of x to y\nmapping = {}\n\n# Check if the relation is a function\nis_function = True\nfor x, y in relation:\n    if x in mapping:\n        if mapping[x] != y:  # If x is already mapped to a different y\n            is_function = False\n            break\n    else:\n        mapping[x] = y\n\n# Assign the answer based on whether it is a function or not\nif is_function:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "relation = [(4, 18), (7, 17), (8, 4)]\nmapping = {}\nis_function = True\n\nfor x, y in relation:\n    if x in mapping:\n        if mapping[x] != y:  # If x is already mapped to a different y\n            is_function = False\n            break\n    else:\n        mapping[x] = y\n\nanswer = 'yes' if is_function else 'no'\nprint(answer)", "# Define the relation as a list of tuples\nrelation = [(4, 18), (7, 17), (8, 4)]\n\n# Initialize a mapping dictionary to track the relationship\nmapping = {}\nis_function = True\n\n# Check if the relation is a function\nfor x, y in relation:\n    if x in mapping:\n        if mapping[x] != y:  # If x is already mapped to a different y\n            is_function = False\n            break\n    else:\n        mapping[x] = y\n\n# Determine the answer based on whether it's a function or not\nanswer = 'yes' if is_function else 'no'\n\nprint(answer)"
], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n0 | 7\n1 | 11\n2 | 15", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n0 | 7\n1 | 11\n2 | 15\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "linear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for equal changes in x-values.\ny_values = [7, 11, 15]\nx_values = [0, 1, 2]\n\n# Calculate the differences\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n# If the differences are constant, it's linear\nis_linear = all(diff == differences[0] for diff in differences)\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the y values corresponding to the x values\ny_values = [7, 11, 15]\nx_values = [0, 1, 2]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i + 1] - y_values[i] for i in range(len(y_values) - 1)]\n\n# Check if all differences are the same to determine if the function is linear\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Assign the result to the answer variable\nanswer = 'linear' if is_linear else 'nonlinear'\n\nprint(answer)", "# Define the x and y values\ny_values = [7, 11, 15]\nx_values = [0, 1, 2]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if all differences are the same\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Assign the result based on whether the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the y values based on the given table\ny_values = [7, 11, 15]\nx_values = [0, 1, 2]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i + 1] - y_values[i] for i in range(len(y_values) - 1)]\n\n# Check if all differences are the same\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Assign the answer based on whether the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nDVD player | $76.00\nDVD | $12.00\nblender | $20.00\ncalculator | $73.00\ncell phone | $81.00\ncamera | $81.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nDVD player | $76.00\nDVD | $12.00\nblender | $20.00\ncalculator | $73.00\ncell phone | $81.00\ncamera | $81.00\n\nHow much money does Myra need to buy a DVD player and a DVD?", "answer": "88", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ndvd_player_price = 76.00\ndvd_price = 12.00\n# Total amount needed to buy both\ntotal_cost = dvd_player_price + dvd_price\nanswer = total_cost\nprint(answer)", "# Prices of items\ndvd_player_price = 76.00\ndvd_price = 12.00\n\n# Calculate total cost\ntotal_cost = dvd_player_price + dvd_price\n\n# Assign the result to the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the prices for the items\ndvd_player_price = 76.00\ndvd_price = 12.00\n\n# Calculate the total cost\ntotal_cost = dvd_player_price + dvd_price\n\n# Format the total cost as currency\nanswer = \"${:,.2f}\".format(total_cost)\n\n# Output the answer\nprint(answer)", ""], "prediction": [88.0, 88.0, "$88.00", null], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nhammock | $99\nfountain | $76\nleaf blower | $80\nrosebush | $32", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nhammock | $99\nfountain | $76\nleaf blower | $80\nrosebush | $32\n\nHow much more does a leaf blower cost than a fountain?", "answer": "4", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_leaf_blower = 80 \ncost_fountain = 76 \n# Calculate the difference in cost\ndifference = cost_leaf_blower - cost_fountain\nanswer = difference\nprint(answer)", "cost_leaf_blower = 80 \ncost_fountain = 76 \nanswer = cost_leaf_blower - cost_fountain\nprint(answer)", "cost_leaf_blower = 80 \ncost_fountain = 76 \nanswer = cost_leaf_blower - cost_fountain\nprint(answer)", "cost_leaf_blower = 80 \ncost_fountain = 76 \nanswer = cost_leaf_blower - cost_fountain\nprint(answer)"], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Donations received\" and then answer a question.\n\nCause | May | June\nParks | $2 | $12\nMedical research | $8 | $20\nHunger | $7 | $2\nAnimals | $18 | $4\nEducation | $17 | $1", "question": "Read the following table regarding \"Donations received\" and then write Python code to answer a question.\n\nCause | May | June\nParks | $2 | $12\nMedical research | $8 | $20\nHunger | $7 | $2\nAnimals | $18 | $4\nEducation | $17 | $1\n\nA county agency recorded the money donated to several charitable causes over time. In May, how much more money was raised for animals than for medical research?", "answer": "10", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Donations in May for animals and medical research\ndonations_animals_may = 18\ndonations_medical_research_may = 8\n# Calculate the difference\ndifference = donations_animals_may - donations_medical_research_may\nanswer = difference\nprint(answer)", "# Define the donations received for each cause in May\ndonations = {\n    'Parks': 2,\n    'Medical research': 8,\n    'Hunger': 7,\n    'Animals': 18,\n    'Education': 17\n}\n\n# Calculate the difference in donations between Animals and Medical research in May\ndonations_animals_may = donations['Animals']\ndonations_medical_research_may = donations['Medical research']\ndifference = donations_animals_may - donations_medical_research_may\n\n# Store the result in the variable 'answer'\nanswer = difference\nprint(answer)", "# Store the donations in a dictionary with float values for currency representation\ndonations = {\n    'Parks': 2.00,\n    'Medical research': 8.00,\n    'Hunger': 7.00,\n    'Animals': 18.00,\n    'Education': 17.00\n}\n\n# Calculate the difference in donations between animals and medical research\ndonations_animals_may = donations['Animals']\ndonations_medical_research_may = donations['Medical research']\ndifference = donations_animals_may - donations_medical_research_may\n\n# Format the answer as currency\nanswer = f\"${difference:.2f}\"\nprint(answer)", "# Define the donations for each cause in May\ndonations = {\n    'Parks': 2.00,\n    'Medical research': 8.00,\n    'Hunger': 7.00,\n    'Animals': 18.00,\n    'Education': 17.00\n}\n\n# Calculate the difference in donations between animals and medical research\ndonations_animals_may = donations['Animals']\ndonations_medical_research_may = donations['Medical research']\ndifference = donations_animals_may - donations_medical_research_may\n\n# Store the result in the answer variable\nanswer = difference  # Store as a numerical value\nprint(answer)"
], "prediction": [10.0, 10.0, "$10.00", 10.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Spelling test scores\" and then answer a question.\n\nStem | Leaf \n3 | 1, 6, 7\n4 | 4, 7, 8\n5 | 0, 2\n6 | 3, 4, 4, 7, 8, 9\n7 | 2\n8 | 1, 2, 6, 8\n9 | 0", "question": "Read the following table regarding \"Spelling test scores\" and then write Python code to answer a question.\n\nStem | Leaf \n3 | 1, 6, 7\n4 | 4, 7, 8\n5 | 0, 2\n6 | 3, 4, 4, 7, 8, 9\n7 | 2\n8 | 1, 2, 6, 8\n9 | 0\n\nThis morning, Mr. Kline released the scores from last week's spelling test. How many students scored at least 55 points?", "answer": "12", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The scores from the stem-and-leaf display are as follows:\nscores = [31, 36, 37, 44, 47, 48, 50, 52, 63, 64, 64, 67, 68, 69, 72, 81, 82, 86, 88, 90]\n\n# Count how many students scored at least 55 points\nstudents_scored_above_55 = sum(score >= 55 for score in scores)\nanswer = students_scored_above_55\nprint(answer)", "# Define the scores from the spelling test\nscores = [31, 36, 37, 44, 47, 48, 50, 52, 63, 64, 64, 67, 68, 69, 72, 81, 82, 86, 88, 90]\n\n# Count the number of students who scored at least 55 points\nstudents_scored_above_55 = sum(score >= 55 for score in scores)\n\n# Store the result in the variable 'answer'\nanswer = students_scored_above_55\n\n# Print the result\nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [\n    (3, [1, 6, 7]),\n    (4, [4, 7, 8]),\n    (5, [0, 2]),\n    (6, [3, 4, 4, 7, 8, 9]),\n    (7, [2]),\n    (8, [1, 2, 6, 8]),\n    (9, [0])\n]\n\n# Initialize a counter for students who scored at least 55 points\nstudents_scored_above_55 = 0\n\n# Iterate through the stem and leaf data structure and count relevant scores\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        score = stem * 10 + leaf  # Convert stem and leaf to actual score\n        if score >= 55:  # Check if the score is at least 55\n            students_scored_above_55 += 1\n\nanswer = students_scored_above_55\nprint(answer)", "stem_and_leaf = [\n    (3, [1, 6, 7]),\n    (4, [4, 7, 8]),\n    (5, [0, 2]),\n    (6, [3, 4, 4, 7, 8, 9]),\n    (7, [2]),\n    (8, [1, 2, 6, 8]),\n    (9, [0])\n]\n\nstudents_scored_above_55 = 0\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        score = stem * 10 + leaf  # Convert stem and leaf to actual score\n        if score >= 55:  # Check if the score is at least 55\n            students_scored_above_55 += 1\n\nanswer = students_scored_above_55  # This will remain an integer\nprint(answer)"
], "prediction": [12.0, 12.0, 12.0, 12.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Winning relay times\" and then answer a question.\n\nYear | Winning time (minutes)\n2016 | 31\n2017 | 35\n2018 | 37\n2019 | 28\n2020 | 34", "question": "Read the following table regarding \"Winning relay times\" and then write Python code to answer a question.\n\nYear | Winning time (minutes)\n2016 | 31\n2017 | 35\n2018 | 37\n2019 | 28\n2020 | 34\n\nEvery year Salem has a citywide relay and reports the winning times. According to the table, what was the rate of change between 2016 and 2017?", "answer": "4", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Winning times for the specified years\ntime_2016 = 31 \ntime_2017 = 35 \n# Calculate the rate of change\nrate_of_change = time_2017 - time_2016\nanswer = rate_of_change\nprint(answer)", "# Define winning times for the years 2016 and 2017\ntime_2016 = 31\ntime_2017 = 35\n\n# Calculate the change in winning time\nchange_in_time = time_2017 - time_2016\n\n# Since we want the rate of change, we can express it as a change in time per year\n# In this case, the time difference is for one year, so we can just use the change\nrate_of_change = change_in_time\n\n# Store the result in the variable 'answer'\nanswer = rate_of_change\nprint(answer)", "# Define the winning times for 2016 and 2017\ntime_2016 = 31\ntime_2017 = 35\n\n# Calculate the change in time\nchange_in_time = time_2017 - time_2016\n\n# Since the change is over 1 year, the rate of change is the same as change_in_time\nrate_of_change = change_in_time / 1  # or simply change_in_time\n\n# Store the result in the variable 'answer'\nanswer = rate_of_change\n\n# Output the answer\nprint(answer)", "time_2016 = 31\ntime_2017 = 35\nchange_in_time = time_2017 - time_2016\nrate_of_change = change_in_time  # Since it's one year, we can directly use the change\nanswer = rate_of_change\nprint(answer)"
], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nwhistle | $0.97\nred balloon | $0.19\nnoisemaker | $0.61\nfancy ribbon | $0.31\nparty hat | $0.64", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nwhistle | $0.97\nred balloon | $0.19\nnoisemaker | $0.61\nfancy ribbon | $0.31\nparty hat | $0.64\n\nHow much money does Haley need to buy a fancy ribbon and a red balloon?", "answer": "0.50", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_fancy_ribbon = 0.31 \nprice_red_balloon = 0.19 \n# Calculate total cost\ntotal_cost = price_fancy_ribbon + price_red_balloon\nanswer = total_cost\nprint(answer)", "price_fancy_ribbon = 0.31 \nprice_red_balloon = 0.19 \ntotal_cost = price_fancy_ribbon + price_red_balloon\nanswer = round(total_cost, 2)  # Rounding to two decimal places for currency formatting\nprint(f\"${answer:.2f}\")  # Formatting the output as currency", "# Define the prices of the items\nprice_fancy_ribbon = 0.31\nprice_red_balloon = 0.19\n\n# Calculate the total cost\ntotal_cost = price_fancy_ribbon + price_red_balloon\n\n# Store the result in the answer variable\nanswer = round(total_cost, 2)  # Rounding to two decimal places for currency formatting\n\n# Output the answer formatted as currency\nprint(f\"${answer:.2f}\")", "# Prices of the items\nprice_fancy_ribbon = 0.31\nprice_red_balloon = 0.19\n\n# Calculate total cost\ntotal_cost = price_fancy_ribbon + price_red_balloon\n\n# Store the result in the variable 'answer'\nanswer = round(total_cost, 2)  # Rounding to two decimal places for currency formatting\n\n# Output the result\nprint(answer)"], "prediction": [0.5, 0.5, 0.5, 0.5], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Computers in classrooms\" and then answer a question.\n\nTeacher | Number of computers\nMrs. Tan | 11\nMr. Morales | 18\nMr. Watson | 18\nMrs. Jansen | 16\nMr. Schmidt | 13\nMs. Rojas | 16\nMrs. Rossi | 13", "question": "Read the following table regarding \"Computers in classrooms\" and then write Python code to answer a question.\n\nTeacher | Number of computers\nMrs. Tan | 11\nMr. Morales | 18\nMr. Watson | 18\nMrs. Jansen | 16\nMr. Schmidt | 13\nMs. Rojas | 16\nMrs. Rossi | 13\n\nThe teachers at a middle school counted how many computers they had in their classrooms. What is the mean of the numbers?", "answer": "15", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of computers for each teacher\ncomputers = [11, 18, 18, 16, 13, 16, 13]\n# Calculate the mean\nmean_computers = sum(computers) / len(computers)\nanswer = mean_computers\nprint(answer)", "computers = [11, 18, 18, 16, 13, 16, 13]\nmean_computers = sum(computers) / len(computers)\nanswer = round(mean_computers, 2)  # Rounding to 2 decimal places for better clarity\nprint(answer)", "# List of the number of computers in each classroom\ncomputers = [11, 18, 18, 16, 13, 16, 13]\n\n# Calculate the mean of the numbers\nmean_computers = sum(computers) / len(computers)\n\n# Store the result in the answer variable\nanswer = mean_computers  # No need to round since it's already clear\n\n# Print the answer\nprint(answer)", "# List of the number of computers in each teacher's classroom\ncomputers = [11, 18, 18, 16, 13, 16, 13]\n\n# Calculate the mean of the numbers\nmean_computers = sum(computers) / len(computers)\n\n# Store the result in the variable 'answer'\nanswer = mean_computers\n\n# Print the answer\nprint(answer)"], "prediction": [15.0, 15.0, 15.0, 15.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Clarksville arts education budget\" and then answer a question.\n\nYear | Per-student budget\n2016 | $28\n2017 | $23\n2018 | $22\n2019 | $19\n2020 | $25", "question": "Read the following table regarding \"Clarksville arts education budget\" and then write Python code to answer a question.\n\nYear | Per-student budget\n2016 | $28\n2017 | $23\n2018 | $22\n2019 | $19\n2020 | $25\n\nIn hopes of raising more funds for arts education, some parents in the Clarksville School District publicized the current per-student arts education budget. According to the table, what was the rate of change between 2019 and 2020?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Per-student budget for the years in question\nbudget_2019 = 19\nbudget_2020 = 25\n\n# Calculate the rate of change\nrate_of_change = budget_2020 - budget_2019\nanswer = rate_of_change\nprint(answer)", "budget_2019 = 19\nbudget_2020 = 25\nchange_in_budget = budget_2020 - budget_2019\nrate_of_change = (change_in_budget / budget_2019) * 100\nanswer = rate_of_change\nprint(answer)", "budget_2019 = 19\nbudget_2020 = 25\nchange_in_budget = budget_2020 - budget_2019\nrate_of_change = (change_in_budget / budget_2019) * 100\nanswer = round(rate_of_change, 2)  # rounding to two decimal places\nprint(f\"The rate of change between 2019 and 2020 is {answer}%\")", "# Define the per-student budgets for the years 2019 and 2020\nbudget_2019 = 19\nbudget_2020 = 25\n\n# Calculate the change in budget\nchange_in_budget = budget_2020 - budget_2019\n\n# Calculate the rate of change\nrate_of_change = (change_in_budget / budget_2019) * 100\n\n# Store the result in the variable 'answer' rounded to two decimal places\nanswer = round(rate_of_change, 2)\n\nprint(answer)  # Output the answer"], "prediction": [6.0, 31.57895, 31.58, 31.58], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nticket for an Australian cruise | $3,530\nticket for a Mediterranean cruise | $3,996\nticket for a Hawaiian cruise | $9,448\nticket for an Alaskan cruise | $4,136\nticket for a Caribbean cruise | $4,761", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nticket for an Australian cruise | $3,530\nticket for a Mediterranean cruise | $3,996\nticket for a Hawaiian cruise | $9,448\nticket for an Alaskan cruise | $4,136\nticket for a Caribbean cruise | $4,761\n\nHow much money does Aisha need to buy 8 tickets for a Caribbean cruise?", "answer": "38,088", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nticket_price_caribbean = 4761  # price for one Caribbean cruise ticket\nnumber_of_tickets = 8  # number of tickets Aisha wants to buy\ntotal_cost = ticket_price_caribbean * number_of_tickets  # total cost for 8 tickets\nanswer = total_cost\nprint(answer)", "# Define the price for one Caribbean cruise ticket  \nticket_price_caribbean = 4761  \n\n# Define the number of tickets Aisha wants to buy  \nnumber_of_tickets = 8  \n\n# Calculate the total cost for the tickets  \ntotal_cost = ticket_price_caribbean * number_of_tickets  \n\n# Store the result in the variable 'answer'  \nanswer = total_cost  \n\n# Output the answer  \nprint(answer)", "ticket_price_caribbean = 4761  \nnumber_of_tickets = 8  \ntotal_cost = ticket_price_caribbean * number_of_tickets  \nanswer = f\"${total_cost:,.2f}\"  # Format as currency  \nprint(answer)", "ticket_price_caribbean = 4761  \nnumber_of_tickets = 8  \ntotal_cost = ticket_price_caribbean * number_of_tickets  \nanswer = f\"${total_cost:,.2f}\"  # Format as currency  \nprint(answer)  # This line will print the answer"], "prediction": [38088.0, 38088.0, "$38,088.00", "$38,088.00"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Pieces of pepperoni per pizza\" and then answer a question.\n\nStem | Leaf \n1 | 0, 0, 1, 3, 8, 8\n2 | 0, 1, 1, 2, 9, 9\n3 | 1, 3, 3, 6, 6, 6\n4 | 1, 2, 9", "question": "Read the following table regarding \"Pieces of pepperoni per pizza\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 0, 0, 1, 3, 8, 8\n2 | 0, 1, 1, 2, 9, 9\n3 | 1, 3, 3, 6, 6, 6\n4 | 1, 2, 9\n\nGrayson counted the number of pieces of pepperoni on each pizza he made. What is the smallest number of pieces of pepperoni?", "answer": "10", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The smallest number of pieces of pepperoni corresponds to the smallest value in the stem-and-leaf display.\nsmallest_pepperoni = 10  # From the stem \"1 | 0\", the value is 10 pieces.\nanswer = smallest_pepperoni\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [0, 0, 1, 3, 8, 8]), \n                 (2, [0, 1, 1, 2, 9, 9]), \n                 (3, [1, 3, 3, 6, 6, 6]), \n                 (4, [1, 2, 9])]  \n  \n# Initialize a variable to hold the smallest number of pieces of pepperoni  \nsmallest_pepperoni = float('inf')  \n  \n# Iterate through the stem and leaf data structure to find the smallest value  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        pieces_of_pepperoni = stem * 10 + leaf  \n        if pieces_of_pepperoni < smallest_pepperoni:  \n            smallest_pepperoni = pieces_of_pepperoni  \n  \nanswer = smallest_pepperoni  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [0, 0, 1, 3, 8, 8]), \n                 (2, [0, 1, 1, 2, 9, 9]), \n                 (3, [1, 3, 3, 6, 6, 6]), \n                 (4, [1, 2, 9])]  \n\n# Initialize variable to track the smallest number of pieces of pepperoni  \nsmallest_pepperoni = float('inf')  \n\n# Iterate through the stem and leaf data structure to find the smallest pepperoni count  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        pieces_of_pepperoni = stem * 10 + leaf  \n        if pieces_of_pepperoni < smallest_pepperoni:  \n            smallest_pepperoni = pieces_of_pepperoni  \n\n# Store the result in the answer variable as an integer  \nanswer = int(smallest_pepperoni)  \nprint(answer)", "stem_and_leaf = [(1, [0, 0, 1, 3, 8, 8]), \n                 (2, [0, 1, 1, 2, 9, 9]), \n                 (3, [1, 3, 3, 6, 6, 6]), \n                 (4, [1, 2, 9])]\n\nsmallest_pepperoni = float('inf')  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        pieces_of_pepperoni = stem * 10 + leaf  \n        if pieces_of_pepperoni < smallest_pepperoni:  \n            smallest_pepperoni = pieces_of_pepperoni  \n\nanswer = int(smallest_pepperoni)  # Convert to integer\nprint(answer)"
], "prediction": [10.0, 10.0, 10.0, 10.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nwalnuts | $8/pound\ncashews | $8/pound\nhazelnuts | $4/pound\npecans | $6/pound\nalmonds | $4/pound\npeanuts | $2/pound", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nwalnuts | $8/pound\ncashews | $8/pound\nhazelnuts | $4/pound\npecans | $6/pound\nalmonds | $4/pound\npeanuts | $2/pound\n\nWhat is the total cost for 1.6 pounds of cashews?", "answer": "12.80", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_cashews = 8 \npounds_bought = 1.6 \n# Calculate total cost\ntotal_cost = price_per_pound_cashews * pounds_bought\nanswer = total_cost\nprint(answer)", "# Define the price per pound for cashews and the amount bought\nprice_per_pound_cashews = 8 \npounds_bought = 1.6 \n\n# Calculate the total cost\ntotal_cost = price_per_pound_cashews * pounds_bought\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the price per pound of cashews and the amount purchased\nprice_per_pound_cashews = 8  \npounds_bought = 1.6  \n\n# Calculate the total cost\ntotal_cost = price_per_pound_cashews * pounds_bought  \n\n# Store the result in the variable 'answer'\nanswer = total_cost  \n\n# Print the answer\nprint(answer)", "# Define the price per pound for cashews and the amount purchased\nprice_per_pound_cashews = 8  \npounds_bought = 1.6  \n\n# Calculate the total cost\ntotal_cost = price_per_pound_cashews * pounds_bought  \n\n# Store the result in the answer variable\nanswer = total_cost  \n\n# Output the result\nprint(answer)"], "prediction": [12.8, 12.8, 12.8, 12.8], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Train schedule\" and then answer a question.\n\nComfy Pillows Resort | 2:30 A.M. | 11:15 A.M. | 9:00 P.M.\nPleasant River Campground | 3:30 A.M. | 12:15 P.M. | 10:00 P.M.\nFloral Gardens | 4:15 A.M. | 1:00 P.M. | 10:45 P.M.\nMagician Village | 5:00 A.M. | 1:45 P.M. | 11:30 P.M.\nSkyscraper City | 5:45 A.M. | 2:30 P.M. | 12:15 A.M.\nGecko Paradise | 6:30 A.M. | 3:15 P.M. | 1:00 A.M.\nRocky Ravine Town | 7:30 A.M. | 4:15 P.M. | 2:00 A.M.", "question": "Read the following table regarding \"Train schedule\" and then write Python code to answer a question.\n\nComfy Pillows Resort | 2:30 A.M. | 11:15 A.M. | 9:00 P.M.\nPleasant River Campground | 3:30 A.M. | 12:15 P.M. | 10:00 P.M.\nFloral Gardens | 4:15 A.M. | 1:00 P.M. | 10:45 P.M.\nMagician Village | 5:00 A.M. | 1:45 P.M. | 11:30 P.M.\nSkyscraper City | 5:45 A.M. | 2:30 P.M. | 12:15 A.M.\nGecko Paradise | 6:30 A.M. | 3:15 P.M. | 1:00 A.M.\nRocky Ravine Town | 7:30 A.M. | 4:15 P.M. | 2:00 A.M.\n\nLook at the following schedule. Gabby is at Comfy Pillows Resort. If she wants to arrive at Magician Village at 11.30 P.M., what time should she get on the train? Choose from the the options: ['11:30 P.M.', '4:15 P.M.', '12:15 A.M.', '9:00 P.M.']", "answer": "9:00 P.M.", "ques_type": "multi_choice", "choices": ["11:30 P.M.", "4:15 P.M.", "12:15 A.M.", "9:00 P.M."], "code": [
  "# Python code, return answer \n# Gabby is at Comfy Pillows Resort and wants to arrive at Magician Village at 11:30 P.M.\n# Looking for the time she should get on the train from the schedule.\n\n# Train schedule for Comfy Pillows Resort\ntrain_times_comfy_pillows = [\"2:30 A.M.\", \"11:15 A.M.\", \"9:00 P.M.\"]\n\n# From the schedule, the last train time before 11:30 P.M. is 9:00 P.M.\nanswer = '9:00 P.M.'\nprint(answer)", "# Define the train schedule for Comfy Pillows Resort\ntrain_times_comfy_pillows = [\"2:30 A.M.\", \"11:15 A.M.\", \"9:00 P.M.\"]\n\n# Define the arrival time at Magician Village\narrival_time_magician_village = \"11:30 P.M.\"\n\n# Define the train schedule for Magician Village\ntrain_times_magician_village = [\"5:00 A.M.\", \"1:45 P.M.\", \"11:30 P.M.\"]\n\n# Gabby needs to take a train that arrives at Magician Village by 11:30 P.M.\n# The last train from Comfy Pillows Resort that allows her to arrive on time is the one that arrives at 11:30 P.M.\n\n# Determine the latest possible departure time from Comfy Pillows Resort to arrive by 11:30 P.M.\n# The last train from Comfy Pillows Resort that arrives at Magician Village by 11:30 P.M. is at 9:00 P.M.\nanswer = '9:00 P.M.'\n\nprint(answer)", "# Define train schedules\ntrain_times_comfy_pillows = [\"2:30 A.M.\", \"11:15 A.M.\", \"9:00 P.M.\"]\narrival_time_magician_village = \"11:30 P.M.\"\ntrain_times_magician_village = [\"5:00 A.M.\", \"1:45 P.M.\", \"11:30 P.M.\"]\n\n# To arrive at Magician Village by 11:30 P.M., Gabby needs to catch the last train that arrives before that time.\n# The last train from Comfy Pillows Resort to Magician Village is at 1:45 P.M., which arrives at 11:30 P.M.\n# Therefore, Gabby should take the train that departs at 9:00 P.M. to reach Magician Village by 11:30 P.M.\n\n# Calculate the correct departure time\ndeparture_time = '9:00 P.M.'\n\nanswer = departure_time\nprint(answer)", "# Define the train departure times from Comfy Pillows Resort\ntrain_times_comfy_pillows = [\"2:30 A.M.\", \"11:15 A.M.\", \"9:00 P.M.\"]\n\n# Define the train arrival times at Magician Village\ntrain_times_magician_village = [\"5:00 A.M.\", \"1:45 P.M.\", \"11:30 P.M.\"]\n\n# Gabby's desired arrival time at Magician Village\narrival_time_magician_village = \"11:30 P.M.\"\n\n# Determine the latest possible departure time from Comfy Pillows Resort\n# that allows Gabby to arrive at Magician Village by 11:30 P.M.\ndeparture_time = None\n\n# Check each departure time to see if it allows for arrival by the desired time\nfor time in train_times_comfy_pillows:\n    if time <= \"9:00 P.M.\":  # The only train that arrives by 11:30 P.M. is at 11:30 P.M.\n        departure_time = time\n\nanswer = departure_time\nprint(answer)"
], "prediction": ["9:00 P.M.", "9:00 P.M.", "9:00 P.M.", "9:00 P.M."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Broken crayons per box\" and then answer a question.\n\nStem | Leaf \n2 | 2, 3, 7, 8\n3 | 0\n4 | 0, 4\n5 | 1, 2, 2, 5, 9, 9\n6 | 1, 2, 6\n7 | 0, 2, 4, 7\n8 | 0, 1, 3, 9\n9 | 0", "question": "Read the following table regarding \"Broken crayons per box\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 2, 3, 7, 8\n3 | 0\n4 | 0, 4\n5 | 1, 2, 2, 5, 9, 9\n6 | 1, 2, 6\n7 | 0, 2, 4, 7\n8 | 0, 1, 3, 9\n9 | 0\n\nA crayon factory monitored the number of broken crayons per box during the past day. How many boxes had at least 60 broken crayons but fewer than 100 broken crayons?", "answer": "12", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Create a list of the number of broken crayons from the stem-and-leaf display\nbroken_crayons = [\n    22, 23, 27, 28, 30, 40, 40, \n    51, 52, 52, 55, 59, 59, \n    61, 62, 66, \n    70, 72, 74, 77, \n    80, 81, 83, 89, \n    90\n]\n\n# Count the boxes with at least 60 but fewer than 100 broken crayons\ncount_boxes = sum(1 for crayons in broken_crayons if 60 <= crayons < 100)\nanswer = count_boxes\nprint(answer)", "broken_crayons = [\n    22, 23, 27, 28, 30, 40, 40, \n    51, 52, 52, 55, 59, 59, \n    61, 62, 66, \n    70, 72, 74, 77, \n    80, 81, 83, 89, \n    90\n]\ncount_boxes = sum(1 for crayons in broken_crayons if 60 <= crayons < 100)\nanswer = int(count_boxes)  # Cast to integer to ensure it is a whole number\nprint(answer)", "broken_crayons = [\n    22, 23, 27, 28, 30, 40, 40, \n    51, 52, 52, 55, 59, 59, \n    61, 62, 66, \n    70, 72, 74, 77, \n    80, 81, 83, 89, \n    90\n]\ncount_boxes = sum(1 for crayons in broken_crayons if 60 <= crayons < 100)\nanswer = count_boxes  # Directly assign the integer count\nprint(answer)", "broken_crayons = [\n    22, 23, 27, 28, 30, 40, 40, \n    51, 52, 52, 55, 59, 59, \n    61, 62, 66, \n    70, 72, 74, 77, \n    80, 81, 83, 89, \n    90\n]\n\n# Count the number of boxes with at least 60 but fewer than 100 broken crayons\ncount_boxes = sum(1 for crayons in broken_crayons if 60 <= crayons < 100)\nanswer = int(count_boxes)  # Ensure the count is stored as an integer\nprint(answer)"
], "prediction": [12.0, 12.0, 12.0, 12.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npair of shorts | $18.00\npair of khaki pants | $13.00\nwinter jacket | $29.00\npair of jeans | $19.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npair of shorts | $18.00\npair of khaki pants | $13.00\nwinter jacket | $29.00\npair of jeans | $19.00\n\nScott has $31.00. Does he have enough to buy a pair of khaki pants and a pair of jeans? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \ncost_khaki_pants = 13.00 \ncost_jeans = 19.00 \ntotal_cost = cost_khaki_pants + cost_jeans \nscott_money = 31.00 \n\n# Determine if Scott has enough money\nif scott_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "# Define the costs of the items\ncost_khaki_pants = 13.00 \ncost_jeans = 19.00 \n\n# Calculate the total cost\ntotal_cost = cost_khaki_pants + cost_jeans \n\n# Amount of money Scott has\nscott_money = 31.00 \n\n# Determine if Scott has enough money\nif scott_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "cost_khaki_pants = 13.00 \ncost_jeans = 19.00 \ntotal_cost = cost_khaki_pants + cost_jeans \nscott_money = 31.00 \n\nif scott_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)  # This will correctly output 'no'", "cost_khaki_pants = 13.00 \ncost_jeans = 19.00 \ntotal_cost = cost_khaki_pants + cost_jeans \nscott_money = 31.00 \n\nif scott_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)  # This will correctly output 'no' since total_cost is $32.00 and Scott has $31.00"], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Field day schedule\" and then answer a question.\n\nEvent | Begin | End\nthree-legged race | 9:15 A.M. | 9:25 A.M.\nballoon stomp | 9:35 A.M. | 10:30 A.M.\njump rope race | 10:35 A.M. | 11:15 A.M.\nwater balloon toss | 11:25 A.M. | 12:00 P.M.\nobstacle course | 12:15 P.M. | 12:40 P.M.\nrelay race | 12:50 P.M. | 1:05 P.M.\nbean bag toss | 1:10 P.M. | 1:25 P.M.\nhula hoop contest | 1:30 P.M. | 2:10 P.M.\nhurdles | 2:15 P.M. | 2:25 P.M.\ntug-of-war | 2:30 P.M. | 3:20 P.M.", "question": "Read the following table regarding \"Field day schedule\" and then write Python code to answer a question.\n\nEvent | Begin | End\nthree-legged race | 9:15 A.M. | 9:25 A.M.\nballoon stomp | 9:35 A.M. | 10:30 A.M.\njump rope race | 10:35 A.M. | 11:15 A.M.\nwater balloon toss | 11:25 A.M. | 12:00 P.M.\nobstacle course | 12:15 P.M. | 12:40 P.M.\nrelay race | 12:50 P.M. | 1:05 P.M.\nbean bag toss | 1:10 P.M. | 1:25 P.M.\nhula hoop contest | 1:30 P.M. | 2:10 P.M.\nhurdles | 2:15 P.M. | 2:25 P.M.\ntug-of-war | 2:30 P.M. | 3:20 P.M.\n\nLook at the following schedule. Which event begins at 12.50 P.M.? Choose from the the options: ['jump rope race', 'balloon stomp', 'relay race', 'tug-of-war']", "answer": "relay race", "ques_type": "multi_choice", "choices": ["jump rope race", "balloon stomp", "relay race", "tug-of-war"], "code": [
  "# Python code, return answer \n# Define the events with their start times\nschedule = {\n    'three-legged race': '9:15 A.M.',\n    'balloon stomp': '9:35 A.M.',\n    'jump rope race': '10:35 A.M.',\n    'water balloon toss': '11:25 A.M.',\n    'obstacle course': '12:15 P.M.',\n    'relay race': '12:50 P.M.',\n    'bean bag toss': '1:10 P.M.',\n    'hula hoop contest': '1:30 P.M.',\n    'hurdles': '2:15 P.M.',\n    'tug-of-war': '2:30 P.M.'\n}\n\n# Find the event that begins at 12:50 P.M.\nevent_at_noon = [event for event, start_time in schedule.items() if start_time == '12:50 P.M.']\nanswer = event_at_noon[0] if event_at_noon else None\nprint(answer)", "schedule = {\n    'three-legged race': '9:15 A.M.',\n    'balloon stomp': '9:35 A.M.',\n    'jump rope race': '10:35 A.M.',\n    'water balloon toss': '11:25 A.M.',\n    'obstacle course': '12:15 P.M.',\n    'relay race': '12:50 P.M.',\n    'bean bag toss': '1:10 P.M.',\n    'hula hoop contest': '1:30 P.M.',\n    'hurdles': '2:15 P.M.',\n    'tug-of-war': '2:30 P.M.'\n}\n\n# Directly access the event that starts at 12:50 P.M.\nanswer = [event for event, start_time in schedule.items() if start_time == '12:50 P.M.'][0]\nprint(answer)", "# Define the schedule as a dictionary\nschedule = {\n    'three-legged race': '9:15 A.M.',\n    'balloon stomp': '9:35 A.M.',\n    'jump rope race': '10:35 A.M.',\n    'water balloon toss': '11:25 A.M.',\n    'obstacle course': '12:15 P.M.',\n    'relay race': '12:50 P.M.',\n    'bean bag toss': '1:10 P.M.',\n    'hula hoop contest': '1:30 P.M.',\n    'hurdles': '2:15 P.M.',\n    'tug-of-war': '2:30 P.M.'\n}\n\n# Find the event that begins at 12:50 P.M.\nanswer = next(event for event, start_time in schedule.items() if start_time == '12:50 P.M.')\nprint(answer)", "# Define the schedule of events with their start times\nschedule = {\n    'three-legged race': '9:15 A.M.',\n    'balloon stomp': '9:35 A.M.',\n    'jump rope race': '10:35 A.M.',\n    'water balloon toss': '11:25 A.M.',\n    'obstacle course': '12:15 P.M.',\n    'relay race': '12:50 P.M.',\n    'bean bag toss': '1:10 P.M.',\n    'hula hoop contest': '1:30 P.M.',\n    'hurdles': '2:15 P.M.',\n    'tug-of-war': '2:30 P.M.'\n}\n\n# Find the event that begins at 12:50 P.M.\nanswer = next(event for event, start_time in schedule.items() if start_time == '12:50 P.M.')\n\n# Output the answer\nprint(answer)"
], "prediction": ["relay race", "relay race", "relay race", "relay race"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n7 | 8\n8 | 4\n9 | 0", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n7 | 8\n8 | 4\n9 | 0\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "linear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for equal differences in x-values.\nx_values = [7, 8, 9]\ny_values = [8, 4, 0]\n\n# Calculate the differences\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n# Check if the differences are constant\nis_linear = all(difference == differences[0] for difference in differences)\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values from the table\nx_values = [7, 8, 9]\ny_values = [8, 4, 0]\n\n# Calculate the differences in y values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if all differences are the same to determine if the function is linear\nis_linear = all(difference == differences[0] for difference in differences)\n\n# Assign the result to answer based on whether the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\n\nprint(answer)", "# Define the x and y values\nx_values = [7, 8, 9]\ny_values = [8, 4, 0]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if all differences are equal to determine if the function is linear\nis_linear = all(difference == differences[0] for difference in differences)\n\n# Assign the answer based on whether the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values based on the given table\nx_values = [7, 8, 9]\ny_values = [8, 4, 0]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if all differences are the same to determine if the function is linear\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Assign the result to the answer variable\nanswer = 'linear' if is_linear else 'nonlinear'\n\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")"]
}
{
  "context": "Read the following table regarding \"Cars in stock\" and then answer a question.\n\nColor | Frequency\nwhite | 13\nblack | 14\nred | 5\nsilver | 23", "question": "Read the following table regarding \"Cars in stock\" and then write Python code to answer a question.\n\nColor | Frequency\nwhite | 13\nblack | 14\nred | 5\nsilver | 23\n\nFrancesca owns a used car dealership. The frequency chart shows the cars she has in stock. How many cars does Francesca have in stock?", "answer": "55", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of cars in stock\ncars_in_stock = 13 + 14 + 5 + 23\nanswer = cars_in_stock\nprint(answer)", "# Count of cars in stock\nwhite_cars = 13\nblack_cars = 14\nred_cars = 5\nsilver_cars = 23\n\n# Calculate total cars in stock\ncars_in_stock = white_cars + black_cars + red_cars + silver_cars\nanswer = cars_in_stock  # This will be an integer\nprint(answer)", "white_cars = 13\nblack_cars = 14\nred_cars = 5\nsilver_cars = 23\ncars_in_stock = white_cars + black_cars + red_cars + silver_cars\nanswer = int(cars_in_stock)  # Ensure the result is an integer\nprint(answer)", "white_cars = 13\nblack_cars = 14\nred_cars = 5\nsilver_cars = 23\ncars_in_stock = white_cars + black_cars + red_cars + silver_cars\nanswer = cars_in_stock  # The result is already an integer\nprint(answer)"], "prediction": [55.0, 55.0, 55.0, 55.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Club sizes (number of members)\" and then answer a question.\n\nStem | Leaf \n2 | 3, 3, 5, 6, 8\n3 | 5, 6, 7\n4 | 0, 1, 4, 4, 7\n5 | 4, 5, 6, 7", "question": "Read the following table regarding \"Club sizes (number of members)\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 3, 3, 5, 6, 8\n3 | 5, 6, 7\n4 | 0, 1, 4, 4, 7\n5 | 4, 5, 6, 7\n\nMartha found out the sizes of all the clubs at her school. What is the size of the largest club?", "answer": "57", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest club corresponds to the largest value in the stem-and-leaf display.\nlargest_club_size = 67  # From the stem \"5 | 4, 5, 6, 7\", the value is 67 members.\nanswer = largest_club_size\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [3, 3, 5, 6, 8]), (3, [5, 6, 7]), (4, [0, 1, 4, 4, 7]), (5, [4, 5, 6, 7])]  \n\n# Initialize variable to track the largest club size  \nlargest_club_size = 0  \n\n# Iterate through the stem and leaf data structure to find the largest club size  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        club_size = stem * 10 + leaf  \n        if club_size > largest_club_size:  \n            largest_club_size = club_size  \n\nanswer = largest_club_size  \nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [(2, [3, 3, 5, 6, 8]), (3, [5, 6, 7]), (4, [0, 1, 4, 4, 7]), (5, [4, 5, 6, 7])]\n\n# Initialize variable to track the largest club size\nlargest_club_size = 0\n\n# Iterate through the stem and leaf data structure to find the largest club size\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        club_size = stem * 10 + leaf\n        if club_size > largest_club_size:\n            largest_club_size = club_size\n\nanswer = largest_club_size\nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [(2, [3, 3, 5, 6, 8]), (3, [5, 6, 7]), (4, [0, 1, 4, 4, 7]), (5, [4, 5, 6, 7])]\n\n# Initialize a variable to track the largest club size\nlargest_club_size = 0\n\n# Iterate through the stem and leaf data structure to find the largest club size\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        club_size = stem * 10 + leaf  # Calculate the club size correctly\n        if club_size > largest_club_size:  # Update if this club size is larger\n            largest_club_size = club_size\n\nanswer = largest_club_size  # Store the largest club size in the answer variable\nprint(answer)"
], "prediction": [67.0, 57.0, 57.0, 57.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Broken plates per shipment\" and then answer a question.\n\nStem | Leaf \n1 | 0, 1, 4, 5\n2 | 5\n3 | 0, 0, 2, 3, 4, 7\n4 | 2, 2", "question": "Read the following table regarding \"Broken plates per shipment\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 0, 1, 4, 5\n2 | 5\n3 | 0, 0, 2, 3, 4, 7\n4 | 2, 2\n\nA pottery factory kept track of the number of broken plates per shipment last week. What is the largest number of broken plates?", "answer": "42", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number corresponds to the largest value in the stem-and-leaf display.\nlargest_broken_plates = 42  # From the stem \"4 | 2, 2\", the value is 42.\nanswer = largest_broken_plates\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [0, 1, 4, 5]), (2, [5]), (3, [0, 0, 2, 3, 4, 7]), (4, [2, 2])]  \n  \n# Initialize variable for largest number of broken plates  \nlargest_broken_plates = 0  \n  \n# Iterate through the stem and leaf data structure and find the maximum value  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        broken_plates = stem * 10 + leaf  \n        if broken_plates > largest_broken_plates:  \n            largest_broken_plates = broken_plates  \n  \nanswer = largest_broken_plates  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [0, 1, 4, 5]), (2, [5]), (3, [0, 0, 2, 3, 4, 7]), (4, [2, 2])]  \n\n# Initialize variable to track the largest number of broken plates  \nlargest_broken_plates = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number of broken plates  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        broken_plates = stem * 10 + leaf  \n        if broken_plates > largest_broken_plates:  \n            largest_broken_plates = broken_plates  \n\n# Ensure the answer is stored as an integer  \nanswer = int(largest_broken_plates)  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [0, 1, 4, 5]), (2, [5]), (3, [0, 0, 2, 3, 4, 7]), (4, [2, 2])]\n\n# Initialize variable to track the largest number of broken plates  \nlargest_broken_plates = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number of broken plates  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        broken_plates = stem * 10 + leaf  \n        if broken_plates > largest_broken_plates:  \n            largest_broken_plates = broken_plates  \n\nanswer = largest_broken_plates  # No need to convert to int as it's already an int\nprint(answer)"
], "prediction": [42.0, 42.0, 42.0, 42.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\noats | $1.39/lb\ncouscous | $1.22/lb\nbarley | $2.34/lb\nrye | $2.84/lb\nrice | $1.49/lb", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\noats | $1.39/lb\ncouscous | $1.22/lb\nbarley | $2.34/lb\nrye | $2.84/lb\nrice | $1.49/lb\n\nIsaac buys 1 pound of rye. What is the total cost?", "answer": "2.84", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_rye = 2.84 \npounds_bought = 1 \ntotal_cost = price_per_pound_rye * pounds_bought\nanswer = total_cost\nprint(answer)", "# Define the price per pound of rye and the amount purchased\nprice_per_pound_rye = 2.84  \npounds_bought = 1  \n\n# Calculate the total cost\ntotal_cost = price_per_pound_rye * pounds_bought  \n\n# Store the result in the variable 'answer'\nanswer = total_cost  \n\n# Print the answer\nprint(answer)", "# Define the price per pound of rye\nprice_per_pound_rye = 2.84  \n# Define the number of pounds bought\npounds_bought = 1  \n# Calculate the total cost\ntotal_cost = price_per_pound_rye * pounds_bought  \n# Store the result in the variable 'answer'\nanswer = total_cost  \n# Print the answer\nprint(answer)", "price_per_pound_rye = 2.84  \npounds_bought = 1  \ntotal_cost = price_per_pound_rye * pounds_bought  \nanswer = f\"${total_cost:.2f}\"  # Format the answer to two decimal places\nprint(answer)"], "prediction": [2.84, 2.84, 2.84, "$2.84"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Spelling test scores\" and then answer a question.\n\nStem | Leaf \n1 | 0, 8\n2 | 6, 7, 7\n3 | 3, 3, 4, 4, 5, 6\n4 | 0, 3, 4\n5 | 1, 3, 3, 3, 8\n6 | 7, 7, 9\n7 | 4", "question": "Read the following table regarding \"Spelling test scores\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 0, 8\n2 | 6, 7, 7\n3 | 3, 3, 4, 4, 5, 6\n4 | 0, 3, 4\n5 | 1, 3, 3, 3, 8\n6 | 7, 7, 9\n7 | 4\n\nThis morning, Mr. Davidson released the scores from last week's spelling test. How many students scored fewer than 80 points?", "answer": "23", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Scores are represented in a stem-and-leaf format\nscores = [\n    10, 18,   # Stem 1\n    26, 27, 27,  # Stem 2\n    33, 33, 34, 34, 35, 36,  # Stem 3\n    40, 43, 44,  # Stem 4\n    51, 53, 53, 53, 58,  # Stem 5\n    67, 67, 69,  # Stem 6\n    74   # Stem 7\n]\n\n# Count students who scored fewer than 80 points\nstudents_fewer_than_80 = sum(1 for score in scores if score < 80)\nanswer = students_fewer_than_80\nprint(answer)", "scores = [\n    10, 18,   # Stem 1\n    26, 27, 27,  # Stem 2\n    33, 33, 34, 34, 35, 36,  # Stem 3\n    40, 43, 44,  # Stem 4\n    51, 53, 53, 53, 58,  # Stem 5\n    67, 67, 69,  # Stem 6\n    74   # Stem 7\n]\n\nstudents_fewer_than_80 = len([score for score in scores if score < 80])\nanswer = students_fewer_than_80\nprint(answer)", "scores = [\n    10, 18,   # Stem 1\n    26, 27, 27,  # Stem 2\n    33, 33, 34, 34, 35, 36,  # Stem 3\n    40, 43, 44,  # Stem 4\n    51, 53, 53, 53, 58,  # Stem 5\n    67, 67, 69,  # Stem 6\n    74   # Stem 7\n]\n\n# Count the number of students who scored fewer than 80 points\nstudents_fewer_than_80 = sum(1 for score in scores if score < 80)\nanswer = students_fewer_than_80  # This will be an integer\nprint(answer)", "scores = [\n    10, 18,   # Stem 1\n    26, 27, 27,  # Stem 2\n    33, 33, 34, 34, 35, 36,  # Stem 3\n    40, 43, 44,  # Stem 4\n    51, 53, 53, 53, 58,  # Stem 5\n    67, 67, 69,  # Stem 6\n    74   # Stem 7\n]\nstudents_fewer_than_80 = sum(1 for score in scores if score < 80)\nanswer = int(students_fewer_than_80)  # Ensure the result is an integer\nprint(answer)"
], "prediction": [23.0, 23.0, 23.0, 23.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Slow heart rate (<100 bpm) | Fast heart rate (>100 bpm)\nBrown eyes | 6 | 2\nBlue eyes | 3 | 4", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Slow heart rate (<100 bpm) | Fast heart rate (>100 bpm)\nBrown eyes | 6 | 2\nBlue eyes | 3 | 4\n\nSpencer is a pediatrics nurse who conducts the first neonatal exam on newborn patients. He makes note of the newborns' height, weight, eye color, and heart rate, among other things. What is the probability that a randomly selected baby has brown eyes and has a fast heart rate (>100 bpm)? Simplify any fractions.", "answer": "2/15", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total newborns\ntotal_newborns = 6 + 2 + 3 + 4\n\n# Newborns with brown eyes and fast heart rate\nbrown_eyes_fast_heart_rate = 2\n\n# Probability calculation\nprobability = brown_eyes_fast_heart_rate / total_newborns\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(brown_eyes_fast_heart_rate, total_newborns).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Define the counts from the table\nslow_heart_rate_brown_eyes = 6\nfast_heart_rate_brown_eyes = 2\nslow_heart_rate_blue_eyes = 3\nfast_heart_rate_blue_eyes = 4\n\n# Calculate total newborns\ntotal_newborns = slow_heart_rate_brown_eyes + fast_heart_rate_brown_eyes + slow_heart_rate_blue_eyes + fast_heart_rate_blue_eyes\n\n# Count of newborns with brown eyes and fast heart rate\nbrown_eyes_fast_heart_rate = fast_heart_rate_brown_eyes\n\n# Calculate the probability\nfrom fractions import Fraction\nprobability = Fraction(brown_eyes_fast_heart_rate, total_newborns).limit_denominator()\n\n# Store the result in 'answer'\nanswer = probability\nprint(answer)", "slow_heart_rate_brown_eyes = 6\nfast_heart_rate_brown_eyes = 2\nslow_heart_rate_blue_eyes = 3\nfast_heart_rate_blue_eyes = 4\n\n# Calculate total newborns\ntotal_newborns = slow_heart_rate_brown_eyes + fast_heart_rate_brown_eyes + slow_heart_rate_blue_eyes + fast_heart_rate_blue_eyes\n\n# Calculate the number of brown-eyed babies with a fast heart rate\nbrown_eyes_fast_heart_rate = fast_heart_rate_brown_eyes\n\n# Calculate the probability as a fraction\nfrom fractions import Fraction\nprobability = Fraction(brown_eyes_fast_heart_rate, total_newborns).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = probability\nprint(answer)", "# Define the counts for heart rates and eye colors\nslow_heart_rate_brown_eyes = 6\nfast_heart_rate_brown_eyes = 2\nslow_heart_rate_blue_eyes = 3\nfast_heart_rate_blue_eyes = 4\n\n# Calculate the total number of newborns\ntotal_newborns = (slow_heart_rate_brown_eyes + \n                  fast_heart_rate_brown_eyes + \n                  slow_heart_rate_blue_eyes + \n                  fast_heart_rate_blue_eyes)\n\n# Count of newborns with brown eyes and fast heart rate\nbrown_eyes_fast_heart_rate = fast_heart_rate_brown_eyes\n\n# Calculate the probability as a fraction\nfrom fractions import Fraction\nprobability = Fraction(brown_eyes_fast_heart_rate, total_newborns).limit_denominator()\n\n# Store the result in the answer variable\nanswer = probability\n\n# Print the answer\nprint(answer)"
], "prediction": [0.13333, 0.13333, 0.13333, 0.13333], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Sheep owned\" and then answer a question.\n\nFarmer | Number of sheep\nFarmer Anne | 8\nFarmer Mike | 9\nFarmer Wendy | 6\nFarmer Betty | 8\nFarmer Sally | 5", "question": "Read the following table regarding \"Sheep owned\" and then write Python code to answer a question.\n\nFarmer | Number of sheep\nFarmer Anne | 8\nFarmer Mike | 9\nFarmer Wendy | 6\nFarmer Betty | 8\nFarmer Sally | 5\n\nSome farmers compared how many sheep were in their flocks. What is the median of the numbers?", "answer": "8", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# List of the number of sheep owned by each farmer\nsheep_counts = [8, 9, 6, 8, 5]\n# Sort the counts to find the median\nsheep_counts.sort()\n# Calculate the median\nn = len(sheep_counts)\nif n % 2 == 0:\n    median = (sheep_counts[n//2 - 1] + sheep_counts[n//2]) / 2\nelse:\n    median = sheep_counts[n//2]\nanswer = median\nprint(answer)", "sheep_counts = [8, 9, 6, 8, 5]\n\n# Check if the list is empty\nif not sheep_counts:\n    answer = None  # or you could raise an exception or return a specific value\nelse:\n    sheep_counts.sort()\n    n = len(sheep_counts)\n    if n % 2 == 0:\n        median = (sheep_counts[n//2 - 1] + sheep_counts[n//2]) / 2\n    else:\n        median = sheep_counts[n//2]\n    \n    # Convert median to integer if it's a whole number\n    answer = int(median) if median.is_integer() else median\n\nprint(answer)", "sheep_counts = [8, 9, 6, 8, 5]\nif not sheep_counts:\n    answer = None  # or you could raise an exception or return a specific value\nelse:\n    sheep_counts.sort()\n    n = len(sheep_counts)\n    if n % 2 == 0:\n        median = (sheep_counts[n//2 - 1] + sheep_counts[n//2]) / 2\n    else:\n        median = sheep_counts[n//2]\n    answer = int(median)  # Convert median to integer if it's a whole number\nprint(answer)", "sheep_counts = [8, 9, 6, 8, 5]\n\n# Sort the sheep counts\nsheep_counts.sort()\n\n# Calculate the median\nn = len(sheep_counts)\nif n % 2 == 0:\n    median = (sheep_counts[n // 2 - 1] + sheep_counts[n // 2]) // 2  # Use // for integer division\nelse:\n    median = sheep_counts[n // 2]\n\nanswer = median  # Store the median as an integer\nprint(answer)"
], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$555 | 14,200 | 1,800\n$675 | 13,200 | 3,100\n$795 | 12,200 | 4,400\n$915 | 11,200 | 5,700\n$1,035 | 10,200 | 7,000", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$555 | 14,200 | 1,800\n$675 | 13,200 | 3,100\n$795 | 12,200 | 4,400\n$915 | 11,200 | 5,700\n$1,035 | 10,200 | 7,000\n\nLook at the table. Then answer the question. At a price of $915, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "shortage", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": [
  "# Python code, return answer \nquantity_demanded_at_915 = 11200 \nquantity_supplied_at_915 = 5700 \n\n# Determine if there's a shortage or surplus\nif quantity_demanded_at_915 > quantity_supplied_at_915:\n    answer = 'shortage'\nelse:\n    answer = 'surplus'\n\nprint(answer)", "quantity_demanded_at_915 = 11200 \nquantity_supplied_at_915 = 5700 \n\nif quantity_demanded_at_915 > quantity_supplied_at_915:\n    answer = 'shortage'\nelif quantity_demanded_at_915 < quantity_supplied_at_915:\n    answer = 'surplus'\nelse:\n    answer = 'equilibrium'  # This case handles when demand equals supply\n\nprint(answer)", "# Define the quantities demanded and supplied at the price of $915\nquantity_demanded_at_915 = 11200 \nquantity_supplied_at_915 = 5700 \n\n# Determine if there is a shortage, surplus, or equilibrium\nif quantity_demanded_at_915 > quantity_supplied_at_915:\n    answer = 'shortage'\nelif quantity_demanded_at_915 < quantity_supplied_at_915:\n    answer = 'surplus'\nelse:\n    answer = 'equilibrium'  # This case handles when demand equals supply\n\n# Print the final answer\nprint(answer)", "# Define the quantities demanded and supplied at the price of $915\nquantity_demanded_at_915 = 11200 \nquantity_supplied_at_915 = 5700 \n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_915 > quantity_supplied_at_915:\n    answer = 'shortage'\nelif quantity_demanded_at_915 < quantity_supplied_at_915:\n    answer = 'surplus'\nelse:\n    answer = 'equilibrium'  # This case handles when demand equals supply\n\nprint(answer)"
], "prediction": ["shortage", "shortage", "shortage", "shortage"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Stop signs\" and then answer a question.\n\nStreet | Number of stop signs\nSmith Street | 12\nWalker Street | 8\nJackson Street | 12\nPeabody Street | 8\nMason Street | 12", "question": "Read the following table regarding \"Stop signs\" and then write Python code to answer a question.\n\nStreet | Number of stop signs\nSmith Street | 12\nWalker Street | 8\nJackson Street | 12\nPeabody Street | 8\nMason Street | 12\n\nThe town council reported on how many stop signs there are on each street. What is the mode of the numbers?", "answer": "12", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of the number of stop signs on each street\nstop_signs = [12, 8, 12, 8, 12]\n# Calculate the mode\nfrom statistics import mode\nmode_stop_signs = mode(stop_signs)\nanswer = mode_stop_signs\nprint(answer)", "stop_signs = [12, 8, 12, 8, 12]\nfrom statistics import mode\n\nmode_stop_signs = mode(stop_signs)\nanswer = int(mode_stop_signs)  # Convert to integer\nprint(answer)", "from statistics import mode\n\nstop_signs = [12, 8, 12, 8, 12]\nmode_stop_signs = mode(stop_signs)\nanswer = int(mode_stop_signs)  # Ensure the output is an integer\nprint(answer)", "from statistics import mode\n\n# List of the number of stop signs on each street\nstop_signs = [12, 8, 12, 8, 12]\n\n# Calculate the mode of the number of stop signs\nmode_stop_signs = mode(stop_signs)\n\n# Store the mode as an integer in the answer variable\nanswer = mode_stop_signs  # No need for conversion since mode is already an integer\n\nprint(answer)"], "prediction": [12.0, 12.0, 12.0, 12.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Under age 12 | 13 to 30 years old\nTennis shoes | 6 | 3\nHigh heels | 1 | 5", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Under age 12 | 13 to 30 years old\nTennis shoes | 6 | 3\nHigh heels | 1 | 5\n\nMonica entered her sister into their town's Smelly Shoe Competition. Monica observed contestants of all ages proudly strutting around wearing different kinds of smelly shoes. What is the probability that a randomly selected contestant is wearing high heels and is under age 12? Simplify any fractions.", "answer": "1/15", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Number of contestants wearing high heels under age 12\nhigh_heels_under_12 = 1 \n# Total number of contestants\ntotal_contestants = 6 + 3 + 1 + 5 \n\n# Calculate the probability\nprobability = high_heels_under_12 / total_contestants \n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(high_heels_under_12, total_contestants).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Define the number of contestants in each category\nhigh_heels_under_12 = 1\ntotal_contestants = 6 + 3 + 1 + 5\n\n# Calculate the probability of a randomly selected contestant wearing high heels and under age 12\nprobability = high_heels_under_12 / total_contestants\n\n# Simplify the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(high_heels_under_12, total_contestants).limit_denominator()\n\n# Assign the simplified probability to the answer variable\nanswer = simplified_probability\n\n# Print the answer\nprint(answer)", "# Define the number of contestants wearing high heels under age 12\nhigh_heels_under_12 = 1\n\n# Calculate the total number of contestants\ntotal_contestants = 6 + 3 + 1 + 5\n\n# Calculate the probability\nfrom fractions import Fraction\nprobability = Fraction(high_heels_under_12, total_contestants).limit_denominator()\n\n# Store the simplified probability in the answer variable\nanswer = probability\n\n# Output the answer\nprint(answer)", "# Define the number of contestants wearing high heels under age 12\nhigh_heels_under_12 = 1\n\n# Define the total number of contestants\ntotal_contestants = 6 + 3 + 1 + 5\n\n# Calculate the probability as a fraction\nfrom fractions import Fraction\nprobability = Fraction(high_heels_under_12, total_contestants).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = probability\n\n# Output the answer\nprint(answer)"
], "prediction": [0.06667, 0.06667, 0.06667, 0.06667], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ncanoe | $694.00\nmotorcycle | $968.00\nsailboat | $534.00\nkayak | $584.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ncanoe | $694.00\nmotorcycle | $968.00\nsailboat | $534.00\nkayak | $584.00\n\nHow much more does a motorcycle cost than a canoe?", "answer": "274", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_canoe = 694.00 \ncost_motorcycle = 968.00 \n# Calculate the difference in cost\ndifference_cost = cost_motorcycle - cost_canoe\nanswer = difference_cost\nprint(answer)", "# Define the costs of the canoe and motorcycle\ncost_canoe = 694.00 \ncost_motorcycle = 968.00 \n\n# Calculate the difference in cost\ndifference_cost = cost_motorcycle - cost_canoe\n\n# Store the result in the variable 'answer'\nanswer = difference_cost\n\n# Output the answer\nprint(answer)", "cost_canoe = 694.00 \ncost_motorcycle = 968.00 \ndifference_cost = cost_motorcycle - cost_canoe\nanswer = f\"${difference_cost:.2f}\"  # Format the answer as a currency string\nprint(answer)", "cost_canoe = 694.00 \ncost_motorcycle = 968.00 \ndifference_cost = cost_motorcycle - cost_canoe\nanswer = difference_cost  # Assign the numerical difference to the answer\nprint(f\"${answer:.2f}\")  # Format the output as a currency string"], "prediction": [274.0, 274.0, "$274.00", 274.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Fire hydrants\" and then answer a question.\n\nStreet | Number of hydrants\nOak Street | 2\nAspen Street | 5\nMaple Street | 2\nLemon Street | 4\nCherry Street | 3\nRose Street | 1\nFir Street | 4\nElm Street | 3", "question": "Read the following table regarding \"Fire hydrants\" and then write Python code to answer a question.\n\nStreet | Number of hydrants\nOak Street | 2\nAspen Street | 5\nMaple Street | 2\nLemon Street | 4\nCherry Street | 3\nRose Street | 1\nFir Street | 4\nElm Street | 3\n\nThe city recorded how many fire hydrants there are on each street. What is the mean of the numbers?", "answer": "3", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of fire hydrants on each street\nhydrants = [2, 5, 2, 4, 3, 1, 4, 3]\n# Calculate the mean\nmean_hydrants = sum(hydrants) / len(hydrants)\nanswer = mean_hydrants\nprint(answer)", "hydrants = [2, 5, 2, 4, 3, 1, 4, 3]\nmean_hydrants = sum(hydrants) / len(hydrants)\nanswer = round(mean_hydrants, 2)  # rounding to 2 decimal places for clarity\nprint(answer)", "hydrants = [2, 5, 2, 4, 3, 1, 4, 3]  \nmean_hydrants = sum(hydrants) / len(hydrants)  \nanswer = round(mean_hydrants, 2)  \nprint(answer)", "hydrants = [2, 5, 2, 4, 3, 1, 4, 3]  \nmean_hydrants = sum(hydrants) / len(hydrants)  \nanswer = round(mean_hydrants, 2)  \nprint(answer)  # Output the mean of the numbers"], "prediction": [3.0, 3.0, 3.0, 3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbearded dragon | $243.00\nchinchilla | $138.00\nhedgehog | $172.00\ncockatoo | $143.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbearded dragon | $243.00\nchinchilla | $138.00\nhedgehog | $172.00\ncockatoo | $143.00\n\nHow much money does Jake need to buy a cockatoo and a bearded dragon?", "answer": "386", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_cockatoo = 143.00 \nprice_bearded_dragon = 243.00 \n# Calculate the total amount needed\ntotal_cost = price_cockatoo + price_bearded_dragon\nanswer = total_cost\nprint(answer)", "# Prices of the animals\nprice_cockatoo = 143.00 \nprice_bearded_dragon = 243.00 \n\n# Calculate total cost\ntotal_cost = price_cockatoo + price_bearded_dragon\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "price_cockatoo = 143.00 \nprice_bearded_dragon = 243.00 \nanswer = price_cockatoo + price_bearded_dragon\nprint(answer)", "# Prices of the animals\nprice_cockatoo = 143.00 \nprice_bearded_dragon = 243.00 \n\n# Calculate total cost\nanswer = price_cockatoo + price_bearded_dragon\n\n# Output the result\nprint(answer)"], "prediction": [386.0, 386.0, 386.0, 386.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Taking photographs\" and then answer a question.\n\nPhotographs taken | Frequency\n0 | 15\n1 | 16\n2 | 12\n3 | 8\n4 | 7\n5 | 2\n6 | 14", "question": "Read the following table regarding \"Taking photographs\" and then write Python code to answer a question.\n\nPhotographs taken | Frequency\n0 | 15\n1 | 16\n2 | 12\n3 | 8\n4 | 7\n5 | 2\n6 | 14\n\nWhile compiling photos for an album, Andrew noted the number of photographs taken by each of his friends and family. How many people are there in all?", "answer": "74", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of each category of photographs taken\nfrequency = {\n    0: 15,\n    1: 16,\n    2: 12,\n    3: 8,\n    4: 7,\n    5: 2,\n    6: 14\n}\n\n# Calculate the total number of people\ntotal_people = sum(frequency.values())\nanswer = total_people\nprint(answer)", "frequency = {\n    0: 15,\n    1: 16,\n    2: 12,\n    3: 8,\n    4: 7,\n    5: 2,\n    6: 14\n}\ntotal_people = sum(frequency.values())\nanswer = int(total_people)  # Ensure the result is an integer\nprint(answer)", "frequency = {\n    0: 15,\n    1: 16,\n    2: 12,\n    3: 8,\n    4: 7,\n    5: 2,\n    6: 14\n}\ntotal_people = sum(frequency.values())\nanswer = total_people  # No need for int() since sum() will return an integer\nprint(answer)", "frequency = {\n    0: 15,\n    1: 16,\n    2: 12,\n    3: 8,\n    4: 7,\n    5: 2,\n    6: 14\n}\ntotal_people = sum(frequency.values())\nanswer = total_people  # This will be an integer\nprint(answer)"], "prediction": [74.0, 74.0, 74.0, 74.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nRusset Burbank potatoes | $1.75/kg\nKing Edward potatoes | $1.69/kg\nRed Pontiac potatoes | $0.63/kg\nGolden Wonder potatoes | $1.78/kg\nYukon Gold potatoes | $0.40/kg", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nRusset Burbank potatoes | $1.75/kg\nKing Edward potatoes | $1.69/kg\nRed Pontiac potatoes | $0.63/kg\nGolden Wonder potatoes | $1.78/kg\nYukon Gold potatoes | $0.40/kg\n\nJerry went to the store. He bought 4 kilograms of King Edward potatoes. How much did he spend?", "answer": "6.76", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_kilogram_king_edward = 1.69 \nkilograms_bought = 4 \nanswer = price_per_kilogram_king_edward * kilograms_bought\nprint(answer)", "# Define the price per kilogram for King Edward potatoes  \nprice_per_kilogram_king_edward = 1.69  \n# Define the number of kilograms bought  \nkilograms_bought = 4  \n# Calculate the total amount spent  \ntotal_spent = price_per_kilogram_king_edward * kilograms_bought  \n# Store the result in the variable 'answer'  \nanswer = total_spent  \nprint(answer)", "# Define the price per kilogram for King Edward potatoes\nprice_per_kilogram_king_edward = 1.69  \n# Define the number of kilograms bought\nkilograms_bought = 4  \n# Calculate the total amount spent\ntotal_spent = price_per_kilogram_king_edward * kilograms_bought  \n# Store the result in the variable 'answer'\nanswer = total_spent  \n# Print the answer\nprint(answer)", "price_per_kilogram_king_edward = 1.69  \nkilograms_bought = 4  \ntotal_spent = price_per_kilogram_king_edward * kilograms_bought  \nanswer = f\"${total_spent:.2f}\"  # Format the answer to include the dollar sign and two decimal places\nprint(answer)"], "prediction": [6.76, 6.76, 6.76, "$6.76"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Tickets sold\" and then answer a question.\n\nDay | Number of tickets\nTuesday | 70\nWednesday | 71\nThursday | 72\nFriday | 75", "question": "Read the following table regarding \"Tickets sold\" and then write Python code to answer a question.\n\nDay | Number of tickets\nTuesday | 70\nWednesday | 71\nThursday | 72\nFriday | 75\n\nThe aquarium's records showed how many tickets were sold in the past 4 days. On which day did the aquarium sell the most tickets? Choose from the the options: ['Tuesday', 'Wednesday', 'Thursday', 'Friday']", "answer": "Friday", "ques_type": "multi_choice", "choices": ["Tuesday", "Wednesday", "Thursday", "Friday"], "code": [
  "# Python code, return answer \ntickets_sold = {\n    'Tuesday': 70,\n    'Wednesday': 71,\n    'Thursday': 72,\n    'Friday': 75\n}\n# Find the day with the most tickets sold\nmost_tickets_day = max(tickets_sold, key=tickets_sold.get)\nanswer = most_tickets_day\nprint(answer)", "# Define the number of tickets sold for each day in a dictionary\ntickets_sold = {\n    'Tuesday': 70,\n    'Wednesday': 71,\n    'Thursday': 72,\n    'Friday': 75\n}\n\n# Identify the day with the most tickets sold\nmost_tickets_day = max(tickets_sold, key=tickets_sold.get)\n\n# Store the result in the variable 'answer'\nanswer = most_tickets_day\n\n# Output the answer\nprint(answer)", "# Define the number of tickets sold each day in a dictionary\ntickets_sold = {\n    'Tuesday': 70,\n    'Wednesday': 71,\n    'Thursday': 72,\n    'Friday': 75\n}\n\n# Find the day with the most tickets sold\nmost_tickets_day = max(tickets_sold, key=tickets_sold.get)\n\n# Store the result in the variable 'answer'\nanswer = most_tickets_day\n\n# Output the answer\nprint(answer)", "# Define the dictionary with tickets sold per day\ntickets_sold = {\n    'Tuesday': 70,\n    'Wednesday': 71,\n    'Thursday': 72,\n    'Friday': 75\n}\n\n# Find the day with the most tickets sold\nmost_tickets_day = max(tickets_sold, key=tickets_sold.get)\n\n# Assign the result to the answer variable\nanswer = most_tickets_day\n\n# Output the answer\nprint(answer)"
], "prediction": ["Friday", "Friday", "Friday", "Friday"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of tool boxes | Number of screwdrivers\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of tool boxes | Number of screwdrivers\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | ?\n\nEach tool box has 5 screwdrivers. How many screwdrivers are in 5 tool boxes?", "answer": "25", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Each toolbox has 5 screwdrivers\nscrewdrivers_per_toolbox = 5\n# Number of toolboxes\nnumber_of_toolboxes = 5\n# Calculate the total number of screwdrivers\ntotal_screwdrivers = screwdrivers_per_toolbox * number_of_toolboxes\nanswer = total_screwdrivers\nprint(answer)", "screwdrivers_per_toolbox = 5\nnumber_of_toolboxes = 5\ntotal_screwdrivers = screwdrivers_per_toolbox * number_of_toolboxes\nanswer = total_screwdrivers  # This will be an integer\nprint(answer)", "screwdrivers_per_toolbox = 5\nnumber_of_toolboxes = 5\ntotal_screwdrivers = screwdrivers_per_toolbox * number_of_toolboxes\nanswer = int(total_screwdrivers)  # Convert to integer\nprint(answer)", "screwdrivers_per_toolbox = 5\nnumber_of_toolboxes = 5\ntotal_screwdrivers = screwdrivers_per_toolbox * number_of_toolboxes\nanswer = total_screwdrivers  # No need to convert to integer\nprint(answer)"], "prediction": [25.0, 25.0, 25.0, 25.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$305 | 18,000 | 17,300\n$365 | 14,400 | 18,300\n$425 | 10,800 | 19,300\n$485 | 7,200 | 20,300\n$545 | 3,600 | 21,300", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$305 | 18,000 | 17,300\n$365 | 14,400 | 18,300\n$425 | 10,800 | 19,300\n$485 | 7,200 | 20,300\n$545 | 3,600 | 21,300\n\nLook at the table. Then answer the question. At a price of $485, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "surplus", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": ["# Python code, return answer \n# Quantity demanded and supplied at the price of $485\nquantity_demanded = 7200\nquantity_supplied = 20300\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Correctly assign the values for quantity demanded and quantity supplied at a price of $485\nquantity_demanded = 7200  # From the table\nquantity_supplied = 20300  # From the table\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Correctly assign the values from the table\nquantity_demanded = 7200  # Quantity demanded at price $485\nquantity_supplied = 20300  # Quantity supplied at price $485\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Correctly assign the quantity demanded and quantity supplied at price $485\nquantity_demanded = 7200  # Quantity demanded at price $485\nquantity_supplied = 20300  # Quantity supplied at price $485\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)"], "prediction": ["surplus", "surplus", "surplus", "surplus"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nrabbit | $105\nchameleon | $136\npot-bellied pig | $230\ncockatoo | $124\niguana | $138", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nrabbit | $105\nchameleon | $136\npot-bellied pig | $230\ncockatoo | $124\niguana | $138\n\nAkira has $271. Does she have enough to buy a cockatoo and an iguana? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \ncost_cockatoo = 124\ncost_iguana = 138\ntotal_cost = cost_cockatoo + cost_iguana\nakira_money = 271\n# Determine if Akira has enough money\nif akira_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "cost_cockatoo = 124\ncost_iguana = 138\ntotal_cost = cost_cockatoo + cost_iguana\nakira_money = 271\nanswer = 'yes' if akira_money >= total_cost else 'no'\nprint(answer)", "# Define the costs of the animals\ncost_cockatoo = 124\ncost_iguana = 138\n\n# Calculate the total cost\ntotal_cost = cost_cockatoo + cost_iguana\n\n# Amount of money Akira has\nakira_money = 271\n\n# Determine if Akira has enough money and store the result in 'answer'\nanswer = 'yes' if akira_money >= total_cost else 'no'\n\n# Print the answer\nprint(answer)", "# Prices of the animals\ncost_cockatoo = 124\ncost_iguana = 138\n\n# Total cost of both animals\ntotal_cost = cost_cockatoo + cost_iguana\n\n# Amount of money Akira has\nakira_money = 271\n\n# Determine if Akira has enough money\nanswer = 'yes' if akira_money >= total_cost else 'no'\n\n# Output the answer\nprint(answer)"], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of branches | Number of caterpillars\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | 10\n6 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of branches | Number of caterpillars\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | 10\n6 | ?\n\nEach branch has 2 caterpillars. How many caterpillars are on 6 branches?", "answer": "12", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nnumber_of_branches = 6\ncaterpillars_per_branch = 2\n# Calculate the total number of caterpillars\ntotal_caterpillars = number_of_branches * caterpillars_per_branch\nanswer = total_caterpillars\nprint(answer)", "number_of_branches = 6\ncaterpillars_per_branch = 2\ntotal_caterpillars = number_of_branches * caterpillars_per_branch\nanswer = total_caterpillars  # This will be an integer\nprint(answer)", "number_of_branches = 6\ncaterpillars_per_branch = 2\ntotal_caterpillars = number_of_branches * caterpillars_per_branch\nanswer = total_caterpillars  # This will be an integer\nprint(answer)", "number_of_branches = 6\ncaterpillars_per_branch = 2\ntotal_caterpillars = number_of_branches * caterpillars_per_branch\nanswer = total_caterpillars  # This will be an integer\nprint(answer)"], "prediction": [12.0, 12.0, 12.0, 12.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ngarlic peanuts | $1.38 per lb\nsalted peanuts | $2.54 per lb\nhoney roasted peanuts | $2.27 per lb\nunshelled peanuts | $1.58 per lb", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ngarlic peanuts | $1.38 per lb\nsalted peanuts | $2.54 per lb\nhoney roasted peanuts | $2.27 per lb\nunshelled peanuts | $1.58 per lb\n\nHow much would it cost to buy 5 pounds of unshelled peanuts?", "answer": "7.90", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_unshelled_peanuts = 1.58 \npounds_bought = 5 \n# Calculate total cost\ntotal_cost = price_per_pound_unshelled_peanuts * pounds_bought\nanswer = total_cost\nprint(answer)", "price_per_pound_unshelled_peanuts = 1.58 \npounds_bought = 5 \ntotal_cost = price_per_pound_unshelled_peanuts * pounds_bought\nanswer = \"{:.2f}\".format(total_cost)  # Format the total cost to two decimal places\nprint(answer)", "# Define the price per pound for unshelled peanuts\nprice_per_pound_unshelled_peanuts = 1.58  \n# Define the number of pounds to buy\npounds_bought = 5  \n# Calculate the total cost\ntotal_cost = price_per_pound_unshelled_peanuts * pounds_bought  \n# Store the total cost in the answer variable\nanswer = total_cost  \nprint(answer)  # Output the total cost", "price_per_pound_unshelled_peanuts = 1.58  \npounds_bought = 5  \ntotal_cost = price_per_pound_unshelled_peanuts * pounds_bought  \nanswer = f\"${total_cost:.2f}\"  # Format the total cost to two decimal places\nprint(answer)  # Output the total cost"], "prediction": [7.9, 7.9, 7.9, "$7.90"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Smoothies sold\" and then answer a question.\n\nDay | Number of smoothies\nWednesday | 87\nThursday | 83\nFriday | 85\nSaturday | 85\nSunday | 86", "question": "Read the following table regarding \"Smoothies sold\" and then write Python code to answer a question.\n\nDay | Number of smoothies\nWednesday | 87\nThursday | 83\nFriday | 85\nSaturday | 85\nSunday | 86\n\nA juice shop tracked how many smoothies it sold in the past 5 days. What is the median of the numbers?", "answer": "85", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nsmoothies_sold = [87, 83, 85, 85, 86]\n\n# Sort the list to find the median\nsorted_smoothies = sorted(smoothies_sold)\n\n# Calculate the median\nn = len(sorted_smoothies)\nif n % 2 == 1:\n    median = sorted_smoothies[n // 2]  # Middle value for odd number of elements\nelse:\n    median = (sorted_smoothies[n // 2 - 1] + sorted_smoothies[n // 2]) / 2  # Average of two middle values for even\n\nanswer = median\nprint(answer)", "smoothies_sold = [87, 83, 85, 85, 86]\nsorted_smoothies = sorted(smoothies_sold)\nmedian = sorted_smoothies[len(sorted_smoothies) // 2]  # Middle value for odd number of elements\nanswer = median\nprint(answer)", "smoothies_sold = [87, 83, 85, 85, 86]\nsorted_smoothies = sorted(smoothies_sold)\nmedian = sorted_smoothies[len(sorted_smoothies) // 2]  # Middle value for odd number of elements\nanswer = int(median)  # Convert to integer\nprint(answer)", "smoothies_sold = [87, 83, 85, 85, 86]\nsorted_smoothies = sorted(smoothies_sold)\nmedian = sorted_smoothies[len(sorted_smoothies) // 2]  # Middle value for odd number of elements\nanswer = median  # No need to convert to integer as it is already an integer\nprint(answer)"], "prediction": [85.0, 85.0, 85.0, 85.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n18 | 19\n19 | 11\n20 | 3", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n18 | 19\n19 | 11\n20 | 3\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "linear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for equal differences in x-values.\nx_values = [18, 19, 20]\ny_values = [19, 11, 3]\n\n# Calculate the differences\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n# Check if the differences are constant\nis_linear = all(difference == differences[0] for difference in differences)\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define x and y values\nx_values = [18, 19, 20]\ny_values = [19, 11, 3]\n\n# Calculate the differences between consecutive y-values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if all differences are the same\nis_linear = all(difference == differences[0] for difference in differences)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "x_values = [18, 19, 20]\ny_values = [19, 11, 3]\n\n# Calculate the differences in y-values and x-values\ny_differences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\nx_differences = [x_values[i+1] - x_values[i] for i in range(len(x_values)-1)]\n\n# Calculate the slopes (change in y over change in x)\nslopes = [y_diff / x_diff for y_diff, x_diff in zip(y_differences, x_differences)]\n\n# Check if all slopes are the same\nis_linear = all(slope == slopes[0] for slope in slopes)\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "x_values = [18, 19, 20]\ny_values = [19, 11, 3]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if the differences are constant\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'slopes' is not defined\")", "NameError(\"name 'differences' is not defined\")"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nspinach omelette | $3.00\nbowl of melon | $3.00\nbreakfast burrito | $6.00\negg sandwich | $7.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nspinach omelette | $3.00\nbowl of melon | $3.00\nbreakfast burrito | $6.00\negg sandwich | $7.00\n\nHow much money does Ezra need to buy an egg sandwich, a bowl of melon, and a spinach omelette?", "answer": "13", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nprice_egg_sandwich = 7.00\nprice_bowl_of_melon = 3.00\nprice_spinach_omelette = 3.00\n\n# Total amount needed\ntotal_cost = price_egg_sandwich + price_bowl_of_melon + price_spinach_omelette\nanswer = total_cost\nprint(answer)", "price_egg_sandwich = 7.00\nprice_bowl_of_melon = 3.00\nprice_spinach_omelette = 3.00\ntotal_cost = price_egg_sandwich + price_bowl_of_melon + price_spinach_omelette\nanswer = f\"${total_cost:.2f}\"\nprint(answer)", "# Prices of the items\nprice_egg_sandwich = 7.00\nprice_bowl_of_melon = 3.00\nprice_spinach_omelette = 3.00\n\n# Calculate total cost\ntotal_cost = price_egg_sandwich + price_bowl_of_melon + price_spinach_omelette\n\n# Store the result in the answer variable\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "price_egg_sandwich = 7.00\nprice_bowl_of_melon = 3.00\nprice_spinach_omelette = 3.00\n\n# Calculate total cost\ntotal_cost = price_egg_sandwich + price_bowl_of_melon + price_spinach_omelette\n\n# Round to two decimal places\nanswer = round(total_cost, 2)\n\nprint(answer)"], "prediction": [13.0, "$13.00", 13.0, 13.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbox of paper clips | $0.90\neraser | $0.41\npencil sharpener | $0.31\ndry erase marker | $0.65", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbox of paper clips | $0.90\neraser | $0.41\npencil sharpener | $0.31\ndry erase marker | $0.65\n\nHow much money does Isaac need to buy a dry erase marker and an eraser?", "answer": "1.06", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_dry_erase_marker = 0.65 \nprice_eraser = 0.41 \n# Calculate the total amount needed\ntotal_cost = price_dry_erase_marker + price_eraser\nanswer = total_cost\nprint(answer)", "# Prices of items\nprice_dry_erase_marker = 0.65 \nprice_eraser = 0.41 \n\n# Calculate total cost\ntotal_cost = price_dry_erase_marker + price_eraser\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "price_dry_erase_marker = 0.65 \nprice_eraser = 0.41 \ntotal_cost = price_dry_erase_marker + price_eraser\nanswer = f\"${total_cost:.2f}\"  # Format the output to two decimal places with a dollar sign\nprint(answer)", "# Define the prices of the items\nprice_dry_erase_marker = 0.65 \nprice_eraser = 0.41 \n\n# Calculate the total cost\ntotal_cost = price_dry_erase_marker + price_eraser\n\n# Format the output to two decimal places with a dollar sign\nanswer = f\"${total_cost:.2f}\"\n\n# Print the answer\nprint(answer)"], "prediction": [1.06, 1.06, "$1.06", "$1.06"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Roller coasters per amusement park\" and then answer a question.\n\nStem | Leaf \n1 | 3, 4, 7, 9\n2 | 0, 1, 7, 9\n3 | 6, 8, 8\n4 | 4, 4, 6, 7, 8, 8", "question": "Read the following table regarding \"Roller coasters per amusement park\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 3, 4, 7, 9\n2 | 0, 1, 7, 9\n3 | 6, 8, 8\n4 | 4, 4, 6, 7, 8, 8\n\nOwen found a list of the number of roller coasters at each amusement park in the state. How many amusement parks have at least 31 roller coasters but fewer than 47 roller coasters?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Extracting the values from the stem-and-leaf display\nroller_coasters = [13, 14, 17, 19, 20, 21, 27, 29, 36, 38, 38, 44, 44, 46, 47, 48, 48]\n\n# Count the number of amusement parks with at least 31 and fewer than 47 roller coasters\ncount_parks = sum(1 for coasters in roller_coasters if 31 <= coasters < 47)\n\nanswer = count_parks\nprint(answer)", "roller_coasters = [13, 14, 17, 19, 20, 21, 27, 29, 36, 38, 38, 44, 44, 46, 47, 48, 48]\ncount_parks = sum(1 for coasters in roller_coasters if 31 <= coasters < 47)\nanswer = int(count_parks)  # Convert the result to an integer\nprint(answer)", "roller_coasters = [13, 14, 17, 19, 20, 21, 27, 29, 36, 38, 38, 44, 44, 46, 47, 48, 48]\ncount_parks = sum(1 for coasters in roller_coasters if 31 <= coasters < 47)\nanswer = count_parks  # No need to convert to int since sum() already returns an integer\nprint(answer)", "roller_coasters = [13, 14, 17, 19, 20, 21, 27, 29, 36, 38, 38, 44, 44, 46, 47, 48, 48]\ncount_parks = sum(1 for coasters in roller_coasters if 31 <= coasters < 47)\nanswer = count_parks  # This will be an integer\nprint(answer)"], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Election results\" and then answer a question.\n\nCandidate | Votes\nDevon | 930\nMartha | 450\nShelby | 720\nJared | 380", "question": "Read the following table regarding \"Election results\" and then write Python code to answer a question.\n\nCandidate | Votes\nDevon | 930\nMartha | 450\nShelby | 720\nJared | 380\n\nIn a recent election at Cline University, four people ran for student body president. What fraction of votes were for Jared? Simplify your answer.", "answer": "19/124", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total votes collected by all candidates\ntotal_votes = 930 + 450 + 720 + 380\n# Votes for Jared\njared_votes = 380\n# Calculate the fraction of votes for Jared\nfraction_jared = jared_votes / total_votes\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_fraction = Fraction(jared_votes, total_votes).limit_denominator()\nanswer = simplified_fraction\nprint(answer)", "# Define the votes for each candidate\ndevon_votes = 930\nmartha_votes = 450\nshelby_votes = 720\njared_votes = 380\n\n# Calculate total votes\ntotal_votes = devon_votes + martha_votes + shelby_votes + jared_votes\n\n# Calculate the fraction of votes for Jared\nfrom fractions import Fraction\nfraction_jared = Fraction(jared_votes, total_votes).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = fraction_jared\nprint(answer)", "# Define the votes for each candidate\ndevon_votes = 930\nmartha_votes = 450\nshelby_votes = 720\njared_votes = 380\n\n# Calculate total votes\ntotal_votes = devon_votes + martha_votes + shelby_votes + jared_votes\n\n# Calculate the fraction of votes for Jared\nfrom fractions import Fraction\nfraction_jared = Fraction(jared_votes, total_votes).limit_denominator()\n\n# Store the result in the answer variable\nanswer = fraction_jared\n\n# Print the answer\nprint(answer)", "# Define the votes for each candidate\ndevon_votes = 930\nmartha_votes = 450\nshelby_votes = 720\njared_votes = 380\n\n# Calculate the total number of votes\ntotal_votes = devon_votes + martha_votes + shelby_votes + jared_votes\n\n# Import the Fraction class to simplify the fraction\nfrom fractions import Fraction\n\n# Calculate the fraction of votes for Jared and simplify it\nfraction_jared = Fraction(jared_votes, total_votes).limit_denominator()\nanswer = fraction_jared\n\nprint(answer)"
], "prediction": [0.15323, 0.15323, 0.15323, 0.15323], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Scores on a board game\" and then answer a question.\n\nScore | Frequency\n6 | 3\n7 | 14\n8 | 11\n9 | 0\n10 | 6", "question": "Read the following table regarding \"Scores on a board game\" and then write Python code to answer a question.\n\nScore | Frequency\n6 | 3\n7 | 14\n8 | 11\n9 | 0\n10 | 6\n\nSusan and her friends recorded their scores while playing a board game. How many people are there in all?", "answer": "34", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of scores\nfrequency = {\n    6: 3,\n    7: 14,\n    8: 11,\n    9: 0,\n    10: 6\n}\n\n# Calculate total number of people\ntotal_people = sum(frequency.values())\nanswer = total_people\nprint(answer)", "frequency = {\n    6: 3,\n    7: 14,\n    8: 11,\n    9: 0,\n    10: 6\n}\ntotal_people = sum(frequency.values())\nanswer = total_people  # This will be an integer\nprint(answer)", "frequency = {\n    6: 3,\n    7: 14,\n    8: 11,\n    9: 0,\n    10: 6\n}\ntotal_people = sum(frequency.values())\nanswer = total_people  # This will be an integer\nprint(answer)", "frequency = {\n    6: 3,\n    7: 14,\n    8: 11,\n    9: 0,\n    10: 6\n}\ntotal_people = sum(frequency.values())\nanswer = total_people  # This will be an integer\nprint(answer)"], "prediction": [34.0, 34.0, 34.0, 34.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nkidney beans | $1.78/pound\nsoybeans | $1.29/pound\ngarbanzo beans | $2.75/pound\nlima beans | $2.28/pound", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nkidney beans | $1.78/pound\nsoybeans | $1.29/pound\ngarbanzo beans | $2.75/pound\nlima beans | $2.28/pound\n\nDarnel buys 2 pounds of soybeans, 4 pounds of garbanzo beans, and 1 pound of kidney beans. What is the total cost?", "answer": "15.36", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices per pound\nprice_soybeans = 1.29\nprice_garbanzo = 2.75\nprice_kidney = 1.78\n\n# Quantities purchased\nquantity_soybeans = 2\nquantity_garbanzo = 4\nquantity_kidney = 1\n\n# Calculate total cost\ntotal_cost = (price_soybeans * quantity_soybeans) + (price_garbanzo * quantity_garbanzo) + (price_kidney * quantity_kidney)\nanswer = total_cost\nprint(answer)", "# Define the prices per pound\nprice_soybeans = 1.29\nprice_garbanzo = 2.75\nprice_kidney = 1.78\n\n# Define the quantities purchased\nquantity_soybeans = 2\nquantity_garbanzo = 4\nquantity_kidney = 1\n\n# Calculate the total cost\ntotal_cost = (price_soybeans * quantity_soybeans) + (price_garbanzo * quantity_garbanzo) + (price_kidney * quantity_kidney)\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "# Prices per pound\nprice_soybeans = 1.29\nprice_garbanzo = 2.75\nprice_kidney = 1.78\n\n# Quantities in pounds\nquantity_soybeans = 2\nquantity_garbanzo = 4\nquantity_kidney = 1\n\n# Calculate total cost\ntotal_cost = (price_soybeans * quantity_soybeans) + (price_garbanzo * quantity_garbanzo) + (price_kidney * quantity_kidney)\nanswer = total_cost\nprint(answer)", "# Prices per pound of beans\nprice_soybeans = 1.29\nprice_garbanzo = 2.75\nprice_kidney = 1.78\n\n# Quantities purchased\nquantity_soybeans = 2\nquantity_garbanzo = 4\nquantity_kidney = 1\n\n# Calculate total cost\ntotal_cost = (price_soybeans * quantity_soybeans) + (price_garbanzo * quantity_garbanzo) + (price_kidney * quantity_kidney)\nanswer = total_cost\nprint(answer)"
], "prediction": [15.36, 15.36, 15.36, 15.36], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Quiz show scores\" and then answer a question.\n\nStem | Leaf \n1 | 0, 3, 5, 5, 8, 9, 9, 9\n2 | 7, 9\n3 | 7\n4 | 8, 9\n5 | 0, 7, 8, 9\n6 | 0, 1, 3, 3, 6", "question": "Read the following table regarding \"Quiz show scores\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 0, 3, 5, 5, 8, 9, 9, 9\n2 | 7, 9\n3 | 7\n4 | 8, 9\n5 | 0, 7, 8, 9\n6 | 0, 1, 3, 3, 6\n\nFor a math assignment, Cora researched the scores of the people competing on her favorite quiz show. How many people scored at least 10 points but fewer than 30 points?", "answer": "10", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Extracting scores from the stem-and-leaf display\nscores = [\n    10, 13, 15, 15, 18, 19, 19, 19,  # scores in the '1' stem\n    27, 29,                         # scores in the '2' stem\n    30,                             # score in the '3' stem\n    48, 49,                         # scores in the '4' stem\n    50, 57, 58, 59,                # scores in the '5' stem\n    60, 61, 63, 63, 66             # scores in the '6' stem\n]\n\n# Count scores that are at least 10 and fewer than 30\ncount_scores = sum(1 for score in scores if 10 <= score < 30)\nanswer = count_scores\nprint(answer)", "scores = [\n    10, 13, 15, 15, 18, 19, 19, 19,  # scores in the '1' stem\n    27, 29,                         # scores in the '2' stem\n    30,                             # score in the '3' stem\n    48, 49,                         # scores in the '4' stem\n    50, 57, 58, 59,                # scores in the '5' stem\n    60, 61, 63, 63, 66             # scores in the '6' stem\n]\n\n# Count the number of scores that are at least 10 but less than 30\ncount_scores = sum(1 for score in scores if 10 <= score < 30)\nanswer = int(count_scores)  # Ensuring the count is an integer\nprint(answer)", "scores = [\n    10, 13, 15, 15, 18, 19, 19, 19,  # scores in the '1' stem\n    27, 29,                         # scores in the '2' stem\n    30,                             # score in the '3' stem\n    48, 49,                         # scores in the '4' stem\n    50, 57, 58, 59,                # scores in the '5' stem\n    60, 61, 63, 63, 66             # scores in the '6' stem\n]\ncount_scores = sum(1 for score in scores if 10 <= score < 30)\nanswer = count_scores  # No need to convert to float\nprint(answer)", "scores = [\n    10, 13, 15, 15, 18, 19, 19, 19,  # scores in the '1' stem\n    27, 29,                         # scores in the '2' stem\n    30,                             # score in the '3' stem\n    48, 49,                         # scores in the '4' stem\n    50, 57, 58, 59,                # scores in the '5' stem\n    60, 61, 63, 63, 66             # scores in the '6' stem\n]\ncount_scores = sum(1 for score in scores if 10 <= score < 30)\nanswer = count_scores  # Ensure the count is an integer\nprint(answer)"
], "prediction": [10.0, 10.0, 10.0, 10.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nquartz crystal | $0.95\npiece of smoky quartz | $0.78\nsmooth piece of sea glass | $0.65\npiece of black mica | $0.31\npiece of fool's gold | $0.54", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nquartz crystal | $0.95\npiece of smoky quartz | $0.78\nsmooth piece of sea glass | $0.65\npiece of black mica | $0.31\npiece of fool's gold | $0.54\n\nHow much more does a piece of smoky quartz cost than a piece of fool's gold?", "answer": "0.24", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_smoky_quartz = 0.78 \ncost_fools_gold = 0.54 \n# Calculate the difference in cost\ndifference_cost = cost_smoky_quartz - cost_fools_gold\nanswer = difference_cost\nprint(answer)", "cost_smoky_quartz = 0.78 \ncost_fools_gold = 0.54 \ndifference_cost = cost_smoky_quartz - cost_fools_gold\nanswer = f\"A piece of smoky quartz costs ${difference_cost:.2f} more than a piece of fool's gold.\"\nprint(answer)", "cost_smoky_quartz = 0.78 \ncost_fools_gold = 0.54 \ndifference_cost = cost_smoky_quartz - cost_fools_gold\nanswer = difference_cost  # Store the numerical difference directly\nprint(answer)", "# Define the costs of the items\ncost_smoky_quartz = 0.78 \ncost_fools_gold = 0.54 \n\n# Calculate the difference in cost\ndifference_cost = cost_smoky_quartz - cost_fools_gold\n\n# Store the result in a clearly named variable\nanswer = difference_cost \n\n# Print the answer\nprint(f\"The piece of smoky quartz costs ${answer:.2f} more than the piece of fool's gold.\")"], "prediction": [0.24, "A piece of smoky quartz costs $0.24 more than a piece of fool's gold.", 0.24, 0.24], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ncottonseed oil | $2 per kilogram\nsunflower seed oil | $2 per kilogram\npeanut oil | $2 per kilogram\ncanola oil | $2 per kilogram\nolive oil | $2 per kilogram", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ncottonseed oil | $2 per kilogram\nsunflower seed oil | $2 per kilogram\npeanut oil | $2 per kilogram\ncanola oil | $2 per kilogram\nolive oil | $2 per kilogram\n\nVictoria bought 4 kilograms of olive oil, 4 kilograms of peanut oil, and 5 kilograms of sunflower seed oil. How much did she spend?", "answer": "26", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Price per kilogram for all oils\nprice_per_kilogram = 2 \n# Amounts of each oil purchased\nolive_oil_kilograms = 4 \npeanut_oil_kilograms = 4 \nsunflower_seed_oil_kilograms = 5 \n# Total cost calculation\ntotal_cost = (olive_oil_kilograms + peanut_oil_kilograms + sunflower_seed_oil_kilograms) * price_per_kilogram\nanswer = total_cost\nprint(answer)", "# Define the price per kilogram for each type of oil\nprice_per_kilogram = 2 \n\n# Define the quantities of each type of oil purchased\nolive_oil_kilograms = 4 \npeanut_oil_kilograms = 4 \nsunflower_seed_oil_kilograms = 5 \n\n# Calculate the total cost for each type of oil\ntotal_cost_olive_oil = olive_oil_kilograms * price_per_kilogram\ntotal_cost_peanut_oil = peanut_oil_kilograms * price_per_kilogram\ntotal_cost_sunflower_seed_oil = sunflower_seed_oil_kilograms * price_per_kilogram\n\n# Sum the total costs to get the overall total cost\ntotal_cost = total_cost_olive_oil + total_cost_peanut_oil + total_cost_sunflower_seed_oil\n\n# Store the result in the answer variable\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "price_per_kilogram = 2 \nolive_oil_kilograms = 4 \npeanut_oil_kilograms = 4 \nsunflower_seed_oil_kilograms = 5 \n\ntotal_cost_olive_oil = olive_oil_kilograms * price_per_kilogram\ntotal_cost_peanut_oil = peanut_oil_kilograms * price_per_kilogram\ntotal_cost_sunflower_seed_oil = sunflower_seed_oil_kilograms * price_per_kilogram\n\ntotal_cost = total_cost_olive_oil + total_cost_peanut_oil + total_cost_sunflower_seed_oil\nanswer = int(total_cost)  # Cast to integer to avoid float representation\nprint(answer)", "price_per_kilogram = 2 \nolive_oil_kilograms = 4 \npeanut_oil_kilograms = 4 \nsunflower_seed_oil_kilograms = 5 \n\n# Calculate total costs for each type of oil\ntotal_cost_olive_oil = olive_oil_kilograms * price_per_kilogram\ntotal_cost_peanut_oil = peanut_oil_kilograms * price_per_kilogram\ntotal_cost_sunflower_seed_oil = sunflower_seed_oil_kilograms * price_per_kilogram\n\n# Calculate total cost\ntotal_cost = total_cost_olive_oil + total_cost_peanut_oil + total_cost_sunflower_seed_oil\n\n# Store the result as an integer\nanswer = total_cost  \nprint(answer)"
], "prediction": [26.0, 26.0, 26.0, 26.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Bottles collected\" and then answer a question.\n\nName | Number of bottles\nSharon | 798\nDarren | 747\nJayce | 779\nRichard | 749", "question": "Read the following table regarding \"Bottles collected\" and then write Python code to answer a question.\n\nName | Number of bottles\nSharon | 798\nDarren | 747\nJayce | 779\nRichard | 749\n\nSharon's class paid attention to how many bottles each student collected for their recycling project. Who collected the fewest bottles? Choose from the the options: ['Sharon', 'Darren', 'Jayce', 'Richard']", "answer": "Darren", "ques_type": "multi_choice", "choices": ["Sharon", "Darren", "Jayce", "Richard"], "code": [
  "# Python code, return answer \nbottles_collected = {\n    'Sharon': 798,\n    'Darren': 747,\n    'Jayce': 779,\n    'Richard': 749\n}\n# Find the student with the fewest bottles collected\nfewest_bottles_student = min(bottles_collected, key=bottles_collected.get)\nanswer = fewest_bottles_student\nprint(answer)", "# Store the number of bottles collected by each student in a dictionary\nbottles_collected = {\n    'Sharon': 798,\n    'Darren': 747,\n    'Jayce': 779,\n    'Richard': 749\n}\n\n# Define the options provided in the question\noptions = ['Sharon', 'Darren', 'Jayce', 'Richard']\n\n# Filter the dictionary to include only the specified options\nfiltered_bottles_collected = {name: bottles_collected[name] for name in options}\n\n# Find the student with the fewest bottles among the filtered options\nfewest_bottles_student = min(filtered_bottles_collected, key=filtered_bottles_collected.get)\n\n# Store the result in the answer variable\nanswer = fewest_bottles_student\n\n# Print the answer\nprint(answer)", "# Store the number of bottles collected by each student in a dictionary  \nbottles_collected = {\n    'Sharon': 798,\n    'Darren': 747,\n    'Jayce': 779,\n    'Richard': 749\n}\n\n# Find the student who collected the fewest bottles  \nfewest_bottles_student = min(bottles_collected, key=bottles_collected.get)\nanswer = fewest_bottles_student\nprint(answer)", "bottles_collected = {\n    'Sharon': 798,\n    'Darren': 747,\n    'Jayce': 779,\n    'Richard': 749\n}\n\nfewest_bottles_student = min(bottles_collected, key=bottles_collected.get)\nfewest_bottles_count = bottles_collected[fewest_bottles_student]\n\nanswer = f\"{fewest_bottles_student} collected the fewest bottles: {fewest_bottles_count}\"\nprint(answer)"
], "prediction": ["Darren", "Darren", "Darren", "Darren collected the fewest bottles: 747"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Ice cream cones sold\" and then answer a question.\n\nDay | Number of ice cream cones\nThursday | 52\nFriday | 59\nSaturday | 51\nSunday | 54", "question": "Read the following table regarding \"Ice cream cones sold\" and then write Python code to answer a question.\n\nDay | Number of ice cream cones\nThursday | 52\nFriday | 59\nSaturday | 51\nSunday | 54\n\nAn ice cream shop kept track of how many ice cream cones it sold in the past 4 days. On which day did the shop sell the most ice cream cones? Choose from the the options: ['Thursday', 'Friday', 'Saturday', 'Sunday']", "answer": "Friday", "ques_type": "multi_choice", "choices": ["Thursday", "Friday", "Saturday", "Sunday"], "code": ["# Python code, return answer \nice_cream_sales = {\n    'Thursday': 52,\n    'Friday': 59,\n    'Saturday': 51,\n    'Sunday': 54\n}\n# Find the day with the most ice cream cones sold\nmost_sales_day = max(ice_cream_sales, key=ice_cream_sales.get)\nanswer = most_sales_day\nprint(answer)", "ice_cream_sales = {\n    'Thursday': 52,\n    'Friday': 59,\n    'Saturday': 51,\n    'Sunday': 54\n}\nmost_sales_day = max(ice_cream_sales, key=ice_cream_sales.get)\nanswer = most_sales_day\nprint(f\"The day with the most ice cream cones sold is: {answer}\")", "ice_cream_sales = {\n    'Thursday': 52,\n    'Friday': 59,\n    'Saturday': 51,\n    'Sunday': 54\n}\nmost_sales_day = max(ice_cream_sales, key=ice_cream_sales.get)\nanswer = most_sales_day\nprint(answer)", "# Store the ice cream sales data in a dictionary\nice_cream_sales = {\n    'Thursday': 52,\n    'Friday': 59,\n    'Saturday': 51,\n    'Sunday': 54\n}\n\n# Find the day with the most sales\nmost_sales_day = max(ice_cream_sales, key=ice_cream_sales.get)\nanswer = most_sales_day\n\nprint(answer)"], "prediction": ["Friday", "Friday", "Friday", "Friday"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Time Hugo spent on homework\" and then answer a question.\n\nDay | Minutes\nSunday | 25\nMonday | 22\nTuesday | 25\nWednesday | 19\nThursday | 17", "question": "Read the following table regarding \"Time Hugo spent on homework\" and then write Python code to answer a question.\n\nDay | Minutes\nSunday | 25\nMonday | 22\nTuesday | 25\nWednesday | 19\nThursday | 17\n\nHugo kept track of how long it took to finish his homework each day. According to the table, what was the rate of change between Tuesday and Wednesday?", "answer": "-6", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Minutes spent on homework\ntuesday_minutes = 25\nwednesday_minutes = 19\n# Calculate the rate of change between Tuesday and Wednesday\nrate_of_change = wednesday_minutes - tuesday_minutes\nanswer = rate_of_change\nprint(answer)", "# Define the minutes spent on homework for Tuesday and Wednesday\ntuesday_minutes = 25\nwednesday_minutes = 19\n\n# Calculate the change in minutes\nchange_in_minutes = wednesday_minutes - tuesday_minutes\n\n# Define the change in days (1 day)\nchange_in_days = 1\n\n# Calculate the rate of change\nrate_of_change = change_in_minutes / change_in_days\n\n# Store the result in the answer variable\nanswer = rate_of_change\n\n# Print the answer\nprint(answer)", "# Define the minutes Hugo spent on homework for Tuesday and Wednesday\ntuesday_minutes = 25\nwednesday_minutes = 19\n\n# Calculate the change in minutes from Tuesday to Wednesday\nchange_in_minutes = wednesday_minutes - tuesday_minutes\n\n# Calculate the rate of change (change in minutes over the number of days)\nchange_in_days = 1\nrate_of_change = change_in_minutes / change_in_days\n\n# Store the result in the variable 'answer'\nanswer = rate_of_change\n\n# Output the result\nprint(answer)", "tuesday_minutes = 25\nwednesday_minutes = 19\nchange_in_minutes = wednesday_minutes - tuesday_minutes\nchange_in_days = 1\nrate_of_change = change_in_minutes / change_in_days\nanswer = f\"The rate of change in homework time from Tuesday to Wednesday is {rate_of_change} minutes.\"\nprint(answer)"
], "prediction": [-6.0, -6.0, -6.0, "The rate of change in homework time from Tuesday to Wednesday is -6.0 minutes."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Phone calls\" and then answer a question.\n\nCompany | Number of phone calls\nNature Now | 8,467\nBrave New Day Corporation | 1,817\nHenderson Co. | 7,007", "question": "Read the following table regarding \"Phone calls\" and then write Python code to answer a question.\n\nCompany | Number of phone calls\nNature Now | 8,467\nBrave New Day Corporation | 1,817\nHenderson Co. | 7,007\n\nSome companies compared how many phone calls they made. In all, how many phone calls did Brave New Day Corporation and Henderson Co. make?", "answer": "8,824", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of phone calls made by each company\ncalls_brave_new_day = 1817\ncalls_henderson_co = 7007\n# Total phone calls made by both companies\ntotal_calls = calls_brave_new_day + calls_henderson_co\nanswer = total_calls\nprint(answer)", "calls_brave_new_day = 1817\ncalls_henderson_co = 7007\ntotal_calls = calls_brave_new_day + calls_henderson_co\nanswer = int(total_calls)  # Convert the result to an integer\nprint(answer)", "calls_brave_new_day = 1817\ncalls_henderson_co = 7007\ntotal_calls = calls_brave_new_day + calls_henderson_co\nanswer = total_calls  # No need to convert to int, as the result is already an integer\nprint(answer)", "calls_brave_new_day = 1817\ncalls_henderson_co = 7007\ntotal_calls = calls_brave_new_day + calls_henderson_co\nanswer = total_calls  # This will be an integer\nprint(answer)"], "prediction": [8824.0, 8824.0, 8824.0, 8824.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Bricks per building\" and then answer a question.\n\nStem | Leaf \n2 | 7, 7, 9\n3 | \n4 | 4, 7\n5 | 1, 1, 3, 8\n6 | \n7 | 0, 3, 4, 8\n8 | 0, 3, 3\n9 | 0", "question": "Read the following table regarding \"Bricks per building\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 7, 7, 9\n3 | \n4 | 4, 7\n5 | 1, 1, 3, 8\n6 | \n7 | 0, 3, 4, 8\n8 | 0, 3, 3\n9 | 0\n\nThe architecture student counted the number of bricks in each building in her neighborhood. How many buildings have at least 66 bricks but fewer than 93 bricks?", "answer": "8", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Extracting values from the stem-and-leaf display\nbricks = [\n    27, 27, 29,  # Stem 2\n    # Stem 3 has no values\n    44, 47,      # Stem 4\n    51, 51, 53, 58,  # Stem 5\n    # Stem 6 has no values\n    70, 73, 74, 78,  # Stem 7\n    80, 83, 83,     # Stem 8\n    90               # Stem 9\n]\n\n# Count buildings with at least 66 but fewer than 93 bricks\ncount_buildings = sum(1 for brick in bricks if 66 <= brick < 93)\nanswer = count_buildings\nprint(answer)", "bricks = [\n    27, 27, 29,  # Stem 2\n    # Stem 3 has no values\n    44, 47,      # Stem 4\n    51, 51, 53, 58,  # Stem 5\n    # Stem 6 has no values\n    70, 73, 74, 78,  # Stem 7\n    80, 83, 83,     # Stem 8\n    90               # Stem 9\n]\n\ncount_buildings = sum(1 for brick in bricks if 66 <= brick < 93)\nanswer = int(count_buildings)  # Ensure the answer is an integer\nprint(answer)", "# List of bricks per building based on the stem and leaf data\nbricks = [\n    27, 27, 29,  # Stem 2\n    # Stem 3 has no values\n    44, 47,      # Stem 4\n    51, 51, 53, 58,  # Stem 5\n    # Stem 6 has no values\n    70, 73, 74, 78,  # Stem 7\n    80, 83, 83,     # Stem 8\n    90               # Stem 9\n]\n\n# Count buildings with at least 66 bricks but fewer than 93 bricks\ncount_buildings = sum(1 for brick in bricks if 66 <= brick < 93)\n\n# Store the result as an integer\nanswer = count_buildings  \nprint(answer)", "bricks = [\n    27, 27, 29,  # Stem 2\n    # Stem 3 has no values\n    44, 47,      # Stem 4\n    51, 51, 53, 58,  # Stem 5\n    # Stem 6 has no values\n    70, 73, 74, 78,  # Stem 7\n    80, 83, 83,     # Stem 8\n    90               # Stem 9\n]\ncount_buildings = sum(1 for brick in bricks if 66 <= brick < 93)\nanswer = count_buildings  # This will be an integer\nprint(answer)"
], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Balloons sold\" and then answer a question.\n\nDay | Number of balloons\nThursday | 888\nFriday | 838\nSaturday | 843\nSunday | 834", "question": "Read the following table regarding \"Balloons sold\" and then write Python code to answer a question.\n\nDay | Number of balloons\nThursday | 888\nFriday | 838\nSaturday | 843\nSunday | 834\n\nThe manager of a party supply store researched how many balloons it sold in the past 4 days. On which day did the store sell the fewest balloons? Choose from the the options: ['Thursday', 'Friday', 'Saturday', 'Sunday']", "answer": "Sunday", "ques_type": "multi_choice", "choices": ["Thursday", "Friday", "Saturday", "Sunday"], "code": ["# Python code, return answer \nballoons_sold = {\n    'Thursday': 888,\n    'Friday': 838,\n    'Saturday': 843,\n    'Sunday': 834\n}\n# Find the day with the fewest balloons sold\nfewest_balloons_day = min(balloons_sold, key=balloons_sold.get)\nanswer = fewest_balloons_day\nprint(answer)", "# Store the number of balloons sold on each day in a dictionary\nballoons_sold = {\n    'Thursday': 888,\n    'Friday': 838,\n    'Saturday': 843,\n    'Sunday': 834\n}\n\n# Find the day with the fewest balloons sold\nfewest_balloons_day = min(balloons_sold, key=balloons_sold.get)\nanswer = fewest_balloons_day\nprint(answer)", "# Store the number of balloons sold each day in a dictionary\nballoons_sold = {\n    'Thursday': 888,\n    'Friday': 838,\n    'Saturday': 843,\n    'Sunday': 834\n}\n\n# Find the day with the fewest balloons sold\nfewest_balloons_day = min(balloons_sold, key=balloons_sold.get)\nanswer = fewest_balloons_day\n\nprint(answer)", "# Define the number of balloons sold each day in a dictionary\nballoons_sold = {\n    'Thursday': 888,\n    'Friday': 838,\n    'Saturday': 843,\n    'Sunday': 834\n}\n\n# Find the day with the fewest balloons sold\nfewest_balloons_day = min(balloons_sold, key=balloons_sold.get)\n\n# Store the result in the variable 'answer'\nanswer = fewest_balloons_day\n\n# Output the answer\nprint(answer)"], "prediction": ["Sunday", "Sunday", "Sunday", "Sunday"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of boxes | Number of pumpkin scones\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of boxes | Number of pumpkin scones\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | ?\n\nEach box has 5 pumpkin scones. How many pumpkin scones are in 5 boxes?", "answer": "25", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Each box contains 5 pumpkin scones\nscones_per_box = 5 \n# Number of boxes\nnumber_of_boxes = 5 \n# Calculate total pumpkin scones in 5 boxes\ntotal_scones = scones_per_box * number_of_boxes\nanswer = total_scones\nprint(answer)", "scones_per_box = 5 \nnumber_of_boxes = 5 \ntotal_scones = scones_per_box * number_of_boxes\nanswer = int(total_scones)  # Convert to integer\nprint(answer)", "scones_per_box = 5 \nnumber_of_boxes = 5 \ntotal_scones = scones_per_box * number_of_boxes\nanswer = total_scones  # No need to convert to integer\nprint(answer)", "scones_per_box = 5 \nnumber_of_boxes = 5 \ntotal_scones = scones_per_box * number_of_boxes\nanswer = int(total_scones)  # Convert to integer for counting discrete items\nprint(answer)"], "prediction": [25.0, 25.0, 25.0, 25.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nflower erasers | $3 per lb\nheart erasers | $6 per lb\nrectangular erasers | $3 per lb\nanimal erasers | $3 per lb\nalphabet erasers | $5 per lb", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nflower erasers | $3 per lb\nheart erasers | $6 per lb\nrectangular erasers | $3 per lb\nanimal erasers | $3 per lb\nalphabet erasers | $5 per lb\n\nMonica went to the store and bought 1.9 pounds of rectangular erasers . How much did she spend?", "answer": "5.70", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \nprice_per_pound_rectangular_erasers = 3  # price per pound for rectangular erasers\npounds_bought = 1.9  # pounds bought by Monica\n# Calculate total cost\ntotal_cost = price_per_pound_rectangular_erasers * pounds_bought\nanswer = total_cost\nprint(answer)", "# Define the price per pound for rectangular erasers\nprice_per_pound_rectangular_erasers = 3  # price per pound for rectangular erasers\n\n# Define the number of pounds bought by Monica\npounds_bought = 1.9  # pounds bought by Monica\n\n# Calculate the total cost\ntotal_cost = price_per_pound_rectangular_erasers * pounds_bought\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the output clearly indicating what it represents\nprint(f\"Monica spent ${answer:.2f} on rectangular erasers.\")", "price_per_pound_rectangular_erasers = 3  # price per pound for rectangular erasers\npounds_bought = 1.9  # pounds bought by Monica\ntotal_cost = price_per_pound_rectangular_erasers * pounds_bought\nanswer = total_cost  # store the total cost in the variable 'answer'\nprint(answer)  # output the answer", "# Define the price per pound for rectangular erasers\nprice_per_pound_rectangular_erasers = 3  # price per pound for rectangular erasers\n\n# Define the pounds bought by Monica\npounds_bought = 1.9  # pounds bought by Monica\n\n# Calculate the total cost\ntotal_cost = price_per_pound_rectangular_erasers * pounds_bought\n\n# Store the total cost in the variable 'answer'\nanswer = total_cost  \n\n# Output the answer\nprint(answer)"
], "prediction": [5.7, 5.7, 5.7, 5.7], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nsteamed broccoli | $7\ngrilled eggplant | $4\npasta with tomato sauce | $5\npasta with white sauce | $4", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nsteamed broccoli | $7\ngrilled eggplant | $4\npasta with tomato sauce | $5\npasta with white sauce | $4\n\nCaleb has $8. Does he have enough to buy pasta with white sauce and grilled eggplant? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \nprice_pasta_white_sauce = 4 \nprice_grilled_eggplant = 4 \n# Total cost for both items\ntotal_cost = price_pasta_white_sauce + price_grilled_eggplant\ncaleb_budget = 8 \n\n# Determine if Caleb has enough money\nif total_cost <= caleb_budget:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the prices of the items\nprice_pasta_white_sauce = 4 \nprice_grilled_eggplant = 4 \n\n# Calculate the total cost of both items\ntotal_cost = price_pasta_white_sauce + price_grilled_eggplant\n\n# Define Caleb's budget\ncaleb_budget = 8 \n\n# Determine if Caleb has enough money to buy the items\nanswer = 'yes' if total_cost <= caleb_budget else 'no'\n\nprint(answer)", "# Prices of the items Caleb wants to buy\nprice_pasta_white_sauce = 4 \nprice_grilled_eggplant = 4 \n\n# Calculate total cost\ntotal_cost = price_pasta_white_sauce + price_grilled_eggplant\n\n# Caleb's budget\ncaleb_budget = 8 \n\n# Determine if Caleb can afford both items\nanswer = 'yes' if total_cost <= caleb_budget else 'no'\n\nprint(answer)", "# Prices of the items Caleb wants to buy\nprice_pasta_white_sauce = 4 \nprice_grilled_eggplant = 4 \n\n# Calculate total cost\ntotal_cost = price_pasta_white_sauce + price_grilled_eggplant\n\n# Caleb's budget\ncaleb_budget = 8 \n\n# Determine if Caleb has enough money\nanswer = 'yes' if total_cost <= caleb_budget else 'no'\nprint(answer)"
], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Push-up competition (number of push-ups)\" and then answer a question.\n\nStem | Leaf \n4 | 6, 7, 8\n5 | 2, 6\n6 | 1, 2, 6, 8\n7 | 1, 7, 8", "question": "Read the following table regarding \"Push-up competition (number of push-ups)\" and then write Python code to answer a question.\n\nStem | Leaf \n4 | 6, 7, 8\n5 | 2, 6\n6 | 1, 2, 6, 8\n7 | 1, 7, 8\n\nConnor's P.E. class participated in a push-up competition, and Connor wrote down how many push-ups each person could do. How many people did at least 43 push-ups but fewer than 63 push-ups?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Extracting the values from the stem-and-leaf display\npush_ups = [\n    46, 47, 48,  # From stem 4\n    52, 56,      # From stem 5\n    61, 62, 66, 68,  # From stem 6\n    71, 77, 78   # From stem 7\n]\n\n# Count how many did at least 43 but fewer than 63\ncount = sum(1 for x in push_ups if 43 < x < 63)\nanswer = count\nprint(answer)", "push_ups = [\n    46, 47, 48,  # From stem 4\n    52, 56,      # From stem 5\n    61, 62, 66, 68,  # From stem 6\n    71, 77, 78   # From stem 7\n]\n# Counting the number of people who did at least 44 push-ups but fewer than 63 push-ups\ncount = sum(1 for x in push_ups if 44 <= x < 63)\nanswer = count\nprint(answer)", "push_ups = [\n    46, 47, 48,  # From stem 4\n    52, 56,      # From stem 5\n    61, 62, 66, 68,  # From stem 6\n    71, 77, 78   # From stem 7\n]\ncount = sum(1 for x in push_ups if 43 <= x < 63)\nanswer = count  # Ensure answer is an integer\nprint(answer)", "push_ups = [\n    46, 47, 48,  # From stem 4\n    52, 56,      # From stem 5\n    61, 62, 66, 68,  # From stem 6\n    71, 77, 78   # From stem 7\n]\n\n# Count the number of people who did at least 43 push-ups but fewer than 63 push-ups\ncount = sum(1 for x in push_ups if 43 <= x < 63)\nanswer = int(count)  # Ensure answer is an integer\nprint(answer)"], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of trains | Number of cars\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | 10\n6 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of trains | Number of cars\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | 10\n6 | ?\n\nEach train has 2 cars. How many cars are on 6 trains?", "answer": "12", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nnumber_of_trains = 6\ncars_per_train = 2\n# Calculate the total number of cars\ntotal_cars = number_of_trains * cars_per_train\nanswer = total_cars\nprint(answer)", "number_of_trains = 6\ncars_per_train = 2\ntotal_cars = number_of_trains * cars_per_train\nanswer = int(total_cars)  # Convert to integer\nprint(answer)", "number_of_trains = 6\ncars_per_train = 2\ntotal_cars = number_of_trains * cars_per_train\nanswer = total_cars  # No need to convert to integer\nprint(answer)", "number_of_trains = 6\ncars_per_train = 2\ntotal_cars = number_of_trains * cars_per_train\nanswer = int(total_cars)  # Convert to integer for clarity\nprint(answer)"], "prediction": [12.0, 12.0, 12.0, 12.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Cracked window panes per shipment\" and then answer a question.\n\nStem | Leaf \n1 | 0, 8\n2 | 5, 6\n3 | \n4 | 9\n5 | \n6 | 6\n7 | 9\n8 | 1", "question": "Read the following table regarding \"Cracked window panes per shipment\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 0, 8\n2 | 5, 6\n3 | \n4 | 9\n5 | \n6 | 6\n7 | 9\n8 | 1\n\nThe employees at Jeremiah's Construction monitored the number of cracked window panes in each shipment they received. How many shipments had at least 10 cracked window panes but less than 90 cracked window panes?", "answer": "8", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# From the stem-and-leaf display, we will extract the values and count the shipments\nshipments = [\n    10, 18, 25, 26, 30, 40, 50, 60, 66, 79, 81  # 10, 18, 25, 26, 40, 66, 79, 81 extracted from stem-and-leaf\n]\n\n# Count how many shipments had at least 10 and less than 90 cracked window panes\ncount_shipments = sum(1 for x in shipments if 10 <= x < 90)\nanswer = count_shipments\nprint(answer)", "# Define the cracked window panes based on the stem-and-leaf data\nshipments = [\n    10, 18, 25, 26, 29, 40, 50, 60, 66, 79, 81  # Correctly extracted from the stem-and-leaf plot\n]\n\n# Count the number of shipments with at least 10 but fewer than 90 cracked window panes\ncount_shipments = sum(1 for x in shipments if 10 <= x < 90)\n\n# Store the result in the variable 'answer'\nanswer = count_shipments\n\n# Print the answer\nprint(answer)", "# List of shipments extracted from the stem-and-leaf plot\nshipments = [\n    10, 18, 25, 26, 29, 40, 50, 60, 66, 79, 81  # Correctly extracted from the stem-and-leaf plot\n]\n\n# Count shipments with at least 10 but less than 90 cracked window panes\ncount_shipments = len([x for x in shipments if 10 <= x < 90])\nanswer = count_shipments\n\nprint(answer)", "# Define the shipments based on the stem-and-leaf plot\nshipments = [\n    10, 18, 25, 26, 29, 40, 50, 60, 66, 79, 81  # Correctly extracted from the stem-and-leaf plot\n]\n\n# Count how many shipments had at least 10 cracked window panes but less than 90\ncount_shipments = len([x for x in shipments if 10 <= x < 90])\n\n# Store the result in the answer variable\nanswer = count_shipments\n\nprint(answer)"
], "prediction": [11.0, 11.0, 11.0, 11.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Boxes per shipment\" and then answer a question.\n\nStem | Leaf \n1 | 9\n2 | 6\n3 | 4, 9\n4 | 1, 9\n5 | 0, 3, 9\n6 | 4, 8", "question": "Read the following table regarding \"Boxes per shipment\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 9\n2 | 6\n3 | 4, 9\n4 | 1, 9\n5 | 0, 3, 9\n6 | 4, 8\n\nA shipping company keeps track of the number of boxes in each shipment they send out. How many shipments had exactly 56 boxes?", "answer": "0", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# In the given stem-and-leaf display, we look for the stem \"5\" and the leaf \"6\" which represents the number 56.\n# Since no other leaf corresponds to 56 in the display, we can conclude that there is only 1 shipment with exactly 56 boxes.\n\n# Number of shipments with exactly 56 boxes\nshipments_with_56_boxes = 1\nanswer = shipments_with_56_boxes\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(1, [9]), (2, [6]), (3, [4, 9]), (4, [1, 9]), (5, [0, 3, 9]), (6, [4, 8])]\n\n# Initialize counter for shipments with exactly 56 boxes\nshipments_with_56_boxes = 0\n\n# Iterate through the stem and leaf data structure and count relevant shipments\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        boxes_per_shipment = stem * 10 + leaf\n        if boxes_per_shipment == 56:\n            shipments_with_56_boxes += 1\n\nanswer = shipments_with_56_boxes\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [9]), (2, [6]), (3, [4, 9]), (4, [1, 9]), (5, [0, 3, 9]), (6, [4, 8])]  \n  \n# Initialize counter for shipments with exactly 56 boxes  \nshipments_with_56_boxes = 0  \n  \n# Iterate through the stem and leaf data structure and count relevant shipments  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        boxes_per_shipment = stem * 10 + leaf  \n        if boxes_per_shipment == 56:  \n            shipments_with_56_boxes += 1  \n  \nanswer = shipments_with_56_boxes  # Ensure answer is an integer\nprint(answer)  # Output the result", "# Define the stem and leaf data structure  \nstem_and_leaf = [(1, [9]), (2, [6]), (3, [4, 9]), (4, [1, 9]), (5, [0, 3, 9]), (6, [4, 8])]  \n\n# Initialize counter for shipments with exactly 56 boxes  \nshipments_with_56_boxes = 0  \n\n# Iterate through the stem and leaf data structure and count relevant shipments  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        boxes_per_shipment = stem * 10 + leaf  \n        if boxes_per_shipment == 56:  \n            shipments_with_56_boxes += 1  \n\n# Ensure answer is an integer  \nanswer = int(shipments_with_56_boxes)  \nprint(answer)  # Output the result"
], "prediction": [1.0, 0.0, 0.0, 0.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Pizza sales\" and then answer a question.\n\nRestaurant | Pepperoni pizzas | Cheese pizzas\nPizzas Only | $19 | $8\nPizzeria Italiano | $8 | $18\nPizza Italia | $12 | $9\nTaste of New York | $13 | $17", "question": "Read the following table regarding \"Pizza sales\" and then write Python code to answer a question.\n\nRestaurant | Pepperoni pizzas | Cheese pizzas\nPizzas Only | $19 | $8\nPizzeria Italiano | $8 | $18\nPizza Italia | $12 | $9\nTaste of New York | $13 | $17\n\nA food industry researcher compiled the revenues of several pizzerias. How much more did Pizzas Only make from pepperoni pizza sales than from cheese pizza sales?", "answer": "11", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Revenue from pepperoni and cheese pizza sales at Pizzas Only\npepperoni_sales_pizzas_only = 19 \ncheese_sales_pizzas_only = 8 \n# Calculate the difference in revenue\ndifference_in_revenue = pepperoni_sales_pizzas_only - cheese_sales_pizzas_only\nanswer = difference_in_revenue\nprint(answer)", "# Define the prices of the pizzas\nprice_pepperoni = 19  # Price of pepperoni pizza\nprice_cheese = 8      # Price of cheese pizza\n\n# Define the number of pizzas sold\nnumber_pepperoni_sold = 1  # Assuming 1 pepperoni pizza sold for revenue calculation\nnumber_cheese_sold = 1      # Assuming 1 cheese pizza sold for revenue calculation\n\n# Calculate total revenue for each type of pizza\nrevenue_pepperoni = price_pepperoni * number_pepperoni_sold\nrevenue_cheese = price_cheese * number_cheese_sold\n\n# Calculate the difference in revenue\ndifference_in_revenue = revenue_pepperoni - revenue_cheese\nanswer = difference_in_revenue\nprint(answer)", "# Prices of the pizzas\nprice_pepperoni = 19  # Price of pepperoni pizza\nprice_cheese = 8      # Price of cheese pizza\n\n# Hypothetical number of pizzas sold\nnumber_pepperoni_sold = 100  # Assuming 100 pepperoni pizzas sold\nnumber_cheese_sold = 50       # Assuming 50 cheese pizzas sold\n\n# Calculate revenues\nrevenue_pepperoni = price_pepperoni * number_pepperoni_sold\nrevenue_cheese = price_cheese * number_cheese_sold\n\n# Calculate the difference in revenue\ndifference_in_revenue = revenue_pepperoni - revenue_cheese\nanswer = difference_in_revenue\n\nprint(answer)", "# Prices of pizzas\nprice_pepperoni = 19  # Price of pepperoni pizza\nprice_cheese = 8      # Price of cheese pizza\n\n# Calculate the difference in revenue per pizza sold\ndifference_in_revenue_per_pizza = price_pepperoni - price_cheese\nanswer = difference_in_revenue_per_pizza\nprint(answer)"
], "prediction": [11.0, 11.0, 1500.0, 11.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ncoyote stamp | $0.05\nrobot stamp | $0.01\nbutterfly stamp | $0.01\nflag stamp | $0.09", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ncoyote stamp | $0.05\nrobot stamp | $0.01\nbutterfly stamp | $0.01\nflag stamp | $0.09\n\nOliver has $0.05. Does he have enough to buy a robot stamp and a coyote stamp? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# Prices of the stamps\nprice_robot_stamp = 0.01\nprice_coyote_stamp = 0.05\n# Total cost of both stamps\ntotal_cost = price_robot_stamp + price_coyote_stamp\n# Amount Oliver has\noliver_money = 0.05\n# Check if Oliver has enough money\nif oliver_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "# Define the prices of the stamps\nprice_robot_stamp = 0.01\nprice_coyote_stamp = 0.05\n\n# Calculate the total cost of the stamps\ntotal_cost = price_robot_stamp + price_coyote_stamp\n\n# Define the amount of money Oliver has\noliver_money = 0.05\n\n# Check if Oliver has enough money to buy both stamps\nif oliver_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the prices of the stamps\nprice_robot_stamp = 0.01\nprice_coyote_stamp = 0.05\n\n# Calculate the total cost of both stamps\ntotal_cost = price_robot_stamp + price_coyote_stamp\n\n# Amount of money Oliver has\noliver_money = 0.05\n\n# Check if Oliver has enough money to buy both stamps\nif oliver_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the prices of the stamps\nprice_robot_stamp = 0.01\nprice_coyote_stamp = 0.05\n\n# Calculate the total cost of both stamps\ntotal_cost = price_robot_stamp + price_coyote_stamp\n\n# Define how much money Oliver has\noliver_money = 0.05\n\n# Check if Oliver has enough money to buy both stamps\nif oliver_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)"
], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n12 | 11\n13 | 15\n14 | 19", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n12 | 11\n13 | 15\n14 | 19\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "linear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for equal intervals of x-values.\ny_values = [11, 15, 19]\nx_values = [12, 13, 14]\n\n# Calculate the differences\ndifference_1 = y_values[1] - y_values[0]  # 15 - 11\ndifference_2 = y_values[2] - y_values[1]  # 19 - 15\n\n# Check if the differences are constant\nif difference_1 == difference_2:\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\n\nprint(answer)", "y_values = [11, 15, 19]\nx_values = [12, 13, 14]\n\n# Calculate the differences between consecutive y-values\ndifferences = [y_values[i] - y_values[i - 1] for i in range(1, len(y_values))]\n\n# Check if all differences are the same\nif all(diff == differences[0] for diff in differences):\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\n\nprint(answer)", "# Define the x and y values from the table\nx_values = [12, 13, 14]\ny_values = [11, 15, 19]\n\n# Calculate the differences in y-values and x-values\ny_diff_1 = y_values[1] - y_values[0]  # 15 - 11\ny_diff_2 = y_values[2] - y_values[1]  # 19 - 15\nx_diff_1 = x_values[1] - x_values[0]  # 13 - 12\nx_diff_2 = x_values[2] - x_values[1]  # 14 - 13\n\n# Check if the slopes (differences) are equal\nslope_1 = y_diff_1 / x_diff_1\nslope_2 = y_diff_2 / x_diff_2\n\nif slope_1 == slope_2:\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\n\nprint(answer)", "# Define the x and y values\nx_values = [12, 13, 14]\ny_values = [11, 15, 19]\n\n# Calculate the differences in y and x\ny_diff_1 = y_values[1] - y_values[0]  # 15 - 11\ny_diff_2 = y_values[2] - y_values[1]  # 19 - 15\nx_diff_1 = x_values[1] - x_values[0]  # 13 - 12\nx_diff_2 = x_values[2] - x_values[1]  # 14 - 13\n\n# Calculate the slopes\nslope_1 = y_diff_1 / x_diff_1\nslope_2 = y_diff_2 / x_diff_2\n\n# Determine if the function is linear or nonlinear\nif slope_1 == slope_2:\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\n\nprint(answer)"
], "prediction": ["linear", null, "linear", "linear"], "report": ["Done", "NameError(\"name 'differences' is not defined\")", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nwater heater | $599\nbarbecue grill | $202\nwashing machine | $145\nclothes dryer | $645", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nwater heater | $599\nbarbecue grill | $202\nwashing machine | $145\nclothes dryer | $645\n\nIsaiah has $836. Does he have enough to buy a clothes dryer and a barbecue grill? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \ncost_clothes_dryer = 645 \ncost_barbecue_grill = 202 \ntotal_cost = cost_clothes_dryer + cost_barbecue_grill\n\n# Check if Isaiah has enough money\nisaiah_budget = 836 \nif isaiah_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "cost_clothes_dryer = 645 \ncost_barbecue_grill = 202 \ntotal_cost = cost_clothes_dryer + cost_barbecue_grill\nisaiah_budget = 836 \n\nif isaiah_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "cost_clothes_dryer = 645 \ncost_barbecue_grill = 202 \ntotal_cost = cost_clothes_dryer + cost_barbecue_grill\nisaiah_budget = 836 \n\nif isaiah_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "cost_clothes_dryer = 645 \ncost_barbecue_grill = 202 \ntotal_cost = cost_clothes_dryer + cost_barbecue_grill\nisaiah_budget = 836 \n\nif isaiah_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)  # This will correctly output 'no'"], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Tractors\" and then answer a question.\n\nFarmer | Number of tractors\nFarmer Andy | 8\nFarmer Alex | 8\nFarmer Jane | 5\nFarmer Rob | 9\nFarmer Joe | 6\nFarmer Allison | 3\nFarmer Tom | 4\nFarmer Susie | 7", "question": "Read the following table regarding \"Tractors\" and then write Python code to answer a question.\n\nFarmer | Number of tractors\nFarmer Andy | 8\nFarmer Alex | 8\nFarmer Jane | 5\nFarmer Rob | 9\nFarmer Joe | 6\nFarmer Allison | 3\nFarmer Tom | 4\nFarmer Susie | 7\n\nSome farmers compared how many tractors they own. What is the range of the numbers?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of the number of tractors owned by each farmer\ntractors_count = [8, 8, 5, 9, 6, 3, 4, 7]\n# Calculate the range\nrange_tractors = max(tractors_count) - min(tractors_count)\nanswer = range_tractors\nprint(answer)", "tractors_count = [8, 8, 5, 9, 6, 3, 4, 7]\nrange_tractors = max(tractors_count) - min(tractors_count)\nanswer = int(range_tractors)  # Convert to integer to avoid floating-point output\nprint(answer)", "tractors_count = [8, 8, 5, 9, 6, 3, 4, 7]\nrange_tractors = max(tractors_count) - min(tractors_count)\nanswer = range_tractors  # No need to convert to int, as the result is already an integer\nprint(answer)", "tractors_count = [8, 8, 5, 9, 6, 3, 4, 7]\nrange_tractors = max(tractors_count) - min(tractors_count)\nanswer = int(range_tractors)  # Convert to int to ensure the result is an integer\nprint(answer)"], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nvolleyball | $8.47\nbaseball glove | $9.56\nbike horn | $2.47\njump rope | $6.08", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nvolleyball | $8.47\nbaseball glove | $9.56\nbike horn | $2.47\njump rope | $6.08\n\nHow much more does a baseball glove cost than a jump rope?", "answer": "3.48", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_baseball_glove = 9.56 \ncost_jump_rope = 6.08 \n# Calculate the difference in cost\ndifference_cost = cost_baseball_glove - cost_jump_rope\nanswer = difference_cost\nprint(answer)", "# Define the costs of the items\ncost_baseball_glove = 9.56\ncost_jump_rope = 6.08\n\n# Calculate the difference in cost\ndifference_cost = cost_baseball_glove - cost_jump_rope\n\n# Store the result in the variable 'answer'\nanswer = difference_cost\n\n# Output the answer\nprint(answer)", "cost_baseball_glove = 9.56\ncost_jump_rope = 6.08\ndifference_cost = cost_baseball_glove - cost_jump_rope\nanswer = difference_cost\nprint(answer)", "cost_baseball_glove = 9.56\ncost_jump_rope = 6.08\nanswer = cost_baseball_glove - cost_jump_rope\nprint(answer)"], "prediction": [3.48, 3.48, 3.48, 3.48], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of shelves | Number of blocks of cheese\n1 | 2\n2 | 4\n3 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of shelves | Number of blocks of cheese\n1 | 2\n2 | 4\n3 | ?\n\nEach shelf has 2 blocks of cheese. How many blocks of cheese are on 3 shelves?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nblocks_per_shelf = 2 \nnumber_of_shelves = 3 \n# Calculate the total number of blocks of cheese on 3 shelves\ntotal_blocks = blocks_per_shelf * number_of_shelves\nanswer = total_blocks\nprint(answer)", "blocks_per_shelf = 2 \nnumber_of_shelves = 3 \ntotal_blocks = blocks_per_shelf * number_of_shelves\nanswer = total_blocks  # This will be an integer\nprint(answer)", "blocks_per_shelf = 2 \nnumber_of_shelves = 3 \ntotal_blocks = blocks_per_shelf * number_of_shelves\nanswer = total_blocks  # This will be an integer\nprint(answer)", "blocks_per_shelf = 2 \nnumber_of_shelves = 3 \ntotal_blocks = blocks_per_shelf * number_of_shelves\nanswer = total_blocks  # This will be an integer\nprint(answer)"], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npasta with tomato sauce | $6\ncheese pizza | $5\nsteamed broccoli | $7\ngreen salad | $4\nspaghetti and meatballs | $8\npasta with white sauce | $7", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npasta with tomato sauce | $6\ncheese pizza | $5\nsteamed broccoli | $7\ngreen salad | $4\nspaghetti and meatballs | $8\npasta with white sauce | $7\n\nHow much money does Lee need to buy pasta with tomato sauce, pasta with white sauce, and spaghetti and meatballs?", "answer": "21", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices of the selected items\nprice_pasta_tomato_sauce = 6\nprice_pasta_white_sauce = 7\nprice_spaghetti_meatballs = 8\n\n# Calculate the total cost\ntotal_cost = price_pasta_tomato_sauce + price_pasta_white_sauce + price_spaghetti_meatballs\nanswer = total_cost\nprint(answer)", "# Prices of the items\nprice_pasta_tomato_sauce = 6\nprice_pasta_white_sauce = 7\nprice_spaghetti_meatballs = 8\n\n# Calculate the total cost\ntotal_cost = price_pasta_tomato_sauce + price_pasta_white_sauce + price_spaghetti_meatballs\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the prices of the items\nprice_pasta_tomato_sauce = 6\nprice_pasta_white_sauce = 7\nprice_spaghetti_meatballs = 8\n\n# Calculate the total cost\ntotal_cost = price_pasta_tomato_sauce + price_pasta_white_sauce + price_spaghetti_meatballs\n\n# Store the result as an integer since all prices are whole numbers\nanswer = total_cost\n\n# Print the answer with a clear monetary format\nprint(f'The total cost is: ${answer}')", "# Define the prices of the items\nprice_pasta_tomato_sauce = 6\nprice_pasta_white_sauce = 7\nprice_spaghetti_meatballs = 8\n\n# Calculate the total cost\ntotal_cost = price_pasta_tomato_sauce + price_pasta_white_sauce + price_spaghetti_meatballs\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)"
], "prediction": [21.0, 21.0, 21.0, 21.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$15 | 21,700 | 1,000\n$145 | 20,900 | 1,800\n$275 | 20,100 | 2,600\n$405 | 19,300 | 3,400\n$535 | 18,500 | 4,200", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$15 | 21,700 | 1,000\n$145 | 20,900 | 1,800\n$275 | 20,100 | 2,600\n$405 | 19,300 | 3,400\n$535 | 18,500 | 4,200\n\nLook at the table. Then answer the question. At a price of $15, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "shortage", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": ["# Python code, return answer \nquantity_demanded = 21700\nquantity_supplied = 1000\n\n# Determine if there is a shortage or surplus\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelse:\n    answer = 'surplus'\n\nprint(answer)", "# Define the quantity demanded and supplied at the price of $15\nquantity_demanded = 21700\nquantity_supplied = 1000\n\n# Determine if there is a shortage or surplus\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelse:\n    answer = 'surplus'\n\nprint(answer)", "quantity_demanded = 21700\nquantity_supplied = 1000\n\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelse:\n    answer = 'surplus'\n\nprint(answer)  # This will output 'shortage'", "quantity_demanded = 21700\nquantity_supplied = 1000\n\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'neither shortage nor surplus'\n\nprint(answer)  # This will output 'shortage'"], "prediction": ["shortage", "shortage", "shortage", "shortage"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Butterscotch candies per bag\" and then answer a question.\n\nStem | Leaf \n0 | 9\n1 | \n2 | 1, 2, 4\n3 | \n4 | 7\n5 | 0, 0, 0\n6 | 9\n7 | 0, 1, 5\n8 | 0, 8\n9 | 0", "question": "Read the following table regarding \"Butterscotch candies per bag\" and then write Python code to answer a question.\n\nStem | Leaf \n0 | 9\n1 | \n2 | 1, 2, 4\n3 | \n4 | 7\n5 | 0, 0, 0\n6 | 9\n7 | 0, 1, 5\n8 | 0, 8\n9 | 0\n\nAt a candy factory, butterscotch candies were packaged into bags of different sizes. What is the smallest number of butterscotch candies?", "answer": "9", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# The smallest number of butterscotch candies corresponds to the smallest value in the stem-and-leaf display.\nsmallest_candies = 9  # From the stem \"0 | 9\", the value is 9 candies.\nanswer = smallest_candies\nprint(answer)", "smallest_candies = 9  # From the stem \"0 | 9\", the value is 9 candies.\nanswer = int(smallest_candies)  # Convert to integer for clarity\nprint(answer)", "smallest_candies = 9  # From the stem \"0 | 9\", the value is 9 candies.\nanswer = smallest_candies  # Keep it as an integer\nprint(answer)", "# The smallest number of butterscotch candies from the stem-leaf plot is directly taken from the first entry.\nsmallest_candies = 9  # From the stem \"0 | 9\", the value is 9 candies.\nanswer = int(smallest_candies)  # Ensure it is explicitly treated as an integer\nprint(answer)"], "prediction": [9.0, 9.0, 9.0, 9.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbox of crayons | $2.24\nsilver glitter pen | $2.88\nbox of colored pencils | $1.25\nrubber stamp | $1.51\nbox of paper clips | $1.47", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbox of crayons | $2.24\nsilver glitter pen | $2.88\nbox of colored pencils | $1.25\nrubber stamp | $1.51\nbox of paper clips | $1.47\n\nHow much money does Billy need to buy 5 boxes of crayons?", "answer": "11.20", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_box_of_crayons = 2.24 \nnumber_of_boxes = 5 \n# Calculate total cost for 5 boxes of crayons\ntotal_cost = price_per_box_of_crayons * number_of_boxes\nanswer = total_cost\nprint(answer)", "price_per_box_of_crayons = 2.24 \nnumber_of_boxes = 5 \ntotal_cost = price_per_box_of_crayons * number_of_boxes\nanswer = \"{:.2f}\".format(total_cost)  # Format the output to two decimal places\nprint(answer)", "price_per_box_of_crayons = 2.24 \nnumber_of_boxes = 5 \ntotal_cost = price_per_box_of_crayons * number_of_boxes\nanswer = round(total_cost, 2)  # Round the output to two decimal places\nprint(answer)", "price_per_box_of_crayons = 2.24 \nnumber_of_boxes = 5 \ntotal_cost = price_per_box_of_crayons * number_of_boxes\nanswer = \"{:.2f}\".format(total_cost)  # Format the output to two decimal places\nprint(answer)"], "prediction": [11.2, 11.2, 11.2, 11.2], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npair of brown pants | $21.36\npair of shorts | $16.65\npair of tennis shoes | $15.63\ndenim jacket | $22.82\nblack jacket | $12.64\npair of boots | $35.51", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npair of brown pants | $21.36\npair of shorts | $16.65\npair of tennis shoes | $15.63\ndenim jacket | $22.82\nblack jacket | $12.64\npair of boots | $35.51\n\nHow much money does David need to buy 4 pairs of shorts?", "answer": "66.60", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pair_of_shorts = 16.65 \npairs_of_shorts_to_buy = 4 \ntotal_cost = price_per_pair_of_shorts * pairs_of_shorts_to_buy\nanswer = total_cost\nprint(answer)", "price_per_pair_of_shorts = 16.65  \npairs_of_shorts_to_buy = 4  \ntotal_cost = price_per_pair_of_shorts * pairs_of_shorts_to_buy  \nanswer = \"{:.2f}\".format(total_cost)  \nprint(answer)", "price_per_pair_of_shorts = 16.65  \npairs_of_shorts_to_buy = 4  \ntotal_cost = price_per_pair_of_shorts * pairs_of_shorts_to_buy  \nanswer = total_cost  \nprint(answer)", "price_per_pair_of_shorts = 16.65  \npairs_of_shorts_to_buy = 4  \ntotal_cost = price_per_pair_of_shorts * pairs_of_shorts_to_buy  \nanswer = f\"${total_cost:.2f}\"  # Format the output to two decimal places  \nprint(answer)"], "prediction": [66.6, 66.6, 66.6, "$66.60"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ngranola | $0.64/lb\ninstant oatmeal | $1.15/lb\nquick oatmeal | $1.47/lb\nold-fashioned oatmeal | $0.74/lb", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ngranola | $0.64/lb\ninstant oatmeal | $1.15/lb\nquick oatmeal | $1.47/lb\nold-fashioned oatmeal | $0.74/lb\n\nHow much would it cost to buy 4 pounds of quick oatmeal ?", "answer": "5.88", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_quick_oatmeal = 1.47 \npounds_bought = 4 \n# Calculate the total cost\ntotal_cost = price_per_pound_quick_oatmeal * pounds_bought\nanswer = total_cost\nprint(answer)", "# Define the price per pound for quick oatmeal  \nprice_per_pound_quick_oatmeal = 1.47  \n\n# Define the number of pounds to buy  \npounds_bought = 4  \n\n# Calculate the total cost  \ntotal_cost = price_per_pound_quick_oatmeal * pounds_bought  \n\n# Store the result in the answer variable  \nanswer = total_cost  \n\n# Output the answer  \nprint(answer)", "# Define the price per pound for quick oatmeal and the number of pounds to buy\nprice_per_pound_quick_oatmeal = 1.47  \npounds_bought = 4  \n\n# Calculate the total cost\ntotal_cost = price_per_pound_quick_oatmeal * pounds_bought  \n\n# Store the result in the variable 'answer'\nanswer = total_cost  \n\n# Print the answer\nprint(answer)", "# Define the price per pound of quick oatmeal and the number of pounds to buy\nprice_per_pound_quick_oatmeal = 1.47  \npounds_bought = 4  \n\n# Calculate the total cost\ntotal_cost = price_per_pound_quick_oatmeal * pounds_bought  \n\n# Format the total cost as currency\nanswer = f\"${total_cost:.2f}\"  \nprint(answer)"], "prediction": [5.88, 5.88, 5.88, "$5.88"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Students receiving scholarships\" and then answer a question.\n\nYear | Students\n2012 | 44\n2013 | 45\n2014 | 48\n2015 | 28\n2016 | 45", "question": "Read the following table regarding \"Students receiving scholarships\" and then write Python code to answer a question.\n\nYear | Students\n2012 | 44\n2013 | 45\n2014 | 48\n2015 | 28\n2016 | 45\n\nThe financial aid office at Barton University produced an internal report on the number of students receiving scholarships. According to the table, what was the rate of change between 2013 and 2014?", "answer": "3", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nstudents_2013 = 45\nstudents_2014 = 48\n\n# Calculate the rate of change\nrate_of_change = students_2014 - students_2013\nanswer = rate_of_change\nprint(answer)", "students_2013 = 45\nstudents_2014 = 48\nrate_of_change = (students_2014 - students_2013) / students_2013 * 100\nanswer = rate_of_change\nprint(answer)", "students_2013 = 45\nstudents_2014 = 48\nrate_of_change = (students_2014 - students_2013) / students_2013 * 100\nanswer = round(rate_of_change, 2)  # Round to two decimal places for readability\nprint(answer)", "students_2013 = 45\nstudents_2014 = 48\nrate_of_change = (students_2014 - students_2013) / students_2013 * 100\nanswer = round(rate_of_change, 2)  # Round to two decimal places for readability\nprint(answer)"], "prediction": [3.0, 6.66667, 6.67, 6.67], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Dog | Cat\nA vegetarian diet | 3 | 6\nAn omnivorous diet | 5 | 6", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Dog | Cat\nA vegetarian diet | 3 | 6\nAn omnivorous diet | 5 | 6\n\nA health instructor surveyed all her students, and tallied the results. The first survey question asked, \"Do you adhere to a vegetarian diet or omnivorous diet?\" The second question asked, \"If you were to buy a pet today, which animal would it be?\" What is the probability that a randomly selected student adheres to a vegetarian diet and would buy a cat? Simplify any fractions.", "answer": "3/10", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total number of students adhering to a vegetarian diet\nvegetarian_cats = 6\n# Total number of students surveyed (Vegetarian + Omnivorous)\ntotal_students = 3 + 6 + 5 + 6\n# Probability calculation\nprobability = vegetarian_cats / total_students\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(vegetarian_cats, total_students).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Define the number of students adhering to a vegetarian diet who would buy a cat\nvegetarian_cats = 6\n\n# Define the total number of students surveyed\ntotal_students = 3 + 6 + 5 + 6\n\n# Calculate the probability as a fraction\nfrom fractions import Fraction\nprobability = Fraction(vegetarian_cats, total_students).limit_denominator()\n\n# Store the simplified probability in the variable 'answer'\nanswer = probability\nprint(answer)", "# Define the number of students adhering to each diet and their pet preferences\nvegetarian_cats = 6  # Number of students on a vegetarian diet who would buy a cat\nvegetarian_dogs = 3   # Number of students on a vegetarian diet who would buy a dog\nomnivorous_cats = 6   # Number of students on an omnivorous diet who would buy a cat\nomnivorous_dogs = 5   # Number of students on an omnivorous diet who would buy a dog\n\n# Calculate the total number of students\ntotal_students = vegetarian_cats + vegetarian_dogs + omnivorous_cats + omnivorous_dogs\n\n# Calculate the probability of selecting a student who adheres to a vegetarian diet and would buy a cat\nprobability = vegetarian_cats / total_students\n\n# Store the result in the variable 'answer'\nanswer = probability\n\n# Print the result\nprint(answer)", "from fractions import Fraction\n\nvegetarian_cats = 6  # Number of students on a vegetarian diet who would buy a cat\nvegetarian_dogs = 3   # Number of students on a vegetarian diet who would buy a dog\nomnivorous_cats = 6   # Number of students on an omnivorous diet who would buy a cat\nomnivorous_dogs = 5   # Number of students on an omnivorous diet who would buy a dog\n\ntotal_students = vegetarian_cats + vegetarian_dogs + omnivorous_cats + omnivorous_dogs\nprobability = Fraction(vegetarian_cats, total_students).limit_denominator()  # Simplify the fraction\nanswer = probability\nprint(answer)"
], "prediction": [0.3, 0.3, 0.3, 0.3], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ndishwasher | $401\nbarbecue grill | $512\nstove | $591\nwashing machine | $171", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ndishwasher | $401\nbarbecue grill | $512\nstove | $591\nwashing machine | $171\n\nRoger has $1,485. How much money will Roger have left if he buys a washing machine and a dishwasher?", "answer": "913", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices of the appliances\nprice_dishwasher = 401\nprice_washing_machine = 171\n# Total cost of the appliances\ntotal_cost = price_dishwasher + price_washing_machine\n# Roger's initial amount of money\ninitial_amount = 1485\n# Money left after purchases\nmoney_left = initial_amount - total_cost\nanswer = money_left\nprint(answer)", "# Prices of the appliances\nprice_dishwasher = 401\nprice_washing_machine = 171\n\n# Total cost calculation\ntotal_cost = price_dishwasher + price_washing_machine\n\n# Roger's initial amount of money\ninitial_amount = 1485\n\n# Calculate the amount of money left after the purchases\nmoney_left = initial_amount - total_cost\n\n# Store the result in the variable 'answer'\nanswer = money_left\n\n# Output the answer\nprint(answer)", "price_dishwasher = 401\nprice_washing_machine = 171\ntotal_cost = price_dishwasher + price_washing_machine\ninitial_amount = 1485\nmoney_left = initial_amount - total_cost\nanswer = round(money_left)  # Round to eliminate the decimal point\nprint(answer)", "# Prices of the items\nprice_dishwasher = 401\nprice_washing_machine = 171\n\n# Calculate total cost\ntotal_cost = price_dishwasher + price_washing_machine\n\n# Initial amount Roger has\ninitial_amount = 1485\n\n# Calculate money left after purchase\nmoney_left = initial_amount - total_cost\n\n# Store the result in the variable 'answer'\nanswer = money_left\n\n# Print the answer\nprint(answer)"
], "prediction": [913.0, 913.0, 913.0, 913.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | 1 passenger | 2 passengers\nBlue | 6 | 4\nYellow | 3 | 5", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | 1 passenger | 2 passengers\nBlue | 6 | 4\nYellow | 3 | 5\n\nAt a hot air balloon festival, Harold made note of how many passengers were in each balloon and the color of each balloon. What is the probability that a randomly selected hot air balloon is blue and contains 1 passenger? Simplify any fractions.", "answer": "1/3", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total balloons \ntotal_balloons = 6 + 4 + 3 + 5\n# Balloons that are blue and contain 1 passenger\nblue_one_passenger = 6\n# Calculate the probability\nprobability_blue_one = blue_one_passenger / total_balloons\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(blue_one_passenger, total_balloons).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Define the counts of balloons\nblue_one_passenger = 6\nblue_two_passengers = 4\nyellow_one_passenger = 3\nyellow_two_passengers = 5\n\n# Calculate the total number of balloons\ntotal_balloons = blue_one_passenger + blue_two_passengers + yellow_one_passenger + yellow_two_passengers\n\n# Calculate the probability of selecting a blue balloon with 1 passenger\nprobability_blue_one = Fraction(blue_one_passenger, total_balloons)\n\n# Simplify the fraction\nsimplified_probability = probability_blue_one.limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = simplified_probability\nprint(answer)", "# Define the number of balloons\nblue_one_passenger = 6\nyellow_one_passenger = 3\nblue_two_passengers = 4\nyellow_two_passengers = 5\n\n# Calculate the total number of balloons\ntotal_balloons = blue_one_passenger + yellow_one_passenger + blue_two_passengers + yellow_two_passengers\n\n# Calculate the probability of selecting a blue balloon with 1 passenger\nfrom fractions import Fraction\nprobability_blue_one = Fraction(blue_one_passenger, total_balloons).limit_denominator()\n\nanswer = probability_blue_one\nprint(answer)", "blue_one_passenger = 6\nyellow_one_passenger = 3\nblue_two_passengers = 4\nyellow_two_passengers = 5\n\n# Calculate the total number of balloons\ntotal_balloons = blue_one_passenger + yellow_one_passenger + blue_two_passengers + yellow_two_passengers\n\n# Calculate the probability that a randomly selected hot air balloon is blue and contains 1 passenger\nfrom fractions import Fraction\nprobability_blue_one = Fraction(blue_one_passenger, total_balloons).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = probability_blue_one\nprint(answer)"
], "prediction": [0.33333, null, 0.33333, 0.33333], "report": ["Done", "NameError(\"name 'Fraction' is not defined\")", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Drawing a card between 4 and 9\" and then answer a question.\n\nNumber drawn | Frequency\n4 | 14\n5 | 11\n6 | 3\n7 | 9\n8 | 18\n9 | 16", "question": "Read the following table regarding \"Drawing a card between 4 and 9\" and then write Python code to answer a question.\n\nNumber drawn | Frequency\n4 | 14\n5 | 11\n6 | 3\n7 | 9\n8 | 18\n9 | 16\n\nA math textbook explains probability by showing a set of cards numbered 4 through 9 and showing the number of people who might draw each card. Which number was drawn the most times?", "answer": "8", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Create a dictionary for the frequency of each number drawn\nfrequency = {\n    4: 14,\n    5: 11,\n    6: 3,\n    7: 9,\n    8: 18,\n    9: 16\n}\n\n# Find the number that was drawn the most times\nmost_drawn_number = max(frequency, key=frequency.get)\nanswer = most_drawn_number\nprint(answer)", "frequency = {\n    4: 14,\n    5: 11,\n    6: 3,\n    7: 9,\n    8: 18,\n    9: 16\n}\nmost_drawn_number = max(frequency, key=frequency.get)\nanswer = int(most_drawn_number)  # Convert to integer to avoid float output\nprint(answer)", "frequency = {\n    4: 14,\n    5: 11,\n    6: 3,\n    7: 9,\n    8: 18,\n    9: 16\n}\nmost_drawn_number = max(frequency, key=frequency.get)\nanswer = most_drawn_number  # No need to convert to integer as it is already an integer\nprint(answer)", "frequency = {\n    4: 14,\n    5: 11,\n    6: 3,\n    7: 9,\n    8: 18,\n    9: 16\n}\nmost_drawn_number = max(frequency, key=frequency.get)\nanswer = int(most_drawn_number)  # Convert to integer to avoid float representation\nprint(answer)"], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Peanuts per bag of trail mix\" and then answer a question.\n\nStem | Leaf \n4 | 6\n5 | 3\n6 | 3, 9\n7 | 0, 2, 2, 2, 2, 7, 8\n8 | 5, 9", "question": "Read the following table regarding \"Peanuts per bag of trail mix\" and then write Python code to answer a question.\n\nStem | Leaf \n4 | 6\n5 | 3\n6 | 3, 9\n7 | 0, 2, 2, 2, 2, 7, 8\n8 | 5, 9\n\nLola counted the number of peanuts in each bag of trail mix. How many bags had exactly 72 peanuts?", "answer": "4", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# From the stem-and-leaf display, we look for the stem \"7\" and the leaf \"2\"\nbags_with_72_peanuts = 1  # There is one entry for 72 peanuts.\nanswer = bags_with_72_peanuts\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(4, [6]), (5, [3]), (6, [3, 9]), (7, [0, 2, 2, 2, 2, 7, 8]), (8, [5, 9])]\n\n# Initialize counter for bags with exactly 72 peanuts\nbags_with_72_peanuts = 0\n\n# Iterate through the stem and leaf data structure and count relevant bags\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        if stem == 7 and leaf == 2:  # 72 is represented by stem 7 and leaf 2\n            bags_with_72_peanuts += 1\n\nanswer = bags_with_72_peanuts\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(4, [6]), (5, [3]), (6, [3, 9]), (7, [0, 2, 2, 2, 2, 7, 8]), (8, [5, 9])]  \n  \n# Initialize counter for bags with exactly 72 peanuts  \nbags_with_72_peanuts = 0  \n  \n# Iterate through the stem and leaf data structure and count relevant bags  \nfor stem, leaf_list in stem_and_leaf:  \n    if stem == 7:  # Only check stem 7 for 72 peanuts  \n        bags_with_72_peanuts += leaf_list.count(2)  # Count occurrences of leaf 2  \n  \nanswer = bags_with_72_peanuts  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(4, [6]), (5, [3]), (6, [3, 9]), (7, [0, 2, 2, 2, 2, 7, 8]), (8, [5, 9])]  \n\n# Initialize counter for bags with exactly 72 peanuts  \nbags_with_72_peanuts = 0  \n\n# Iterate through the stem and leaf data structure and count relevant bags  \nfor stem, leaf_list in stem_and_leaf:  \n    if stem == 7:  # Only check stem 7 for 72 peanuts  \n        bags_with_72_peanuts += leaf_list.count(2)  # Count occurrences of leaf 2  \n\nanswer = bags_with_72_peanuts  # Ensure answer is an integer\nprint(answer)"
], "prediction": [1.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nsailboat | $528.00\nmotorcycle | $932.00\ncanoe | $774.00\nsnowmobile | $664.00\nkayak | $308.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nsailboat | $528.00\nmotorcycle | $932.00\ncanoe | $774.00\nsnowmobile | $664.00\nkayak | $308.00\n\nKeenan has $1,482.00. Does he have enough to buy a motorcycle and a sailboat? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \n# Prices of the motorcycle and sailboat\nprice_motorcycle = 932.00\nprice_sailboat = 528.00\n# Total cost to buy both\ntotal_cost = price_motorcycle + price_sailboat\n# Keenan's available funds\nkeenan_funds = 1482.00\n# Determine if he has enough money\nif keenan_funds >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "price_motorcycle = 932.00\nprice_sailboat = 528.00\ntotal_cost = price_motorcycle + price_sailboat\nkeenan_funds = 1482.00\n\nif keenan_funds >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\n# Output the result\nprint(answer)", "# Define the prices of the items\nprice_motorcycle = 932.00\nprice_sailboat = 528.00\n\n# Calculate the total cost\ntotal_cost = price_motorcycle + price_sailboat\n\n# Define Keenan's available funds\nkeenan_funds = 1482.00\n\n# Check if Keenan has enough funds\nanswer = 'yes' if keenan_funds >= total_cost else 'no'\n\n# Print the answer\nprint(answer)", "# Define the prices of the motorcycle and sailboat\nprice_motorcycle = 932.00\nprice_sailboat = 528.00\n\n# Calculate the total cost of both items\ntotal_cost = price_motorcycle + price_sailboat\n\n# Define Keenan's available funds\nkeenan_funds = 1482.00\n\n# Determine if Keenan has enough money and store the result in 'answer'\nanswer = 'yes' if keenan_funds >= total_cost else 'no'\n\n# Output the answer\nprint(answer)"], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Doing pull-ups\" and then answer a question.\n\nNumber of pull-ups | Frequency\n0 | 17\n1 | 15\n2 | 4\n3 | 0\n4 | 19\n5 | 12", "question": "Read the following table regarding \"Doing pull-ups\" and then write Python code to answer a question.\n\nNumber of pull-ups | Frequency\n0 | 17\n1 | 15\n2 | 4\n3 | 0\n4 | 19\n5 | 12\n\nJackson, a fitness counselor, counted the number of pull-ups completed by each bootcamp participant. How many participants did more than 1 pull-up?", "answer": "35", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of participants for each number of pull-ups\nfrequency = {\n    0: 17,\n    1: 15,\n    2: 4,\n    3: 0,\n    4: 19,\n    5: 12\n}\n\n# Calculate the total number of participants who did more than 1 pull-up\nparticipants_more_than_one = frequency[2] + frequency[3] + frequency[4] + frequency[5]\nanswer = participants_more_than_one\nprint(answer)", "frequency = {\n    0: 17,\n    1: 15,\n    2: 4,\n    3: 0,\n    4: 19,\n    5: 12\n}\n\n# Calculate the number of participants who did more than 1 pull-up\nparticipants_more_than_one = frequency[2] + frequency[3] + frequency[4] + frequency[5]\nanswer = participants_more_than_one\nprint(answer)", "frequency = {\n    0: 17,\n    1: 15,\n    2: 4,\n    3: 0,\n    4: 19,\n    5: 12\n}\n\n# Count participants who did more than 1 pull-up\nparticipants_more_than_one = sum(frequency[pullups] for pullups in frequency if pullups > 1)\nanswer = participants_more_than_one\nprint(answer)", "# Define the frequency of pull-ups in a dictionary\nfrequency = {\n    0: 17,\n    1: 15,\n    2: 4,\n    3: 0,\n    4: 19,\n    5: 12\n}\n\n# Calculate the number of participants who did more than 1 pull-up\nparticipants_more_than_one = sum(frequency[pull_ups] for pull_ups in range(2, 6))\n\n# Store the result in the variable 'answer'\nanswer = participants_more_than_one\n\n# Print the answer\nprint(answer)"], "prediction": [35.0, 35.0, null, null], "report": ["Done", "Done", "NameError(\"name 'frequency' is not defined\")", "NameError(\"name 'frequency' is not defined\")"]
}
{
  "context": "Read the following table regarding \"High school schedule\" and then answer a question.\n\nEvent | Begin | End\nwomen's soccer practice | 2:25 P.M. | 3:35 P.M.\nstudent government meeting | 3:10 P.M. | 4:50 P.M.\nmen's soccer practice | 4:10 P.M. | 5:35 P.M.\nwater polo practice | 5:20 P.M. | 6:10 P.M.\nmarching band practice | 6:00 P.M. | 7:30 P.M.\nchoir concert | 7:15 P.M. | 8:00 P.M.", "question": "Read the following table regarding \"High school schedule\" and then write Python code to answer a question.\n\nEvent | Begin | End\nwomen's soccer practice | 2:25 P.M. | 3:35 P.M.\nstudent government meeting | 3:10 P.M. | 4:50 P.M.\nmen's soccer practice | 4:10 P.M. | 5:35 P.M.\nwater polo practice | 5:20 P.M. | 6:10 P.M.\nmarching band practice | 6:00 P.M. | 7:30 P.M.\nchoir concert | 7:15 P.M. | 8:00 P.M.\n\nLook at the following schedule. Which event ends at 4.50 P.M.? Choose from the the options: ['choir concert', 'marching band practice', 'student government meeting', \"men's soccer practice\"]", "answer": "student government meeting", "ques_type": "multi_choice", "choices": ["choir concert", "marching band practice", "student government meeting", "men's soccer practice"], "code": [
  "# Python code, return answer \nevents = {\n    'women\\'s soccer practice': ('2:25 P.M.', '3:35 P.M.'),\n    'student government meeting': ('3:10 P.M.', '4:50 P.M.'),\n    'men\\'s soccer practice': ('4:10 P.M.', '5:35 P.M.'),\n    'water polo practice': ('5:20 P.M.', '6:10 P.M.'),\n    'marching band practice': ('6:00 P.M.', '7:30 P.M.'),\n    'choir concert': ('7:15 P.M.', '8:00 P.M.')\n}\n\n# Identify the event that ends at 4:50 P.M.\nevent_ends_at_450 = [event for event, times in events.items() if times[1] == '4:50 P.M.']\nanswer = event_ends_at_450[0] if event_ends_at_450 else None\nprint(answer)", "events = {\n    'women\\'s soccer practice': ('2:25 P.M.', '3:35 P.M.'),\n    'student government meeting': ('3:10 P.M.', '4:50 P.M.'),\n    'men\\'s soccer practice': ('4:10 P.M.', '5:35 P.M.'),\n    'water polo practice': ('5:20 P.M.', '6:10 P.M.'),\n    'marching band practice': ('6:00 P.M.', '7:30 P.M.'),\n    'choir concert': ('7:15 P.M.', '8:00 P.M.')\n}\n\n# Find events that end at 4:50 P.M.\nevents_ending_at_450 = [event for event, times in events.items() if times[1] == '4:50 P.M.']\n\n# Store the answer\nanswer = events_ending_at_450 if events_ending_at_450 else None\nprint(answer)", "events = {\n    'women\\'s soccer practice': ('2:25 P.M.', '3:35 P.M.'),\n    'student government meeting': ('3:10 P.M.', '4:50 P.M.'),\n    'men\\'s soccer practice': ('4:10 P.M.', '5:35 P.M.'),\n    'water polo practice': ('5:20 P.M.', '6:10 P.M.'),\n    'marching band practice': ('6:00 P.M.', '7:30 P.M.'),\n    'choir concert': ('7:15 P.M.', '8:00 P.M.')\n}\n\n# Find the event that ends at 4:50 P.M.\nanswer = next((event for event, times in events.items() if times[1] == '4:50 P.M.'), None)\nprint(answer)", "events = {\n    'women\\'s soccer practice': ('2:25 P.M.', '3:35 P.M.'),\n    'student government meeting': ('3:10 P.M.', '4:50 P.M.'),\n    'men\\'s soccer practice': ('4:10 P.M.', '5:35 P.M.'),\n    'water polo practice': ('5:20 P.M.', '6:10 P.M.'),\n    'marching band practice': ('6:00 P.M.', '7:30 P.M.'),\n    'choir concert': ('7:15 P.M.', '8:00 P.M.')\n}\n\n# Find the event that ends at 4:50 P.M.\nanswer = next((event for event, times in events.items() if times[1] == '4:50 P.M.'), None)\nprint(answer)"
], "prediction": ["student government meeting", "student government meeting", "student government meeting", "student government meeting"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Straight-A students\" and then answer a question.\n\nYear | Students\n2017 | 13\n2018 | 5\n2019 | 10\n2020 | 13\n2021 | 21", "question": "Read the following table regarding \"Straight-A students\" and then write Python code to answer a question.\n\nYear | Students\n2017 | 13\n2018 | 5\n2019 | 10\n2020 | 13\n2021 | 21\n\nA school administrator who was concerned about grade inflation looked over the number of straight-A students from year to year. According to the table, what was the rate of change between 2019 and 2020?", "answer": "3", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of straight-A students for the years 2019 and 2020\nstudents_2019 = 10\nstudents_2020 = 13\n\n# Rate of change calculation\nrate_of_change = students_2020 - students_2019\nanswer = rate_of_change\nprint(answer)", "students_2019 = 10\nstudents_2020 = 13\nchange = students_2020 - students_2019\nrate_of_change = (change / students_2019) * 100\nanswer = rate_of_change\nprint(answer)", "students_2019 = 10\nstudents_2020 = 13\nchange = students_2020 - students_2019\nrate_of_change = (change / students_2019) * 100\n\n# Determine if the change is an increase or decrease\nif change > 0:\n    change_description = \"increase\"\nelse:\n    change_description = \"decrease\"\n\n# Store the result in a formatted string\nanswer = f\"The rate of change from 2019 to 2020 is an {change_description} of {rate_of_change}%.\"\nprint(answer)", "students_2019 = 10\nstudents_2020 = 13\nchange = students_2020 - students_2019\nrate_of_change = (change / students_2019) * 100\nchange_description = \"increase\" if change > 0 else \"decrease\"\n\nanswer = f\"The rate of change from 2019 to 2020 is an {change_description} of {rate_of_change:.1f}%.\"\nprint(answer)"], "prediction": [3.0, 30.0, "The rate of change from 2019 to 2020 is an increase of 30.0%.", "The rate of change from 2019 to 2020 is an increase of 30.0%."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n11 | 9\n12 | 6\n13 | 3", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n11 | 9\n12 | 6\n13 | 3\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "linear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for constant x differences.\nx_values = [11, 12, 13]\ny_values = [9, 6, 3]\n\n# Calculate the differences in y-values\ny_differences = [y_values[i+1] - y_values[i] for i in range(len(y_values) - 1)]\n\n# Calculate the differences in x-values (constant in this case)\nx_difference = x_values[1] - x_values[0]  # This is 1 for all pairs\n\n# Check if the differences in y-values are constant\nis_linear = all(y == y_differences[0] for y in y_differences)\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values\nx_values = [11, 12, 13]\ny_values = [9, 6, 3]\n\n# Calculate the differences in y values\ny_differences = [y_values[i+1] - y_values[i] for i in range(len(y_values) - 1)]\n\n# Calculate the differences in x values (which are constant in this case)\nx_difference = x_values[1] - x_values[0]  # This is 1 for all pairs\n\n# Check if the differences in y values are consistent\nis_linear = all(y == y_differences[0] for y in y_differences)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values\nx_values = [11, 12, 13]\ny_values = [9, 6, 3]\n\n# Calculate the slopes between consecutive points\nslopes = []\nfor i in range(1, len(x_values)):\n    slope = (y_values[i] - y_values[i - 1]) / (x_values[i] - x_values[i - 1])\n    slopes.append(slope)\n\n# Check if all slopes are the same\nis_linear = all(slope == slopes[0] for slope in slopes)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "x_values = [11, 12, 13]\ny_values = [9, 6, 3]\n\n# Calculate the differences in y-values\ny_differences = [y_values[i+1] - y_values[i] for i in range(len(y_values) - 1)]\n\n# Calculate the differences in x-values (constant in this case)\nx_difference = x_values[1] - x_values[0]  # This is 1 for all pairs\n\n# Check if the y-differences are constant\nis_linear = all(y == y_differences[0] for y in y_differences)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'y_differences' is not defined\")", "NameError(\"name 'y_differences' is not defined\")", "NameError(\"name 'slopes' is not defined\")", "NameError(\"name 'y_differences' is not defined\")"]
}
{
  "context": "Read the following table regarding \"Distribution of plant types\" and then answer a question.\n\nType | Number of plants\nBiennials | 38\nAnnuals | 47\nPerennials | 52", "question": "Read the following table regarding \"Distribution of plant types\" and then write Python code to answer a question.\n\nType | Number of plants\nBiennials | 38\nAnnuals | 47\nPerennials | 52\n\nA plant nursery in Oxford keeps records of how many of its plants are annuals, biennials, and perennials. What fraction of the plants are annuals? Simplify your answer.", "answer": "47/137", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Total number of plants\nbiennials = 38\nannuals = 47\nperennials = 52\n\ntotal_plants = biennials + annuals + perennials\n\n# Calculate the fraction of plants that are annuals\nfraction_annuals = annuals / total_plants\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_fraction = Fraction(annuals, total_plants).limit_denominator()\nanswer = simplified_fraction\nprint(answer)", "biennials = 38\nannuals = 47\nperennials = 52\ntotal_plants = biennials + annuals + perennials\n\n# Calculate the fraction of annuals and simplify it\nfrom fractions import Fraction\nsimplified_fraction = Fraction(annuals, total_plants).limit_denominator()\n\nanswer = simplified_fraction\nprint(answer)", "biennials = 38\nannuals = 47\nperennials = 52\ntotal_plants = biennials + annuals + perennials\n\nfrom fractions import Fraction\nsimplified_fraction = Fraction(annuals, total_plants).limit_denominator()\nanswer = simplified_fraction\nprint(answer)", "biennials = 38\nannuals = 47\nperennials = 52\ntotal_plants = biennials + annuals + perennials\n\nfrom fractions import Fraction\nsimplified_fraction = Fraction(annuals, total_plants).limit_denominator()\nanswer = simplified_fraction\n\nprint(answer)"], "prediction": [0.34307, 0.34307, 0.34307, 0.34307], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Convenience store beverage sales\" and then answer a question.\n\nBeverage | Friday | Saturday\nKrazy Kola | $7 | $2\nKickin' Coffee | $10 | $16\nFizzy Fun | $15 | $6", "question": "Read the following table regarding \"Convenience store beverage sales\" and then write Python code to answer a question.\n\nBeverage | Friday | Saturday\nKrazy Kola | $7 | $2\nKickin' Coffee | $10 | $16\nFizzy Fun | $15 | $6\n\nKathleen, an employee at McCarthy's Convenience Store, looked at the sales of each of its soda products. How much did the convenience store make from Krazy Kola sales on Saturday?", "answer": "2", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Sales of Krazy Kola on Saturday\nkrazy_kola_sales_saturday = 2 \n# To find the total revenue, we need to consider the number of sales. \n# Since the problem doesn't specify, we assume the value given is the total revenue from sales.\nanswer = krazy_kola_sales_saturday\nprint(answer)", "krazy_kola_price_saturday = 2  # Price per unit\nkrazy_kola_sales_saturday = 2   # Number of sales\ntotal_revenue_krazy_kola = krazy_kola_price_saturday * krazy_kola_sales_saturday\nanswer = total_revenue_krazy_kola\nprint(answer)", "krazy_kola_price_saturday = 2  # Price per unit\nkrazy_kola_sales_saturday = 4   # Assuming 4 units sold\ntotal_revenue_krazy_kola = krazy_kola_price_saturday * krazy_kola_sales_saturday\nanswer = total_revenue_krazy_kola\nprint(answer)", "krazy_kola_price_saturday = 2  # Price per unit\nkrazy_kola_sales_saturday = 0   # Set this to the actual number of units sold\ntotal_revenue_krazy_kola = krazy_kola_price_saturday * krazy_kola_sales_saturday\nanswer = total_revenue_krazy_kola\nprint(answer)"], "prediction": [2.0, 4.0, 8.0, 0.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nraspberry jam | $4/lb\nblueberry jam | $4/lb\nblackberry jam | $8/lb\nmarmalade | $4/lb", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nraspberry jam | $4/lb\nblueberry jam | $4/lb\nblackberry jam | $8/lb\nmarmalade | $4/lb\n\nAiden went to the store and bought 2+1/2 pounds of marmalade. How much did he spend?", "answer": "10", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_marmalade = 4  # price of marmalade\npounds_bought = 2 + 1/2  # 2 and 1/2 pounds\n# Calculate total cost\ntotal_cost = price_per_pound_marmalade * pounds_bought\nanswer = total_cost\nprint(answer)", "price_per_pound_marmalade = 4  # price of marmalade in dollars\npounds_bought = 2.5  # 2.5 pounds\ntotal_cost = price_per_pound_marmalade * pounds_bought\nanswer = total_cost\nprint(answer)", "price_per_pound_marmalade = 4  # price of marmalade in dollars\npounds_bought = 2 + 1/2  # 2 + 1/2 pounds\ntotal_cost = price_per_pound_marmalade * pounds_bought\nanswer = total_cost\nprint(answer)", "# Define the price per pound of marmalade\nprice_per_pound_marmalade = 4  # price of marmalade in dollars\n\n# Define the pounds bought using a more explicit representation\nwhole_pounds = 2\nfractional_pounds = 0.5\npounds_bought = whole_pounds + fractional_pounds  # 2 + 1/2 pounds\n\n# Calculate the total cost\ntotal_cost = price_per_pound_marmalade * pounds_bought\n\n# Store the result in the answer variable\nanswer = total_cost\n\n# Output the answer\nprint(answer)"], "prediction": [10.0, 10.0, 10.0, 10.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of shelves | Number of purple crayons\n1 | 2\n2 | 4\n3 | 6\n4 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of shelves | Number of purple crayons\n1 | 2\n2 | 4\n3 | 6\n4 | ?\n\nEach shelf has 2 purple crayons. How many purple crayons are on 4 shelves?", "answer": "8", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nshelves = 4 \ncrayons_per_shelf = 2 \n# Calculate the total number of purple crayons\ntotal_crayons = shelves * crayons_per_shelf\nanswer = total_crayons\nprint(answer)", "shelves = 4 \ncrayons_per_shelf = 2 \ntotal_crayons = shelves * crayons_per_shelf\nanswer = int(total_crayons)  # Convert to integer if necessary\nprint(answer)", "shelves = 4 \ncrayons_per_shelf = 2 \ntotal_crayons = shelves * crayons_per_shelf\nanswer = total_crayons  # No need to convert to int as the multiplication will yield an integer\nprint(answer)", "shelves = 4  \ncrayons_per_shelf = 2  \ntotal_crayons = shelves * crayons_per_shelf  \nanswer = int(total_crayons)  # Convert to integer for clarity\nprint(answer)"], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"High school attendance\" and then answer a question.\n\nSchool | Number of students\nTruman High | 776\nOak High | 764\nHillcrest High | 746\nWatson High | 747", "question": "Read the following table regarding \"High school attendance\" and then write Python code to answer a question.\n\nSchool | Number of students\nTruman High | 776\nOak High | 764\nHillcrest High | 746\nWatson High | 747\n\nA city's school board compared how many students attend each high school. Which school has the most students? Choose from the the options: ['Truman High', 'Oak High', 'Hillcrest High', 'Watson High']", "answer": "Truman High", "ques_type": "multi_choice", "choices": ["Truman High", "Oak High", "Hillcrest High", "Watson High"], "code": [
  "# Python code, return answer \nschools = {\n    'Truman High': 776,\n    'Oak High': 764,\n    'Hillcrest High': 746,\n    'Watson High': 747\n}\n# Find the school with the most students\nmost_students_school = max(schools, key=schools.get)\nanswer = most_students_school\nprint(answer)", "# Store the school names and their corresponding number of students in a dictionary  \nschools = {\n    'Truman High': 776,\n    'Oak High': 764,\n    'Hillcrest High': 746,\n    'Watson High': 747\n}\n\n# Find the school with the most students  \nmost_students_school = max(schools, key=schools.get)\n\n# Store the result in the variable 'answer'\nanswer = most_students_school\n\n# Output the answer\nprint(answer)", "# Define the school names and their corresponding number of students in a dictionary\nschools = {\n    'Truman High': 776,\n    'Oak High': 764,\n    'Hillcrest High': 746,\n    'Watson High': 747\n}\n\n# Find the school with the most students\nmost_students_school = max(schools, key=schools.get)\nanswer = most_students_school\n\nprint(answer)", "schools = {\n    'Truman High': 776,\n    'Oak High': 764,\n    'Hillcrest High': 746,\n    'Watson High': 747\n}\nmost_students_school = max(schools, key=schools.get)\nanswer = most_students_school\nprint(answer)"
], "prediction": ["Truman High", "Truman High", "Truman High", "Truman High"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n4 | 20\n5 | 11\n6 | 2", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n4 | 20\n5 | 11\n6 | 2\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "linear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for equal differences in x-values.\nx_values = [4, 5, 6]\ny_values = [20, 11, 2]\n\n# Calculate the differences\ndifference_x = [x_values[i+1] - x_values[i] for i in range(len(x_values)-1)]\ndifference_y = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Calculate slopes between points\nslopes = [difference_y[i] / difference_x[i] for i in range(len(difference_x))]\n\n# Check if all slopes are the same\nif len(set(slopes)) == 1:\n    answer = 'linear'\nelse:\n    answer = 'nonlinear'\n\nprint(answer)", "x_values = [4, 5, 6]\ny_values = [20, 11, 2]\n\n# Calculate the differences in y-values\ny_diff_1 = y_values[1] - y_values[0]  # From x=4 to x=5\ny_diff_2 = y_values[2] - y_values[1]  # From x=5 to x=6\n\n# Check if the differences are equal\nif y_diff_1 != y_diff_2:\n    answer = 'nonlinear'\nelse:\n    answer = 'linear'\n\nprint(answer)", "x_values = [4, 5, 6]\ny_values = [20, 11, 2]\n\n# Calculate the slopes between each pair of points\nslope_1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])  # From x=4 to x=5\nslope_2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])  # From x=5 to x=6\n\n# Check if the slopes are equal\nif slope_1 != slope_2:\n    answer = 'nonlinear'\nelse:\n    answer = 'linear'\n\nprint(answer)", "x_values = [4, 5, 6]\ny_values = [20, 11, 2]\n\n# Calculate the slopes between the points\nslope_1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])  # From x=4 to x=5\nslope_2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])  # From x=5 to x=6\n\n# Determine if the function is linear or nonlinear\nif slope_1 != slope_2:\n    answer = 'nonlinear'\nelse:\n    answer = 'linear'\n\nprint(answer)"
], "prediction": ["linear", "linear", "linear", "linear"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Hours worked\" and then answer a question.\n\nDay | Hours\nThursday | 10\nFriday | 10\nSaturday | 6\nSunday | 6\nMonday | 8", "question": "Read the following table regarding \"Hours worked\" and then write Python code to answer a question.\n\nDay | Hours\nThursday | 10\nFriday | 10\nSaturday | 6\nSunday | 6\nMonday | 8\n\nA waitress kept track of how many hours she worked each day. What is the mean of the numbers?", "answer": "8", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Hours worked each day\nhours_worked = [10, 10, 6, 6, 8]\n# Calculate the mean\nmean_hours = sum(hours_worked) / len(hours_worked)\nanswer = mean_hours\nprint(answer)", "# List of hours worked each day\nhours_worked = [10, 10, 6, 6, 8]\n\n# Calculate the mean of the hours worked\nmean_hours = sum(hours_worked) / len(hours_worked)\n\n# Store the result in the variable 'answer'\nanswer = mean_hours\n\n# Print the answer\nprint(answer)", "# List of hours worked each day\nhours_worked = [10, 10, 6, 6, 8]\n\n# Calculate the mean of the hours worked\nmean_hours = sum(hours_worked) / len(hours_worked)\n\n# Store the result in the variable 'answer'\nanswer = mean_hours\n\n# Print the answer\nprint(answer)", "# List of hours worked each day\nhours_worked = [10, 10, 6, 6, 8]\n\n# Calculate the mean hours\nmean_hours = sum(hours_worked) / len(hours_worked)\n\n# Store the result in the answer variable\nanswer = round(mean_hours, 2)  # rounding to 2 decimal places for clarity\n\n# Output the answer\nprint(answer)"], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nboa constrictor | $1,483.00\nalpaca | $3,992.00\npython | $5,924.00\nllama | $2,255.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nboa constrictor | $1,483.00\nalpaca | $3,992.00\npython | $5,924.00\nllama | $2,255.00\n\nKrysta has $5,311.00. Does she have enough to buy a boa constrictor and an alpaca? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \nprice_boa_constrictor = 1483.00\nprice_alpaca = 3992.00\ntotal_cost = price_boa_constrictor + price_alpaca\nkrysta_money = 5311.00\n\n# Determine if Krysta has enough money\nif krysta_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "# Prices of the animals\nprice_boa_constrictor = 1483.00\nprice_alpaca = 3992.00\n\n# Total cost of buying both animals\ntotal_cost = price_boa_constrictor + price_alpaca\n\n# Krysta's available money\nkrysta_money = 5311.00\n\n# Check if Krysta has enough money\nif krysta_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Prices of the animals\nprice_boa_constrictor = 1483.00\nprice_alpaca = 3992.00\n\n# Total cost calculation\ntotal_cost = price_boa_constrictor + price_alpaca\n\n# Krysta's available money\nkrysta_money = 5311.00\n\n# Check if Krysta has enough money\nif krysta_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Prices of the animals\nprice_boa_constrictor = 1483.00\nprice_alpaca = 3992.00\n\n# Total cost of both animals\ntotal_cost = price_boa_constrictor + price_alpaca\n\n# Krysta's available money\nkrysta_money = 5311.00\n\n# Check if Krysta has enough money\nif krysta_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\n# Output the answer\nprint(answer)"
], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Athletes per country\" and then answer a question.\n\nStem | Leaf \n4 | 3, 9\n5 | 4, 7\n6 | 2, 3, 4, 4, 4, 9\n7 | 1, 1, 3, 5\n8 | \n9 | 0", "question": "Read the following table regarding \"Athletes per country\" and then write Python code to answer a question.\n\nStem | Leaf \n4 | 3, 9\n5 | 4, 7\n6 | 2, 3, 4, 4, 4, 9\n7 | 1, 1, 3, 5\n8 | \n9 | 0\n\nWhile doing a project for P. E. class, Kendra researched the number of athletes competing in an international sporting event. How many countries have exactly 64 athletes?", "answer": "3", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# In the stem-and-leaf display, the stem '6' corresponds to values in the 60s.\n# The leaf '4' corresponds to 64 athletes.\n# We can see from the stem \"6\" and leaf \"4\" that there is exactly one occurrence of 64.\ncountries_with_64_athletes = 1  # There is one country with exactly 64 athletes.\nanswer = countries_with_64_athletes\nprint(answer)", "# Define the stem and leaf data structure as a list of tuples\nstem_and_leaf = [(4, [3, 9]), (5, [4, 7]), (6, [2, 3, 4, 4, 4, 9]), (7, [1, 1, 3, 5]), (8, []), (9, [0])]\n\n# Initialize counter for countries with exactly 64 athletes\ncountries_with_64_athletes = 0\n\n# Check the stem and leaf data for the number of athletes\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        athletes_count = stem * 10 + leaf\n        if athletes_count == 64:\n            countries_with_64_athletes += 1\n\nanswer = countries_with_64_athletes\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(4, [3, 9]), (5, [4, 7]), (6, [2, 3, 4, 4, 4, 9]), (7, [1, 1, 3, 5]), (8, []), (9, [0])]  \n  \n# Initialize counter for countries with exactly 64 athletes  \ncountries_with_64_athletes = 0  \n  \n# Iterate through the stem and leaf data structure and count relevant countries  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        athletes_count = stem * 10 + leaf  \n        if athletes_count == 64:  \n            countries_with_64_athletes += 1  \n  \n# Since no combinations yield 64, the answer should be 0  \nanswer = countries_with_64_athletes  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(4, [3, 9]), (5, [4, 7]), (6, [2, 3, 4, 4, 4, 9]), (7, [1, 1, 3, 5]), (8, []), (9, [0])]  \n\n# Initialize counter for countries with exactly 64 athletes  \ncountries_with_64_athletes = 0  \n\n# Iterate through the stem and leaf data structure and count relevant countries  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        athletes_count = stem * 10 + leaf  \n        if athletes_count == 64:  \n            countries_with_64_athletes += 1  \n\n# Store the result as an integer\nanswer = countries_with_64_athletes  \nprint(answer)"
], "prediction": [1.0, 3.0, 3.0, 3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of shelves | Number of history books\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | 10\n6 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of shelves | Number of history books\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | 10\n6 | ?\n\nEach shelf has 2 history books. How many history books are on 6 shelves?", "answer": "12", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nshelves = 6\nbooks_per_shelf = 2\n# Calculate the total number of history books on 6 shelves\ntotal_history_books = shelves * books_per_shelf\nanswer = total_history_books\nprint(answer)", "shelves = 6\nbooks_per_shelf = 2\ntotal_history_books = shelves * books_per_shelf\nanswer = int(total_history_books)  # Convert to integer\nprint(answer)", "shelves = 6\nbooks_per_shelf = 2\ntotal_history_books = shelves * books_per_shelf\nanswer = total_history_books  # No need to convert to int since the multiplication will yield an integer\nprint(answer)", "shelves = 6\nbooks_per_shelf = 2\ntotal_history_books = shelves * books_per_shelf\nanswer = int(total_history_books)  # Convert to int to ensure it is a whole number\nprint(answer)"], "prediction": [12.0, 12.0, 12.0, 12.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of bunches | Number of balloons\n1 | 5\n2 | 10\n3 | 15\n4 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of bunches | Number of balloons\n1 | 5\n2 | 10\n3 | 15\n4 | ?\n\nEach bunch has 5 balloons. How many balloons are in 4 bunches?", "answer": "20", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nbunches = 4 \nballoons_per_bunch = 5 \n# Calculate the total number of balloons in 4 bunches\ntotal_balloons = bunches * balloons_per_bunch\nanswer = total_balloons\nprint(answer)", "bunches = 4 \nballoons_per_bunch = 5 \ntotal_balloons = bunches * balloons_per_bunch\nanswer = total_balloons\nprint(int(answer))  # Convert to integer before printing", "bunches = 4 \nballoons_per_bunch = 5 \ntotal_balloons = bunches * balloons_per_bunch\nanswer = total_balloons  # No need to convert to integer as it will always be an integer\nprint(answer)  # This will output 20", "bunches = 4 \nballoons_per_bunch = 5 \ntotal_balloons = bunches * balloons_per_bunch\nanswer = int(total_balloons)  # Convert to integer to ensure the output is a whole number\nprint(answer)  # This will output 20"], "prediction": [20.0, 20.0, 20.0, 20.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Eating bananas last week\" and then answer a question.\n\nBananas eaten | Frequency\n0 | 13\n1 | 3\n2 | 10\n3 | 6\n4 | 11", "question": "Read the following table regarding \"Eating bananas last week\" and then write Python code to answer a question.\n\nBananas eaten | Frequency\n0 | 13\n1 | 3\n2 | 10\n3 | 6\n4 | 11\n\nA chef kept track of the number of bananas people ate last week in her cafeteria. How many people ate at least 2 bananas last week?", "answer": "27", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of people eating 0, 1, 2, 3, and 4 bananas\nfrequency = {\n    0: 13,\n    1: 3,\n    2: 10,\n    3: 6,\n    4: 11\n}\n\n# Calculate the number of people who ate at least 2 bananas\npeople_at_least_2 = frequency[2] + frequency[3] + frequency[4]\nanswer = people_at_least_2\nprint(answer)", "# Define the frequency of bananas eaten\nfrequency = {\n    0: 13,\n    1: 3,\n    2: 10,\n    3: 6,\n    4: 11\n}\n\n# Calculate the number of people who ate at least 2 bananas\npeople_at_least_2 = frequency[2] + frequency[3] + frequency[4]\nanswer = people_at_least_2\n\nprint(answer)  # This will output the integer 27", "frequency = {\n    0: 13,\n    1: 3,\n    2: 10,\n    3: 6,\n    4: 11\n}\npeople_at_least_2 = frequency[2] + frequency[3] + frequency[4]\nanswer = int(people_at_least_2)  # Ensure the result is an integer\nprint(answer)  # This will output the integer 27", "frequency = {\n    0: 13,\n    1: 3,\n    2: 10,\n    3: 6,\n    4: 11\n}\npeople_at_least_2 = frequency[2] + frequency[3] + frequency[4]\nanswer = people_at_least_2  # No need to convert to int, as it's already an integer\nprint(answer)  # This will output the integer 27"], "prediction": [27.0, 27.0, 27.0, 27.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of tables | Number of notepads\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | 50\n6 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of tables | Number of notepads\n1 | 10\n2 | 20\n3 | 30\n4 | 40\n5 | 50\n6 | ?\n\nEach table has 10 notepads. How many notepads are on 6 tables?", "answer": "60", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ntables = 6\nnotepads_per_table = 10\n# Calculate the total number of notepads for 6 tables\ntotal_notepads = tables * notepads_per_table\nanswer = total_notepads\nprint(answer)", "tables = 6\nnotepads_per_table = 10\ntotal_notepads = tables * notepads_per_table\nanswer = int(total_notepads)  # Convert to integer if needed\nprint(answer)", "tables = 6\nnotepads_per_table = 10\ntotal_notepads = tables * notepads_per_table\nanswer = total_notepads  # No need to convert to int as the result is already an integer\nprint(answer)", "tables = 6\nnotepads_per_table = 10\ntotal_notepads = tables * notepads_per_table\nanswer = int(total_notepads)  # Convert the result to an integer\nprint(answer)"], "prediction": [60.0, 60.0, 60.0, 60.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Making candy necklaces\" and then answer a question.\n\nCandy necklaces made | Frequency\n0 | 1\n1 | 3\n2 | 19\n3 | 2", "question": "Read the following table regarding \"Making candy necklaces\" and then write Python code to answer a question.\n\nCandy necklaces made | Frequency\n0 | 1\n1 | 3\n2 | 19\n3 | 2\n\nWhile working as a summer camp counselor, Cole monitored how many candy necklaces each child made. How many children did not make any candy necklaces?", "answer": "1", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of children who made 0 candy necklaces\nchildren_no_necklaces = 1\nanswer = children_no_necklaces\nprint(answer)", "# Define the frequency of candy necklaces made\nfrequency = {\n    0: 1,  # 1 child made 0 necklaces\n    1: 3,  # 3 children made 1 necklace\n    2: 19, # 19 children made 2 necklaces\n    3: 2   # 2 children made 3 necklaces\n}\n\n# Get the number of children who did not make any candy necklaces\nchildren_no_necklaces = frequency[0]\nanswer = children_no_necklaces\n\nprint(answer)", "frequency = {\n    0: 1,  # 1 child made 0 necklaces\n    1: 3,  # 3 children made 1 necklace\n    2: 19, # 19 children made 2 necklaces\n    3: 2   # 2 children made 3 necklaces\n}\n\nchildren_no_necklaces = frequency[0]  # This will remain an integer\nanswer = children_no_necklaces\nprint(answer)  # This should output 1", "frequency = {\n    0: 1,  # 1 child made 0 necklaces\n    1: 3,  # 3 children made 1 necklace\n    2: 19, # 19 children made 2 necklaces\n    3: 2   # 2 children made 3 necklaces\n}\nchildren_no_necklaces = frequency[0]  # This will remain an integer\nanswer = int(children_no_necklaces)  # Ensure it's an integer\nprint(answer)  # This should output 1"], "prediction": [1.0, 1.0, 1.0, 1.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nwhite polo shirt | $9.00\nred hat | $6.00\nwhite T-shirt | $5.00\nblue shirt | $2.00\nstriped scarf | $9.00\npair of shorts | $8.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nwhite polo shirt | $9.00\nred hat | $6.00\nwhite T-shirt | $5.00\nblue shirt | $2.00\nstriped scarf | $9.00\npair of shorts | $8.00\n\nHow much money does Ruben need to buy a white polo shirt and a white T-shirt?", "answer": "14", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nprice_white_polo_shirt = 9.00\nprice_white_tshirt = 5.00\n# Total cost for Ruben\ntotal_cost = price_white_polo_shirt + price_white_tshirt\nanswer = total_cost\nprint(answer)", "# Define the prices of the items Ruben wants to buy\nprice_white_polo_shirt = 9.00\nprice_white_tshirt = 5.00\n\n# Calculate the total cost\ntotal_cost = price_white_polo_shirt + price_white_tshirt\n\n# Assign the result to the variable 'answer'\nanswer = round(total_cost, 2)  # rounding to 2 decimal places for clarity\n\n# Print the answer\nprint(answer)", "# Define the prices of the items\nprice_white_polo_shirt = 9.00\nprice_white_tshirt = 5.00\n\n# Calculate the total cost\ntotal_cost = price_white_polo_shirt + price_white_tshirt\n\n# Store the result in the variable 'answer'\nanswer = f\"{total_cost:.2f}\"  # Format to 2 decimal places as a string for clarity\n\n# Print the answer\nprint(answer)", "price_white_polo_shirt = 9.00\nprice_white_tshirt = 5.00\ntotal_cost = price_white_polo_shirt + price_white_tshirt\nanswer = total_cost  # Store the result as a float\nprint(answer)"], "prediction": [14.0, 14.0, 14.0, 14.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nsize 4 screws | $4/kilogram\nsize 6 screws | $4/kilogram\nsize 5 screws | $4/kilogram\nsize 1 screws | $3/kilogram\nsize 3 screws | $3/kilogram", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nsize 4 screws | $4/kilogram\nsize 6 screws | $4/kilogram\nsize 5 screws | $4/kilogram\nsize 1 screws | $3/kilogram\nsize 3 screws | $3/kilogram\n\nMariana purchased 3/10 of a kilogram of size 1 screws. What was the total cost?", "answer": "0.90", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \nprice_per_kilogram_size_1 = 3  # Price for size 1 screws\nkilograms_purchased = 3/10  # Fraction of a kilogram purchased\n# Calculate total cost\ntotal_cost = price_per_kilogram_size_1 * kilograms_purchased\nanswer = total_cost\nprint(answer)", "# Define the price per kilogram for size 1 screws\nprice_per_kilogram_size_1 = 3  # Price for size 1 screws in dollars\n\n# Define the amount of kilograms purchased\nkilograms_purchased = 3 / 10  # Fraction of a kilogram purchased\n\n# Calculate the total cost\ntotal_cost = price_per_kilogram_size_1 * kilograms_purchased\n\n# Store the result in a variable named 'answer'\nanswer = total_cost\n\n# Print the answer with context\nprint(f\"The total cost for {kilograms_purchased} kilograms of size 1 screws is: ${answer:.2f}\")", "price_per_kilogram_size_1 = 3  # Price for size 1 screws in dollars\nkilograms_purchased = 3 / 10  # Fraction of a kilogram purchased\ntotal_cost = price_per_kilogram_size_1 * kilograms_purchased\nanswer = total_cost\nprint(answer)", "# Define the price per kilogram for size 1 screws\nprice_per_kilogram_size_1 = 3  # Price in dollars\n\n# Define the amount of kilograms purchased\nkilograms_purchased = 3 / 10  # Fraction of a kilogram\n\n# Calculate the total cost\ntotal_cost = price_per_kilogram_size_1 * kilograms_purchased\n\n# Assign the result to the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)"
], "prediction": [0.9, 0.9, 0.9, 0.9], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npackage of oatmeal cookies | $4.63\nfrozen pizza | $5.33\nbag of flour | $2.68\nbag of walnuts | $2.81", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npackage of oatmeal cookies | $4.63\nfrozen pizza | $5.33\nbag of flour | $2.68\nbag of walnuts | $2.81\n\nHow much money does Quinn need to buy a package of oatmeal cookies and 4 bags of walnuts?", "answer": "15.87", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_oatmeal_cookies = 4.63 \nprice_walnuts = 2.81 \nnumber_of_walnut_bags = 4 \n\n# Total cost calculation\ntotal_cost = price_oatmeal_cookies + (price_walnuts * number_of_walnut_bags)\nanswer = total_cost\nprint(answer)", "price_oatmeal_cookies = 4.63 \nprice_walnuts = 2.81 \nnumber_of_walnut_bags = 4 \ntotal_cost = price_oatmeal_cookies + (price_walnuts * number_of_walnut_bags)\nanswer = total_cost\nprint(answer)", "price_oatmeal_cookies = 4.63 \nprice_walnuts = 2.81 \nnumber_of_walnut_bags = 4 \ntotal_cost = price_oatmeal_cookies + (price_walnuts * number_of_walnut_bags)\nanswer = round(total_cost, 2)  # Ensure the total cost is rounded to two decimal places\nprint(answer)", "# Prices of the items\nprice_oatmeal_cookies = 4.63 \nprice_walnuts = 2.81 \nnumber_of_walnut_bags = 4 \n\n# Calculate the total cost\ntotal_cost = price_oatmeal_cookies + (price_walnuts * number_of_walnut_bags)\n\n# Store the result in the variable 'answer' rounded to two decimal places\nanswer = round(total_cost, 2)  \nprint(answer)"], "prediction": [15.87, 15.87, 15.87, 15.87], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nlow-fat yogurt | $3.39 per pound\nblueberry yogurt | $2.31 per pound\nnon-fat yogurt | $2.15 per pound\nstrawberry yogurt | $3.50 per pound\nraspberry yogurt | $3.20 per pound", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nlow-fat yogurt | $3.39 per pound\nblueberry yogurt | $2.31 per pound\nnon-fat yogurt | $2.15 per pound\nstrawberry yogurt | $3.50 per pound\nraspberry yogurt | $3.20 per pound\n\nIf Luther buys 1 pound of raspberry yogurt and 1 pound of low-fat yogurt, how much will he spend?", "answer": "6.59", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_raspberry_yogurt = 3.20 \nprice_per_pound_low_fat_yogurt = 3.39 \n# Total cost for 1 pound of each yogurt\ntotal_cost = price_per_pound_raspberry_yogurt + price_per_pound_low_fat_yogurt\nanswer = total_cost\nprint(answer)", "```python\n# Prices per pound of yogurt\nprice_per_pound_raspberry_yogurt = 3.20 \nprice_per_pound_low_fat_yogurt = 3.39 \n\n# Calculate total cost for 1 pound of each type of yogurt\ntotal_cost = price_per_pound_raspberry_yogurt + price_per_pound_low_fat_yogurt\nanswer = total_cost\n\nprint", "# Define the price per pound for raspberry yogurt and low-fat yogurt\nprice_per_pound_raspberry_yogurt = 3.20 \nprice_per_pound_low_fat_yogurt = 3.39 \n\n# Calculate the total cost for buying 1 pound of each yogurt\ntotal_cost = price_per_pound_raspberry_yogurt + price_per_pound_low_fat_yogurt\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the total cost\nprint(answer)", "price_per_pound_raspberry_yogurt = 3.20 \nprice_per_pound_low_fat_yogurt = 3.39 \ntotal_cost = price_per_pound_raspberry_yogurt + price_per_pound_low_fat_yogurt\nanswer = total_cost\nprint(answer)"], "prediction": [6.59, null, 6.59, 6.59], "report": ["Done", "SyntaxError('invalid syntax', ('<string>', 1, 1, '```python\\n', 1, 2))", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Boxes of Girl Scout cookies sold\" and then answer a question.\n\nDay | Boxes of cookies\nMonday | 38\nTuesday | 41\nWednesday | 38\nThursday | 34\nFriday | 36", "question": "Read the following table regarding \"Boxes of Girl Scout cookies sold\" and then write Python code to answer a question.\n\nDay | Boxes of cookies\nMonday | 38\nTuesday | 41\nWednesday | 38\nThursday | 34\nFriday | 36\n\nA Girl Scout troop recorded how many boxes of cookies they sold each day for a week. According to the table, what was the rate of change between Wednesday and Thursday?", "answer": "-4", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Boxes sold on Wednesday and Thursday\nboxes_wednesday = 38\nboxes_thursday = 34\n\n# Calculate the rate of change\nrate_of_change = boxes_thursday - boxes_wednesday\nanswer = rate_of_change\nprint(answer)", "# Define the number of boxes sold on Wednesday and Thursday\nboxes_wednesday = 38\nboxes_thursday = 34\n\n# Calculate the change in boxes sold\nchange_in_boxes = boxes_thursday - boxes_wednesday\n\n# Since the days are consecutive, the change in time is 1 day\nchange_in_time = 1\n\n# Calculate the rate of change\nrate_of_change = change_in_boxes / change_in_time\n\n# Store the result in the variable 'answer'\nanswer = rate_of_change\n\n# Print the answer\nprint(answer)", "# Define the number of boxes sold on Wednesday and Thursday\nboxes_wednesday = 38\nboxes_thursday = 34\n\n# Calculate the change in boxes sold\nchange_in_boxes = boxes_thursday - boxes_wednesday\n\n# Change in time (1 day)\nchange_in_time = 1\n\n# Calculate the rate of change\nrate_of_change = change_in_boxes / change_in_time\n\n# Store the result in the variable 'answer'\nanswer = rate_of_change\n\n# Output the answer\nprint(answer)", "# Define the number of boxes sold on Wednesday and Thursday\nboxes_wednesday = 38\nboxes_thursday = 34\n\n# Calculate the change in boxes sold\nchange_in_boxes = boxes_thursday - boxes_wednesday\n\n# Define the change in time (days)\nchange_in_time = 1\n\n# Calculate the rate of change\nrate_of_change = change_in_boxes / change_in_time\n\n# Store the result in the answer variable\nanswer = rate_of_change\n\n# Print the answer\nprint(answer)"
], "prediction": [-4.0, -4.0, -4.0, -4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Participants per race\" and then answer a question.\n\nStem | Leaf \n2 | 9\n3 | 4, 8\n4 | 2, 5, 6\n5 | 9\n6 | 5, 8\n7 | 1, 4, 7\n8 | 0, 3, 7", "question": "Read the following table regarding \"Participants per race\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 9\n3 | 4, 8\n4 | 2, 5, 6\n5 | 9\n6 | 5, 8\n7 | 1, 4, 7\n8 | 0, 3, 7\n\nA volunteer for the local running club counted the number of participants at each race. How many races had at least 30 participants but fewer than 60 participants?", "answer": "6", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Extracting the number of participants from the stem-and-leaf display\nparticipants = [\n    29,    # From stem 2 | leaf 9\n    34, 38, # From stem 3 | leaves 4, 8\n    42, 45, 46, # From stem 4 | leaves 2, 5, 6\n    59,    # From stem 5 | leaf 9\n    65, 68, # From stem 6 | leaves 5, 8\n    71, 74, 77, # From stem 7 | leaves 1, 4, 7\n    80, 83, 87  # From stem 8 | leaves 0, 3, 7\n]\n\n# Counting the number of races with at least 30 and fewer than 60 participants\ncount_races = sum(1 for p in participants if 30 <= p < 60)\nanswer = count_races\nprint(answer)", "participants = [\n    29,    # From stem 2 | leaf 9\n    34, 38, # From stem 3 | leaves 4, 8\n    42, 45, 46, # From stem 4 | leaves 2, 5, 6\n    59,    # From stem 5 | leaf 9\n    65, 68, # From stem 6 | leaves 5, 8\n    71, 74, 77, # From stem 7 | leaves 1, 4, 7\n    80, 83, 87  # From stem 8 | leaves 0, 3, 7\n]\ncount_races = sum(1 for p in participants if 30 <= p < 60)\nanswer = int(count_races)  # Ensure the count is stored as an integer\nprint(answer)", "participants = [\n    29,    # From stem 2 | leaf 9\n    34, 38, # From stem 3 | leaves 4, 8\n    42, 45, 46, # From stem 4 | leaves 2, 5, 6\n    59,    # From stem 5 | leaf 9\n    65, 68, # From stem 6 | leaves 5, 8\n    71, 74, 77, # From stem 7 | leaves 1, 4, 7\n    80, 83, 87  # From stem 8 | leaves 0, 3, 7\n]\n\ncount_races = sum(1 for p in participants if 30 <= p < 60)\nanswer = count_races  # Store the count directly as an integer\nprint(answer)", "participants = [\n    29,    # From stem 2 | leaf 9\n    34, 38, # From stem 3 | leaves 4, 8\n    42, 45, 46, # From stem 4 | leaves 2, 5, 6\n    59,    # From stem 5 | leaf 9\n    65, 68, # From stem 6 | leaves 5, 8\n    71, 74, 77, # From stem 7 | leaves 1, 4, 7\n    80, 83, 87  # From stem 8 | leaves 0, 3, 7\n]\ncount_races = sum(1 for p in participants if 30 <= p < 60)\nanswer = int(count_races)  # Ensure the count is stored as an integer\nprint(answer)"
], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Under age 12 | 13 to 30 years old\nTennis shoes | 4 | 5\nHigh heels | 3 | 7", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Under age 12 | 13 to 30 years old\nTennis shoes | 4 | 5\nHigh heels | 3 | 7\n\nRobert entered his sister into their town's Smelly Shoe Competition. Robert observed contestants of all ages proudly strutting around wearing different kinds of smelly shoes. What is the probability that a randomly selected contestant is wearing high heels and is under age 12? Simplify any fractions.", "answer": "3/19", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Number of contestants wearing high heels under age 12\nhigh_heels_under_12 = 3 \n# Total number of contestants\ntotal_contestants = 4 + 5 + 3 + 7 \n\n# Calculate the probability\nprobability_high_heels_under_12 = high_heels_under_12 / total_contestants\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(high_heels_under_12, total_contestants).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Define the counts of contestants\nhigh_heels_under_12 = 3\ntennis_shoes_under_12 = 4\nhigh_heels_13_to_30 = 7\ntennis_shoes_13_to_30 = 5\n\n# Calculate total contestants\ntotal_contestants = (high_heels_under_12 + tennis_shoes_under_12 + \n                     high_heels_13_to_30 + tennis_shoes_13_to_30)\n\n# Calculate the probability of wearing high heels and being under age 12\nprobability_high_heels_under_12 = high_heels_under_12 / total_contestants\n\n# Simplify the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(high_heels_under_12, total_contestants).limit_denominator()\n\n# Store the result in the answer variable\nanswer = simplified_probability\nprint(answer)", "# Define the number of contestants wearing high heels and tennis shoes\nhigh_heels_under_12 = 3\ntennis_shoes_under_12 = 4\nhigh_heels_13_to_30 = 7\ntennis_shoes_13_to_30 = 5\n\n# Calculate the total number of contestants\ntotal_contestants = (high_heels_under_12 + tennis_shoes_under_12 + \n                     high_heels_13_to_30 + tennis_shoes_13_to_30)\n\n# Calculate the probability of selecting a contestant wearing high heels and under age 12\nprobability_high_heels_under_12 = Fraction(high_heels_under_12, total_contestants).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = probability_high_heels_under_12\nprint(answer)", "# Define the number of contestants wearing high heels and under age 12\nhigh_heels_under_12 = 3\n# Define the number of contestants wearing tennis shoes and under age 12\ntennis_shoes_under_12 = 4\n# Define the number of contestants wearing high heels aged 13 to 30\nhigh_heels_13_to_30 = 7\n# Define the number of contestants wearing tennis shoes aged 13 to 30\ntennis_shoes_13_to_30 = 5\n\n# Calculate the total number of contestants\ntotal_contestants = (high_heels_under_12 + tennis_shoes_under_12 + \n                     high_heels_13_to_30 + tennis_shoes_13_to_30)\n\n# Calculate the probability of a contestant wearing high heels and being under age 12\nprobability_high_heels_under_12 = high_heels_under_12 / total_contestants\n\n# Simplify the probability to a fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(high_heels_under_12, total_contestants).limit_denominator()\n\n# Store the simplified probability in the answer variable\nanswer = simplified_probability\n\n# Print the answer\nprint(answer)"
], "prediction": [0.15789, 0.15789, null, 0.15789], "report": ["Done", "Done", "NameError(\"name 'Fraction' is not defined\")", "Done"]
}
{
  "context": "Read the following table regarding \"Books read\" and then answer a question.\n\nName | Number of books\nJeanette | 30\nShivani | 49\nMartha | 35\nPaula | 41\nCara | 35\nLarry | 49\nNatalie | 36\nAlexandra | 42", "question": "Read the following table regarding \"Books read\" and then write Python code to answer a question.\n\nName | Number of books\nJeanette | 30\nShivani | 49\nMartha | 35\nPaula | 41\nCara | 35\nLarry | 49\nNatalie | 36\nAlexandra | 42\n\nJeanette's classmates recorded how many books they read last year. What is the range of the numbers?", "answer": "19", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of books read by each student\nbooks_read = [30, 49, 35, 41, 35, 49, 36, 42]\n\n# Calculate the range\nrange_books = max(books_read) - min(books_read)\nanswer = range_books\nprint(answer)", "books_read = [30, 49, 35, 41, 35, 49, 36, 42]\nrange_books = max(books_read) - min(books_read)\nanswer = range_books  # This will be an integer\nprint(answer)", "books_read = [30, 49, 35, 41, 35, 49, 36, 42]\nrange_books = max(books_read) - min(books_read)\nanswer = int(range_books)  # Convert the result to an integer\nprint(answer)", "# List of the number of books read by each classmate\nbooks_read = [30, 49, 35, 41, 35, 49, 36, 42]\n\n# Calculate the range of the numbers\nrange_books = max(books_read) - min(books_read)\n\n# Store the result as an integer\nanswer = range_books  # No need for conversion since the result is already an integer\n\nprint(answer)"], "prediction": [19.0, 19.0, 19.0, 19.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Cherries sold\" and then answer a question.\n\nDay | Kilograms\nSunday | 201\nMonday | 101\nTuesday | 844\nWednesday | 305", "question": "Read the following table regarding \"Cherries sold\" and then write Python code to answer a question.\n\nDay | Kilograms\nSunday | 201\nMonday | 101\nTuesday | 844\nWednesday | 305\n\nA farmer wrote down how many kilograms of cherries were sold in the past 4 days. How many more kilograms of cherries were sold on Tuesday than on Monday?", "answer": "743", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Cherries sold on each day\ncherries_monday = 101\ncherries_tuesday = 844\n# Calculate the difference\ndifference = cherries_tuesday - cherries_monday\nanswer = difference\nprint(answer)", "# Define the kilograms of cherries sold on each day\ncherries_monday = 101\ncherries_tuesday = 844\n\n# Calculate the difference in kilograms sold\ndifference = cherries_tuesday - cherries_monday\n\n# Store the result in the variable 'answer'\nanswer = difference\n\n# Output the answer\nprint(answer)", "cherries_monday = 101\ncherries_tuesday = 844\ndifference = cherries_tuesday - cherries_monday\nanswer = int(difference)  # Convert to integer for clarity\nprint(answer)", "cherries_monday = 101\ncherries_tuesday = 844\ndifference = cherries_tuesday - cherries_monday\nanswer = difference  # No need to convert to int since it's already an integer\nprint(answer)"], "prediction": [743.0, 743.0, 743.0, 743.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nmagazine | $4.65\nmap of the world | $9.65\nbook of piano music | $7.76\nmath book | $8.03\nbook of crossword puzzles | $2.55\nmap of Canada | $6.27", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nmagazine | $4.65\nmap of the world | $9.65\nbook of piano music | $7.76\nmath book | $8.03\nbook of crossword puzzles | $2.55\nmap of Canada | $6.27\n\nHow much money does Gabe need to buy 7 books of crossword puzzles and 6 books of piano music?", "answer": "64.41", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices\nprice_crossword_puzzle = 2.55 \nprice_piano_music = 7.76 \n# Quantities\nquantity_crossword_puzzles = 7 \nquantity_piano_music = 6 \n# Total cost calculation\ntotal_cost = (price_crossword_puzzle * quantity_crossword_puzzles) + (price_piano_music * quantity_piano_music)\nanswer = total_cost\nprint(answer)", "# Define prices and quantities\nprice_crossword_puzzle = 2.55 \nprice_piano_music = 7.76 \nquantity_crossword_puzzles = 7 \nquantity_piano_music = 6 \n\n# Calculate total cost\ntotal_cost = (price_crossword_puzzle * quantity_crossword_puzzles) + (price_piano_music * quantity_piano_music)\n\n# Store the result in the answer variable\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "# Define prices of the books\nprice_crossword_puzzle = 2.55 \nprice_piano_music = 7.76 \n\n# Define quantities of the books\nquantity_crossword_puzzles = 7 \nquantity_piano_music = 6 \n\n# Calculate the total cost correctly\ntotal_cost = (price_crossword_puzzle * quantity_crossword_puzzles) + (price_piano_music * quantity_piano_music)\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the prices of the books\nprice_crossword_puzzle = 2.55 \nprice_piano_music = 7.76 \n\n# Define the quantities of the books\nquantity_crossword_puzzles = 7 \nquantity_piano_music = 6 \n\n# Calculate the total cost\ntotal_cost = (price_crossword_puzzle * quantity_crossword_puzzles) + (price_piano_music * quantity_piano_music)\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)"
], "prediction": [64.41, 64.41, 64.41, 64.41], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Selling cookies\" and then answer a question.\n\nBoxes sold | Frequency\n1 | 3\n2 | 2\n3 | 6\n4 | 0\n5 | 20", "question": "Read the following table regarding \"Selling cookies\" and then write Python code to answer a question.\n\nBoxes sold | Frequency\n1 | 3\n2 | 2\n3 | 6\n4 | 0\n5 | 20\n\nA parent volunteer counted the number of boxes sold by each student participating in the cookie fundraiser. How many students sold at least 4 boxes of cookies?", "answer": "20", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of students selling at least 4 boxes\nstudents_sold_4_boxes = 0  # No students sold exactly 4 boxes\nstudents_sold_5_boxes = 20  # Students sold 5 boxes\ntotal_students = students_sold_4_boxes + students_sold_5_boxes\nanswer = total_students\nprint(answer)", "# Number of students who sold boxes of cookies\nstudents_sold_4_boxes = 0  # No students sold exactly 4 boxes\nstudents_sold_5_boxes = 20  # Students sold 5 boxes\n\n# Total number of students who sold at least 4 boxes\ntotal_students = students_sold_4_boxes + students_sold_5_boxes\nanswer = total_students\nprint(answer)", "# Define the number of students who sold a specific number of boxes\nstudents_sold = {\n    1: 3,\n    2: 2,\n    3: 6,\n    4: 0,\n    5: 20\n}\n\n# Calculate the total number of students who sold at least 4 boxes\nstudents_sold_at_least_4_boxes = students_sold[4] + students_sold[5]\n\nanswer = students_sold_at_least_4_boxes\nprint(answer)", "# Define the number of boxes sold and their corresponding frequency\nstudents_sold = {\n    1: 3,\n    2: 2,\n    3: 6,\n    4: 0,\n    5: 20\n}\n\n# Calculate the number of students who sold at least 4 boxes of cookies\nstudents_sold_at_least_4_boxes = students_sold[4] + students_sold[5]\nanswer = students_sold_at_least_4_boxes\n\nprint(answer)  # Output: 20"], "prediction": [20.0, 20.0, 20.0, 20.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Social worker | Doctor\nFear of snakes | 8 | 2\nFear of heights | 3 | 5", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Social worker | Doctor\nFear of snakes | 8 | 2\nFear of heights | 3 | 5\n\nA college professor asked her Psychology students to complete a personality test. She paid special attention to her students' career goals and their greatest fears. What is the probability that a randomly selected student has a fear of heights and wants to be a social worker? Simplify any fractions.", "answer": "1/6", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Number of students with fears\nfear_of_heights_social_worker = 3\n# Total number of students surveyed\ntotal_students = 8 + 2 + 3 + 5\n\n# Calculate the probability\nprobability_fear_heights_social_worker = fear_of_heights_social_worker / total_students\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(fear_of_heights_social_worker, total_students).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Define the number of students with fear of heights who want to be social workers\nfear_of_heights_social_worker = 3\n\n# Calculate the total number of students\ntotal_students = 8 + 2 + 3 + 5\n\n# Calculate the probability as a fraction\nfrom fractions import Fraction\nprobability_fear_heights_social_worker = Fraction(fear_of_heights_social_worker, total_students).limit_denominator()\n\n# Store the simplified probability in the answer variable\nanswer = probability_fear_heights_social_worker\nprint(answer)", "# Define the number of students with fear of heights who want to be social workers  \nfear_of_heights_social_worker = 3  \n\n# Calculate the total number of students  \ntotal_students = 8 + 2 + 3 + 5  \n\n# Calculate the probability as a simplified fraction  \nfrom fractions import Fraction  \nprobability_fear_heights_social_worker = Fraction(fear_of_heights_social_worker, total_students).limit_denominator()  \n\n# Store the result in the answer variable  \nanswer = probability_fear_heights_social_worker  \nprint(answer)", "# Define the number of students with fear of heights who want to be social workers\nfear_of_heights_social_worker = 3  \n\n# Calculate the total number of students\ntotal_students = 8 + 2 + 3 + 5  \n\n# Calculate the probability as a fraction\nfrom fractions import Fraction  \nprobability_fear_heights_social_worker = Fraction(fear_of_heights_social_worker, total_students)  \n\n# Store the result in the answer variable\nanswer = probability_fear_heights_social_worker  \nprint(answer)"
], "prediction": [0.16667, 0.16667, 0.16667, 0.16667], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nEmployee | Pay period |\nCarly Faber | March 18-24 |\nTotal earnings | | $427.00\nFederal income tax | $47.50 |\nOther taxes | $32.67 |\nTotal taxes | | ?\nPay after taxes | | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nEmployee | Pay period |\nCarly Faber | March 18-24 |\nTotal earnings | | $427.00\nFederal income tax | $47.50 |\nOther taxes | $32.67 |\nTotal taxes | | ?\nPay after taxes | | ?\n\nLook at Carly's pay stub. Carly lives in a state without state income tax. How much payroll tax did Carly pay in total?", "answer": "80.17", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Given values for federal income tax and other taxes\nfederal_income_tax = 47.50\nother_taxes = 32.67\n\n# Calculate total taxes\ntotal_taxes = federal_income_tax + other_taxes\nanswer = total_taxes\nprint(answer)", "# Calculate total payroll tax\nfederal_income_tax = 47.50\nother_taxes = 32.67\nanswer = federal_income_tax + other_taxes\nprint(answer)", "# Define the taxes\nfederal_income_tax = 47.50\nother_taxes = 32.67\n\n# Calculate total payroll tax\ntotal_payroll_tax = federal_income_tax + other_taxes\n\n# Store the result in the answer variable\nanswer = total_payroll_tax\n\n# Output the result\nprint(answer)", "# Define the taxes\nfederal_income_tax = 47.50\nother_taxes = 32.67\n\n# Calculate total payroll tax\ntotal_payroll_tax = federal_income_tax + other_taxes\n\n# Store the result in a clearly named variable\nanswer = total_payroll_tax\n\n# Output the answer\nprint(answer)"], "prediction": [80.17, 80.17, 80.17, 80.17], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Vacation days taken by Mandy\" and then answer a question.\n\nYear | Vacation days\n2015 | 16\n2016 | 18\n2017 | 26\n2018 | 31\n2019 | 11", "question": "Read the following table regarding \"Vacation days taken by Mandy\" and then write Python code to answer a question.\n\nYear | Vacation days\n2015 | 16\n2016 | 18\n2017 | 26\n2018 | 31\n2019 | 11\n\nTo figure out how many vacation days she had left to use, Mandy looked over her old calendars to figure out how many days of vacation she had taken each year. According to the table, what was the rate of change between 2016 and 2017?", "answer": "8", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nvacation_days_2016 = 18\nvacation_days_2017 = 26\n\n# Calculate the rate of change\nrate_of_change = vacation_days_2017 - vacation_days_2016\nanswer = rate_of_change\nprint(answer)", "```python", "vacation_days_2016 = 18\nvacation_days_2017 = 26\nchange_in_vacation_days = vacation_days_2017 - vacation_days_2016\nrate_of_change = (change_in_vacation_days / vacation_days_2016) * 100  # Expressed as a percentage\nanswer = rate_of_change\nprint(answer)", "vacation_days_2016 = 18\nvacation_days_2017 = 26\nchange_in_vacation_days = vacation_days_2017 - vacation_days_2016\nrate_of_change = (change_in_vacation_days / vacation_days_2016) * 100  # Expressed as a percentage\nanswer = round(rate_of_change, 2)  # Round to two decimal places\nprint(answer)"], "prediction": [8.0, null, 44.44444, 44.44], "report": ["Done", "SyntaxError('invalid syntax', ('<string>', 1, 1, '```python\\n', 1, 2))", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Train schedule\" and then answer a question.\n\nLocation | Arrive | Depart\nPrinceton | 2:25 A.M. | 2:45 A.M.\nWestminster | 3:15 A.M. | 3:30 A.M.\nNewberg | 5:00 A.M. | 5:30 A.M.\nBelleville | 6:15 A.M. | 6:25 A.M.\nStamford | 7:30 A.M. | 7:55 A.M.\nOakland | 9:35 A.M. | 10:00 A.M.\nSalem | 11:30 A.M. | 12:00 P.M.\nOakdale | 1:00 P.M. | 1:15 P.M.\nLakeside | 2:30 P.M. | 2:45 P.M.", "question": "Read the following table regarding \"Train schedule\" and then write Python code to answer a question.\n\nLocation | Arrive | Depart\nPrinceton | 2:25 A.M. | 2:45 A.M.\nWestminster | 3:15 A.M. | 3:30 A.M.\nNewberg | 5:00 A.M. | 5:30 A.M.\nBelleville | 6:15 A.M. | 6:25 A.M.\nStamford | 7:30 A.M. | 7:55 A.M.\nOakland | 9:35 A.M. | 10:00 A.M.\nSalem | 11:30 A.M. | 12:00 P.M.\nOakdale | 1:00 P.M. | 1:15 P.M.\nLakeside | 2:30 P.M. | 2:45 P.M.\n\nLook at the following schedule. Which stop does the train depart from at 2.45 A.M.? Choose from the the options: ['Newberg', 'Lakeside', 'Princeton', 'Oakland']", "answer": "Princeton", "ques_type": "multi_choice", "choices": ["Newberg", "Lakeside", "Princeton", "Oakland"], "code": [
  "# Python code, return answer \n# The train departs from Princeton at 2:45 A.M.\ndepart_time_princeton = \"2:45 A.M.\"\nanswer = \"Princeton\"\nprint(answer)", "# Store the train schedule in a dictionary\ntrain_schedule = {\n    'Princeton': '2:45 A.M.',\n    'Westminster': '3:30 A.M.',\n    'Newberg': '5:30 A.M.',\n    'Belleville': '6:25 A.M.',\n    'Stamford': '7:55 A.M.',\n    'Oakland': '10:00 A.M.',\n    'Salem': '12:00 P.M.',\n    'Oakdale': '1:15 P.M.',\n    'Lakeside': '2:45 P.M.'\n}\n\n# Check which location departs at 2:45 A.M.\ndepart_time = \"2:45 A.M.\"\nanswer = [location for location, time in train_schedule.items() if time == depart_time]\n\n# Since the question asks for a single location, we can take the first match\nif answer:\n    answer = answer[0]\nelse:\n    answer = None  # In case there's no match\n\nprint(answer)", "# Define the train schedule with locations and their corresponding departure times\ntrain_schedule = {\n    'Princeton': '2:45 A.M.',\n    'Westminster': '3:30 A.M.',\n    'Newberg': '5:30 A.M.',\n    'Belleville': '6:25 A.M.',\n    'Stamford': '7:55 A.M.',\n    'Oakland': '10:00 A.M.',\n    'Salem': '12:00 P.M.',\n    'Oakdale': '1:15 P.M.',\n    'Lakeside': '2:45 P.M.'\n}\n\n# Define the departure time to check\ndepart_time = \"2:45 A.M.\"\n\n# Find the location that has the specified departure time\nanswer = [location for location, time in train_schedule.items() if time == depart_time]\n\n# If there's a match, take the first one; otherwise, set to None\nif answer:\n    answer = answer[0]\nelse:\n    answer = None  # In case there's no match\n\nprint(answer)", "# Define the train schedule with both arrival and departure times\ntrain_schedule = {\n    'Princeton': {'arrive': '2:25 A.M.', 'depart': '2:45 A.M.'},\n    'Westminster': {'arrive': '3:15 A.M.', 'depart': '3:30 A.M.'},\n    'Newberg': {'arrive': '5:00 A.M.', 'depart': '5:30 A.M.'},\n    'Belleville': {'arrive': '6:15 A.M.', 'depart': '6:25 A.M.'},\n    'Stamford': {'arrive': '7:30 A.M.', 'depart': '7:55 A.M.'},\n    'Oakland': {'arrive': '9:35 A.M.', 'depart': '10:00 A.M.'},\n    'Salem': {'arrive': '11:30 A.M.', 'depart': '12:00 P.M.'},\n    'Oakdale': {'arrive': '1:00 P.M.', 'depart': '1:15 P.M.'},\n    'Lakeside': {'arrive': '2:30 P.M.', 'depart': '2:45 P.M.'}\n}\n\n# Define the departure time to check\ndepart_time = \"2:45 A.M.\"\n\n# Find the location that corresponds to the specified departure time\nanswer = [location for location, times in train_schedule.items() if times['depart'] == depart_time]\nif answer:\n    answer = answer[0]\nelse:\n    answer = None  # In case there's no match\n\nprint(answer)"
], "prediction": ["Princeton", "Princeton", "Princeton", "Princeton"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Josie's yearly finances\" and then answer a question.\n\nEarnings from job at the ice skating rink | $19,760\nEarnings from job at the amusement park | $21,091\nIncome tax and other payroll taxes | $6,873", "question": "Read the following table regarding \"Josie's yearly finances\" and then write Python code to answer a question.\n\nEarnings from job at the ice skating rink | $19,760\nEarnings from job at the amusement park | $21,091\nIncome tax and other payroll taxes | $6,873\n\nJosie has two part-time jobs. She works at the ice skating rink in the fall and winter, and she works at the amusement park during the spring and summer. Here are her yearly finances. What is Josie's gross income for the year?", "answer": "40,851", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Earnings from both jobs\nearnings_ice_skating_rink = 19760\nearnings_amusement_park = 21091\n# Calculate gross income\ngross_income = earnings_ice_skating_rink + earnings_amusement_park\nanswer = gross_income\nprint(answer)", "# Earnings from both jobs\nearnings_ice_skating_rink = 19760\nearnings_amusement_park = 21091\n\n# Calculate gross income\ngross_income = earnings_ice_skating_rink + earnings_amusement_park\n\n# Store the result in the variable 'answer'\nanswer = gross_income\n\n# Output the answer\nprint(answer)", "# Define earnings from both jobs\nearnings_ice_skating_rink = 19760\nearnings_amusement_park = 21091\n\n# Calculate gross income\ngross_income = earnings_ice_skating_rink + earnings_amusement_park\n\n# Store result in answer variable\nanswer = gross_income\n\n# Output the answer\nprint(answer)", "# Define Josie's earnings from both jobs\nearnings_ice_skating_rink = 19760\nearnings_amusement_park = 21091\n\n# Calculate Josie's gross income\ngross_income = earnings_ice_skating_rink + earnings_amusement_park\n\n# Store the result in the answer variable\nanswer = gross_income\n\n# Output the answer\nprint(answer)"], "prediction": [40851.0, 40851.0, 40851.0, 40851.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Making picture frames\" and then answer a question.\n\nPicture frames made | Frequency\n0 | 0\n1 | 2\n2 | 11\n3 | 7", "question": "Read the following table regarding \"Making picture frames\" and then write Python code to answer a question.\n\nPicture frames made | Frequency\n0 | 0\n1 | 2\n2 | 11\n3 | 7\n\nThe shop teacher, Mr. Suzuki, wrote down how many picture frames the students made last week. How many students made more than 1 picture frame?", "answer": "18", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Frequency of students making more than 1 picture frame\nstudents_made_2 = 11  # Students who made 2 frames\nstudents_made_3 = 7   # Students who made 3 frames\n# Total students who made more than 1 picture frame\nstudents_more_than_1 = students_made_2 + students_made_3\nanswer = students_more_than_1\nprint(answer)", "# Define the number of students who made each quantity of frames\nstudents_made_1 = 2  # Students who made 1 frame\nstudents_made_2 = 11  # Students who made 2 frames\nstudents_made_3 = 7   # Students who made 3 frames\n\n# Calculate the number of students who made more than 1 picture frame\nstudents_more_than_1 = students_made_2 + students_made_3\nanswer = students_more_than_1\nprint(answer)", "# Define the number of students who made different quantities of picture frames\nstudents_made_1 = 2  # Students who made 1 frame\nstudents_made_2 = 11  # Students who made 2 frames\nstudents_made_3 = 7   # Students who made 3 frames\n\n# Calculate the number of students who made more than 1 picture frame\nstudents_more_than_1 = students_made_2 + students_made_3\n\n# Store the result in the answer variable\nanswer = students_more_than_1\n\n# Print the answer\nprint(answer)", "students_made_1 = 2  # Students who made 1 frame\nstudents_made_2 = 11  # Students who made 2 frames\nstudents_made_3 = 7   # Students who made 3 frames\n\n# Calculate the number of students who made more than 1 picture frame\nstudents_more_than_1 = students_made_2 + students_made_3\nanswer = students_more_than_1  # This will be an integer\nprint(answer)"
], "prediction": [18.0, 18.0, 18.0, 18.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n18 | 0\n19 | 10\n20 | 20", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n18 | 0\n19 | 10\n20 | 20\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "linear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for equal differences in x-values.\ny_values = [0, 10, 20]\nx_values = [18, 19, 20]\n\n# Calculate the differences\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n# If the differences are constant, it's linear; otherwise, it's nonlinear.\nis_linear = all(diff == differences[0] for diff in differences)\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values based on the given table\ny_values = [0, 10, 20]\nx_values = [18, 19, 20]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i + 1] - y_values[i] for i in range(len(y_values) - 1)]\n\n# Check if all differences are the same, indicating a linear function\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Assign the result based on whether the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the y values corresponding to the x values\ny_values = [0, 10, 20]\nx_values = [18, 19, 20]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i + 1] - y_values[i] for i in range(len(y_values) - 1)]\n\n# Check if all differences are the same\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values from the table\nx_values = [18, 19, 20]\ny_values = [0, 10, 20]\n\n# Calculate the differences between consecutive y-values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if all differences are the same to determine if the function is linear\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Assign the result to the answer variable\nanswer = 'linear' if is_linear else 'nonlinear'\n\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")"]
}
{
  "context": "Read the following table regarding \"Balloons sold\" and then answer a question.\n\nDay | Number of balloons\nSaturday | 4\nSunday | 3\nMonday | 4\nTuesday | 5\nWednesday | 5\nThursday | 5", "question": "Read the following table regarding \"Balloons sold\" and then write Python code to answer a question.\n\nDay | Number of balloons\nSaturday | 4\nSunday | 3\nMonday | 4\nTuesday | 5\nWednesday | 5\nThursday | 5\n\nThe manager of a party supply store researched how many balloons it sold in the past 6 days. What is the mode of the numbers?", "answer": "5", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nfrom statistics import mode\n\n# Number of balloons sold each day\nballoons_sold = [4, 3, 4, 5, 5, 5]\n\n# Calculate the mode\nanswer = mode(balloons_sold)\nprint(answer)", "```python\nfrom statistics import mode\n\nball", "from statistics import mode\n\nballoons_sold = [4, 3, 4, 5, 5, 5]\nanswer = int(mode(balloons_sold))  # Convert to integer\nprint(answer)", "from statistics import mode\n\nballoons_sold = [4, 3, 4, 5, 5, 5]\nanswer = mode(balloons_sold)  # This will return the mode directly as an integer\nprint(answer)"], "prediction": [5.0, null, 5.0, 5.0], "report": ["Done", "SyntaxError('invalid syntax', ('<string>', 1, 1, '```python\\n', 1, 2))", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbright yellow highlighter | $0.29\nthick black marker | $0.72\nthin green highlighter | $0.14\nsmall box of paper clips | $0.25\nthin blue marker | $0.77", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbright yellow highlighter | $0.29\nthick black marker | $0.72\nthin green highlighter | $0.14\nsmall box of paper clips | $0.25\nthin blue marker | $0.77\n\nReggie has $0.50. Does he have enough to buy a thin green highlighter and a small box of paper clips? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# Prices of the items\nprice_thin_green_highlighter = 0.14\nprice_small_box_of_paper_clips = 0.25\n\n# Total cost of items\ntotal_cost = price_thin_green_highlighter + price_small_box_of_paper_clips\n\n# Amount of money Reggie has\nreggie_money = 0.50\n\n# Determine if he has enough money\nif reggie_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "def can_buy_items(price_item1, price_item2, budget):\n    total_cost = price_item1 + price_item2\n    return 'yes' if budget >= total_cost else 'no'\n\n# Prices of the items\nprice_thin_green_highlighter = 0.14\nprice_small_box_of_paper_clips = 0.25\n\n# Amount of money Reggie has\nreggie_money = 0.50\n\n# Determine if Reggie has enough money\nanswer = can_buy_items(price_thin_green_highlighter, price_small_box_of_paper_clips, reggie_money)\nprint(answer)", "def can_buy_items(price_item1, price_item2, budget):\n    total_cost = price_item1 + price_item2\n    return 'yes' if budget >= total_cost else 'no'\n\nprice_thin_green_highlighter = 0.14\nprice_small_box_of_paper_clips = 0.25\nreggie_money = 0.50\n\nanswer = can_buy_items(price_thin_green_highlighter, price_small_box_of_paper_clips, reggie_money)\nprint(answer)  # This will output the answer correctly", "def can_buy_items(price_item1, price_item2, budget):\n    total_cost = price_item1 + price_item2\n    return 'yes' if budget >= total_cost else 'no'\n\nprice_thin_green_highlighter = 0.14\nprice_small_box_of_paper_clips = 0.25\nreggie_money = 0.50\nanswer = can_buy_items(price_thin_green_highlighter, price_small_box_of_paper_clips, reggie_money)\n\nprint(answer)  # This will output the answer correctly"
], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nsesame seeds | $4.65 per lb\npumpkin seeds | $3.95 per lb\nsoybeans | $1.40 per lb\nlentils | $1.08 per lb", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nsesame seeds | $4.65 per lb\npumpkin seeds | $3.95 per lb\nsoybeans | $1.40 per lb\nlentils | $1.08 per lb\n\nHow much would it cost to buy 5 pounds of soybeans?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_soybeans = 1.40 \npounds_bought = 5 \n# Calculate the total cost\ntotal_cost = price_per_pound_soybeans * pounds_bought\nanswer = total_cost\nprint(answer)", "price_per_pound_soybeans = 1.40 \npounds_bought = 5 \ntotal_cost = price_per_pound_soybeans * pounds_bought\nanswer = \"${:.2f}\".format(total_cost)  # Formatting the output to two decimal places\nprint(answer)", "price_per_pound_soybeans = 1.40 \npounds_bought = 5 \ntotal_cost = price_per_pound_soybeans * pounds_bought\nanswer = \"${:.2f}\".format(total_cost)  # Formatting the output to two decimal places\nprint(answer)", "```python"], "prediction": [7.0, "$7.00", "$7.00", null], "report": ["Done", "Done", "Done", "SyntaxError('invalid syntax', ('<string>', 1, 1, '```python\\n', 1, 2))"]
}
{
  "context": "Read the following table regarding \"Lemon-flavored candies per bag\" and then answer a question.\n\nStem | Leaf \n1 | 2, 7\n2 | 4\n3 | 2, 3, 7\n4 | 3, 4, 5, 5, 6\n5 | 2\n6 | 9\n7 | 3, 9\n8 | 4, 4, 9\n9 | 0", "question": "Read the following table regarding \"Lemon-flavored candies per bag\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 2, 7\n2 | 4\n3 | 2, 3, 7\n4 | 3, 4, 5, 5, 6\n5 | 2\n6 | 9\n7 | 3, 9\n8 | 4, 4, 9\n9 | 0\n\nA machine at the candy factory dispensed different numbers of lemon-flavored candies into various bags. How many bags had at least 54 lemon-flavored candies?", "answer": "7", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The leaf values correspond to the stem in the stem-and-leaf display.\n# We will count the number of bags with at least 54 candies.\nbags_with_candies = [12, 17, 24, 32, 33, 37, 43, 44, 45, 45, 46, 52, 69, 73, 79, 84, 84, 89, 90]  # All values derived from the stem-and-leaf display.\n\n# Count bags with at least 54 candies\nbags_at_least_54 = [bag for bag in bags_with_candies if bag >= 54]\nanswer = len(bags_at_least_54)\nprint(answer)", "# List of bags with the number of lemon-flavored candies based on the stem-and-leaf display\nbags_with_candies = [12, 17, 24, 32, 33, 37, 43, 44, 45, 45, 46, 52, 69, 73, 79, 84, 84, 89, 90]\n\n# Count bags that have at least 54 lemon-flavored candies\nbags_at_least_54 = [bag for bag in bags_with_candies if bag >= 54]\nanswer = len(bags_at_least_54)\n\n# Output the answer\nprint(answer)", "# List of bags with lemon-flavored candies\nbags_with_candies = [12, 17, 24, 32, 33, 37, 43, 44, 45, 45, 46, 52, 69, 73, 79, 84, 84, 89, 90]\n\n# Count the number of bags with at least 54 lemon-flavored candies\nbags_at_least_54 = [bag for bag in bags_with_candies if bag >= 54]\nanswer = len(bags_at_least_54)\n\n# Output the answer\nprint(answer)", "# List of bags with the number of lemon-flavored candies\nbags_with_candies = [12, 17, 24, 32, 33, 37, 43, 44, 45, 45, 46, 52, 69, 73, 79, 84, 84, 89, 90]\n\n# Count the number of bags that have at least 54 lemon-flavored candies\nbags_at_least_54 = [bag for bag in bags_with_candies if bag >= 54]\nanswer = len(bags_at_least_54)\n\n# Output the answer\nprint(answer)"
], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$205 | 19,200 | 4,300\n$385 | 14,800 | 7,000\n$565 | 10,400 | 9,700\n$745 | 6,000 | 12,400\n$925 | 1,600 | 15,100", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$205 | 19,200 | 4,300\n$385 | 14,800 | 7,000\n$565 | 10,400 | 9,700\n$745 | 6,000 | 12,400\n$925 | 1,600 | 15,100\n\nLook at the table. Then answer the question. At a price of $385, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "shortage", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": ["# Python code, return answer \n# Given values at the price of $385\nquantity_demanded = 14800\nquantity_supplied = 7000\n\n# Determine if there is a shortage or surplus\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelse:\n    answer = 'surplus'\n\nprint(answer)", "# Define the quantities at the price of $385\nquantity_demanded = 14800\nquantity_supplied = 7000\n\n# Determine if there is a shortage or surplus\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelse:\n    answer = 'surplus'\n\nprint(answer)", "quantity_demanded = 14800\nquantity_supplied = 7000\n\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'equilibrium'\n\nprint(answer)", "# Define the quantity demanded and supplied at the price of $385\nquantity_demanded = 14800\nquantity_supplied = 7000\n\n# Determine if there is a shortage, surplus, or equilibrium\nif quantity_demanded > quantity_supplied:\n    answer = 'shortage'\nelif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'equilibrium'\n\nprint(answer)"], "prediction": ["shortage", "shortage", "shortage", "shortage"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Words per page\" and then answer a question.\n\nStem | Leaf \n6 | 5, 6, 9\n7 | 1, 2, 4, 9\n8 | 3, 3, 4, 8, 8\n9 | 0", "question": "Read the following table regarding \"Words per page\" and then write Python code to answer a question.\n\nStem | Leaf \n6 | 5, 6, 9\n7 | 1, 2, 4, 9\n8 | 3, 3, 4, 8, 8\n9 | 0\n\nRiley counted the number of words per page in her new book. What is the smallest number of words?", "answer": "65", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The smallest number of words corresponds to the smallest value in the stem-and-leaf display.\nsmallest_words_count = 65  # From the stem \"6 | 5\", the value is 65 words.\nanswer = smallest_words_count\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(6, [5, 6, 9]), (7, [1, 2, 4, 9]), (8, [3, 3, 4, 8, 8]), (9, [0])]  \n\n# Initialize a list to hold all the word counts  \nword_counts = []  \n\n# Iterate through the stem and leaf data structure to calculate words per page  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        words_per_page = stem * 10 + leaf  \n        word_counts.append(words_per_page)  \n\n# Find the smallest number of words  \nsmallest_words_count = min(word_counts)  \nanswer = smallest_words_count  \nprint(answer)", "stem_and_leaf = [(6, [5, 6, 9]), (7, [1, 2, 4, 9]), (8, [3, 3, 4, 8, 8]), (9, [0])]  \nword_counts = []  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        words_per_page = stem * 10 + leaf  \n        word_counts.append(words_per_page)  \nsmallest_words_count = min(word_counts)  \nanswer = int(smallest_words_count)  # Convert to integer\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(6, [5, 6, 9]), (7, [1, 2, 4, 9]), (8, [3, 3, 4, 8, 8]), (9, [0])]  \n\n# Initialize a list to store the word counts  \nword_counts = []  \n\n# Iterate through the stem and leaf data structure to calculate words per page  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        words_per_page = stem * 10 + leaf  \n        word_counts.append(words_per_page)  \n\n# Find the smallest number of words  \nsmallest_words_count = min(word_counts)  \nanswer = smallest_words_count  # No need to convert to int as it's already an integer\nprint(answer)"
], "prediction": [65.0, 65.0, 65.0, 65.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nblue beads | $2/kg\nyellow beads | $3/kg\ngreen beads | $3/kg\nred beads | $3/kg", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nblue beads | $2/kg\nyellow beads | $3/kg\ngreen beads | $3/kg\nred beads | $3/kg\n\nIf Wesley buys 3 kilograms of blue beads, how much will he spend?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_kilogram_blue_beads = 2  # in dollars\nkilograms_bought = 3 \n# Calculate total cost\nanswer = price_per_kilogram_blue_beads * kilograms_bought\nprint(answer)", "# Define the price per kilogram of blue beads\nprice_per_kilogram_blue_beads = 2  # in dollars\n\n# Define the number of kilograms bought\nkilograms_bought = 3 \n\n# Calculate the total cost\ntotal_cost = price_per_kilogram_blue_beads * kilograms_bought\n\n# Store the result in the answer variable\nanswer = f\"${total_cost:.2f}\"  # Format the output to two decimal places\n\nprint(answer)", "price_per_kilogram_blue_beads = 2  # in dollars\nkilograms_bought = 3 \ntotal_cost = price_per_kilogram_blue_beads * kilograms_bought\nanswer = f\"${total_cost:.2f}\"  # Format the output to two decimal places\nprint(answer)", "# Define the price per kilogram of blue beads\nprice_per_kilogram_blue_beads = 2  # in dollars\n\n# Define the number of kilograms bought\nkilograms_bought = 3 \n\n# Calculate the total cost\ntotal_cost = price_per_kilogram_blue_beads * kilograms_bought\n\n# Store the result in the variable 'answer'\nanswer = total_cost  # This will be a numerical value\n\n# Print the answer\nprint(answer)"], "prediction": [6.0, "$6.00", "$6.00", 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Computers in classrooms\" and then answer a question.\n\nTeacher | Number of computers\nMrs. Rossi | 18\nMr. Watson | 19\nMrs. Tan | 11\nMs. Cohen | 17", "question": "Read the following table regarding \"Computers in classrooms\" and then write Python code to answer a question.\n\nTeacher | Number of computers\nMrs. Rossi | 18\nMr. Watson | 19\nMrs. Tan | 11\nMs. Cohen | 17\n\nThe teachers at a middle school counted how many computers they had in their classrooms. Which teacher has the most computers? Choose from the the options: ['Mrs. Rossi', 'Mr. Watson', 'Mrs. Tan', 'Ms. Cohen']", "answer": "Mr. Watson", "ques_type": "multi_choice", "choices": ["Mrs. Rossi", "Mr. Watson", "Mrs. Tan", "Ms. Cohen"], "code": [
  "# Python code, return answer \nteachers_computers = {\n    'Mrs. Rossi': 18,\n    'Mr. Watson': 19,\n    'Mrs. Tan': 11,\n    'Ms. Cohen': 17\n}\n# Find the teacher with the most computers\nmost_computers_teacher = max(teachers_computers, key=teachers_computers.get)\nanswer = most_computers_teacher\nprint(answer)", "# Store the teachers and their corresponding number of computers in a dictionary  \nteachers_computers = {\n    'Mrs. Rossi': 18,\n    'Mr. Watson': 19,\n    'Mrs. Tan': 11,\n    'Ms. Cohen': 17\n}\n\n# Find the teacher with the most computers  \nmost_computers_teacher = max(teachers_computers, key=teachers_computers.get)\n\nanswer = most_computers_teacher  \nprint(answer)", "# Define the number of computers for each teacher in a dictionary\nteachers_computers = {\n    'Mrs. Rossi': 18,\n    'Mr. Watson': 19,\n    'Mrs. Tan': 11,\n    'Ms. Cohen': 17\n}\n\n# Find the teacher with the most computers\nmost_computers_teacher = max(teachers_computers, key=teachers_computers.get)\n\n# Store the result in the variable 'answer'\nanswer = most_computers_teacher  \n\n# Output the answer\nprint(answer)", "# Store the teachers and their corresponding number of computers in a dictionary\nteachers_computers = {\n    'Mrs. Rossi': 18,\n    'Mr. Watson': 19,\n    'Mrs. Tan': 11,\n    'Ms. Cohen': 17\n}\n\n# Find the teacher with the most computers\nmost_computers_teacher = max(teachers_computers, key=teachers_computers.get)\n\nanswer = most_computers_teacher  \nprint(answer)"
], "prediction": ["Mr. Watson", "Mr. Watson", "Mr. Watson", "Mr. Watson"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Mailing letters last week\" and then answer a question.\n\nLetters mailed | Frequency\n0 | 1\n1 | 5\n2 | 16\n3 | 20\n4 | 9", "question": "Read the following table regarding \"Mailing letters last week\" and then write Python code to answer a question.\n\nLetters mailed | Frequency\n0 | 1\n1 | 5\n2 | 16\n3 | 20\n4 | 9\n\nAn office manager counts the number of letters sent by each of her company's employees each week. How many employees mailed at least 3 letters?", "answer": "29", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of employees mailing letters\nfrequency = {\n    0: 1,\n    1: 5,\n    2: 16,\n    3: 20,\n    4: 9\n}\n# Calculate the number of employees who mailed at least 3 letters\nemployees_mailed_at_least_3 = frequency[3] + frequency[4]\nanswer = employees_mailed_at_least_3\nprint(answer)", "frequency = {\n    0: 1,\n    1: 5,\n    2: 16,\n    3: 20,\n    4: 9\n}\nemployees_mailed_at_least_3 = frequency[3] + frequency[4]\nanswer = int(employees_mailed_at_least_3)  # Convert to integer for clarity\nprint(answer)", "# Define the frequency of letters mailed\nfrequency = {\n    0: 1,\n    1: 5,\n    2: 16,\n    3: 20,\n    4: 9\n}\n\n# Calculate the number of employees who mailed at least 3 letters\nemployees_mailed_at_least_3 = frequency[3] + frequency[4]\nanswer = employees_mailed_at_least_3  # Store the result directly as an integer\nprint(answer)", "frequency = {\n    0: 1,\n    1: 5,\n    2: 16,\n    3: 20,\n    4: 9\n}\nemployees_mailed_at_least_3 = frequency[3] + frequency[4]\nanswer = int(employees_mailed_at_least_3)  # Ensure the result is an integer\nprint(answer)"], "prediction": [29.0, 29.0, 29.0, 29.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Temperature at noon\" and then answer a question.\n\nDay | Temperature (\u00c2\u00b0C)\nSunday | 8\nMonday | 8\nTuesday | 7\nWednesday | 7\nThursday | 5\nFriday | 6\nSaturday | 4", "question": "Read the following table regarding \"Temperature at noon\" and then write Python code to answer a question.\n\nDay | Temperature (\u00c2\u00b0C)\nSunday | 8\nMonday | 8\nTuesday | 7\nWednesday | 7\nThursday | 5\nFriday | 6\nSaturday | 4\n\nKaylee graphed the temperature at noon for 7 days. What is the range of the numbers?", "answer": "4", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ntemperatures = [8, 8, 7, 7, 5, 6, 4]\n# Calculate the range\ntemperature_range = max(temperatures) - min(temperatures)\nanswer = temperature_range\nprint(answer)", "temperatures = [8, 8, 7, 7, 5, 6, 4]\ntemperature_range = max(temperatures) - min(temperatures)\nanswer = temperature_range  # This will be an integer\nprint(answer)", "temperatures = [8, 8, 7, 7, 5, 6, 4]\ntemperature_range = max(temperatures) - min(temperatures)\nanswer = int(temperature_range)  # Convert the result to an integer\nprint(answer)", ""], "prediction": [4.0, 4.0, 4.0, null], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Newspapers collected\" and then answer a question.\n\nName | Number of newspapers\nFelipe | 67\nWyatt | 66\nClara | 68\nDalton | 72\nSamuel | 56\nOwen | 56\nTristan | 63", "question": "Read the following table regarding \"Newspapers collected\" and then write Python code to answer a question.\n\nName | Number of newspapers\nFelipe | 67\nWyatt | 66\nClara | 68\nDalton | 72\nSamuel | 56\nOwen | 56\nTristan | 63\n\nFelipe's class tracked how many newspapers each student collected for their recycling project. What is the mean of the numbers?", "answer": "64", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of newspapers collected by each student\nnewspapers_collected = [67, 66, 68, 72, 56, 56, 63]\n# Calculate the mean\nmean_newspapers = sum(newspapers_collected) / len(newspapers_collected)\nanswer = mean_newspapers\nprint(answer)", "newspapers_collected = [67, 66, 68, 72, 56, 56, 63]\nmean_newspapers = sum(newspapers_collected) / len(newspapers_collected)\nanswer = round(mean_newspapers)  # Round to the nearest integer\nprint(answer)", "newspapers_collected = [67, 66, 68, 72, 56, 56, 63]  \nmean_newspapers = sum(newspapers_collected) / len(newspapers_collected)  \nanswer = int(round(mean_newspapers))  # Convert to integer after rounding  \nprint(answer)", "newspapers_collected = [67, 66, 68, 72, 56, 56, 63]  \nmean_newspapers = sum(newspapers_collected) / len(newspapers_collected)  \nanswer = round(mean_newspapers)  # Round to the nearest integer  \nprint(answer)"], "prediction": [64.0, 64.0, 64.0, 64.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Cups of coffee sold\" and then answer a question.\n\nDay | Number of cups\nWednesday | 71\nThursday | 57\nFriday | 69\nSaturday | 59\nSunday | 65\nMonday | 58\nTuesday | 60", "question": "Read the following table regarding \"Cups of coffee sold\" and then write Python code to answer a question.\n\nDay | Number of cups\nWednesday | 71\nThursday | 57\nFriday | 69\nSaturday | 59\nSunday | 65\nMonday | 58\nTuesday | 60\n\nA coffee shop monitored the number of cups of coffee sold each day. What is the median of the numbers?", "answer": "60", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Number of cups sold each day\ncups_sold = [71, 57, 69, 59, 65, 58, 60]\n\n# Sort the list to find the median\ncups_sold_sorted = sorted(cups_sold)\n\n# Calculate the median\nn = len(cups_sold_sorted)\nif n % 2 == 1:  # Odd number of elements\n    median = cups_sold_sorted[n // 2]\nelse:  # Even number of elements\n    median = (cups_sold_sorted[n // 2 - 1] + cups_sold_sorted[n // 2]) / 2\n\nanswer = median\nprint(answer)", "# List of cups of coffee sold each day\ncups_sold = [71, 57, 69, 59, 65, 58, 60]\n\n# Sort the list to find the median\ncups_sold_sorted = sorted(cups_sold)\nn = len(cups_sold_sorted)\n\n# Calculate the median\nif n % 2 == 1:  # Odd number of elements\n    median = cups_sold_sorted[n // 2]\nelse:  # Even number of elements\n    median = (cups_sold_sorted[n // 2 - 1] + cups_sold_sorted[n // 2]) / 2\n\n# Store the median in the variable 'answer'\nanswer = median\n\n# Print the answer\nprint(answer)", "# Define the number of cups sold each day in a list\ncups_sold = [71, 57, 69, 59, 65, 58, 60]\n\n# Sort the list to find the median\ncups_sold_sorted = sorted(cups_sold)\nn = len(cups_sold_sorted)\n\n# Calculate the median\nif n % 2 == 1:  # Odd number of elements\n    median = cups_sold_sorted[n // 2]\nelse:  # Even number of elements\n    median = (cups_sold_sorted[n // 2 - 1] + cups_sold_sorted[n // 2]) / 2\n\n# Store the result in the variable 'answer'\nanswer = median\n\n# Output the answer\nprint(answer)", "cups_sold = [71, 57, 69, 59, 65, 58, 60]\ncups_sold_sorted = sorted(cups_sold)\nn = len(cups_sold_sorted)\n\nif n % 2 == 1:  # Odd number of elements\n    median = cups_sold_sorted[n // 2]\nelse:  # Even number of elements\n    median = (cups_sold_sorted[n // 2 - 1] + cups_sold_sorted[n // 2]) / 2\n\nanswer = median\nprint(answer)"
], "prediction": [60.0, 60.0, 60.0, 60.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Bridge tolls\" and then answer a question.\n\nBridge | Truck | Car\nFort Madison | $4 | $1\nGolden Gate | $7 | $6\nSan Mateo | $6 | $4\nOakland Bay | $6 | $4", "question": "Read the following table regarding \"Bridge tolls\" and then write Python code to answer a question.\n\nBridge | Truck | Car\nFort Madison | $4 | $1\nGolden Gate | $7 | $6\nSan Mateo | $6 | $4\nOakland Bay | $6 | $4\n\nA transportation analyst compared various bridges' tolls. Which charges more for a car, the Golden Gate bridge or the Oakland Bay bridge? Choose from the the options: ['Golden Gate', 'Oakland Bay']", "answer": "Golden Gate", "ques_type": "multi_choice", "choices": ["Golden Gate", "Oakland Bay"], "code": ["# Python code, return answer \ngolden_gate_toll_car = 6 \noakland_bay_toll_car = 4 \n\n# Compare the tolls for cars\nif golden_gate_toll_car > oakland_bay_toll_car:\n    answer = 'Golden Gate'\nelse:\n    answer = 'Oakland Bay'\nprint(answer)", "# Define the tolls for cars on each bridge\ngolden_gate_toll_car = 6 \noakland_bay_toll_car = 4 \n\n# Compare the tolls for cars and determine which bridge charges more\nif golden_gate_toll_car > oakland_bay_toll_car:\n    answer = 'Golden Gate'\nelse:\n    answer = 'Oakland Bay'\n\nprint(answer)", "golden_gate_toll_car = 6 \noakland_bay_toll_car = 4 \n\nif golden_gate_toll_car > oakland_bay_toll_car:\n    answer = 'Golden Gate'\nelif golden_gate_toll_car < oakland_bay_toll_car:\n    answer = 'Oakland Bay'\nelse:\n    answer = 'Both charge the same'\n\nprint(answer)", ""], "prediction": ["Golden Gate", "Golden Gate", "Golden Gate", null], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Art contest entries\" and then answer a question.\n\nYear | Number of entries\n2009 | 37\n2010 | 42\n2011 | 43\n2012 | 28\n2013 | 33", "question": "Read the following table regarding \"Art contest entries\" and then write Python code to answer a question.\n\nYear | Number of entries\n2009 | 37\n2010 | 42\n2011 | 43\n2012 | 28\n2013 | 33\n\nMrs. Newman hosts an annual art contest for kids, and she keeps a record of the number of entries each year. According to the table, what was the rate of change between 2012 and 2013?", "answer": "5", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nentries_2012 = 28\nentries_2013 = 33\n# Calculate the rate of change\nrate_of_change = entries_2013 - entries_2012\nanswer = rate_of_change\nprint(answer)", "entries_2012 = 28\nentries_2013 = 33\n\n# Calculate the change in entries\nchange_in_entries = entries_2013 - entries_2012\n\n# Calculate the rate of change as a percentage\nrate_of_change = (change_in_entries / entries_2012) * 100\n\nanswer = rate_of_change\nprint(answer)", "entries_2012 = 28\nentries_2013 = 33\nchange_in_entries = entries_2013 - entries_2012\nrate_of_change = (change_in_entries / entries_2012) * 100\nanswer = round(rate_of_change, 2)  # Round to two decimal places for better readability\nprint(answer)", "# Define the number of entries for 2012 and 2013\nentries_2012 = 28\nentries_2013 = 33\n\n# Calculate the change in entries\nchange_in_entries = entries_2013 - entries_2012\n\n# Calculate the rate of change as a percentage\nrate_of_change = (change_in_entries / entries_2012) * 100\n\n# Store the result in the variable 'answer', rounded to two decimal places\nanswer = round(rate_of_change, 2)\n\n# Output the answer\nprint(answer)"], "prediction": [5.0, 17.85714, 17.86, 17.86], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Ties per rack\" and then answer a question.\n\nStem | Leaf \n1 | 4, 7\n2 | 0, 5, 6, 6, 8, 8\n3 | 1, 2\n4 | 5, 6, 9", "question": "Read the following table regarding \"Ties per rack\" and then write Python code to answer a question.\n\nStem | Leaf \n1 | 4, 7\n2 | 0, 5, 6, 6, 8, 8\n3 | 1, 2\n4 | 5, 6, 9\n\nThe employee at the department store counted the number of ties on each tie rack. How many racks have at least 18 ties but fewer than 46 ties?", "answer": "9", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The ranges from the stem-and-leaf display correspond to the following ties on racks:\n# 14, 17, 20, 25, 26, 26, 28, 28, 31, 32, 45, 46, 49\n\n# Extracting the number of ties from the stem-and-leaf representation:\ntie_counts = [14, 17, 20, 25, 26, 26, 28, 28, 31, 32, 45, 46, 49]\n\n# Filtering racks with ties in the range 18 to 45\nfiltered_racks = [count for count in tie_counts if 18 <= count < 46]\n\n# Counting the number of racks that meet the criteria\nnumber_of_racks = len(filtered_racks)\nanswer = number_of_racks\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(1, [4, 7]), (2, [0, 5, 6, 6, 8, 8]), (3, [1, 2]), (4, [5, 6, 9])]  \n  \n# Initialize counter for racks with at least 18 ties but fewer than 46 ties  \nracks_with_18_to_45_ties = 0  \n  \n# Iterate through the stem and leaf data structure and count relevant racks  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        ties_per_rack = stem * 10 + leaf  \n        if 18 <= ties_per_rack < 46:  \n            racks_with_18_to_45_ties += 1  \n  \nanswer = racks_with_18_to_45_ties  \nprint(answer)", "# Define the stem and leaf data structure  \nstem_and_leaf = [(1, [4, 7]), (2, [0, 5, 6, 6, 8, 8]), (3, [1, 2]), (4, [5, 6, 9])]  \n# Initialize counter for racks with at least 18 ties but fewer than 46 ties  \nracks_with_18_to_45_ties = 0  \n\n# Iterate through the stem and leaf data structure and count relevant racks  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        ties_per_rack = stem * 10 + leaf  \n        if 18 <= ties_per_rack < 46:  \n            racks_with_18_to_45_ties += 1  \n\n# Store the result as an integer  \nanswer = racks_with_18_to_45_ties  \nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [(1, [4, 7]), (2, [0, 5, 6, 6, 8, 8]), (3, [1, 2]), (4, [5, 6, 9])]\n\n# Initialize counter for racks with at least 18 ties but fewer than 46 ties\nracks_with_18_to_45_ties = 0\n\n# Iterate through the stem and leaf data structure and count relevant racks\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        ties_per_rack = stem * 10 + leaf\n        if 18 <= ties_per_rack < 46:\n            racks_with_18_to_45_ties += 1\n\n# Store the result as an integer\nanswer = racks_with_18_to_45_ties\nprint(answer)"
], "prediction": [9.0, 9.0, 9.0, 9.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Midterm exam scores\" and then answer a question.\n\nStem | Leaf \n4 | 0, 1, 3, 3, 4, 5, 5, 6, 7, 7\n5 | 1, 2, 4, 6, 6, 7\n6 | 2, 4\n7 | 9", "question": "Read the following table regarding \"Midterm exam scores\" and then write Python code to answer a question.\n\nStem | Leaf \n4 | 0, 1, 3, 3, 4, 5, 5, 6, 7, 7\n5 | 1, 2, 4, 6, 6, 7\n6 | 2, 4\n7 | 9\n\nProfessor Gilmore informed his students of their scores on the midterm exam. How many students scored fewer than 80 points?", "answer": "19", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The scores are represented in a stem-and-leaf format.\n# We need to count how many scores are below 80.\n\n# From the stem-and-leaf display:\nscores = [\n    40, 41, 43, 43, 44, 45, 45, 46, 47, 47,  # 40s\n    51, 52, 54, 56, 56, 57,                  # 50s\n    62, 64,                                  # 60s\n    79                                       # 70s\n]\n\n# Count how many scores are below 80\nstudents_below_80 = sum(1 for score in scores if score < 80)\nanswer = students_below_80\nprint(answer)", "scores = [\n    40, 41, 43, 43, 44, 45, 45, 46, 47, 47,  # 40s\n    51, 52, 54, 56, 56, 57,                  # 50s\n    62, 64,                                  # 60s\n    79                                       # 70s\n]\n\n# Count the number of students who scored fewer than 80 points\nstudents_below_80 = sum(1 for score in scores if score < 80)\nanswer = students_below_80\nprint(answer)", "scores = [\n    40, 41, 43, 43, 44, 45, 45, 46, 47, 47,  # 40s\n    51, 52, 54, 56, 56, 57,                  # 50s\n    62, 64,                                  # 60s\n    79                                       # 70s\n]\nstudents_below_80 = sum(1 for score in scores if score < 80)\nanswer = int(students_below_80)  # Ensure the count is an integer\nprint(answer)", "scores = [\n    40, 41, 43, 43, 44, 45, 45, 46, 47, 47,  # 40s\n    51, 52, 54, 56, 56, 57,                  # 50s\n    62, 64,                                  # 60s\n    79                                       # 70s\n]\nstudents_below_80 = sum(1 for score in scores if score < 80)\nanswer = students_below_80  # No need to convert to int, it's already an integer\nprint(answer)"
], "prediction": [19.0, 19.0, 19.0, 19.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Phone calls received\" and then answer a question.\n\nDay | Number of calls\nSunday | 434\nMonday | 435\nTuesday | 459\nWednesday | 445", "question": "Read the following table regarding \"Phone calls received\" and then write Python code to answer a question.\n\nDay | Number of calls\nSunday | 434\nMonday | 435\nTuesday | 459\nWednesday | 445\n\nA technical support line tracked how many calls it received each day. On which day did the support line receive the fewest calls? Choose from the the options: ['Sunday', 'Monday', 'Tuesday', 'Wednesday']", "answer": "Sunday", "ques_type": "multi_choice", "choices": ["Sunday", "Monday", "Tuesday", "Wednesday"], "code": ["# Python code, return answer \ncalls_received = {\n    'Sunday': 434,\n    'Monday': 435,\n    'Tuesday': 459,\n    'Wednesday': 445\n}\n# Find the day with the fewest calls\nfewest_calls_day = min(calls_received, key=calls_received.get)\nanswer = fewest_calls_day\nprint(answer)", "# Define the dictionary with the number of calls received each day\ncalls_received = {\n    'Sunday': 434,\n    'Monday': 435,\n    'Tuesday': 459,\n    'Wednesday': 445\n}\n\n# Find the day with the fewest calls using the min function\nfewest_calls_day = min(calls_received, key=calls_received.get)\n\n# Store the result in the answer variable\nanswer = fewest_calls_day\n\n# Print the answer\nprint(answer)", "calls_received = {\n    'Sunday': 434,\n    'Monday': 435,\n    'Tuesday': 459,\n    'Wednesday': 445\n}\nfewest_calls_day = min(calls_received, key=calls_received.get)\nanswer = fewest_calls_day\nprint(answer)", "calls_received = {\n    'Sunday': 434,\n    'Monday': 435,\n    'Tuesday': 459,\n    'Wednesday': 445\n}\nfewest_calls_day = min(calls_received, key=calls_received.get)\nanswer = fewest_calls_day\nprint(answer)"], "prediction": ["Sunday", "Sunday", "Sunday", "Sunday"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Sports team membership\" and then answer a question.\n\nTeam | Number of members\nwrestling team | 27\nvolleyball team | 29\ntrack team | 21\nswimming team | 26", "question": "Read the following table regarding \"Sports team membership\" and then write Python code to answer a question.\n\nTeam | Number of members\nwrestling team | 27\nvolleyball team | 29\ntrack team | 21\nswimming team | 26\n\nShane's school reported how many members each sports team had. Which team has the most members? Choose from the the options: ['wrestling team', 'volleyball team', 'track team', 'swimming team']", "answer": "volleyball team", "ques_type": "multi_choice", "choices": ["wrestling team", "volleyball team", "track team", "swimming team"], "code": ["# Python code, return answer \nteams = {\n    'wrestling team': 27,\n    'volleyball team': 29,\n    'track team': 21,\n    'swimming team': 26\n}\n# Find the team with the most members\nmost_members_team = max(teams, key=teams.get)\nanswer = most_members_team\nprint(answer)", "teams = {\n    'wrestling team': 27,\n    'volleyball team': 29,\n    'track team': 21,\n    'swimming team': 26\n}\nmost_members_team = max(teams, key=teams.get)\nanswer = most_members_team\nprint(answer)", "# Define the teams and their corresponding number of members in a dictionary\nteams = {\n    'wrestling team': 27,\n    'volleyball team': 29,\n    'track team': 21,\n    'swimming team': 26\n}\n\n# Find the team with the most members\nmost_members_team = max(teams, key=teams.get)\nanswer = most_members_team\n\nprint(answer)", "teams = {\n    'wrestling team': 27,\n    'volleyball team': 29,\n    'track team': 21,\n    'swimming team': 26\n}\nmost_members_team = max(teams, key=teams.get)\nanswer = most_members_team\nprint(answer)"], "prediction": ["volleyball team", "volleyball team", "volleyball team", "volleyball team"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n18 | 3\n17 | 9\n14 | 12", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n18 | 3\n17 | 9\n14 | 12\n\nLook at this table. Is this relation a function? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# A relation is a function if each input (x) maps to exactly one output (y).\n# Here, we check the unique x values in the table.\nx_values = [18, 17, 14]\n# Since all x values are unique, the relation is a function.\nis_function = len(x_values) == len(set(x_values))\n\nif is_function:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "# Define the relation as a list of tuples (x, y)\nrelation = [(18, 3), (17, 9), (14, 12)]\n\n# Check if the relation is a function\nis_function = True\nx_values = [x for x, y in relation]\nif len(x_values) != len(set(x_values)):\n    is_function = False\n\nanswer = 'yes' if is_function else 'no'\nprint(answer)", "# Define the relation as a list of tuples\nrelation = [(18, 3), (17, 9), (14, 12)]\n\n# Check if the relation is a function by ensuring all x-values are unique\nis_function = len(relation) == len(set(x for x, y in relation))\n\n# Assign the answer based on whether it's a function or not\nanswer = 'yes' if is_function else 'no'\n\nprint(answer)", "# Define the relation as a list of tuples\nrelation = [(18, 3), (17, 9), (14, 12)]\n\n# Create a set of x-values to check for uniqueness\nx_values = {x for x, y in relation}\n\n# Check if the number of unique x-values is equal to the number of pairs in the relation\nis_function = len(x_values) == len(relation)\n\n# Assign the answer based on the function check\nanswer = 'yes' if is_function else 'no'\n\nprint(answer)"
], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npair of designer shoes | $7,759.00\ndesigner coat | $5,950.00\ndesigner handbag | $8,180.00\ndesigner ball gown | $8,585.00\ndesigner watch | $3,232.00\npair of designer boots | $5,839.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npair of designer shoes | $7,759.00\ndesigner coat | $5,950.00\ndesigner handbag | $8,180.00\ndesigner ball gown | $8,585.00\ndesigner watch | $3,232.00\npair of designer boots | $5,839.00\n\nAva has $13,906.00. Does she have enough to buy a designer handbag and a designer coat? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \n# Prices of the items\nprice_handbag = 8180.00\nprice_coat = 5950.00\n# Total cost for both items\ntotal_cost = price_handbag + price_coat\n# Ava's budget\nava_budget = 13906.00\n# Determine if Ava has enough money\nif ava_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "# Prices of the designer items\nprice_handbag = 8180.00\nprice_coat = 5950.00\n\n# Calculate the total cost\ntotal_cost = price_handbag + price_coat\n\n# Ava's budget\nava_budget = 13906.00\n\n# Check if Ava has enough money\nif ava_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Prices of the items\nprice_handbag = 8180.00\nprice_coat = 5950.00\n\n# Total cost of the handbag and coat\ntotal_cost = price_handbag + price_coat\n\n# Ava's budget\nava_budget = 13906.00\n\n# Check if Ava has enough money\nif ava_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Prices of the items\nprice_handbag = 8180.00\nprice_coat = 5950.00\n\n# Total cost of the handbag and coat\ntotal_cost = price_handbag + price_coat\n\n# Ava's budget\nava_budget = 13906.00\n\n# Determine if Ava has enough money\nif ava_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)"], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ngingersnap cookie dough | $8/pound\nsnickerdoodle cookie dough | $4/pound\ndouble chocolate cookie dough | $8/pound\noatmeal raisin cookie dough | $6/pound\npeanut butter cookie dough | $8/pound\nchocolate chip cookie dough | $7/pound", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ngingersnap cookie dough | $8/pound\nsnickerdoodle cookie dough | $4/pound\ndouble chocolate cookie dough | $8/pound\noatmeal raisin cookie dough | $6/pound\npeanut butter cookie dough | $8/pound\nchocolate chip cookie dough | $7/pound\n\nEmilia went to the store and bought 5 pounds of gingersnap cookie dough, 4 pounds of snickerdoodle cookie dough, and 2 pounds of chocolate chip cookie dough. How much did she spend?", "answer": "70", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices per pound\nprice_gingersnap = 8 \nprice_snickerdoodle = 4 \nprice_chocolate_chip = 7 \n\n# Pounds bought\npounds_gingersnap = 5 \npounds_snickerdoodle = 4 \npounds_chocolate_chip = 2 \n\n# Total cost calculation\ntotal_cost = (price_gingersnap * pounds_gingersnap +\n               price_snickerdoodle * pounds_snickerdoodle +\n               price_chocolate_chip * pounds_chocolate_chip)\n\nanswer = total_cost\nprint(answer)", "# Prices per pound for each type of cookie dough\nprice_gingersnap = 8\nprice_snickerdoodle = 4\nprice_chocolate_chip = 7\n\n# Amounts purchased in pounds\npounds_gingersnap = 5\npounds_snickerdoodle = 4\npounds_chocolate_chip = 2\n\n# Calculate total cost\ntotal_cost = (price_gingersnap * pounds_gingersnap +\n               price_snickerdoodle * pounds_snickerdoodle +\n               price_chocolate_chip * pounds_chocolate_chip)\n\nanswer = total_cost\nprint(answer)", "# Define the prices per pound\nprice_gingersnap = 8\nprice_snickerdoodle = 4\nprice_chocolate_chip = 7\n\n# Define the pounds purchased\npounds_gingersnap = 5\npounds_snickerdoodle = 4\npounds_chocolate_chip = 2\n\n# Calculate the total cost\ntotal_cost = (price_gingersnap * pounds_gingersnap +\n               price_snickerdoodle * pounds_snickerdoodle +\n               price_chocolate_chip * pounds_chocolate_chip)\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the prices per pound for each type of cookie dough\nprice_gingersnap = 8\nprice_snickerdoodle = 4\nprice_chocolate_chip = 7\n\n# Define the number of pounds bought for each type of cookie dough\npounds_gingersnap = 5\npounds_snickerdoodle = 4\npounds_chocolate_chip = 2\n\n# Calculate the total cost\ntotal_cost = (price_gingersnap * pounds_gingersnap +\n               price_snickerdoodle * pounds_snickerdoodle +\n               price_chocolate_chip * pounds_chocolate_chip)\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)"
], "prediction": [70.0, 70.0, 70.0, 70.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nmountain bike | $633\nwetsuit | $282\npair of skis | $648\nsurfboard | $783\nset of golf clubs | $332", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nmountain bike | $633\nwetsuit | $282\npair of skis | $648\nsurfboard | $783\nset of golf clubs | $332\n\nHow much more does a pair of skis cost than a set of golf clubs?", "answer": "316", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_pair_of_skis = 648\ncost_set_of_golf_clubs = 332\n# Calculate the difference in cost\ndifference_in_cost = cost_pair_of_skis - cost_set_of_golf_clubs\nanswer = difference_in_cost\nprint(answer)", "cost_pair_of_skis = 648\ncost_set_of_golf_clubs = 332\ndifference_in_cost = cost_pair_of_skis - cost_set_of_golf_clubs\nanswer = int(difference_in_cost)  # Convert to integer if desired\nprint(answer)", "cost_pair_of_skis = 648\ncost_set_of_golf_clubs = 332\ndifference_in_cost = cost_pair_of_skis - cost_set_of_golf_clubs\nanswer = difference_in_cost  # No need to convert to int since the result is already an integer\nprint(answer)", "cost_pair_of_skis = 648\ncost_set_of_golf_clubs = 332\ndifference_in_cost = cost_pair_of_skis - cost_set_of_golf_clubs\nanswer = int(difference_in_cost)  # Convert the result to an integer\nprint(answer)"], "prediction": [316.0, 316.0, 316.0, 316.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Comic strips read\" and then answer a question.\n\nDay | Number of comic strips\nSaturday | 5\nSunday | 1\nMonday | 8\nTuesday | 2\nWednesday | 3\nThursday | 7\nFriday | 2", "question": "Read the following table regarding \"Comic strips read\" and then write Python code to answer a question.\n\nDay | Number of comic strips\nSaturday | 5\nSunday | 1\nMonday | 8\nTuesday | 2\nWednesday | 3\nThursday | 7\nFriday | 2\n\nDaniel paid attention to how many comic strips he read in the past 7 days. What is the mean of the numbers?", "answer": "4", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of comic strips read each day\ncomic_strips = [5, 1, 8, 2, 3, 7, 2]\n\n# Calculate the mean\nmean_comic_strips = sum(comic_strips) / len(comic_strips)\nanswer = mean_comic_strips\nprint(answer)", "# List of the number of comic strips read each day\ncomic_strips = [5, 1, 8, 2, 3, 7, 2]\n\n# Calculate the mean of the numbers\nmean_comic_strips = sum(comic_strips) / len(comic_strips)\n\n# Store the result in the variable 'answer'\nanswer = mean_comic_strips\n\n# Print the answer\nprint(answer)", "comic_strips = [5, 1, 8, 2, 3, 7, 2]\nmean_comic_strips = sum(comic_strips) / len(comic_strips)\nanswer = round(mean_comic_strips, 2)  # Round to 2 decimal places for clarity\nprint(answer)", "comic_strips = [5, 1, 8, 2, 3, 7, 2]\nmean_comic_strips = sum(comic_strips) / len(comic_strips)\nanswer = round(mean_comic_strips, 2)  # Round to 2 decimal places for clarity\nprint(answer)"], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nblueberry pancakes | $8.62\nbuttermilk pancakes | $7.24\npoached eggs | $3.49\npoppyseed muffin | $1.08", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nblueberry pancakes | $8.62\nbuttermilk pancakes | $7.24\npoached eggs | $3.49\npoppyseed muffin | $1.08\n\nHow much money does Nina need to buy 2 orders of buttermilk pancakes?", "answer": "14.48", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_order_buttermilk_pancakes = 7.24 \norders_needed = 2 \ntotal_cost = price_per_order_buttermilk_pancakes * orders_needed\nanswer = total_cost\nprint(answer)", "price_per_order_buttermilk_pancakes = 7.24 \norders_needed = 2 \ntotal_cost = price_per_order_buttermilk_pancakes * orders_needed\nanswer = total_cost\nprint(answer)", "# Define the price per order of buttermilk pancakes and the number of orders needed\nprice_per_order_buttermilk_pancakes = 7.24  \norders_needed = 2  \n\n# Calculate the total cost\ntotal_cost = price_per_order_buttermilk_pancakes * orders_needed  \n\n# Store the result in the variable 'answer'\nanswer = total_cost  \n\n# Output the answer\nprint(answer)", "# Define the price per order of buttermilk pancakes and the number of orders needed\nprice_per_order_buttermilk_pancakes = 7.24  \norders_needed = 2  \n\n# Calculate the total cost for the orders\ntotal_cost = price_per_order_buttermilk_pancakes * orders_needed  \n\n# Store the result in the variable 'answer'\nanswer = total_cost  \n\n# Print the answer\nprint(answer)"], "prediction": [14.48, 14.48, 14.48, 14.48], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nticket for a South American cruise | $251.00\nticket for an Australian cruise | $257.00\nticket for a Caribbean cruise | $988.00\nticket for an Alaskan cruise | $627.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nticket for a South American cruise | $251.00\nticket for an Australian cruise | $257.00\nticket for a Caribbean cruise | $988.00\nticket for an Alaskan cruise | $627.00\n\nHow much money does Gabby need to buy 5 tickets for a Caribbean cruise?", "answer": "4,940", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_ticket_caribbean = 988.00 \nnumber_of_tickets = 5 \n# Calculate total cost for 5 tickets\ntotal_cost = price_per_ticket_caribbean * number_of_tickets\nanswer = total_cost\nprint(answer)", "price_per_ticket_caribbean = 988.00 \nnumber_of_tickets = 5 \ntotal_cost = price_per_ticket_caribbean * number_of_tickets\nanswer = \"${:,.2f}\".format(total_cost)  # Format as currency\nprint(answer)", "# Define the price per ticket for the Caribbean cruise and the number of tickets Gabby wants to buy\nprice_per_ticket_caribbean = 988.00\nnumber_of_tickets = 5\n\n# Calculate the total cost\ntotal_cost = price_per_ticket_caribbean * number_of_tickets\n\n# Store the total cost in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "# Define the price per ticket for a Caribbean cruise and the number of tickets\nprice_per_ticket_caribbean = 988.00\nnumber_of_tickets = 5\n\n# Calculate the total cost\ntotal_cost = price_per_ticket_caribbean * number_of_tickets\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)"], "prediction": [4940.0, "$4,940.00", 4940.0, 4940.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Red beard | Grey beard\nOnly in the beard competition | 5 | 3\nAlso in the mustache competition | 5 | 2", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Red beard | Grey beard\nOnly in the beard competition | 5 | 3\nAlso in the mustache competition | 5 | 2\n\nJennifer was the lucky journalist assigned to cover the Best Beard Competition. She recorded the contestants' beard colors in her notepad. Jennifer also noted if the contestants were signed up for the mustache competition later in the day. What is the probability that a randomly selected contestant is also in the mustache competition and has a red beard? Simplify any fractions.", "answer": "1/3", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Contestants with red beards\nonly_red_beard = 5  # Only in the beard competition\nred_beard_mustache = 5  # Also in the mustache competition\n\n# Total contestants with red beards\ntotal_red_beard = only_red_beard + red_beard_mustache\n\n# Total contestants\ntotal_grey_beard = 3 + 2  # Grey beard\ntotal_contestants = total_red_beard + total_grey_beard\n\n# Probability that a randomly selected contestant is in the mustache competition and has a red beard\nprobability_red_mustache = red_beard_mustache / total_contestants\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(red_beard_mustache, total_contestants).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Define the number of contestants based on the provided data\nonly_red_beard = 5  # Only in the beard competition\nred_beard_mustache = 5  # Also in the mustache competition\ntotal_red_beard = only_red_beard + red_beard_mustache\ntotal_grey_beard = 3 + 2  # Grey beard\ntotal_contestants = total_red_beard + total_grey_beard\n\n# Calculate the probability that a randomly selected contestant is also in the mustache competition and has a red beard\nprobability_red_mustache = red_beard_mustache / total_contestants\n\n# Simplify the probability using the Fraction class\nfrom fractions import Fraction\nsimplified_probability = Fraction(red_beard_mustache, total_contestants).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = simplified_probability\nprint(answer)", "only_red_beard = 5  # Only in the beard competition\nred_beard_mustache = 5  # Also in the mustache competition\ntotal_red_beard = only_red_beard + red_beard_mustache\ntotal_grey_beard = 3 + 2  # Grey beard\ntotal_contestants = total_red_beard + total_grey_beard\n\n# Calculate the probability that a randomly selected contestant is also in the mustache competition and has a red beard\nprobability_red_mustache = red_beard_mustache / total_contestants\n\n# Simplify the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(red_beard_mustache, total_contestants).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = simplified_probability\nprint(answer)", "# Define the counts of contestants based on beard color and competition participation\nonly_red_beard = 5  # Only in the beard competition\nred_beard_mustache = 5  # Also in the mustache competition\ntotal_red_beard = only_red_beard + red_beard_mustache\ntotal_grey_beard = 3 + 2  # Total grey beard participants\ntotal_contestants = total_red_beard + total_grey_beard\n\n# Calculate the probability that a randomly selected contestant is also in the mustache competition and has a red beard\nprobability_red_mustache = red_beard_mustache / total_contestants\n\n# Simplify the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(red_beard_mustache, total_contestants).limit_denominator()\n\n# Store the simplified probability as the answer\nanswer = simplified_probability\nprint(answer)"
], "prediction": [0.33333, 0.33333, 0.33333, 0.33333], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Hotel shuttle bus schedule\" and then answer a question.\n\npark | 8:00 A.M. | 8:15 A.M. | 8:45 A.M. | 9:15 A.M. | 9:30 A.M.\nhotel | 8:30 A.M. | 8:45 A.M. | 9:15 A.M. | 9:45 A.M. | 10:00 A.M.\nbaseball stadium | 9:15 A.M. | 9:30 A.M. | 10:00 A.M. | 10:30 A.M. | 10:45 A.M.\ndowntown | 10:00 A.M. | 10:15 A.M. | 10:45 A.M. | 11:15 A.M. | 11:30 A.M.\nairport | 10:45 A.M. | 11:00 A.M. | 11:30 A.M. | 12:00 P.M. | 12:15 P.M.\nfootball stadium | 11:45 A.M. | 12:00 P.M. | 12:30 P.M. | 1:00 P.M. | 1:15 P.M.\nart museum | 12:45 P.M. | 1:00 P.M. | 1:30 P.M. | 2:00 P.M. | 2:15 P.M.\nsoftball field | 1:45 P.M. | 2:00 P.M. | 2:30 P.M. | 3:00 P.M. | 3:15 P.M.", "question": "Read the following table regarding \"Hotel shuttle bus schedule\" and then write Python code to answer a question.\n\npark | 8:00 A.M. | 8:15 A.M. | 8:45 A.M. | 9:15 A.M. | 9:30 A.M.\nhotel | 8:30 A.M. | 8:45 A.M. | 9:15 A.M. | 9:45 A.M. | 10:00 A.M.\nbaseball stadium | 9:15 A.M. | 9:30 A.M. | 10:00 A.M. | 10:30 A.M. | 10:45 A.M.\ndowntown | 10:00 A.M. | 10:15 A.M. | 10:45 A.M. | 11:15 A.M. | 11:30 A.M.\nairport | 10:45 A.M. | 11:00 A.M. | 11:30 A.M. | 12:00 P.M. | 12:15 P.M.\nfootball stadium | 11:45 A.M. | 12:00 P.M. | 12:30 P.M. | 1:00 P.M. | 1:15 P.M.\nart museum | 12:45 P.M. | 1:00 P.M. | 1:30 P.M. | 2:00 P.M. | 2:15 P.M.\nsoftball field | 1:45 P.M. | 2:00 P.M. | 2:30 P.M. | 3:00 P.M. | 3:15 P.M.\n\nLook at the following schedule. Jake got on the bus at the hotel at 8.45 A.M. What time will he get to the baseball stadium? Choose from the the options: ['9:15 A.M.', '1:00 P.M.', '11:00 A.M.', '9:30 A.M.']", "answer": "9:30 A.M.", "ques_type": "multi_choice", "choices": ["9:15 A.M.", "1:00 P.M.", "11:00 A.M.", "9:30 A.M."], "code": [
  "# Python code, return answer \n# Jake gets on the bus at 8:45 A.M. at the hotel. \n# The next bus to the baseball stadium leaves from the hotel at 9:15 A.M.\n\n# The bus schedule shows:\n# From hotel to baseball stadium:\n# - 9:15 A.M. -> 9:30 A.M.\n\n# Therefore, if he gets on the bus at 9:15 A.M., he will arrive at 9:30 A.M.\nanswer = '9:30 A.M.'\nprint(answer)", "# Define the bus schedule as a dictionary\nbus_schedule = {\n    'hotel': ['8:30 A.M.', '8:45 A.M.', '9:15 A.M.', '9:45 A.M.', '10:00 A.M.'],\n    'baseball stadium': ['9:15 A.M.', '9:30 A.M.', '10:00 A.M.', '10:30 A.M.', '10:45 A.M.']\n}\n\n# Jake gets on the bus at the hotel at 8:45 A.M.\njake_departure_time = '8:45 A.M.'\n\n# Find the next bus departure time from the hotel after Jake's departure time\nnext_bus_time = ''\nfor time in bus_schedule['hotel']:\n    if time == jake_departure_time:\n        next_bus_time = bus_schedule['hotel'][bus_schedule['hotel'].index(time) + 1]\n        break\n\n# The next stop is the baseball stadium, check the schedule for that time\narrival_time = bus_schedule['baseball stadium'][0]  # The first arrival time after the hotel stop\n\nanswer = arrival_time\nprint(answer)", "# Define the bus schedule\nbus_schedule = {\n    'hotel': ['8:30 A.M.', '8:45 A.M.', '9:15 A.M.', '9:45 A.M.', '10:00 A.M.'],\n    'baseball stadium': ['9:15 A.M.', '9:30 A.M.', '10:00 A.M.', '10:30 A.M.', '10:45 A.M.']\n}\n\n# Jake's departure time from the hotel\njake_departure_time = '8:45 A.M.'\n\n# Find the index of Jake's departure time\ndeparture_index = bus_schedule['hotel'].index(jake_departure_time)\n\n# The next bus time from the hotel after Jake's departure\nnext_bus_time = bus_schedule['hotel'][departure_index + 1]\n\n# Determine the corresponding arrival time at the baseball stadium\n# Assuming the first bus from the hotel that leaves after Jake's departure will get to the baseball stadium\narrival_time_index = departure_index + 1  # The next bus corresponds to the next arrival time\narrival_time = bus_schedule['baseball stadium'][arrival_time_index]\n\nanswer = arrival_time\nprint(answer)", "# Define the bus schedule as a dictionary\nbus_schedule = {\n    'hotel': ['8:30 A.M.', '8:45 A.M.', '9:15 A.M.', '9:45 A.M.', '10:00 A.M.'],\n    'baseball stadium': ['9:15 A.M.', '9:30 A.M.', '10:00 A.M.', '10:30 A.M.', '10:45 A.M.']\n}\n\n# Jake's departure time from the hotel\njake_departure_time = '8:45 A.M.'\n\n# Find the index of Jake's departure time in the hotel schedule\ndeparture_index = bus_schedule['hotel'].index(jake_departure_time)\n\n# The next bus from the hotel after Jake's departure is at 9:15 A.M.\nnext_bus_time = bus_schedule['hotel'][departure_index + 1]  # This will be 9:15 A.M.\n\n# The arrival time at the baseball stadium corresponds to the same index\narrival_time_index = 0  # The index for the baseball stadium arrival time for the 9:15 A.M. bus\narrival_time = bus_schedule['baseball stadium'][arrival_time_index]\n\nanswer = arrival_time\nprint(answer)"
], "prediction": ["9:30 A.M.", "9:15 A.M.", "10:00 A.M.", "9:15 A.M."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Toys per bin\" and then answer a question.\n\nStem | Leaf \n2 | 2\n3 | 0, 1, 7\n4 | 0, 3, 4, 4, 5, 6, 9\n5 | \n6 | 0, 7\n7 | 0, 1, 2, 2, 4, 7\n8 | 0, 0, 6, 8, 8", "question": "Read the following table regarding \"Toys per bin\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 2\n3 | 0, 1, 7\n4 | 0, 3, 4, 4, 5, 6, 9\n5 | \n6 | 0, 7\n7 | 0, 1, 2, 2, 4, 7\n8 | 0, 0, 6, 8, 8\n\nA toy store employee counted the number of toys in each bin in the sale section. What is the largest number of toys?", "answer": "88", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number of toys corresponds to the largest value in the stem-and-leaf display.\nlargest_number_of_toys = 88  # From the stem \"8 | 0, 0, 6, 8, 8\", the highest value is 88.\nanswer = largest_number_of_toys\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [2]), (3, [0, 1, 7]), (4, [0, 3, 4, 4, 5, 6, 9]), (5, []), (6, [0, 7]), (7, [0, 1, 2, 2, 4, 7]), (8, [0, 0, 6, 8, 8])]  \n  \n# Initialize variable to track the largest number of toys  \nlargest_number_of_toys = 0  \n  \n# Iterate through the stem and leaf data structure to find the largest number of toys  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        toys_per_bin = stem * 10 + leaf  \n        if toys_per_bin > largest_number_of_toys:  \n            largest_number_of_toys = toys_per_bin  \n  \nanswer = largest_number_of_toys  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [2]), (3, [0, 1, 7]), (4, [0, 3, 4, 4, 5, 6, 9]), (5, []), (6, [0, 7]), (7, [0, 1, 2, 2, 4, 7]), (8, [0, 0, 6, 8, 8])]  \n\n# Initialize variable to track the largest number of toys  \nlargest_number_of_toys = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number of toys  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        toys_per_bin = stem * 10 + leaf  \n        if toys_per_bin > largest_number_of_toys:  \n            largest_number_of_toys = toys_per_bin  \n\n# Store the result as an integer  \nanswer = largest_number_of_toys  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [2]), (3, [0, 1, 7]), (4, [0, 3, 4, 4, 5, 6, 9]), (5, []), (6, [0, 7]), (7, [0, 1, 2, 2, 4, 7]), (8, [0, 0, 6, 8, 8])]  \n\n# Initialize variable for the largest number of toys  \nlargest_number_of_toys = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number of toys  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        toys_per_bin = stem * 10 + leaf  \n        if toys_per_bin > largest_number_of_toys:  \n            largest_number_of_toys = toys_per_bin  \n\n# Assign the answer  \nanswer = largest_number_of_toys if largest_number_of_toys > 0 else \"No toys found\"  \nprint(answer)"
], "prediction": [88.0, 88.0, 88.0, 88.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Sticker collections\" and then answer a question.\n\nName | Number of stickers\nDiego | 74\nTammy | 66\nNellie | 72\nWanda | 71\nZane | 69\nJared | 71\nAlexa | 69\nVicky | 68", "question": "Read the following table regarding \"Sticker collections\" and then write Python code to answer a question.\n\nName | Number of stickers\nDiego | 74\nTammy | 66\nNellie | 72\nWanda | 71\nZane | 69\nJared | 71\nAlexa | 69\nVicky | 68\n\nSome friends compared the sizes of their sticker collections. What is the mean of the numbers?", "answer": "70", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nstickers = [74, 66, 72, 71, 69, 71, 69, 68]\n# Calculate the mean\nmean_stickers = sum(stickers) / len(stickers)\nanswer = mean_stickers\nprint(answer)", "stickers = [74, 66, 72, 71, 69, 71, 69, 68]\nmean_stickers = sum(stickers) / len(stickers)\nanswer = round(mean_stickers)  # Round the mean to the nearest integer\nprint(answer)", "stickers = [74, 66, 72, 71, 69, 71, 69, 68]\nmean_stickers = sum(stickers) / len(stickers)\nanswer = int(round(mean_stickers))  # Convert the rounded mean to an integer\nprint(answer)", "stickers = [74, 66, 72, 71, 69, 71, 69, 68]\nmean_stickers = sum(stickers) / len(stickers)\nanswer = round(mean_stickers)  # Round the mean to the nearest integer\nprint(answer)"], "prediction": [70.0, 70.0, 70.0, 70.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$275 | 19,400 | 6,800\n$395 | 16,400 | 9,400\n$515 | 13,400 | 12,000\n$635 | 10,400 | 14,600\n$755 | 7,400 | 17,200", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$275 | 19,400 | 6,800\n$395 | 16,400 | 9,400\n$515 | 13,400 | 12,000\n$635 | 10,400 | 14,600\n$755 | 7,400 | 17,200\n\nLook at the table. Then answer the question. At a price of $635, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "surplus", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": [
  "# Python code, return answer \n# Given values at a price of $635\nquantity_demanded = 10400\nquantity_supplied = 14600\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the quantities at the price of $635\nquantity_demanded = 10400\nquantity_supplied = 14600\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'  # More supply than demand\nelse:\n    answer = 'shortage'  # More demand than supply\n\nprint(answer)  # Output the result", "# Define the quantities based on the provided table for the price of $635\nquantity_demanded = 10400  # Quantity demanded at $635\nquantity_supplied = 14600   # Quantity supplied at $635\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'  # More supply than demand\nelse:\n    answer = 'shortage'  # More demand than supply\n\nprint(answer)  # Output the result", "# Define the quantities demanded and supplied at the price of $635\nquantity_demanded = 10400  # Quantity demanded at $635\nquantity_supplied = 14600   # Quantity supplied at $635\n\n# Determine if there is a surplus or shortage\nanswer = 'surplus' if quantity_demanded < quantity_supplied else 'shortage'\n\nprint(answer)  # Output the result"
], "prediction": ["surplus", "surplus", "surplus", "surplus"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Toy cars\" and then answer a question.\n\nNumber of toy cars | Frequency\n0 | 15\n1 | 5\n2 | 17\n3 | 6\n4 | 19\n5 | 2\n6 | 18", "question": "Read the following table regarding \"Toy cars\" and then write Python code to answer a question.\n\nNumber of toy cars | Frequency\n0 | 15\n1 | 5\n2 | 17\n3 | 6\n4 | 19\n5 | 2\n6 | 18\n\nIn order to complete their model of a futuristic highway, students in Ms. Frank's design class find out how many toy cars each student can bring to class. How many students have more than 1 toy car?", "answer": "62", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Frequency of students with more than 1 toy car\nfrequency = {\n    0: 15,\n    1: 5,\n    2: 17,\n    3: 6,\n    4: 19,\n    5: 2,\n    6: 18\n}\n\n# Calculate students with more than 1 toy car\nstudents_with_more_than_one = sum(frequency[cars] for cars in frequency if cars > 1)\nanswer = students_with_more_than_one\nprint(answer)", "# Define the frequency of toy cars as a dictionary\nfrequency = {\n    0: 15,\n    1: 5,\n    2: 17,\n    3: 6,\n    4: 19,\n    5: 2,\n    6: 18\n}\n\n# Calculate the number of students with more than 1 toy car\nstudents_with_more_than_one = sum(frequency[cars] for cars in frequency if cars > 1)\n\n# Store the result in the answer variable\nanswer = students_with_more_than_one\nprint(answer)", "frequency = {\n    0: 15,\n    1: 5,\n    2: 17,\n    3: 6,\n    4: 19,\n    5: 2,\n    6: 18\n}\n\n# Calculate the number of students who have more than 1 toy car\nstudents_with_more_than_one = sum(frequency[cars] for cars in frequency if cars > 1)\nanswer = students_with_more_than_one\nprint(answer)", "# Define the frequency of toy cars\nfrequency = {\n    0: 15,\n    1: 5,\n    2: 17,\n    3: 6,\n    4: 19,\n    5: 2,\n    6: 18\n}\n\n# Calculate the total number of students with more than 1 toy car\nstudents_with_more_than_one = sum(frequency[cars] for cars in frequency if cars > 1)\n\nanswer = students_with_more_than_one\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'frequency' is not defined\")", "NameError(\"name 'frequency' is not defined\")", "NameError(\"name 'frequency' is not defined\")", "NameError(\"name 'frequency' is not defined\")"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n4 | 2\n5 | 11\n6 | 20", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n4 | 2\n5 | 11\n6 | 20\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "linear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear or nonlinear, we can check the differences in y-values for equal increments of x.\n# Calculate the differences in y-values\ny_diff_1 = 11 - 2  # From x=4 to x=5\ny_diff_2 = 20 - 11  # From x=5 to x=6\n\n# If the differences in y-values are not constant, the function is nonlinear\nif y_diff_1 != y_diff_2:\n    answer = 'nonlinear'\nelse:\n    answer = 'linear'\n\nprint(answer)", "# Define the x and y values from the table\nx_values = [4, 5, 6]\ny_values = [2, 11, 20]\n\n# Calculate the differences in y and x\ny_diff_1 = y_values[1] - y_values[0]  # From x=4 to x=5\ny_diff_2 = y_values[2] - y_values[1]  # From x=5 to x=6\nx_diff_1 = x_values[1] - x_values[0]  # From x=4 to x=5\nx_diff_2 = x_values[2] - x_values[1]  # From x=5 to x=6\n\n# Check if the slopes (change in y over change in x) are the same\nslope_1 = y_diff_1 / x_diff_1\nslope_2 = y_diff_2 / x_diff_2\n\nif slope_1 != slope_2:\n    answer = 'nonlinear'\nelse:\n    answer = 'linear'\n\nprint(answer)", "# Define the x and y values\nx_values = [4, 5, 6]\ny_values = [2, 11, 20]\n\n# Calculate the differences between consecutive y-values and x-values\ny_diff_1 = y_values[1] - y_values[0]  # From x=4 to x=5\ny_diff_2 = y_values[2] - y_values[1]  # From x=5 to x=6\n\n# Calculate the slopes\nslope_1 = y_diff_1  # Since x_diff_1 is 1\nslope_2 = y_diff_2  # Since x_diff_2 is 1\n\n# Check if the slopes are equal\nif slope_1 != slope_2:\n    answer = 'nonlinear'\nelse:\n    answer = 'linear'\n\nprint(answer)", "x_values = [4, 5, 6]\ny_values = [2, 11, 20]\n\n# Calculate the slopes between the points\nslope_1 = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])  # From (4, 2) to (5, 11)\nslope_2 = (y_values[2] - y_values[1]) / (x_values[2] - x_values[1])  # From (5, 11) to (6, 20)\n\n# Check if the slopes are equal\nif slope_1 != slope_2:\n    answer = 'nonlinear'\nelse:\n    answer = 'linear'\n\nprint(answer)"
], "prediction": ["linear", "linear", "linear", "linear"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbulldozer | $7,552.00\ncrane | $8,867.00\nrace car | $8,769.00\nhydrofoil | $8,345.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbulldozer | $7,552.00\ncrane | $8,867.00\nrace car | $8,769.00\nhydrofoil | $8,345.00\n\nHow much more does a crane cost than a hydrofoil?", "answer": "522", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_crane = 8867.00 \ncost_hydrofoil = 8345.00 \n# Calculate the difference in cost\ndifference_cost = cost_crane - cost_hydrofoil\nanswer = difference_cost\nprint(answer)", "cost_crane = 8867.00 \ncost_hydrofoil = 8345.00 \ndifference_cost = cost_crane - cost_hydrofoil\nanswer = f\"${difference_cost:,.2f}\"  # Format as currency\nprint(answer)", "cost_crane = 8867.00 \ncost_hydrofoil = 8345.00 \ndifference_cost = cost_crane - cost_hydrofoil\nanswer = f\"${difference_cost:,.2f}\"  # Format as currency\nprint(answer)  # This will display the output", "cost_crane = 8867.00 \ncost_hydrofoil = 8345.00 \ndifference_cost = cost_crane - cost_hydrofoil\nanswer = f\"${difference_cost:,.2f}\"  # Format as currency"], "prediction": [522.0, "$522.00", "$522.00", "$522.00"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | 50 photos | 100 photos\nHorizontally | 2 | 4\nVertically | 4 | 3", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | 50 photos | 100 photos\nHorizontally | 2 | 4\nVertically | 4 | 3\n\nJeanette just returned from a spring break volunteer trip. She is shopping for a photo album that will showcase her photos from the trip. The albums range in photo capacity and orientation. What is the probability that a randomly selected photo album is oriented vertically and holds exactly 100 photos? Simplify any fractions.", "answer": "3/13", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total number of albums based on the table\ntotal_albums = (2 + 4) + (4 + 3)  # Horizontally and Vertically for both capacities\n# Number of albums oriented vertically that hold exactly 100 photos\nvertically_100_photos = 3\n# Calculate the probability\nprobability = vertically_100_photos / total_albums\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(vertically_100_photos, total_albums).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Define the number of photo albums based on orientation and capacity\nhorizontally_50_photos = 2\nhorizontally_100_photos = 4\nvertically_50_photos = 4\nvertically_100_photos = 3\n\n# Calculate the total number of albums\ntotal_albums = (horizontally_50_photos + horizontally_100_photos) + (vertically_50_photos + vertically_100_photos)\n\n# The number of albums that are oriented vertically and hold exactly 100 photos\nvertically_100_photos_count = vertically_100_photos\n\n# Calculate the probability\nprobability = vertically_100_photos_count / total_albums\n\n# Simplify the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(vertically_100_photos_count, total_albums).limit_denominator()\n\n# Store the result\nanswer = simplified_probability\nprint(answer)", "# Define the number of photo albums based on orientation and capacity\nhorizontally_50_photos = 2\nhorizontally_100_photos = 4\nvertically_50_photos = 4\nvertically_100_photos = 3\n\n# Calculate the total number of albums\ntotal_albums = (horizontally_50_photos + horizontally_100_photos) + (vertically_50_photos + vertically_100_photos)\n\n# Count the number of vertically oriented albums that hold exactly 100 photos\nvertically_100_photos_count = vertically_100_photos\n\n# Calculate the probability\nprobability = vertically_100_photos_count / total_albums\n\n# Simplify the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(vertically_100_photos_count, total_albums).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = simplified_probability\n\n# Output the answer\nprint(answer)", "# Define the number of photo albums based on orientation and capacity\nhorizontally_50_photos = 2\nhorizontally_100_photos = 4\nvertically_50_photos = 4\nvertically_100_photos = 3\n\n# Calculate total number of albums\ntotal_albums = (horizontally_50_photos + horizontally_100_photos) + (vertically_50_photos + vertically_100_photos)\n\n# Count of vertically oriented albums that hold exactly 100 photos\nvertically_100_photos_count = vertically_100_photos\n\n# Calculate the probability as a fraction\nfrom fractions import Fraction\nprobability = Fraction(vertically_100_photos_count, total_albums).limit_denominator()\n\n# Store the result in the answer variable\nanswer = probability\nprint(answer)"
], "prediction": [0.23077, 0.23077, 0.23077, 0.23077], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nGem color | Change in points\nGreen | 25\nRed | -40", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nGem color | Change in points\nGreen | 25\nRed | -40\n\nZach just downloaded the new game Gem Excavator on his phone. In the first level, Zach gains points for each green gem he finds. However, he loses points for each red gem he finds. The table shows how the gems affect Zach's points. Which color gem affects Zach's points less? Choose from the the options: ['green', 'red']", "answer": "green", "ques_type": "multi_choice", "choices": ["green", "red"], "code": ["# Python code, return answer \nchange_green = 25\nchange_red = -40\n# Compare the absolute changes in points\nif abs(change_green) < abs(change_red):\n    answer = 'green'\nelse:\n    answer = 'red'\nprint(answer)", "change_green = 25\nchange_red = -40\n\n# Compare the actual changes in points to determine which affects Zach's points less\nif change_green < abs(change_red):\n    answer = 'green'\nelse:\n    answer = 'red'\n\nprint(answer)", "change_green = 25\nchange_red = -40\n\n# Compare the actual changes in points\nif change_green < abs(change_red):\n    answer = 'green'\nelse:\n    answer = 'red'\n\n# Since red negatively affects points, it should be considered worse\nif change_red < change_green:\n    answer = 'red'\nelse:\n    answer = 'green'\n\nprint(answer)", "# Define the change in points for each gem color\nchange_green = 25\nchange_red = -40\n\n# Compare the absolute values of the changes in points\nif abs(change_green) < abs(change_red):\n    answer = 'green'\nelse:\n    answer = 'red'\n\nprint(answer)"], "prediction": ["green", "green", "red", "green"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nMonth | Change in water level (in.)\nApril | -6\nMay | 4", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nMonth | Change in water level (in.)\nApril | -6\nMay | 4\n\nThe houses in Myra's town get their water from a local reservoir. Myra and a group of engineers monitor the water level for safety and health reasons. The change in water level over two months is shown in the table. During which month did the water level change more? Choose from the the options: ['April', 'May']", "answer": "April", "ques_type": "multi_choice", "choices": ["April", "May"], "code": ["# Python code, return answer \nchange_april = abs(-6)  # Water level decreased by 6 inches\nchange_may = abs(4)     # Water level increased by 4 inches\n\n# Determine which month had a greater change in water level\nif change_april > change_may:\n    answer = 'April'\nelse:\n    answer = 'May'\nprint(answer)", "# Define the change in water level for each month\nchange_april = -6  # Water level decreased by 6 inches\nchange_may = 4     # Water level increased by 4 inches\n\n# Calculate the absolute changes\nabs_change_april = abs(change_april)\nabs_change_may = abs(change_may)\n\n# Determine which month had a greater absolute change\nif abs_change_april > abs_change_may:\n    answer = 'April'\nelse:\n    answer = 'May'\n\nprint(answer)", "change_april = -6  # Water level decreased by 6 inches\nchange_may = 4     # Water level increased by 4 inches\n\nif change_may > abs(change_april):\n    answer = 'May'\nelse:\n    answer = 'April'\n\nprint(answer)", "change_april = -6  # Water level decreased by 6 inches\nchange_may = 4     # Water level increased by 4 inches\n\n# Compare the changes directly\nif abs(change_may) > abs(change_april):\n    answer = 'May'\nelse:\n    answer = 'April'\n\nprint(answer)"], "prediction": ["April", "April", "April", "April"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n13 | 1\n14 | 10\n15 | 19", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n13 | 1\n14 | 10\n15 | 19\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "linear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for equal differences in x-values.\ny_values = [1, 10, 19]\nx_values = [13, 14, 15]\n\n# Calculate the differences\ndifference_x = [x_values[i+1] - x_values[i] for i in range(len(x_values)-1)]\ndifference_y = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if the ratio of change is constant\nis_linear = all(difference_y[i] / difference_x[i] == difference_y[0] / difference_x[0] for i in range(1, len(difference_y)))\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define x and y values based on the provided table\ny_values = [1, 10, 19]\nx_values = [13, 14, 15]\n\n# Calculate the differences in x and y values\ndifference_x = [x_values[i+1] - x_values[i] for i in range(len(x_values)-1)]\ndifference_y = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if the function is linear\nis_linear = all(difference_y[i] / difference_x[i] == difference_y[0] / difference_x[0] for i in range(1, len(difference_y)))\n\n# Determine the answer based on the linearity check\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values\nx_values = [13, 14, 15]\ny_values = [1, 10, 19]\n\n# Calculate the differences\ndifference_x = [x_values[i+1] - x_values[i] for i in range(len(x_values)-1)]\ndifference_y = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if the ratio of differences is constant\nis_linear = all(difference_y[i] / difference_x[i] == difference_y[0] / difference_x[0] for i in range(1, len(difference_y)))\n\n# Assign the answer based on whether the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values from the table\nx_values = [13, 14, 15]\ny_values = [1, 10, 19]\n\n# Calculate the differences\ndifference_x = [x_values[i+1] - x_values[i] for i in range(len(x_values)-1)]\ndifference_y = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Calculate the slopes\nslopes = [difference_y[i] / difference_x[i] for i in range(len(difference_x))]\n\n# Check if all slopes are the same\nis_linear = all(slope == slopes[0] for slope in slopes)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'difference_y' is not defined\")", "NameError(\"name 'difference_y' is not defined\")", "NameError(\"name 'difference_y' is not defined\")", "NameError(\"name 'slopes' is not defined\")"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ncatfish | $3 per kg\nhalibut | $4 per kg\ntuna | $3 per kg\ntilapia | $2 per kg\nsalmon | $3 per kg", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ncatfish | $3 per kg\nhalibut | $4 per kg\ntuna | $3 per kg\ntilapia | $2 per kg\nsalmon | $3 per kg\n\nHow much would it cost to buy 1 kilogram of tuna and 2 kilograms of catfish?", "answer": "9", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \nprice_per_kg_tuna = 3 \nprice_per_kg_catfish = 3 \nkilograms_tuna = 1 \nkilograms_catfish = 2 \n# Calculate total cost\ntotal_cost = (price_per_kg_tuna * kilograms_tuna) + (price_per_kg_catfish * kilograms_catfish)\nanswer = total_cost\nprint(answer)", "# Define the prices per kilogram for each type of fish\nprice_per_kg_tuna = 3  # price for tuna\nprice_per_kg_catfish = 3  # price for catfish\n\n# Define the quantities to purchase\nkilograms_tuna = 1  # quantity of tuna\nkilograms_catfish = 2  # quantity of catfish\n\n# Calculate the total cost\ntotal_cost = (price_per_kg_tuna * kilograms_tuna) + (price_per_kg_catfish * kilograms_catfish)\nanswer = total_cost\n\nprint(answer)", "# Correct prices per kg for each fish\nprice_per_kg_tuna = 3  # price for tuna\nprice_per_kg_catfish = 3  # price for catfish (corrected price)\nkilograms_tuna = 1  # quantity of tuna\nkilograms_catfish = 2  # quantity of catfish\n\n# Calculate total cost\ntotal_cost = (price_per_kg_tuna * kilograms_tuna) + (price_per_kg_catfish * kilograms_catfish)\nanswer = total_cost\nprint(answer)", "# Define the price per kilogram for each type of fish\nprice_per_kg_tuna = 3  # price for tuna\nprice_per_kg_catfish = 3  # price for catfish\nkilograms_tuna = 1  # quantity of tuna\nkilograms_catfish = 2  # quantity of catfish\n\n# Calculate the total cost for the specified quantities\ntotal_cost = (price_per_kg_tuna * kilograms_tuna) + (price_per_kg_catfish * kilograms_catfish)\nanswer = total_cost\n\nprint(answer)"
], "prediction": [9.0, 9.0, 9.0, 9.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$380 | 20,700 | 1,900\n$540 | 16,600 | 6,500\n$700 | 12,500 | 11,100\n$860 | 8,400 | 15,700\n$1,020 | 4,300 | 20,300", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$380 | 20,700 | 1,900\n$540 | 16,600 | 6,500\n$700 | 12,500 | 11,100\n$860 | 8,400 | 15,700\n$1,020 | 4,300 | 20,300\n\nLook at the table. Then answer the question. At a price of $1,020, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "surplus", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": ["# Python code, return answer \nquantity_demanded = 4300  # at $1,020\nquantity_supplied = 20300  # at $1,020\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the quantities at the price of $1,020\nquantity_demanded = 4300  # Quantity demanded at $1,020\nquantity_supplied = 20300  # Quantity supplied at $1,020\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the quantity demanded and supplied at a price of $1,020\nquantity_demanded = 4300  # Quantity demanded at $1,020\nquantity_supplied = 20300  # Quantity supplied at $1,020\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the quantity demanded and supplied at a price of $1,020\nquantity_demanded = 4300  # Quantity demanded at $1,020\nquantity_supplied = 20300  # Quantity supplied at $1,020\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\n# Output the answer\nprint(answer)"], "prediction": ["surplus", "surplus", "surplus", "surplus"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ngreen station wagon | $9,657.00\nred sports car | $8,528.00\nred two-door coupe | $6,130.00\nblack convertible | $5,471.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ngreen station wagon | $9,657.00\nred sports car | $8,528.00\nred two-door coupe | $6,130.00\nblack convertible | $5,471.00\n\nLamar has $26,720.00. How much money will Lamar have left if he buys a green station wagon and a red sports car?", "answer": "8,535", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices of the cars\nprice_green_station_wagon = 9657.00\nprice_red_sports_car = 8528.00\n# Total amount Lamar has\nlamar_total = 26720.00\n# Total cost of the cars\ntotal_cost = price_green_station_wagon + price_red_sports_car\n# Money left after purchasing the cars\nmoney_left = lamar_total - total_cost\nanswer = money_left\nprint(answer)", "# Define the prices of the vehicles\nprice_green_station_wagon = 9657.00\nprice_red_sports_car = 8528.00\n\n# Define Lamar's total amount of money\nlamar_total = 26720.00\n\n# Calculate the total cost of the vehicles\ntotal_cost = price_green_station_wagon + price_red_sports_car\n\n# Calculate how much money Lamar will have left\nmoney_left = lamar_total - total_cost\n\n# Store the result in the answer variable\nanswer = money_left\n\n# Print the answer\nprint(answer)", "# Prices of the vehicles\nprice_green_station_wagon = 9657.00\nprice_red_sports_car = 8528.00\n\n# Lamar's total money\nlamar_total = 26720.00\n\n# Calculate total cost of the vehicles\ntotal_cost = price_green_station_wagon + price_red_sports_car\n\n# Calculate money left after purchases\nmoney_left = lamar_total - total_cost\n\n# Store the result in the variable 'answer'\nanswer = money_left\n\n# Print the answer\nprint(answer)", "# Define the prices of the vehicles\nprice_green_station_wagon = 9657.00\nprice_red_sports_car = 8528.00\n\n# Define Lamar's total amount of money\nlamar_total = 26720.00\n\n# Calculate the total cost of the vehicles\ntotal_cost = price_green_station_wagon + price_red_sports_car\n\n# Calculate how much money Lamar will have left\nmoney_left = lamar_total - total_cost\n\n# Store the result in the variable 'answer'\nanswer = money_left\n\n# Output the answer\nprint(answer)"
], "prediction": [8535.0, 8535.0, 8535.0, 8535.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Springdale School District sports budget\" and then answer a question.\n\nYear | Per-student budget\n2011 | $21\n2012 | $25\n2013 | $27\n2014 | $28\n2015 | $21", "question": "Read the following table regarding \"Springdale School District sports budget\" and then write Python code to answer a question.\n\nYear | Per-student budget\n2011 | $21\n2012 | $25\n2013 | $27\n2014 | $28\n2015 | $21\n\nEach year the Springdale School District publishes its annual budget, which includes information on the sports program's per-student spending. According to the table, what was the rate of change between 2012 and 2013?", "answer": "2", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Per-student budget for the years in question\nbudget_2012 = 25\nbudget_2013 = 27\n\n# Calculate the rate of change\nrate_of_change = budget_2013 - budget_2012\nanswer = rate_of_change\nprint(answer)", "budget_2012 = 25\nbudget_2013 = 27\nrate_of_change = ((budget_2013 - budget_2012) / budget_2012) * 100\nanswer = rate_of_change\nprint(answer)", "budget_2012 = 25\nbudget_2013 = 27\nrate_of_change = ((budget_2013 - budget_2012) / budget_2012) * 100\nanswer = f\"The rate of change between 2012 and 2013 is {rate_of_change:.2f}%.\"\nprint(answer)", "budget_2012 = 25\nbudget_2013 = 27\nrate_of_change = ((budget_2013 - budget_2012) / budget_2012) * 100\nanswer = rate_of_change  # Store the numeric value of the rate of change\nprint(answer)  # Output the numeric value"], "prediction": [2.0, 8.0, "The rate of change between 2012 and 2013 is 8.00%.", 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Bottles collected\" and then answer a question.\n\nName | Number of bottles\nMaddie | 33\nVicky | 33\nJuan | 35\nNorma | 36\nPatrick | 31\nKatie | 35\nBrenda | 32\nDwayne | 33", "question": "Read the following table regarding \"Bottles collected\" and then write Python code to answer a question.\n\nName | Number of bottles\nMaddie | 33\nVicky | 33\nJuan | 35\nNorma | 36\nPatrick | 31\nKatie | 35\nBrenda | 32\nDwayne | 33\n\nMaddie's class paid attention to how many bottles each student collected for their recycling project. What is the range of the numbers?", "answer": "5", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of bottles collected by each student\nbottles_collected = [33, 33, 35, 36, 31, 35, 32, 33]\n# Calculate the range\nrange_bottles = max(bottles_collected) - min(bottles_collected)\nanswer = range_bottles\nprint(answer)", "bottles_collected = [33, 33, 35, 36, 31, 35, 32, 33]\nrange_bottles = max(bottles_collected) - min(bottles_collected)\nanswer = int(range_bottles)  # Convert to integer\nprint(answer)", "bottles_collected = [33, 33, 35, 36, 31, 35, 32, 33]\nrange_bottles = max(bottles_collected) - min(bottles_collected)\nanswer = range_bottles  # No need to convert to integer since the result is already an integer\nprint(answer)", "bottles_collected = [33, 33, 35, 36, 31, 35, 32, 33]\nrange_bottles = max(bottles_collected) - min(bottles_collected)\nanswer = int(range_bottles)  # Convert the result to an integer\nprint(answer)"], "prediction": [5.0, 5.0, 5.0, 5.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Going down the slide at recess\" and then answer a question.\n\nNumber of times | Frequency\n0 | 10\n1 | 19\n2 | 1\n3 | 12\n4 | 5", "question": "Read the following table regarding \"Going down the slide at recess\" and then write Python code to answer a question.\n\nNumber of times | Frequency\n0 | 10\n1 | 19\n2 | 1\n3 | 12\n4 | 5\n\nA school interested in expanding its playground counted the number of times that students went down the slide during recess. How many students went down the slide more than 2 times?", "answer": "17", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of students going down the slide more than 2 times\nfrequency_more_than_2 = 12 + 5  # 12 for 3 times and 5 for 4 times\nanswer = frequency_more_than_2\nprint(answer)", "# Define the frequency of students going down the slide\nfrequency = {\n    0: 10,\n    1: 19,\n    2: 1,\n    3: 12,\n    4: 5\n}\n\n# Calculate the number of students who went down the slide more than 2 times\nfrequency_more_than_2 = frequency[3] + frequency[4]  # 12 for 3 times and 5 for 4 times\nanswer = frequency_more_than_2  # This will be an integer\nprint(answer)", "frequency = {\n    0: 10,\n    1: 19,\n    2: 1,\n    3: 12,\n    4: 5\n}\n\n# Count the number of students who went down the slide more than 2 times\nfrequency_more_than_2 = frequency[3] + frequency[4]  # 12 for 3 times and 5 for 4 times\nanswer = frequency_more_than_2  # This will be an integer\n\nprint(answer)", "# Define the frequency of students going down the slide\nfrequency = {\n    0: 10,\n    1: 19,\n    2: 1,\n    3: 12,\n    4: 5\n}\n\n# Calculate the number of students who went down the slide more than 2 times\nfrequency_more_than_2 = frequency[3] + frequency[4]  # 12 for 3 times and 5 for 4 times\n\n# Store the result in the variable 'answer'\nanswer = frequency_more_than_2  \n\n# Output the answer\nprint(answer)  # This should output 17"], "prediction": [17.0, 17.0, 17.0, 17.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nticket for an Atlantic cruise | $6,795.00\nticket for a Caribbean cruise | $1,581.00\nticket for a Mexican cruise | $3,769.00\nticket for a South American cruise | $6,109.00\nticket for a Mediterranean cruise | $6,138.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nticket for an Atlantic cruise | $6,795.00\nticket for a Caribbean cruise | $1,581.00\nticket for a Mexican cruise | $3,769.00\nticket for a South American cruise | $6,109.00\nticket for a Mediterranean cruise | $6,138.00\n\nOscar has $12,538.00. Does he have enough to buy a ticket for a Mediterranean cruise and a ticket for an Atlantic cruise? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# Prices of the tickets\nmediterranean_cruise_price = 6138.00\natlantic_cruise_price = 6795.00\n# Total cost for both tickets\ntotal_cost = mediterranean_cruise_price + atlantic_cruise_price\n# Oscar's budget\noscar_budget = 12538.00\n# Determine if Oscar has enough\nif oscar_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "mediterranean_cruise_price = 6138.00\natlantic_cruise_price = 6795.00\ntotal_cost = mediterranean_cruise_price + atlantic_cruise_price\noscar_budget = 12538.00\n\nif oscar_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the prices for the cruises\nmediterranean_cruise_price = 6138.00\natlantic_cruise_price = 6795.00\n\n# Calculate the total cost for both cruises\ntotal_cost = mediterranean_cruise_price + atlantic_cruise_price\n\n# Oscar's budget\noscar_budget = 12538.00\n\n# Check if Oscar has enough budget\nif oscar_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the prices of the cruise tickets\nmediterranean_cruise_price = 6138.00\natlantic_cruise_price = 6795.00\n\n# Calculate the total cost for both tickets\ntotal_cost = mediterranean_cruise_price + atlantic_cruise_price\n\n# Define Oscar's budget\noscar_budget = 12538.00\n\n# Check if Oscar has enough money to buy both tickets\nif oscar_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)"
], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nplastic bowl | $1.61\ncookie sheet | $9.86\nrolling pin | $8.65\nfunnel | $1.01\ncoffee mug | $4.25\nglass bowl | $7.96", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nplastic bowl | $1.61\ncookie sheet | $9.86\nrolling pin | $8.65\nfunnel | $1.01\ncoffee mug | $4.25\nglass bowl | $7.96\n\nHow much money does Helen need to buy 4 cookie sheets and a glass bowl?", "answer": "47.40", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_cookie_sheet = 9.86 \nprice_glass_bowl = 7.96 \n\n# Total cost calculation\ntotal_cost = (4 * price_cookie_sheet) + price_glass_bowl\nanswer = total_cost\nprint(answer)", "# Prices of the items\nprice_cookie_sheet = 9.86 \nprice_glass_bowl = 7.96 \n\n# Calculate total cost for 4 cookie sheets and 1 glass bowl\ntotal_cost = (4 * price_cookie_sheet) + price_glass_bowl\n\n# Format the answer to two decimal places\nanswer = format(total_cost, '.2f')\nprint(answer)", "price_cookie_sheet = 9.86 \nprice_glass_bowl = 7.96 \ntotal_cost = (4 * price_cookie_sheet) + price_glass_bowl\nanswer = round(total_cost, 2)\nprint(answer)", "price_cookie_sheet = 9.86 \nprice_glass_bowl = 7.96 \ntotal_cost = (4 * price_cookie_sheet) + price_glass_bowl\nanswer = \"{:.2f}\".format(total_cost)  # Format the total cost to two decimal places\nprint(answer)"], "prediction": [47.4, 47.4, 47.4, 47.4], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Cows per farm\" and then answer a question.\n\nStem | Leaf \n2 | 0, 3, 5\n3 | 2, 7\n4 | \n5 | 7, 9\n6 | 0, 1, 2\n7 | 3, 4\n8 | 0, 4, 7, 8", "question": "Read the following table regarding \"Cows per farm\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 0, 3, 5\n3 | 2, 7\n4 | \n5 | 7, 9\n6 | 0, 1, 2\n7 | 3, 4\n8 | 0, 4, 7, 8\n\nA researcher recorded the number of cows on each farm in the county. What is the largest number of cows?", "answer": "88", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number of cows corresponds to the largest value in the stem-and-leaf display.\nlargest_cows_count = 87  # From the stem \"8 | 0, 4, 7, 8\", the value is 88 cows.\nanswer = largest_cows_count\nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [(2, [0, 3, 5]), (3, [2, 7]), (4, []), (5, [7, 9]), (6, [0, 1, 2]), (7, [3, 4]), (8, [0, 4, 7, 8])]\n\n# Initialize variable to track the largest number of cows\nlargest_cows_count = 0\n\n# Iterate through the stem and leaf data structure to find the largest number of cows\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        cows_count = stem * 10 + leaf\n        if cows_count > largest_cows_count:\n            largest_cows_count = cows_count\n\nanswer = largest_cows_count\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [0, 3, 5]), (3, [2, 7]), (4, []), (5, [7, 9]), (6, [0, 1, 2]), (7, [3, 4]), (8, [0, 4, 7, 8])]  \n\n# Initialize variable to track the largest number of cows  \nlargest_cows_count = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number of cows  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        cows_count = stem * 10 + leaf  \n        if cows_count > largest_cows_count:  \n            largest_cows_count = cows_count  \n\n# Store the result as an integer  \nanswer = largest_cows_count  \nprint(answer)", "# Define the stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [0, 3, 5]), (3, [2, 7]), (4, []), (5, [7, 9]), (6, [0, 1, 2]), (7, [3, 4]), (8, [0, 4, 7, 8])]  \n\n# Initialize a variable to track the largest number of cows  \nlargest_cows_count = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number of cows  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        cows_count = stem * 10 + leaf  \n        if cows_count > largest_cows_count:  \n            largest_cows_count = cows_count  \n\n# Store the result as an integer  \nanswer = int(largest_cows_count)  \nprint(answer)"
], "prediction": [87.0, 88.0, 88.0, 88.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Pies baked\" and then answer a question.\n\nDay | Number of pies\nWednesday | 0\nThursday | 2\nFriday | 10\nSaturday | 8\nSunday | 5\nMonday | 7\nTuesday | 10", "question": "Read the following table regarding \"Pies baked\" and then write Python code to answer a question.\n\nDay | Number of pies\nWednesday | 0\nThursday | 2\nFriday | 10\nSaturday | 8\nSunday | 5\nMonday | 7\nTuesday | 10\n\nA baker wrote down how many pies she made in the past 7 days. What is the mean of the numbers?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of pies baked each day\npies_baked = [0, 2, 10, 8, 5, 7, 10]\n# Calculate the mean\nmean_pies = sum(pies_baked) / len(pies_baked)\nanswer = mean_pies\nprint(answer)", "# List of pies baked over the past 7 days  \npies_baked = [0, 2, 10, 8, 5, 7, 10]  \n\n# Calculate the mean number of pies baked  \nmean_pies = sum(pies_baked) / len(pies_baked)  \n\n# Store the result in the answer variable  \nanswer = mean_pies  \n\n# Output the answer  \nprint(answer)", "# List of pies baked each day\npies_baked = [0, 2, 10, 8, 5, 7, 10]  \n\n# Calculate the mean of the number of pies baked\nmean_pies = sum(pies_baked) / len(pies_baked)  \n\n# Store the result in the variable 'answer'\nanswer = mean_pies  \n\n# Output the answer\nprint(answer)", "pies_baked = [0, 2, 10, 8, 5, 7, 10]  \nmean_pies = sum(pies_baked) / len(pies_baked)  \nanswer = round(mean_pies)  # Rounding the mean to the nearest integer\nprint(answer)"], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Zoo ticket prices\" and then answer a question.\n\nZoo | Child | Senior\nSan Francisco | $9 | $12\nCentral Florida | $7 | $9\nAtlanta | $14 | $15", "question": "Read the following table regarding \"Zoo ticket prices\" and then write Python code to answer a question.\n\nZoo | Child | Senior\nSan Francisco | $9 | $12\nCentral Florida | $7 | $9\nAtlanta | $14 | $15\n\nDr. Barton, a zoo director, researched ticket prices at other zoos around the country. How much more does a senior ticket cost at the San Francisco Zoo than at the Central Florida Zoo?", "answer": "3", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of senior tickets at the two zoos\nprice_san_francisco = 12 \nprice_central_florida = 9 \n# Calculate the difference\ndifference = price_san_francisco - price_central_florida\nanswer = difference\nprint(answer)", "# Define the prices for senior tickets at both zoos\nprice_san_francisco = 12\nprice_central_florida = 9\n\n# Calculate the difference in ticket prices\ndifference = price_san_francisco - price_central_florida\n\n# Format the output as a currency value\nanswer = f\"${difference:.2f}\"\n\nprint(answer)", "# Prices of senior tickets at each zoo\nprice_san_francisco = 12\nprice_central_florida = 9\n\n# Calculate the difference in price\ndifference = price_san_francisco - price_central_florida\n\n# Store the result in the variable 'answer'\nanswer = f\"${difference:.2f}\"\n\n# Output the answer\nprint(answer)", "price_san_francisco = 12\nprice_central_florida = 9\ndifference = price_san_francisco - price_central_florida\nanswer = difference  # Store the numeric difference\nprint(f\"${answer:.2f}\")  # Format and print the answer"], "prediction": [3.0, "$3.00", "$3.00", 3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Sweatshirts\" and then answer a question.\n\nNumber of sweatshirts | Frequency\n0 | 8\n1 | 18\n2 | 11\n3 | 19", "question": "Read the following table regarding \"Sweatshirts\" and then write Python code to answer a question.\n\nNumber of sweatshirts | Frequency\n0 | 8\n1 | 18\n2 | 11\n3 | 19\n\nThe Springfield Middle School fundraising committee found out how many sweatshirts students already had, in order to decide whether to sell sweatshirts for a fundraiser. How many students have more than 2 sweatshirts?", "answer": "19", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Frequency of students with more than 2 sweatshirts\nstudents_with_more_than_2 = 19  # Only the students with 3 sweatshirts count\nanswer = students_with_more_than_2\nprint(answer)", "# Define the frequency of students based on the number of sweatshirts they have\nsweatshirt_data = {\n    0: 8,  # 8 students have 0 sweatshirts\n    1: 18, # 18 students have 1 sweatshirt\n    2: 11, # 11 students have 2 sweatshirts\n    3: 19  # 19 students have 3 sweatshirts\n}\n\n# Calculate the number of students with more than 2 sweatshirts\nstudents_with_more_than_2 = sweatshirt_data[3]  # Only the students with 3 sweatshirts count\nanswer = students_with_more_than_2\n\nprint(answer)", "sweatshirt_data = {\n    0: 8,  # 8 students have 0 sweatshirts\n    1: 18, # 18 students have 1 sweatshirt\n    2: 11, # 11 students have 2 sweatshirts\n    3: 19  # 19 students have 3 sweatshirts\n}\n\n# Count the number of students with more than 2 sweatshirts\nstudents_with_more_than_2 = sweatshirt_data[3]  # Only the students with 3 sweatshirts count\nanswer = int(students_with_more_than_2)  # Ensure the result is an integer\nprint(answer)", "sweatshirt_data = {\n    0: 8,  # 8 students have 0 sweatshirts\n    1: 18, # 18 students have 1 sweatshirt\n    2: 11, # 11 students have 2 sweatshirts\n    3: 19  # 19 students have 3 sweatshirts\n}\n\nstudents_with_more_than_2 = sweatshirt_data[3]  # Only the students with 3 sweatshirts count\nanswer = students_with_more_than_2  # Directly assign as it's already an integer\nprint(answer)"
], "prediction": [19.0, 19.0, 19.0, 19.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Red buttons per bag\" and then answer a question.\n\nStem | Leaf \n2 | 3, 5\n3 | \n4 | 2, 2, 3\n5 | 6, 8, 9", "question": "Read the following table regarding \"Red buttons per bag\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 3, 5\n3 | \n4 | 2, 2, 3\n5 | 6, 8, 9\n\nAn employee at the craft store counted the number of red buttons in each bag of mixed buttons. What is the largest number of red buttons?", "answer": "59", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number of red buttons corresponds to the largest value in the stem-and-leaf display.\nlargest_red_buttons = 89  # From the stem \"5 | 6, 8, 9\", the value is 59 buttons.\nanswer = largest_red_buttons\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [3, 5]), (3, []), (4, [2, 2, 3]), (5, [6, 8, 9])]  \n  \n# Initialize variable to track the largest number of red buttons  \nlargest_red_buttons = 0  \n  \n# Iterate through the stem and leaf data structure to find the largest value  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        red_buttons = stem * 10 + leaf  \n        if red_buttons > largest_red_buttons:  \n            largest_red_buttons = red_buttons  \n  \nanswer = largest_red_buttons  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [3, 5]), (3, []), (4, [2, 2, 3]), (5, [6, 8, 9])]  \n\n# Initialize variable to find the largest number of red buttons  \nlargest_red_buttons = 0  \n\n# Iterate through the stem and leaf data structure to find the largest number of red buttons  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        red_buttons = stem * 10 + leaf  # Calculate the total number of buttons correctly\n        if red_buttons > largest_red_buttons:  \n            largest_red_buttons = red_buttons  \n\nanswer = largest_red_buttons  \nprint(answer)  # Output the answer", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(2, [3, 5]), (3, []), (4, [2, 2, 3]), (5, [6, 8, 9])]\n\n# Initialize variable to store the largest number of red buttons\nlargest_red_buttons = 0\n\n# Iterate through the stem and leaf data structure to find the largest number of buttons\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        red_buttons = stem * 10 + leaf  # Calculate the total number of buttons\n        if red_buttons > largest_red_buttons:\n            largest_red_buttons = red_buttons\n\nanswer = largest_red_buttons\nprint(answer)  # Output the answer"
], "prediction": [89.0, 59.0, 59.0, 59.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Children's weights (lbs)\" and then answer a question.\n\nStem | Leaf \n3 | 0, 0, 0, 0, 4, 5, 7\n4 | 1, 1, 1, 3, 4, 8, 9\n5 | 4, 5, 6, 6, 8, 9, 9\n6 | 2, 5, 8", "question": "Read the following table regarding \"Children's weights (lbs)\" and then write Python code to answer a question.\n\nStem | Leaf \n3 | 0, 0, 0, 0, 4, 5, 7\n4 | 1, 1, 1, 3, 4, 8, 9\n5 | 4, 5, 6, 6, 8, 9, 9\n6 | 2, 5, 8\n\nDr. Lin, a pediatrician, weighed all the children who recently visited her office. How many children weighed exactly 30 pounds?", "answer": "4", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# The weights corresponding to the stem-and-leaf display\nweights = [30, 30, 30, 30, 34, 35, 37, 41, 41, 41, 43, 44, 48, 49, 54, 55, 56, 56, 58, 59, 59, 62, 65, 68]\n\n# Count how many children weighed exactly 30 pounds\ncount_30_pounds = weights.count(30)\nanswer = count_30_pounds\nprint(answer)", "weights = [30, 30, 30, 30, 34, 35, 37, 41, 41, 41, 43, 44, 48, 49, 54, 55, 56, 56, 58, 59, 59, 62, 65, 68]\ncount_30_pounds = weights.count(30)\nanswer = int(count_30_pounds)  # Ensure the count is stored as an integer\nprint(answer)", "weights = [30, 30, 30, 30, 34, 35, 37, 41, 41, 41, 43, 44, 48, 49, 54, 55, 56, 56, 58, 59, 59, 62, 65, 68]\ncount_30_pounds = weights.count(30)\nanswer = count_30_pounds  # Store the count directly as an integer\nprint(answer)", "weights = [30, 30, 30, 30, 34, 35, 37, 41, 41, 41, 43, 44, 48, 49, 54, 55, 56, 56, 58, 59, 59, 62, 65, 68]\ncount_30_pounds = weights.count(30)\nanswer = int(count_30_pounds)  # Ensure the count is stored as an integer\nprint(answer)"], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbright yellow highlighter | $0.01\nthin green highlighter | $0.06\ngreen colored pencil | $0.02\nmechanical pencil | $0.06\nsmall box of paper clips | $0.06\norange marker | $0.02", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbright yellow highlighter | $0.01\nthin green highlighter | $0.06\ngreen colored pencil | $0.02\nmechanical pencil | $0.06\nsmall box of paper clips | $0.06\norange marker | $0.02\n\nHow much money does Connor need to buy a mechanical pencil and a bright yellow highlighter?", "answer": "0.07", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nprice_mechanical_pencil = 0.06\nprice_bright_yellow_highlighter = 0.01\n# Total cost for Connor to buy both items\ntotal_cost = price_mechanical_pencil + price_bright_yellow_highlighter\nanswer = total_cost\nprint(answer)", "price_mechanical_pencil = 0.06\nprice_bright_yellow_highlighter = 0.01\ntotal_cost = price_mechanical_pencil + price_bright_yellow_highlighter\nanswer = f\"${total_cost:.2f}\"  # Formatting the output to show as currency\nprint(answer)", "# Prices of the items\nprice_mechanical_pencil = 0.06\nprice_bright_yellow_highlighter = 0.01\n\n# Calculate the total cost\ntotal_cost = price_mechanical_pencil + price_bright_yellow_highlighter\n\n# Store the result as a formatted string in the variable 'answer'\nanswer = f\"${total_cost:.2f}\"  # Formatting the output to show as currency\n\n# Output the answer\nprint(answer)", "# Define the prices of the items\nprice_mechanical_pencil = 0.06\nprice_bright_yellow_highlighter = 0.01\n\n# Calculate the total cost\ntotal_cost = price_mechanical_pencil + price_bright_yellow_highlighter\n\n# Store the result in the variable 'answer' formatted as currency\nanswer = f\"${total_cost:.2f}\"\n\n# Print the answer\nprint(answer)"], "prediction": [0.07, "$0.07", "$0.07", "$0.07"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n6 | 16\n7 | 6\n8 | 0", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n6 | 16\n7 | 6\n8 | 0\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "nonlinear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for equal differences in x-values.\nx_values = [6, 7, 8]\ny_values = [16, 6, 0]\n\n# Calculate the differences\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n# Check if the differences are constant\nis_linear = all(difference == differences[0] for difference in differences)\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define x and y values\nx_values = [6, 7, 8]\ny_values = [16, 6, 0]\n\n# Calculate differences between consecutive y-values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if all differences are the same\nis_linear = len(set(differences)) == 1\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values from the table\nx_values = [6, 7, 8]\ny_values = [16, 6, 0]\n\n# Calculate the differences between consecutive y-values\ndifferences = [y_values[i + 1] - y_values[i] for i in range(len(y_values) - 1)]\n\n# Check if the differences are constant\nis_linear = len(set(differences)) == 1\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "x_values = [6, 7, 8]\ny_values = [16, 6, 0]\n\n# Calculate the slopes between each pair of points\nslopes = []\nfor i in range(len(x_values) - 1):\n    slope = (y_values[i + 1] - y_values[i]) / (x_values[i + 1] - x_values[i])\n    slopes.append(slope)\n\n# Check if all slopes are the same\nis_linear = len(set(slopes)) == 1\nanswer = 'linear' if is_linear else 'nonlinear'\n\nprint(answer)"
], "prediction": [null, "nonlinear", "nonlinear", "nonlinear"], "report": ["NameError(\"name 'differences' is not defined\")", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Average waiting time at the DMV\" and then answer a question.\n\nMonth | Waiting time (minutes)\nMarch | 13\nApril | 18\nMay | 17\nJune | 17\nJuly | 16", "question": "Read the following table regarding \"Average waiting time at the DMV\" and then write Python code to answer a question.\n\nMonth | Waiting time (minutes)\nMarch | 13\nApril | 18\nMay | 17\nJune | 17\nJuly | 16\n\nAn administrator at the Department of Motor Vehicles (DMV) tracked the average wait time from month to month. According to the table, what was the rate of change between April and May?", "answer": "-1", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nwaiting_time_april = 18\nwaiting_time_may = 17\n\n# Calculate the rate of change between April and May\nrate_of_change = waiting_time_may - waiting_time_april\nanswer = rate_of_change\nprint(answer)", "waiting_time_april = 18\nwaiting_time_may = 17\nrate_of_change = (waiting_time_may - waiting_time_april) / waiting_time_april * 100  # Expressed as a percentage\nanswer = rate_of_change\nprint(answer)", "waiting_time_april = 18\nwaiting_time_may = 17\nrate_of_change = (waiting_time_may - waiting_time_april) / waiting_time_april * 100  # Expressed as a percentage\nanswer = round(rate_of_change, 2)  # Round to two decimal places\nprint(answer)", "waiting_time_april = 18\nwaiting_time_may = 17\nrate_of_change_minutes = waiting_time_may - waiting_time_april  # Change in minutes\nanswer = rate_of_change_minutes  # Store the change in minutes\nprint(answer)"], "prediction": [-1.0, -5.55556, -5.56, -1.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\njar of tomato sauce | $0.64\nbottle of ketchup | $0.76\nbottle of hot sauce | $0.85\nbottle of vinegar | $0.73\nbottle of soy sauce | $0.82\nbottle of mustard | $0.88", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\njar of tomato sauce | $0.64\nbottle of ketchup | $0.76\nbottle of hot sauce | $0.85\nbottle of vinegar | $0.73\nbottle of soy sauce | $0.82\nbottle of mustard | $0.88\n\nHow much more does a bottle of mustard cost than a jar of tomato sauce?", "answer": "0.24", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_mustard = 0.88\ncost_tomato_sauce = 0.64\n# Calculate the difference in cost\ndifference_cost = cost_mustard - cost_tomato_sauce\nanswer = difference_cost\nprint(answer)", "cost_mustard = 0.88\ncost_tomato_sauce = 0.64\ndifference_cost = cost_mustard - cost_tomato_sauce\nanswer = f\"${difference_cost:.2f}\"  # Format the output as currency\nprint(answer)", "cost_mustard = 0.88\ncost_tomato_sauce = 0.64\ndifference_cost = cost_mustard - cost_tomato_sauce\nanswer = f\"${difference_cost:.2f}\"  # Format the output as currency\nprint(answer)", "cost_mustard = 0.88\ncost_tomato_sauce = 0.64\ndifference_cost = cost_mustard - cost_tomato_sauce\nanswer = difference_cost  # Store the difference directly\nprint(f\"${answer:.2f}\")  # Format the output as currency when printing"], "prediction": [0.24, "$0.24", "$0.24", 0.24], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Chocolate consumption per capita (kg)\" and then answer a question.\n\nCountry | 2002 | 2005\nAustria | 8 | 9\nAustralia | 4 | 5\nBelgium | 8 | 11\nSweden | 8 | 7\nDenmark | 9 | 8", "question": "Read the following table regarding \"Chocolate consumption per capita (kg)\" and then write Python code to answer a question.\n\nCountry | 2002 | 2005\nAustria | 8 | 9\nAustralia | 4 | 5\nBelgium | 8 | 11\nSweden | 8 | 7\nDenmark | 9 | 8\n\nJustin's Candies has been studying how much chocolate people have been eating in different countries. Which country consumed less chocolate per capita in 2005, Australia or Sweden? Choose from the the options: ['Sweden', 'Australia']", "answer": "Australia", "ques_type": "multi_choice", "choices": ["Sweden", "Australia"], "code": ["# Python code, return answer \n# Chocolate consumption per capita in 2005 for Australia and Sweden\naustralia_consumption_2005 = 5\nsweden_consumption_2005 = 7\n\n# Determine which country consumed less chocolate\nif australia_consumption_2005 < sweden_consumption_2005:\n    answer = 'Australia'\nelse:\n    answer = 'Sweden'\nprint(answer)", "australia_consumption_2005 = 5\nsweden_consumption_2005 = 7\n\nif australia_consumption_2005 < sweden_consumption_2005:\n    answer = 'Australia'\nelse:\n    answer = 'Sweden'\n\nprint(answer)", "australia_consumption_2005 = 5\nsweden_consumption_2005 = 7\n\nif australia_consumption_2005 < sweden_consumption_2005:\n    answer = 'Australia'\nelse:\n    answer = 'Sweden'\n\n# Since we want the country that consumed less chocolate, we should reverse the logic\nif australia_consumption_2005 < sweden_consumption_2005:\n    answer = 'Australia'\nelse:\n    answer = 'Sweden'\n\nprint(answer)", "australia_consumption_2005 = 5\nsweden_consumption_2005 = 7\n\nif australia_consumption_2005 < sweden_consumption_2005:\n    answer = 'Australia'\nelse:\n    answer = 'Sweden'\n\nprint(answer)"], "prediction": ["Australia", "Australia", "Australia", "Australia"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nred sweater | $11.60\nwinter jacket | $33.37\npair of tennis shoes | $43.78\npair of jeans | $39.31\npair of sweat pants | $17.18", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nred sweater | $11.60\nwinter jacket | $33.37\npair of tennis shoes | $43.78\npair of jeans | $39.31\npair of sweat pants | $17.18\n\nHow much more does a winter jacket cost than a pair of sweat pants?", "answer": "16.19", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_winter_jacket = 33.37 \ncost_sweat_pants = 17.18 \n# Calculate the difference in cost\ndifference_cost = cost_winter_jacket - cost_sweat_pants\nanswer = difference_cost\nprint(answer)", "cost_winter_jacket = 33.37 \ncost_sweat_pants = 17.18 \ndifference_cost = cost_winter_jacket - cost_sweat_pants\nanswer = difference_cost\nprint(answer)", "cost_winter_jacket = 33.37 \ncost_sweat_pants = 17.18 \ndifference_cost = cost_winter_jacket - cost_sweat_pants\nanswer = difference_cost\nprint(answer)", "# Define the costs of the items\ncost_winter_jacket = 33.37 \ncost_sweat_pants = 17.18 \n\n# Calculate the difference in cost\ndifference_cost = cost_winter_jacket - cost_sweat_pants\n\n# Store the result in the answer variable\nanswer = difference_cost\n\n# Output the answer\nprint(answer)"], "prediction": [16.19, 16.19, 16.19, 16.19], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Fish per tank\" and then answer a question.\n\nStem | Leaf \n3 | 5, 8\n4 | 0, 2, 4, 4, 6\n5 | 0, 2, 3, 4, 5, 6, 6, 8, 8\n6 | 3", "question": "Read the following table regarding \"Fish per tank\" and then write Python code to answer a question.\n\nStem | Leaf \n3 | 5, 8\n4 | 0, 2, 4, 4, 6\n5 | 0, 2, 3, 4, 5, 6, 6, 8, 8\n6 | 3\n\nA pet store owner had his staff count the number of fish in each tank. How many tanks have fewer than 70 fish?", "answer": "17", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Listing the number of fish per tank from the stem-and-leaf display\nfish_counts = [35, 38, 40, 42, 44, 44, 46, 50, 52, 53, 54, 55, 56, 56, 58, 58, 63]\n\n# Count tanks with fewer than 70 fish\ntanks_fewer_than_70 = sum(1 for count in fish_counts if count < 70)\nanswer = tanks_fewer_than_70\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(3, [5, 8]), (4, [0, 2, 4, 4, 6]), (5, [0, 2, 3, 4, 5, 6, 6, 8, 8]), (6, [3])]  \n\n# Initialize counter for tanks with fewer than 70 fish  \ntanks_fewer_than_70 = 0  \n\n# Iterate through the stem and leaf data structure and count relevant tanks  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        fish_count = stem * 10 + leaf  \n        if fish_count < 70:  \n            tanks_fewer_than_70 += 1  \n\nanswer = tanks_fewer_than_70  \nprint(answer)", "# Define the stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(3, [5, 8]), (4, [0, 2, 4, 4, 6]), (5, [0, 2, 3, 4, 5, 6, 6, 8, 8]), (6, [3])]  \n\n# Initialize counter for tanks with fewer than 70 fish  \ntanks_fewer_than_70 = 0  \n\n# Iterate through the stem and leaf data structure and count relevant tanks  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        fish_count = stem * 10 + leaf  \n        if fish_count < 70:  \n            tanks_fewer_than_70 += 1  \n\n# Store the result as an integer  \nanswer = tanks_fewer_than_70  \nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [(3, [5, 8]), (4, [0, 2, 4, 4, 6]), (5, [0, 2, 3, 4, 5, 6, 6, 8, 8]), (6, [3])]\n\n# Initialize counter for tanks with fewer than 70 fish\ntanks_fewer_than_70 = 0\n\n# Iterate through the stem and leaf data structure and count relevant tanks\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        fish_count = stem * 10 + leaf\n        if fish_count < 70:\n            tanks_fewer_than_70 += 1\n\n# Store the result as an integer\nanswer = tanks_fewer_than_70\nprint(answer)"
], "prediction": [17.0, 17.0, 17.0, 17.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nEmployee | Pay period |\nMargarita Perez | September 9-15 |\nTotal earnings | | $670.00\nFederal income tax | $76.70 |\nOther taxes | $51.26 |\nTotal taxes | | ?\nPay after taxes | | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nEmployee | Pay period |\nMargarita Perez | September 9-15 |\nTotal earnings | | $670.00\nFederal income tax | $76.70 |\nOther taxes | $51.26 |\nTotal taxes | | ?\nPay after taxes | | ?\n\nLook at Margarita's pay stub. Margarita lives in a state without state income tax. How much did Margarita make after taxes?", "answer": "542.04", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Total earnings and taxes\ntotal_earnings = 670.00\nfederal_income_tax = 76.70\nother_taxes = 51.26\n# Calculate total taxes\ntotal_taxes = federal_income_tax + other_taxes\n# Calculate pay after taxes\npay_after_taxes = total_earnings - total_taxes\nanswer = pay_after_taxes\nprint(answer)", "total_earnings = 670.00\nfederal_income_tax = 76.70\nother_taxes = 51.26\ntotal_taxes = federal_income_tax + other_taxes\npay_after_taxes = total_earnings - total_taxes\nanswer = round(pay_after_taxes, 2)  # Format to two decimal places\nprint(answer)", "total_earnings = 670.00\nfederal_income_tax = 76.70\nother_taxes = 51.26\ntotal_taxes = federal_income_tax + other_taxes\npay_after_taxes = total_earnings - total_taxes\nanswer = round(pay_after_taxes, 2)  # Format to two decimal places\nprint(answer)", "# Define Margarita's earnings and taxes\ntotal_earnings = 670.00\nfederal_income_tax = 76.70\nother_taxes = 51.26\n\n# Calculate total taxes\ntotal_taxes = federal_income_tax + other_taxes\n\n# Calculate pay after taxes\npay_after_taxes = total_earnings - total_taxes\n\n# Round to two decimal places\nanswer = round(pay_after_taxes, 2)\n\nprint(answer)"], "prediction": [542.04, 542.04, 542.04, 542.04], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of desk drawers | Number of notepads\n1 | 2\n2 | 4\n3 | 6\n4 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of desk drawers | Number of notepads\n1 | 2\n2 | 4\n3 | 6\n4 | ?\n\nEach desk drawer has 2 notepads. How many notepads are in 4 desk drawers?", "answer": "8", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nnumber_of_drawers = 4 \nnotepads_per_drawer = 2 \n# Calculate the total number of notepads\ntotal_notepads = number_of_drawers * notepads_per_drawer\nanswer = total_notepads\nprint(answer)", "number_of_drawers = 4 \nnotepads_per_drawer = 2 \ntotal_notepads = number_of_drawers * notepads_per_drawer\nanswer = int(total_notepads)  # Ensure the result is an integer\nprint(answer)", "number_of_drawers = 4 \nnotepads_per_drawer = 2 \ntotal_notepads = number_of_drawers * notepads_per_drawer\nanswer = total_notepads  # This will naturally be an integer\nprint(answer)", "number_of_drawers = 4 \nnotepads_per_drawer = 2 \ntotal_notepads = number_of_drawers * notepads_per_drawer\nanswer = int(total_notepads)  # Convert to integer to ensure the output is a whole number\nprint(answer)"], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Subway train schedule\" and then answer a question.\n\nLocation | Time\nSpruce Boulevard | 10:40 A.M.\nChurch Road | 11:30 A.M.\nMeadow Road | 12:00 P.M.\nCenter Boulevard | 12:10 P.M.\nHickory Road | 12:40 P.M.\nLee Avenue | 1:15 P.M.\nFranklin Boulevard | 2:05 P.M.", "question": "Read the following table regarding \"Subway train schedule\" and then write Python code to answer a question.\n\nLocation | Time\nSpruce Boulevard | 10:40 A.M.\nChurch Road | 11:30 A.M.\nMeadow Road | 12:00 P.M.\nCenter Boulevard | 12:10 P.M.\nHickory Road | 12:40 P.M.\nLee Avenue | 1:15 P.M.\nFranklin Boulevard | 2:05 P.M.\n\nLook at the following schedule. At which stop does the train arrive at 1.15 P.M.? Choose from the the options: ['Hickory Road', 'Lee Avenue', 'Church Road', 'Center Boulevard']", "answer": "Lee Avenue", "ques_type": "multi_choice", "choices": ["Hickory Road", "Lee Avenue", "Church Road", "Center Boulevard"], "code": [
  "# Python code, return answer \ntrain_schedule = {\n    'Spruce Boulevard': '10:40 A.M.',\n    'Church Road': '11:30 A.M.',\n    'Meadow Road': '12:00 P.M.',\n    'Center Boulevard': '12:10 P.M.',\n    'Hickory Road': '12:40 P.M.',\n    'Lee Avenue': '1:15 P.M.',\n    'Franklin Boulevard': '2:05 P.M.'\n}\n\n# Find the stop where the train arrives at 1:15 P.M.\narrival_time = '1:15 P.M.'\nstop_at_arrival = [location for location, time in train_schedule.items() if time == arrival_time]\nanswer = stop_at_arrival[0]  # Since we expect only one match\nprint(answer)", "train_schedule = {\n    'Spruce Boulevard': '10:40 A.M.',\n    'Church Road': '11:30 A.M.',\n    'Meadow Road': '12:00 P.M.',\n    'Center Boulevard': '12:10 P.M.',\n    'Hickory Road': '12:40 P.M.',\n    'Lee Avenue': '1:15 P.M.',\n    'Franklin Boulevard': '2:05 P.M.'\n}\n\narrival_time = '1:15 P.M.'\nstop_at_arrival = [location for location, time in train_schedule.items() if time == arrival_time]\n\nif stop_at_arrival:\n    answer = stop_at_arrival[0]  # We expect only one match\nelse:\n    answer = None  # Handle case where no matches are found\n\nprint(answer)", "train_schedule = {\n    'Spruce Boulevard': '10:40 A.M.',\n    'Church Road': '11:30 A.M.',\n    'Meadow Road': '12:00 P.M.',\n    'Center Boulevard': '12:10 P.M.',\n    'Hickory Road': '12:40 P.M.',\n    'Lee Avenue': '1:15 P.M.',\n    'Franklin Boulevard': '2:05 P.M.'\n}\n\narrival_time = '1:15 P.M.'\nanswer = next((location for location, time in train_schedule.items() if time == arrival_time), None)\n\nprint(answer)", "train_schedule = {\n    'Spruce Boulevard': '10:40 A.M.',\n    'Church Road': '11:30 A.M.',\n    'Meadow Road': '12:00 P.M.',\n    'Center Boulevard': '12:10 P.M.',\n    'Hickory Road': '12:40 P.M.',\n    'Lee Avenue': '1:15 P.M.',\n    'Franklin Boulevard': '2:05 P.M.'\n}\n\narrival_time = '1:15 P.M.'\nanswer = next((location for location, time in train_schedule.items() if time == arrival_time), None)\n\nprint(answer)"
], "prediction": ["Lee Avenue", "Lee Avenue", null, null], "report": ["Done", "Done", "NameError(\"name 'arrival_time' is not defined\")", "NameError(\"name 'arrival_time' is not defined\")"]
}
{
  "context": "Read the following table regarding \"Science articles read\" and then answer a question.\n\nName | Number of science articles\nGabe | 528\nDanny | 177\nJacob | 837\nHeather | 389", "question": "Read the following table regarding \"Science articles read\" and then write Python code to answer a question.\n\nName | Number of science articles\nGabe | 528\nDanny | 177\nJacob | 837\nHeather | 389\n\nHeather's classmates revealed how many science articles they read. How many more science articles did Heather read than Danny?", "answer": "212", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nheather_articles = 389 \ndanny_articles = 177 \n# Calculate how many more articles Heather read than Danny\ndifference = heather_articles - danny_articles\nanswer = difference\nprint(answer)", "heather_articles = 389 \ndanny_articles = 177 \nanswer = heather_articles - danny_articles\nprint(answer)", "# Define the number of science articles read by Heather and Danny  \nheather_articles = 389  \ndanny_articles = 177  \n\n# Calculate the difference in the number of articles read  \ndifference = heather_articles - danny_articles  \n\n# Store the result in the variable 'answer'  \nanswer = difference  \n\n# Print the answer  \nprint(answer)", "heather_articles = 389  \ndanny_articles = 177  \nanswer = heather_articles - danny_articles  \nprint(answer)"], "prediction": [212.0, 212.0, 212.0, 212.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nclarinet | $717.00\nkeyboard | $593.00\ntrumpet | $969.00\nsaxophone | $870.00\npiccolo | $426.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nclarinet | $717.00\nkeyboard | $593.00\ntrumpet | $969.00\nsaxophone | $870.00\npiccolo | $426.00\n\nHow much more does a trumpet cost than a piccolo?", "answer": "543", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ncost_trumpet = 969.00\ncost_piccolo = 426.00\n# Calculate the difference in cost\ndifference = cost_trumpet - cost_piccolo\nanswer = difference\nprint(answer)", "# Define the costs of the instruments\ncost_trumpet = 969.00\ncost_piccolo = 426.00\n\n# Calculate the difference in cost\ndifference = cost_trumpet - cost_piccolo\n\n# Store the result in the answer variable\nanswer = difference\n\n# Print the answer\nprint(answer)", "# Define the costs of the instruments\ncost_trumpet = 969.00\ncost_piccolo = 426.00\n\n# Calculate the difference in cost\ncost_difference = cost_trumpet - cost_piccolo\n\n# Store the result in the answer variable\nanswer = cost_difference\n\n# Print the answer\nprint(answer)", "cost_trumpet = 969.00\ncost_piccolo = 426.00\ncost_difference = cost_trumpet - cost_piccolo\nanswer = f\"${cost_difference:.2f}\"  # Format the output as a monetary value\nprint(answer)"], "prediction": [543.0, 543.0, 543.0, "$543.00"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Bridge tolls\" and then answer a question.\n\nBridge | Truck | Car\nTacoma Narrows | $4 | $3\nHatem | $10 | $5\nGeorge Washington | $16 | $8\nSan Mateo | $6 | $4", "question": "Read the following table regarding \"Bridge tolls\" and then write Python code to answer a question.\n\nBridge | Truck | Car\nTacoma Narrows | $4 | $3\nHatem | $10 | $5\nGeorge Washington | $16 | $8\nSan Mateo | $6 | $4\n\nA transportation analyst compared various bridges' tolls. On the George Washington bridge, how much more is the toll for a truck than for a car?", "answer": "8", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Toll values for the George Washington bridge\ntruck_toll_george_washington = 16 \ncar_toll_george_washington = 8 \n# Calculate the difference in tolls\ndifference_in_toll = truck_toll_george_washington - car_toll_george_washington\nanswer = difference_in_toll\nprint(answer)", "truck_toll_george_washington = 16 \ncar_toll_george_washington = 8 \ndifference_in_toll = truck_toll_george_washington - car_toll_george_washington\nanswer = int(difference_in_toll)  # Convert to integer\nprint(answer)", "# Define the tolls for the George Washington bridge\ntruck_toll_george_washington = 16\ncar_toll_george_washington = 8\n\n# Calculate the difference in tolls\ndifference_in_toll = truck_toll_george_washington - car_toll_george_washington\n\n# Store the result as an integer\nanswer = difference_in_toll  # No need to convert, it's already an integer\n\nprint(answer)", "truck_toll_george_washington = 16\ncar_toll_george_washington = 8\ndifference_in_toll = truck_toll_george_washington - car_toll_george_washington\nanswer = int(difference_in_toll)  # Convert to integer for clarity\nprint(answer)"], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of tins | Number of muffins\n1 | 5\n2 | 10\n3 | 15\n4 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of tins | Number of muffins\n1 | 5\n2 | 10\n3 | 15\n4 | ?\n\nEach tin has 5 muffins. How many muffins are in 4 tins?", "answer": "20", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of muffins in one tin\nmuffins_per_tin = 5 \n# Calculate the number of muffins in 4 tins\ntins = 4 \nanswer = muffins_per_tin * tins\nprint(answer)", "muffins_per_tin = 5 \ntins = 4 \nanswer = muffins_per_tin * tins\nanswer = int(answer)  # Convert to integer\nprint(answer)", "muffins_per_tin = 5 \ntins = 4 \nanswer = muffins_per_tin * tins  # This will be an integer\nprint(answer)  # Output will be an integer", "muffins_per_tin = 5\ntins = 4\nanswer = muffins_per_tin * tins  # This will be an integer\nprint(answer)  # Output will be an integer"], "prediction": [20.0, 20.0, 20.0, 20.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Weight of winning dog at a dog show\" and then answer a question.\n\nYear | Weight (kg)\n2014 | 23\n2015 | 29\n2016 | 42\n2017 | 49\n2018 | 15", "question": "Read the following table regarding \"Weight of winning dog at a dog show\" and then write Python code to answer a question.\n\nYear | Weight (kg)\n2014 | 23\n2015 | 29\n2016 | 42\n2017 | 49\n2018 | 15\n\nA dog show enthusiast recorded the weight of the winning dog at recent dog shows. According to the table, what was the rate of change between 2017 and 2018?", "answer": "-34", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nweight_2017 = 49  # weight in kg for the year 2017\nweight_2018 = 15  # weight in kg for the year 2018\n\n# Calculate the rate of change\nrate_of_change = weight_2018 - weight_2017\nanswer = rate_of_change\nprint(answer)", "weight_2017 = 49  # weight in kg for the year 2017\nweight_2018 = 15  # weight in kg for the year 2018\nrate_of_change = (weight_2018 - weight_2017) / weight_2017 * 100  # percentage change\nanswer = rate_of_change\nprint(answer)", "# Define weights for 2017 and 2018\nweight_2017 = 49  # weight in kg for the year 2017\nweight_2018 = 15  # weight in kg for the year 2018\n\n# Calculate the percentage change in weight from 2017 to 2018\npercentage_change = ((weight_2018 - weight_2017) / weight_2017) * 100  # percentage change\nanswer = percentage_change  # Store the result in the variable 'answer'\nprint(answer)  # Output the answer", "weight_2017 = 49  # weight in kg for the year 2017\nweight_2018 = 15  # weight in kg for the year 2018\npercentage_change = ((weight_2018 - weight_2017) / weight_2017) * 100  # percentage change\nanswer = round(percentage_change, 2)  # Round to two decimal places for clarity\nprint(f\"The rate of change in weight from 2017 to 2018 is {answer}%.\")  # Output the answer with context"], "prediction": [-34.0, -69.38776, -69.38776, -69.39], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Bears in zoos\" and then answer a question.\n\nZoo | Sun bears | Brown bears\nAtlantic Zoo | 3 | 5\nMountain Zoo | 3 | 16\nPacific Zoo | 5 | 4\nEastern Zoo | 10 | 15", "question": "Read the following table regarding \"Bears in zoos\" and then write Python code to answer a question.\n\nZoo | Sun bears | Brown bears\nAtlantic Zoo | 3 | 5\nMountain Zoo | 3 | 16\nPacific Zoo | 5 | 4\nEastern Zoo | 10 | 15\n\nSome students visited nearby zoos to record the number of bears kept there. Which zoo has the fewest bears? Choose from the the options: ['Pacific Zoo', 'Atlantic Zoo', 'Mountain Zoo', 'Eastern Zoo']", "answer": "Atlantic Zoo", "ques_type": "multi_choice", "choices": ["Pacific Zoo", "Atlantic Zoo", "Mountain Zoo", "Eastern Zoo"], "code": [
  "# Python code, return answer \n# Number of bears in each zoo\nzoo_bears = {\n    'Atlantic Zoo': 3 + 5,\n    'Mountain Zoo': 3 + 16,\n    'Pacific Zoo': 5 + 4,\n    'Eastern Zoo': 10 + 15\n}\n\n# Find the zoo with the fewest bears\nfewest_bears_zoo = min(zoo_bears, key=zoo_bears.get)\nanswer = fewest_bears_zoo\nprint(answer)", "# Store the number of bears in each zoo in a dictionary\nzoo_bears = {\n    'Atlantic Zoo': 3 + 5,   # 8 bears\n    'Mountain Zoo': 3 + 16,   # 19 bears\n    'Pacific Zoo': 5 + 4,     # 9 bears\n    'Eastern Zoo': 10 + 15     # 25 bears\n}\n\n# Find the zoo with the fewest bears\nfewest_bears_zoo = min(zoo_bears, key=zoo_bears.get)\nanswer = fewest_bears_zoo\nprint(answer)", "# Define the number of bears in each zoo\nzoo_bears = {\n    'Atlantic Zoo': 3 + 5,   # 8 bears\n    'Mountain Zoo': 3 + 16,   # 19 bears\n    'Pacific Zoo': 5 + 4,     # 9 bears\n    'Eastern Zoo': 10 + 15     # 25 bears\n}\n\n# Find the zoo with the fewest bears\nfewest_bears_zoo = min(zoo_bears, key=zoo_bears.get)\nfewest_bears_count = zoo_bears[fewest_bears_zoo]\n\n# Store the result as a formatted string\nanswer = f\"{fewest_bears_zoo} with {fewest_bears_count} bears\"\nprint(answer)", "# Store the number of bears in each zoo\nzoo_bears = {\n    'Atlantic Zoo': 3 + 5,   # 8 bears\n    'Mountain Zoo': 3 + 16,   # 19 bears\n    'Pacific Zoo': 5 + 4,     # 9 bears\n    'Eastern Zoo': 10 + 15     # 25 bears\n}\n\n# Find the zoo with the fewest bears\nfewest_bears_zoo = min(zoo_bears, key=zoo_bears.get)\n\n# Assign the name of the zoo with the fewest bears to the answer variable\nanswer = fewest_bears_zoo\nprint(answer)"
], "prediction": ["Atlantic Zoo", "Atlantic Zoo", "Atlantic Zoo with 8 bears", "Atlantic Zoo"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nyellow beads | $2/kilogram\nblack beads | $2/kilogram\nwhite beads | $3/kilogram\norange beads | $2/kilogram\nred beads | $2/kilogram\nblue beads | $2/kilogram\ngreen beads | $2/kilogram", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nyellow beads | $2/kilogram\nblack beads | $2/kilogram\nwhite beads | $3/kilogram\norange beads | $2/kilogram\nred beads | $2/kilogram\nblue beads | $2/kilogram\ngreen beads | $2/kilogram\n\nIf Shawn buys 4 kilograms of yellow beads and 4 kilograms of green beads, how much will he spend?", "answer": "16", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \nprice_per_kilogram_yellow = 2 \nprice_per_kilogram_green = 2 \nkilograms_yellow = 4 \nkilograms_green = 4 \n\n# Calculate the total cost\ntotal_cost_yellow = price_per_kilogram_yellow * kilograms_yellow\ntotal_cost_green = price_per_kilogram_green * kilograms_green\ntotal_cost = total_cost_yellow + total_cost_green\n\nanswer = total_cost\nprint(answer)", "price_per_kilogram_yellow = 2 \nprice_per_kilogram_green = 2 \nkilograms_yellow = 4 \nkilograms_green = 4 \n\ntotal_cost_yellow = price_per_kilogram_yellow * kilograms_yellow\ntotal_cost_green = price_per_kilogram_green * kilograms_green\ntotal_cost = total_cost_yellow + total_cost_green\n\n# Convert to integer for whole dollar amount and print the result\nanswer = int(total_cost)\nprint(answer)", "price_per_kilogram_yellow = 2 \nprice_per_kilogram_green = 2 \nkilograms_yellow = 4 \nkilograms_green = 4 \n\ntotal_cost_yellow = price_per_kilogram_yellow * kilograms_yellow\ntotal_cost_green = price_per_kilogram_green * kilograms_green\ntotal_cost = total_cost_yellow + total_cost_green\n\nanswer = total_cost  # No need to convert to int since it's already a whole number\nprint(answer)", "price_per_kilogram_yellow = 2 \nprice_per_kilogram_green = 2 \nkilograms_yellow = 4 \nkilograms_green = 4 \n\ntotal_cost_yellow = price_per_kilogram_yellow * kilograms_yellow\ntotal_cost_green = price_per_kilogram_green * kilograms_green\ntotal_cost = total_cost_yellow + total_cost_green\n\nanswer = int(total_cost)  # Convert to int to represent whole dollar amount\nprint(answer)"
], "prediction": [16.0, 16.0, 16.0, 16.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Weight of winning dog at a dog show\" and then answer a question.\n\nYear | Weight (kg)\n2008 | 42\n2009 | 7\n2010 | 11\n2011 | 25\n2012 | 28", "question": "Read the following table regarding \"Weight of winning dog at a dog show\" and then write Python code to answer a question.\n\nYear | Weight (kg)\n2008 | 42\n2009 | 7\n2010 | 11\n2011 | 25\n2012 | 28\n\nA dog show enthusiast recorded the weight of the winning dog at recent dog shows. According to the table, what was the rate of change between 2009 and 2010?", "answer": "4", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Weight of the winning dog in 2009 and 2010\nweight_2009 = 7\nweight_2010 = 11\n\n# Calculate the rate of change\nrate_of_change = weight_2010 - weight_2009\nanswer = rate_of_change\nprint(answer)", "weight_2009 = 7\nweight_2010 = 11\nyear_2009 = 2009\nyear_2010 = 2010\n\n# Calculate the change in weight and change in time\nchange_in_weight = weight_2010 - weight_2009\nchange_in_time = year_2010 - year_2009\n\n# Calculate the rate of change\nrate_of_change = change_in_weight / change_in_time\nanswer = rate_of_change\nprint(answer)", "# Define the weights of the winning dog for the years 2009 and 2010\nweight_2009 = 7\nweight_2010 = 11\n\n# Define the years\nyear_2009 = 2009\nyear_2010 = 2010\n\n# Calculate the change in weight and the change in time\nchange_in_weight = weight_2010 - weight_2009\nchange_in_time = year_2010 - year_2009\n\n# Calculate the rate of change\nrate_of_change = change_in_weight / change_in_time\n\n# Store the result in the variable 'answer'\nanswer = rate_of_change\n\n# Print the answer\nprint(answer)", "weight_2009 = 7\nweight_2010 = 11\nyear_2009 = 2009\nyear_2010 = 2010\n\nchange_in_weight = weight_2010 - weight_2009\nchange_in_time = year_2010 - year_2009\nrate_of_change = change_in_weight / change_in_time\n\nanswer = rate_of_change\nprint(answer)  # Output: 4.0"
], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Cherries sold\" and then answer a question.\n\nDay | Kilograms\nSaturday | 5\nSunday | 7\nMonday | 9\nTuesday | 5\nWednesday | 6", "question": "Read the following table regarding \"Cherries sold\" and then write Python code to answer a question.\n\nDay | Kilograms\nSaturday | 5\nSunday | 7\nMonday | 9\nTuesday | 5\nWednesday | 6\n\nA farmer wrote down how many kilograms of cherries were sold in the past 5 days. What is the median of the numbers?", "answer": "6", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# List of kilograms sold over the days\ncherries_sold = [5, 7, 9, 5, 6]\n\n# Sort the list to find the median\ncherries_sold.sort()\n\n# Calculate the median\nn = len(cherries_sold)\nif n % 2 == 0:\n    median = (cherries_sold[n // 2 - 1] + cherries_sold[n // 2]) / 2\nelse:\n    median = cherries_sold[n // 2]\n\nanswer = median\nprint(answer)", "cherries_sold = [5, 7, 9, 5, 6]\ncherries_sold.sort()\nn = len(cherries_sold)\nif n % 2 == 0:\n    median = (cherries_sold[n // 2 - 1] + cherries_sold[n // 2]) / 2\nelse:\n    median = cherries_sold[n // 2]\n\n# Convert median to an integer if it is a whole number\nif median.is_integer():\n    median = int(median)\n\nanswer = median\nprint(answer)", "cherries_sold = [5, 7, 9, 5, 6]\ncherries_sold.sort()\nn = len(cherries_sold)\nif n % 2 == 0:\n    median = (cherries_sold[n // 2 - 1] + cherries_sold[n // 2]) / 2\nelse:\n    median = cherries_sold[n // 2]\nanswer = int(median)  # Convert to int if it's a whole number\nprint(answer)", "cherries_sold = [5, 7, 9, 5, 6]\ncherries_sold.sort()\nn = len(cherries_sold)\nif n % 2 == 0:\n    median = (cherries_sold[n // 2 - 1] + cherries_sold[n // 2]) / 2\nelse:\n    median = cherries_sold[n // 2]\nanswer = round(median)  # Use round to handle float to int conversion\nprint(answer)"
], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Apples picked\" and then answer a question.\n\nDay | Number of apples\nTuesday | 314\nWednesday | 331\nThursday | 341\nFriday | 313", "question": "Read the following table regarding \"Apples picked\" and then write Python code to answer a question.\n\nDay | Number of apples\nTuesday | 314\nWednesday | 331\nThursday | 341\nFriday | 313\n\nThe owner of an orchard kept records about how many apples were picked in the past 4 days. On which day were the fewest apples picked? Choose from the the options: ['Tuesday', 'Wednesday', 'Thursday', 'Friday']", "answer": "Friday", "ques_type": "multi_choice", "choices": ["Tuesday", "Wednesday", "Thursday", "Friday"], "code": ["# Python code, return answer \napples_picked = {\n    'Tuesday': 314,\n    'Wednesday': 331,\n    'Thursday': 341,\n    'Friday': 313\n}\n# Find the day with the fewest apples picked\nfewest_apples_day = min(apples_picked, key=apples_picked.get)\nanswer = fewest_apples_day\nprint(answer)", "# Define the number of apples picked each day in a dictionary\napples_picked = {\n    'Tuesday': 314,\n    'Wednesday': 331,\n    'Thursday': 341,\n    'Friday': 313\n}\n\n# Find the day with the fewest apples picked using the min function\nfewest_apples_day = min(apples_picked, key=apples_picked.get)\n\n# Store the result in the answer variable\nanswer = fewest_apples_day\n\n# Print the answer\nprint(answer)", "apples_picked = {\n    'Tuesday': 314,\n    'Wednesday': 331,\n    'Thursday': 341,\n    'Friday': 313\n}\nfewest_apples_day = min(apples_picked, key=apples_picked.get)\nanswer = fewest_apples_day\nprint(answer)", "apples_picked = {\n    'Tuesday': 314,\n    'Wednesday': 331,\n    'Thursday': 341,\n    'Friday': 313\n}\nfewest_apples_day = min(apples_picked, key=apples_picked.get)\nanswer = fewest_apples_day\nprint(answer)"], "prediction": ["Friday", "Friday", "Friday", "Friday"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbrown rice | $1/lb\nbasmati rice | $1/lb\nwhite rice | $1/lb\njasmine rice | $3/lb\nlong grain rice | $3/lb\nArborio rice | $2/lb", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbrown rice | $1/lb\nbasmati rice | $1/lb\nwhite rice | $1/lb\njasmine rice | $3/lb\nlong grain rice | $3/lb\nArborio rice | $2/lb\n\nTucker buys 1/4 of a pound of jasmine rice. How much does he spend?", "answer": "0.75", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_jasmine = 3  # price for jasmine rice\npounds_bought = 0.25  # 1/4 of a pound\n# Calculate the total cost\ntotal_cost = price_per_pound_jasmine * pounds_bought\nanswer = total_cost\nprint(answer)", "# Define the price per pound of jasmine rice\nprice_per_pound_jasmine = 3  # price for jasmine rice in dollars\n\n# Define the amount of rice bought in pounds (1/4 pound)\npounds_bought = 0.25  # 1/4 of a pound\n\n# Calculate the total cost\ntotal_cost = price_per_pound_jasmine * pounds_bought\n\n# Store the result in 'answer'\nanswer = total_cost  \n\n# Output the answer\nprint(answer)", "price_per_pound_jasmine = 3  # price for jasmine rice in dollars\npounds_bought = 0.25  # 1/4 of a pound\ntotal_cost = price_per_pound_jasmine * pounds_bought\nanswer = total_cost  \nprint(answer)  # This will output the total cost", "# Define the price per pound for jasmine rice\nprice_per_pound_jasmine = 3  # price for jasmine rice in dollars\n\n# Define the amount of jasmine rice bought (1/4 of a pound)\npounds_bought = 0.25  # 1/4 of a pound\n\n# Calculate the total cost\ntotal_cost = price_per_pound_jasmine * pounds_bought\n\n# Store the result in a variable named 'answer'\nanswer = total_cost\n\n# Print the answer in a user-friendly format\nprint(f\"Tucker spends ${answer:.2f} on jasmine rice.\")"], "prediction": [0.75, 0.75, 0.75, 0.75], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Stop signs\" and then answer a question.\n\nStreet | Number of stop signs\nSpring Street | 5\nIrving Street | 10\nJackson Street | 6\nSmith Street | 10\nPeabody Street | 6\nWalker Street | 6\nMarshall Street | 10\nWatson Street | 10", "question": "Read the following table regarding \"Stop signs\" and then write Python code to answer a question.\n\nStreet | Number of stop signs\nSpring Street | 5\nIrving Street | 10\nJackson Street | 6\nSmith Street | 10\nPeabody Street | 6\nWalker Street | 6\nMarshall Street | 10\nWatson Street | 10\n\nThe town council reported on how many stop signs there are on each street. What is the mode of the numbers?", "answer": "10", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of stop signs on each street\nstop_signs = [5, 10, 6, 10, 6, 6, 10, 10]\n# Finding the mode\nfrom statistics import mode\nanswer = mode(stop_signs)\nprint(answer)", "stop_signs = [5, 10, 6, 10, 6, 6, 10, 10]\nfrom statistics import mode\n\n# Calculate the mode and convert it to an integer\nanswer = int(mode(stop_signs))\nprint(answer)", "stop_signs = [5, 10, 6, 10, 6, 6, 10, 10]\nfrom statistics import mode\n\n# Calculate the mode and convert it to an integer\nanswer = int(mode(stop_signs))\nprint(answer)", "stop_signs = [5, 10, 6, 10, 6, 6, 10, 10]\nfrom statistics import mode\nanswer = mode(stop_signs)  # mode already returns an int for integers\nprint(answer)"], "prediction": [10.0, 10.0, 10.0, 10.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nplastic crab | $0.59\nsand castle magnet | $0.80\ntiny bottle of sand | $0.42\nshell necklace | $0.61\npink flamingo pen | $0.42", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nplastic crab | $0.59\nsand castle magnet | $0.80\ntiny bottle of sand | $0.42\nshell necklace | $0.61\npink flamingo pen | $0.42\n\nHow much money does Hugo need to buy a tiny bottle of sand and a plastic crab?", "answer": "1.01", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Prices of the items\nprice_tiny_bottle_of_sand = 0.42\nprice_plastic_crab = 0.59\n# Total cost for both items\ntotal_cost = price_tiny_bottle_of_sand + price_plastic_crab\nanswer = total_cost\nprint(answer)", "# Define the prices of the items\nprice_tiny_bottle_of_sand = 0.42\nprice_plastic_crab = 0.59\n\n# Calculate the total cost\ntotal_cost = price_tiny_bottle_of_sand + price_plastic_crab\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "# Define the prices of the items\nprice_tiny_bottle_of_sand = 0.42\nprice_plastic_crab = 0.59\n\n# Calculate the total cost\ntotal_cost = price_tiny_bottle_of_sand + price_plastic_crab\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "# Prices of items\nprice_tiny_bottle_of_sand = 0.42\nprice_plastic_crab = 0.59\n\n# Calculate total cost\ntotal_cost = price_tiny_bottle_of_sand + price_plastic_crab\n\n# Store result in answer variable\nanswer = total_cost\n\n# Output the answer\nprint(answer)"], "prediction": [1.01, 1.01, 1.01, 1.01], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of shopping bags | Number of pairs of jeans\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | 10\n6 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of shopping bags | Number of pairs of jeans\n1 | 2\n2 | 4\n3 | 6\n4 | 8\n5 | 10\n6 | ?\n\nEach shopping bag has 2 pairs of jeans. How many pairs of jeans are in 6 shopping bags?", "answer": "12", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Each shopping bag contains 2 pairs of jeans\npairs_per_bag = 2\nbags = 6\n# Calculate total pairs of jeans for 6 bags\ntotal_pairs_of_jeans = pairs_per_bag * bags\nanswer = total_pairs_of_jeans\nprint(answer)", "pairs_per_bag = 2\nbags = 6\ntotal_pairs_of_jeans = pairs_per_bag * bags\nanswer = int(total_pairs_of_jeans)  # Convert to integer\nprint(answer)", "pairs_per_bag = 2\nbags = 6\ntotal_pairs_of_jeans = pairs_per_bag * bags\nanswer = total_pairs_of_jeans  # No need to convert to integer as the result is already an integer\nprint(answer)", "pairs_per_bag = 2\nbags = 6\ntotal_pairs_of_jeans = pairs_per_bag * bags\nanswer = int(total_pairs_of_jeans)  # Convert to integer to ensure the result is not a float\nprint(answer)"], "prediction": [12.0, 12.0, 12.0, 12.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Silver beads per bracelet\" and then answer a question.\n\nStem | Leaf \n2 | 1, 2, 4, 8, 9\n3 | 4, 6, 8, 9, 9\n4 | 6, 8, 8\n5 | 1, 6\n6 | 2, 8\n7 | 0, 3, 4, 8, 8\n8 | 5", "question": "Read the following table regarding \"Silver beads per bracelet\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 1, 2, 4, 8, 9\n3 | 4, 6, 8, 9, 9\n4 | 6, 8, 8\n5 | 1, 6\n6 | 2, 8\n7 | 0, 3, 4, 8, 8\n8 | 5\n\nDana counted the number of silver beads on each bracelet at Oakdale Jewelry, the store where she works. What is the largest number of silver beads?", "answer": "85", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number of silver beads corresponds to the largest value in the stem-and-leaf display.\nlargest_bead_count = 85  # From the stem \"8 | 5\", the value is 85 beads.\nanswer = largest_bead_count\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [1, 2, 4, 8, 9]), (3, [4, 6, 8, 9, 9]), (4, [6, 8, 8]), \n                 (5, [1, 6]), (6, [2, 8]), (7, [0, 3, 4, 8, 8]), (8, [5])]  \n\n# Initialize variable to track the largest bead count  \nlargest_bead_count = 0  \n\n# Iterate through the stem and leaf data structure to find the largest bead count  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        bead_count = stem * 10 + leaf  \n        if bead_count > largest_bead_count:  \n            largest_bead_count = bead_count  \n\nanswer = largest_bead_count  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [1, 2, 4, 8, 9]), (3, [4, 6, 8, 9, 9]), (4, [6, 8, 8]), \n                 (5, [1, 6]), (6, [2, 8]), (7, [0, 3, 4, 8, 8]), (8, [5])]  \n\n# Initialize variable to store the largest bead count  \nlargest_bead_count = 0  \n\n# Iterate through the stem and leaf data structure and find the largest bead count  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        bead_count = stem * 10 + leaf  \n        if bead_count > largest_bead_count:  \n            largest_bead_count = bead_count  \n\n# Store the result as an integer  \nanswer = largest_bead_count  \nprint(answer)", "stem_and_leaf = [(2, [1, 2, 4, 8, 9]), (3, [4, 6, 8, 9, 9]), (4, [6, 8, 8]), \n                 (5, [1, 6]), (6, [2, 8]), (7, [0, 3, 4, 8, 8]), (8, [5])]  \nlargest_bead_count = 0  \n\nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        bead_count = stem * 10 + leaf  \n        if bead_count > largest_bead_count:  \n            largest_bead_count = bead_count  \n\nanswer = int(largest_bead_count)  # Ensure the answer is an integer\nprint(answer)"
], "prediction": [85.0, 85.0, 85.0, 85.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Birds per flock\" and then answer a question.\n\nStem | Leaf \n2 | 8\n3 | 4\n4 | 6\n5 | 2, 4, 7", "question": "Read the following table regarding \"Birds per flock\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 8\n3 | 4\n4 | 6\n5 | 2, 4, 7\n\nThe bird watcher counted the number of birds in each flock that passed overhead. How many flocks had fewer than 27 birds?", "answer": "0", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The stem-and-leaf display shows the following counts of birds per flock:\n# Stem 2: 28 (1 flock)\n# Stem 3: 34 (1 flock)\n# Stem 4: 46 (1 flock)\n# Stem 5: 52, 54, 57 (3 flocks)\n# Flocks with fewer than 27 birds: only the one from stem \"2\" which corresponds to 28.\n\nflocks_with_fewer_than_27 = 0  # No flocks have fewer than 27 birds based on the given data.\nanswer = flocks_with_fewer_than_27\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [8]), (3, [4]), (4, [6]), (5, [2, 4, 7])]  \n  \n# Initialize counter for flocks with fewer than 27 birds  \nflocks_with_fewer_than_27 = 0  \n  \n# Iterate through the stem and leaf data structure and count relevant flocks  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        birds_per_flock = stem * 10 + leaf  \n        if birds_per_flock < 27:  \n            flocks_with_fewer_than_27 += 1  \n  \nanswer = flocks_with_fewer_than_27  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [8]), (3, [4]), (4, [6]), (5, [2, 4, 7])]  \n\n# Initialize counter for flocks with fewer than 27 birds  \nflocks_with_fewer_than_27 = 0  \n\n# Iterate through the stem and leaf data structure and count relevant flocks  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        birds_per_flock = stem * 10 + leaf  \n        if birds_per_flock < 27:  \n            flocks_with_fewer_than_27 += 1  \n\nanswer = flocks_with_fewer_than_27  \nprint(answer)", "# Define the stem and leaf data structure\nstem_and_leaf = [(2, [8]), (3, [4]), (4, [6]), (5, [2, 4, 7])]\n\n# Initialize counter for flocks with fewer than 27 birds\nflocks_with_fewer_than_27 = 0\n\n# Iterate through the stem and leaf data structure and count relevant flocks\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        birds_per_flock = stem * 10 + leaf\n        if birds_per_flock < 27:\n            flocks_with_fewer_than_27 += 1\n\n# Store the result in the answer variable\nanswer = flocks_with_fewer_than_27\nprint(answer)"
], "prediction": [0.0, 0.0, 0.0, 0.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nfunnel cake stand | $6,964\nshaved ice cart | $7,649\npopsicle stand | $6,324\npeanut cart | $9,406", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nfunnel cake stand | $6,964\nshaved ice cart | $7,649\npopsicle stand | $6,324\npeanut cart | $9,406\n\nBen has $17,781. Does he have enough to buy a shaved ice cart and a peanut cart? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": ["# Python code, return answer \ncost_shaved_ice_cart = 7649 \ncost_peanut_cart = 9406 \ntotal_cost = cost_shaved_ice_cart + cost_peanut_cart \nben_budget = 17781 \n\n# Determine if Ben has enough money\nif ben_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "cost_shaved_ice_cart = 7649 \ncost_peanut_cart = 9406 \ntotal_cost = cost_shaved_ice_cart + cost_peanut_cart \nben_budget = 17781 \n\nif ben_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "cost_shaved_ice_cart = 7649 \ncost_peanut_cart = 9406 \ntotal_cost = cost_shaved_ice_cart + cost_peanut_cart \nben_budget = 17781 \n\nif ben_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "cost_shaved_ice_cart = 7649 \ncost_peanut_cart = 9406 \ntotal_cost = cost_shaved_ice_cart + cost_peanut_cart \nben_budget = 17781 \n\nanswer = 'yes' if ben_budget >= total_cost else 'no'\nprint(answer)"], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Running miles\" and then answer a question.\n\nName | Miles\nKatie | 14\nClara | 15\nRose | 18\nLeah | 12\nJessica | 14\nWendy | 15\nEdna | 17", "question": "Read the following table regarding \"Running miles\" and then write Python code to answer a question.\n\nName | Miles\nKatie | 14\nClara | 15\nRose | 18\nLeah | 12\nJessica | 14\nWendy | 15\nEdna | 17\n\nThe members of the track team compared how many miles they ran last week. What is the mean of the numbers?", "answer": "15", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of miles run by each member\nmiles = [14, 15, 18, 12, 14, 15, 17]\n# Calculate the mean\nmean_miles = sum(miles) / len(miles)\nanswer = mean_miles\nprint(answer)", "# List of miles run by each team member\nmiles = [14, 15, 18, 12, 14, 15, 17]\n\n# Calculate the mean of the miles\nmean_miles = sum(miles) / len(miles)\n\n# Store the result in the variable 'answer'\nanswer = round(mean_miles, 2)  # rounding to 2 decimal places for clarity\nprint(answer)", "miles = [14, 15, 18, 12, 14, 15, 17]\nmean_miles = sum(miles) / len(miles)\nanswer = round(mean_miles, 2)  # rounding to 2 decimal places for clarity\nprint(answer)", "miles = [14, 15, 18, 12, 14, 15, 17]\nanswer = round(sum(miles) / len(miles), 2)  # Calculate mean and round to 2 decimal places\nprint(answer)"], "prediction": [15.0, 15.0, 15.0, 15.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n7 | 15\n8 | 16\n9 | 17", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n7 | 15\n8 | 16\n9 | 17\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "linear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for constant x differences.\nx_values = [7, 8, 9]\ny_values = [15, 16, 17]\n\n# Calculate the differences\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values) - 1)]\n# If the differences are constant, it's linear\nis_linear = all(diff == differences[0] for diff in differences)\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values\nx_values = [7, 8, 9]\ny_values = [15, 16, 17]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values) - 1)]\n\n# Check if all differences are the same\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values based on the given table\nx_values = [7, 8, 9]\ny_values = [15, 16, 17]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i + 1] - y_values[i] for i in range(len(y_values) - 1)]\n\n# Check if all differences are equal to determine if the function is linear\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Set the answer based on whether the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\n\nprint(answer)", "x_values = [7, 8, 9]\ny_values = [15, 16, 17]\n\n# Calculate the differences between consecutive y-values\ndifferences = [y_values[i + 1] - y_values[i] for i in range(len(y_values) - 1)]\n\n# Check if all differences are the same\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Assign the result to answer\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")"]
}
{
  "context": "Read the following table regarding \"Chocolate candies in bowl\" and then answer a question.\n\nColor | Frequency\nred | 7\norange | 12\nyellow | 8\ngreen | 11\nblue | 13\nbrown | 7", "question": "Read the following table regarding \"Chocolate candies in bowl\" and then write Python code to answer a question.\n\nColor | Frequency\nred | 7\norange | 12\nyellow | 8\ngreen | 11\nblue | 13\nbrown | 7\n\nDiana bought a bag of colored chocolate candies. Before putting them into a bowl, she counted the number of candies of each color in a frequency chart. Diana then puts another bag of 56 black and white chocolate candies into a second bowl. How many candies are in both bowls combined?", "answer": "114", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total chocolates of each color\ntotal_chocolates = 7 + 12 + 8 + 11 + 13 + 7\n# Additional chocolates from the second bowl\nadditional_chocolates = 56\n# Total chocolates in both bowls\ncombined_total = total_chocolates + additional_chocolates\nanswer = combined_total\nprint(answer)", "# Define the frequency of each color of chocolate candies\nred = 7\norange = 12\nyellow = 8\ngreen = 11\nblue = 13\nbrown = 7\n\n# Calculate the total number of colored candies\ntotal_chocolates = red + orange + yellow + green + blue + brown\n\n# Define the number of additional candies\nadditional_chocolates = 56\n\n# Calculate the combined total of candies in both bowls\ncombined_total = total_chocolates + additional_chocolates\n\n# Store the result in the variable 'answer'\nanswer = combined_total\n\n# Print the answer\nprint(answer)", "# Define the frequency of each color of chocolate candies\nred = 7\norange = 12\nyellow = 8\ngreen = 11\nblue = 13\nbrown = 7\n\n# Calculate the total number of colored chocolates\ntotal_chocolates = red + orange + yellow + green + blue + brown\n\n# Additional black and white candies\nadditional_chocolates = 56\n\n# Calculate the combined total of candies in both bowls\ncombined_total = total_chocolates + additional_chocolates\n\n# Store the result in the variable 'answer'\nanswer = combined_total\n\n# Output the result\nprint(answer)", "red = 7\norange = 12\nyellow = 8\ngreen = 11\nblue = 13\nbrown = 7\ntotal_chocolates = red + orange + yellow + green + blue + brown\nadditional_chocolates = 56\ncombined_total = total_chocolates + additional_chocolates\nanswer = combined_total  # This will be an integer\nprint(answer)"
], "prediction": [114.0, 114.0, 114.0, 114.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nEuropean vacation package | $7,668\nAfrican safari vacation package | $4,813\nJamaican vacation package | $7,039\nAustralian vacation package | $9,664\nHawaiian vacation package | $4,383", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nEuropean vacation package | $7,668\nAfrican safari vacation package | $4,813\nJamaican vacation package | $7,039\nAustralian vacation package | $9,664\nHawaiian vacation package | $4,383\n\nHow much more does an Australian vacation package cost than a Jamaican vacation package?", "answer": "2,625", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \naustralian_vacation_cost = 9664 \njamaican_vacation_cost = 7039 \n# Calculate the difference in cost\ndifference_cost = australian_vacation_cost - jamaican_vacation_cost\nanswer = difference_cost\nprint(answer)", "australian_vacation_cost = 9664 \njamaican_vacation_cost = 7039 \ndifference_cost = australian_vacation_cost - jamaican_vacation_cost\nanswer = float(difference_cost)  # Ensure answer is a float\nprint(answer)", "australian_vacation_cost = 9664 \njamaican_vacation_cost = 7039 \ndifference_cost = australian_vacation_cost - jamaican_vacation_cost\nanswer = difference_cost  # No need to convert to float\nprint(answer)", "australian_vacation_cost = 9664 \njamaican_vacation_cost = 7039 \ndifference_cost = australian_vacation_cost - jamaican_vacation_cost\nanswer = difference_cost  # This will be an integer\nprint(answer)"], "prediction": [2625.0, 2625.0, 2625.0, 2625.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Number of books sold\" and then answer a question.\n\nMonth | Number of books\nApril | 797\nMay | 796\nJune | 769\nJuly | 776", "question": "Read the following table regarding \"Number of books sold\" and then write Python code to answer a question.\n\nMonth | Number of books\nApril | 797\nMay | 796\nJune | 769\nJuly | 776\n\nA bookstore employee looked up how many books were sold each month. In which month did the bookstore sell the fewest books? Choose from the the options: ['April', 'May', 'June', 'July']", "answer": "June", "ques_type": "multi_choice", "choices": ["April", "May", "June", "July"], "code": ["# Python code, return answer \nbooks_sold = {\n    'April': 797,\n    'May': 796,\n    'June': 769,\n    'July': 776\n}\n# Find the month with the fewest books sold\nfewest_books_month = min(books_sold, key=books_sold.get)\nanswer = fewest_books_month\nprint(answer)", "# Store the number of books sold each month in a dictionary\nbooks_sold = {\n    'April': 797,\n    'May': 796,\n    'June': 769,\n    'July': 776\n}\n\n# Find the month with the fewest books sold\nfewest_books_month = min(books_sold, key=books_sold.get)\nanswer = fewest_books_month\n\nprint(answer)", "# Store the number of books sold each month in a dictionary\nbooks_sold = {\n    'April': 797,\n    'May': 796,\n    'June': 769,\n    'July': 776\n}\n\n# Find the month with the fewest books sold\nfewest_books_month = min(books_sold, key=books_sold.get)\n\n# Store the result in the variable 'answer'\nanswer = fewest_books_month\n\n# Output the answer\nprint(answer)", "books_sold = {\n    'April': 797,\n    'May': 796,\n    'June': 769,\n    'July': 776\n}\nfewest_books_month = min(books_sold, key=books_sold.get)\nanswer = fewest_books_month  # Store the month with the fewest books sold\nprint(answer)"], "prediction": ["June", "June", "June", "June"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nchocolate pudding | $3.05/pound\nrice pudding | $4.68/pound\ntapioca pudding | $4.42/pound\nvanilla pudding | $6.92/pound\nbutterscotch pudding | $2.68/pound", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nchocolate pudding | $3.05/pound\nrice pudding | $4.68/pound\ntapioca pudding | $4.42/pound\nvanilla pudding | $6.92/pound\nbutterscotch pudding | $2.68/pound\n\nGwen wants to buy 3 pounds of tapioca pudding. How much will she spend?", "answer": "13.26", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_tapioca = 4.42  # Price of tapioca pudding\npounds_bought = 3  # Amount of pudding Gwen wants to buy\n# Calculate total cost\ntotal_cost = price_per_pound_tapioca * pounds_bought\nanswer = total_cost\nprint(answer)", "# Price of tapioca pudding per pound\nprice_per_pound_tapioca = 4.42  \n# Amount of pudding Gwen wants to buy\npounds_bought = 3  \n# Calculate total cost\ntotal_cost = price_per_pound_tapioca * pounds_bought  \n# Store the result in the variable 'answer'\nanswer = total_cost  \n# Print the answer\nprint(answer)", "# Define the price per pound for tapioca pudding  \nprice_per_pound_tapioca = 4.42  \n# Define the number of pounds Gwen wants to buy  \npounds_bought = 3  \n# Calculate the total cost  \ntotal_cost = price_per_pound_tapioca * pounds_bought  \n# Store the result in the answer variable  \nanswer = total_cost  \nprint(answer)", "# Define the price per pound of tapioca pudding  \nprice_per_pound_tapioca = 4.42  \n# Define the number of pounds Gwen wants to buy  \npounds_bought = 3  \n# Calculate the total cost  \ntotal_cost = price_per_pound_tapioca * pounds_bought  \n# Store the result in the variable 'answer'  \nanswer = total_cost  \nprint(answer)"], "prediction": [13.26, 13.26, 13.26, 13.26], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of restaurant tables | Number of salt shakers\n1 | 2\n2 | 4\n3 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of restaurant tables | Number of salt shakers\n1 | 2\n2 | 4\n3 | ?\n\nEach restaurant table has 2 salt shakers. How many salt shakers are on 3 restaurant tables?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \ntables = 3 \nsalt_shakers_per_table = 2 \n# Calculate total salt shakers for the given number of tables\ntotal_salt_shakers = tables * salt_shakers_per_table\nanswer = total_salt_shakers\nprint(answer)", "tables = 3 \nsalt_shakers_per_table = 2 \ntotal_salt_shakers = tables * salt_shakers_per_table\nanswer = int(total_salt_shakers)  # Convert to integer\nprint(answer)", "tables = 3 \nsalt_shakers_per_table = 2 \ntotal_salt_shakers = tables * salt_shakers_per_table\nanswer = total_salt_shakers  # No need to convert to integer since the multiplication results in an integer\nprint(answer)", "tables = 3 \nsalt_shakers_per_table = 2 \ntotal_salt_shakers = tables * salt_shakers_per_table\nanswer = int(total_salt_shakers)  # Convert to integer for clarity\nprint(answer)"], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of shelves | Number of belts\n1 | 5\n2 | 10\n3 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of shelves | Number of belts\n1 | 5\n2 | 10\n3 | ?\n\nEach shelf has 5 belts. How many belts are on 3 shelves?", "answer": "15", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nbelts_per_shelf = 5 \nnumber_of_shelves = 3 \n# Calculate the total number of belts on 3 shelves\ntotal_belts = belts_per_shelf * number_of_shelves\nanswer = total_belts\nprint(answer)", "belts_per_shelf = 5 \nnumber_of_shelves = 3 \ntotal_belts = belts_per_shelf * number_of_shelves\nanswer = int(total_belts)  # Convert to integer\nprint(answer)", "belts_per_shelf = 5 \nnumber_of_shelves = 3 \ntotal_belts = belts_per_shelf * number_of_shelves\nanswer = total_belts  # No need to convert to integer, as it's already an integer\nprint(answer)", "belts_per_shelf = 5 \nnumber_of_shelves = 3 \ntotal_belts = belts_per_shelf * number_of_shelves\nanswer = int(total_belts)  # Convert the result to an integer\nprint(answer)"], "prediction": [15.0, 15.0, 15.0, 15.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nMixture | Temperature (\u00b0C)\nBromine mixture | -4\nAcetone mixture | 5", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nMixture | Temperature (\u00b0C)\nBromine mixture | -4\nAcetone mixture | 5\n\nIn science class, Trisha is measuring the temperature of different chemical mixtures. The temperatures of two mixtures are shown in the table. Which mixture's temperature is closest to zero? Choose from the the options: ['bromine mixture', 'acetone mixture']", "answer": "bromine mixture", "ques_type": "multi_choice", "choices": ["bromine mixture", "acetone mixture"], "code": [
  "# Python code, return answer \nbromine_temp = -4 \nacetone_temp = 5 \n\n# Calculate the absolute distances to zero\ndistance_bromine = abs(bromine_temp)\ndistance_acetone = abs(acetone_temp)\n\n# Determine which mixture is closest to zero\nif distance_bromine < distance_acetone:\n    answer = 'bromine mixture'\nelse:\n    answer = 'acetone mixture'\n\nprint(answer)", "bromine_temp = -4 \nacetone_temp = 5 \n\n# Calculate the absolute distances from zero\ndistance_bromine = abs(bromine_temp)\ndistance_acetone = abs(acetone_temp)\n\n# Determine which mixture is closest to zero\nif distance_bromine < distance_acetone:\n    answer = 'bromine mixture'\nelse:\n    answer = 'acetone mixture'\n\nprint(answer)", "bromine_temp = -4 \nacetone_temp = 5 \n\n# Calculate absolute distances from zero\ndistance_bromine = abs(bromine_temp)\ndistance_acetone = abs(acetone_temp)\n\n# Determine which mixture's temperature is closest to zero\nif distance_bromine < distance_acetone:\n    answer = 'bromine mixture'\nelse:\n    answer = 'acetone mixture'\n\nprint(answer)", "bromine_temp = -4 \nacetone_temp = 5 \n\n# Calculate the absolute distances from zero\ndistance_bromine = abs(bromine_temp)\ndistance_acetone = abs(acetone_temp)\n\n# Determine which mixture is closest to zero\nif distance_bromine < distance_acetone:\n    answer = 'bromine mixture'\nelse:\n    answer = 'acetone mixture'\n\n# Output the answer\nprint(answer)"
], "prediction": ["bromine mixture", "bromine mixture", "bromine mixture", "bromine mixture"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Split pea | Chicken noodle\nCup | 3 | 6\nBowl | 5 | 3", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Split pea | Chicken noodle\nCup | 3 | 6\nBowl | 5 | 3\n\nEdna, a soup chef at a new restaurant, kept track of the first week's soup sales. What is the probability that a randomly selected soup was ordered in a cup and was split pea? Simplify any fractions.", "answer": "3/17", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total sales of each type of soup in cups and bowls\nsplit_pea_cup = 3\nchicken_noodle_cup = 6\nsplit_pea_bowl = 5\nchicken_noodle_bowl = 3\n\n# Total soup sales\ntotal_cups = split_pea_cup + chicken_noodle_cup\ntotal_bowls = split_pea_bowl + chicken_noodle_bowl\ntotal_soups = total_cups + total_bowls\n\n# Probability of selecting a cup of split pea soup\nprobability_split_pea_cup = split_pea_cup / total_soups\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(split_pea_cup, total_soups).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Define the number of soups ordered\nsplit_pea_cup = 3\nchicken_noodle_cup = 6\nsplit_pea_bowl = 5\nchicken_noodle_bowl = 3\n\n# Calculate total soups\ntotal_cups = split_pea_cup + chicken_noodle_cup\ntotal_bowls = split_pea_bowl + chicken_noodle_bowl\ntotal_soups = total_cups + total_bowls\n\n# Calculate the probability of selecting a cup of split pea soup\nprobability_split_pea_cup = split_pea_cup / total_soups\n\n# Simplify the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(split_pea_cup, total_soups).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = simplified_probability\nprint(answer)", "# Define the number of soups sold\nsplit_pea_cup = 3\nchicken_noodle_cup = 6\nsplit_pea_bowl = 5\nchicken_noodle_bowl = 3\n\n# Calculate total soups sold\ntotal_cups = split_pea_cup + chicken_noodle_cup\ntotal_bowls = split_pea_bowl + chicken_noodle_bowl\ntotal_soups = total_cups + total_bowls\n\n# Calculate the probability of selecting a cup of split pea soup\nprobability_split_pea_cup = split_pea_cup / total_soups\n\n# Simplify the probability using fractions\nfrom fractions import Fraction\nsimplified_probability = Fraction(split_pea_cup, total_soups).limit_denominator()\n\n# Store the simplified probability in the answer variable\nanswer = simplified_probability\nprint(answer)", "# Define the number of soups sold in cups and bowls\nsplit_pea_cup = 3\nchicken_noodle_cup = 6\nsplit_pea_bowl = 5\nchicken_noodle_bowl = 3\n\n# Calculate total soups sold\ntotal_cups = split_pea_cup + chicken_noodle_cup\ntotal_bowls = split_pea_bowl + chicken_noodle_bowl\ntotal_soups = total_cups + total_bowls\n\n# Calculate the probability of selecting a cup of split pea soup\nfrom fractions import Fraction\nprobability_split_pea_cup = Fraction(split_pea_cup, total_soups).limit_denominator()\n\n# Store the result in the answer variable\nanswer = probability_split_pea_cup\nprint(answer)"
], "prediction": [0.17647, 0.17647, 0.17647, 0.17647], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Spinning a wheel numbered 0 through 5\" and then answer a question.\n\nNumber spun | Frequency\n0 | 0\n1 | 11\n2 | 3\n3 | 15\n4 | 4\n5 | 6", "question": "Read the following table regarding \"Spinning a wheel numbered 0 through 5\" and then write Python code to answer a question.\n\nNumber spun | Frequency\n0 | 0\n1 | 11\n2 | 3\n3 | 15\n4 | 4\n5 | 6\n\nFor a math assignment, students noted the number of times a wheel landed on the numbers 0 through 5. How many students spun 4?", "answer": "4", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# The frequency of the number 4 being spun\nfrequency_spun_4 = 4\nanswer = frequency_spun_4\nprint(answer)", "# Define the frequency of each number spun\nfrequency = {\n    0: 0,\n    1: 11,\n    2: 3,\n    3: 15,\n    4: 4,\n    5: 6\n}\n\n# Get the frequency of spins for the number 4\nstudents_spun_4 = frequency[4]\nanswer = students_spun_4\nprint(answer)", "frequency = {\n    0: 0,\n    1: 11,\n    2: 3,\n    3: 15,\n    4: 4,\n    5: 6\n}\nstudents_spun_4 = frequency[4]\nanswer = int(students_spun_4)  # Ensuring the output is an integer\nprint(answer)", "frequency = {\n    0: 0,\n    1: 11,\n    2: 3,\n    3: 15,\n    4: 4,\n    5: 6\n}\nstudents_spun_4 = frequency[4]\nanswer = students_spun_4  # No need to cast to int, it's already an integer\nprint(answer)"], "prediction": [4.0, 4.0, 4.0, 4.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Ferry schedule\" and then answer a question.\n\nBay Harbor | 7:00 A.M. | 7:15 A.M. | 7:30 A.M. | 7:45 A.M. | 8:00 A.M.\nSandy Shores | 8:30 A.M. | 8:45 A.M. | 9:00 A.M. | 9:15 A.M. | 9:30 A.M.\nSeagull Port | 10:15 A.M. | 10:30 A.M. | 10:45 A.M. | 11:00 A.M. | 11:15 A.M.\nCliff View | 12:00 P.M. | 12:15 P.M. | 12:30 P.M. | 12:45 P.M. | 1:00 P.M.\nGreen Harbor | 1:45 P.M. | 2:00 P.M. | 2:15 P.M. | 2:30 P.M. | 2:45 P.M.\nWindy Sands | 3:15 P.M. | 3:30 P.M. | 3:45 P.M. | 4:00 P.M. | 4:15 P.M.\nFoggy Port | 5:00 P.M. | 5:15 P.M. | 5:30 P.M. | 5:45 P.M. | 6:00 P.M.", "question": "Read the following table regarding \"Ferry schedule\" and then write Python code to answer a question.\n\nBay Harbor | 7:00 A.M. | 7:15 A.M. | 7:30 A.M. | 7:45 A.M. | 8:00 A.M.\nSandy Shores | 8:30 A.M. | 8:45 A.M. | 9:00 A.M. | 9:15 A.M. | 9:30 A.M.\nSeagull Port | 10:15 A.M. | 10:30 A.M. | 10:45 A.M. | 11:00 A.M. | 11:15 A.M.\nCliff View | 12:00 P.M. | 12:15 P.M. | 12:30 P.M. | 12:45 P.M. | 1:00 P.M.\nGreen Harbor | 1:45 P.M. | 2:00 P.M. | 2:15 P.M. | 2:30 P.M. | 2:45 P.M.\nWindy Sands | 3:15 P.M. | 3:30 P.M. | 3:45 P.M. | 4:00 P.M. | 4:15 P.M.\nFoggy Port | 5:00 P.M. | 5:15 P.M. | 5:30 P.M. | 5:45 P.M. | 6:00 P.M.\n\nLook at the following schedule. Betty got on the ferry at Windy Sands at 4.00 P.M. What time will she get to Foggy Port? Choose from the the options: ['5:00 P.M.', '8:00 A.M.', '5:15 P.M.', '5:45 P.M.']", "answer": "5:45 P.M.", "ques_type": "multi_choice", "choices": ["5:00 P.M.", "8:00 A.M.", "5:15 P.M.", "5:45 P.M."], "code": [
  "# Python code, return answer \n# The ferry schedule shows that the departure from Windy Sands is at 4:00 P.M.\n# The next scheduled arrival at Foggy Port after this time is at 5:00 P.M.\nanswer = '5:00 P.M.'\nprint(answer)", "# Define the ferry schedule\nferry_schedule = {\n    'Windy Sands': ['3:15 P.M.', '3:30 P.M.', '3:45 P.M.', '4:00 P.M.', '4:15 P.M.'],\n    'Foggy Port': ['5:00 P.M.', '5:15 P.M.', '5:30 P.M.', '5:45 P.M.', '6:00 P.M.']\n}\n\n# Betty got on the ferry at Windy Sands at 4:00 P.M.\n# The next ferry from Windy Sands after 4:00 P.M. is at 4:15 P.M.\n# The ferry schedule shows that it arrives at Foggy Port at 5:00 P.M.\n\n# The correct answer is:\nanswer = '5:00 P.M.'\nprint(answer)", "# Define the ferry schedule\nferry_schedule = {\n    'Windy Sands': ['3:15 P.M.', '3:30 P.M.', '3:45 P.M.', '4:00 P.M.', '4:15 P.M.'],\n    'Foggy Port': ['5:00 P.M.', '5:15 P.M.', '5:30 P.M.', '5:45 P.M.', '6:00 P.M.']\n}\n\n# Determine the next available ferry from Windy Sands after 4:00 P.M.\ndeparture_times = ferry_schedule['Windy Sands']\nnext_departure = None\n\nfor time in departure_times:\n    if time == '4:00 P.M.':\n        next_departure = time\n        break\n\n# Assuming the ferry takes a certain time to travel, we know the first arrival time at Foggy Port after the departure\narrival_times = ferry_schedule['Foggy Port']\narrival_time_index = 0  # Starting with the first arrival time\n\n# Since she boards at 4:00 P.M., the first available arrival time would be the first time listed\nanswer = arrival_times[arrival_time_index]\n\nprint(answer)", "# Define the ferry schedule as a dictionary\nferry_schedule = {\n    'Windy Sands': ['3:15 P.M.', '3:30 P.M.', '3:45 P.M.', '4:00 P.M.', '4:15 P.M.'],\n    'Foggy Port': ['5:00 P.M.', '5:15 P.M.', '5:30 P.M.', '5:45 P.M.', '6:00 P.M.']\n}\n\n# Betty's departure time from Windy Sands\nbetty_departure_time = '4:00 P.M.'\n\n# Find the next available departure time from Windy Sands after 4:00 P.M.\ndeparture_times = ferry_schedule['Windy Sands']\nnext_departure = None\n\nfor time in departure_times:\n    if time == betty_departure_time:\n        next_departure = time\n        break\n\n# Since Betty departs at 4:00 P.M., we need to find the corresponding arrival time at Foggy Port\n# Assuming the ferry from Windy Sands to Foggy Port departs immediately after she boards\n# We will check the departure times list to find the index of the next departure\nnext_departure_index = departure_times.index(next_departure)\narrival_time_index = next_departure_index  # Assuming the ferry takes the same index for arrival\n\n# Get the arrival time at Foggy Port\narrival_times = ferry_schedule['Foggy Port']\nanswer = arrival_times[arrival_time_index]\n\nprint(answer)"
], "prediction": ["5:00 P.M.", "5:00 P.M.", "5:00 P.M.", "5:45 P.M."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Bull's-eyes\" and then answer a question.\n\nDay | Number of bull's-eyes\nThursday | 8\nFriday | 8\nSaturday | 3\nSunday | 9\nMonday | 6\nTuesday | 6\nWednesday | 4", "question": "Read the following table regarding \"Bull's-eyes\" and then write Python code to answer a question.\n\nDay | Number of bull's-eyes\nThursday | 8\nFriday | 8\nSaturday | 3\nSunday | 9\nMonday | 6\nTuesday | 6\nWednesday | 4\n\nAn archer recalled how many times he hit the bull's-eye in the past 7 days. What is the median of the numbers?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nbull_eyes = [8, 8, 3, 9, 6, 6, 4]\n# Sort the numbers to find the median\nbull_eyes.sort()\n# Calculate the median\nn = len(bull_eyes)\nif n % 2 == 0:\n    median = (bull_eyes[n//2 - 1] + bull_eyes[n//2]) / 2\nelse:\n    median = bull_eyes[n//2]\nanswer = median\nprint(answer)", "bull_eyes = [8, 8, 3, 9, 6, 6, 4]\nbull_eyes.sort()\nn = len(bull_eyes)\nif n % 2 == 0:\n    median = (bull_eyes[n//2 - 1] + bull_eyes[n//2]) / 2\nelse:\n    median = bull_eyes[n//2]\nanswer = median  # Store the result in the variable 'answer'\nprint(answer)", "bull_eyes = [8, 8, 3, 9, 6, 6, 4]\nbull_eyes.sort()\nn = len(bull_eyes)\nif n % 2 == 0:\n    median = (bull_eyes[n//2 - 1] + bull_eyes[n//2]) / 2\nelse:\n    median = bull_eyes[n//2]\nanswer = median  # Store the result in the variable 'answer'\nprint(answer)", "bull_eyes = [8, 8, 3, 9, 6, 6, 4]\nbull_eyes.sort()\nn = len(bull_eyes)\nanswer = (bull_eyes[n//2 - 1] + bull_eyes[n//2]) / 2 if n % 2 == 0 else bull_eyes[n//2]\nprint(answer)"], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nCavendish bananas | $0.98/kilogram\nplantains | $0.98/kilogram\npink bananas | $1.09/kilogram\nbananitos | $0.49/kilogram\nred bananas | $0.65/kilogram", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nCavendish bananas | $0.98/kilogram\nplantains | $0.98/kilogram\npink bananas | $1.09/kilogram\nbananitos | $0.49/kilogram\nred bananas | $0.65/kilogram\n\nRita wants to buy 1 kilogram of Cavendish bananas, 3 kilograms of pink bananas, and 3 kilograms of red bananas. How much will she spend?", "answer": "6.20", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices per kilogram\nprice_cavendish = 0.98\nprice_pink_bananas = 1.09\nprice_red_bananas = 0.65\n\n# Quantity\nquantity_cavendish = 1\nquantity_pink_bananas = 3\nquantity_red_bananas = 3\n\n# Calculate total cost\ntotal_cost = (price_cavendish * quantity_cavendish) + \\\n              (price_pink_bananas * quantity_pink_bananas) + \\\n              (price_red_bananas * quantity_red_bananas)\n\nanswer = total_cost\nprint(answer)", "price_cavendish = 0.98\nprice_pink_bananas = 1.09\nprice_red_bananas = 0.65\nquantity_cavendish = 1\nquantity_pink_bananas = 3\nquantity_red_bananas = 3\n\ntotal_cost = (price_cavendish * quantity_cavendish) + \\\n              (price_pink_bananas * quantity_pink_bananas) + \\\n              (price_red_bananas * quantity_red_bananas)\n\nanswer = round(total_cost, 2)  # Format the answer to two decimal places\nprint(answer)", "# Prices of the bananas per kilogram\nprice_cavendish = 0.98\nprice_pink_bananas = 1.09\nprice_red_bananas = 0.65\n\n# Quantities in kilograms\nquantity_cavendish = 1\nquantity_pink_bananas = 3\nquantity_red_bananas = 3\n\n# Calculate total cost\ntotal_cost = (price_cavendish * quantity_cavendish) + \\\n              (price_pink_bananas * quantity_pink_bananas) + \\\n              (price_red_bananas * quantity_red_bananas)\n\n# Store the result in the variable 'answer' and round to two decimal places\nanswer = round(total_cost, 2)\n\n# Print the answer\nprint(answer)", "# Define the prices of the bananas\nprice_cavendish = 0.98\nprice_pink_bananas = 1.09\nprice_red_bananas = 0.65\n\n# Define the quantities of each type of banana\nquantity_cavendish = 1\nquantity_pink_bananas = 3\nquantity_red_bananas = 3\n\n# Calculate the total cost\ntotal_cost = (price_cavendish * quantity_cavendish) + \\\n              (price_pink_bananas * quantity_pink_bananas) + \\\n              (price_red_bananas * quantity_red_bananas)\n\n# Round the total cost to two decimal places\nanswer = round(total_cost, 2)\n\n# Print the answer\nprint(answer)"
], "prediction": [6.2, 6.2, 6.2, 6.2], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n16 | 18\n17 | 11\n18 | 8", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n16 | 18\n17 | 11\n18 | 8\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "nonlinear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for equal intervals of x-values.\nx_values = [16, 17, 18]\ny_values = [18, 11, 8]\n\n# Calculate the differences\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n# Check if the differences are constant\nis_linear = all(difference == differences[0] for difference in differences)\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values\nx_values = [16, 17, 18]\ny_values = [18, 11, 8]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if all differences are the same to determine linearity\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Assign the answer based on the linearity check\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values from the table\nx_values = [16, 17, 18]\ny_values = [18, 11, 8]\n\n# Calculate the differences in y and x values\ny_differences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\nx_differences = [x_values[i+1] - x_values[i] for i in range(len(x_values)-1)]\n\n# Check if the slope (difference in y over difference in x) is constant\nslopes = [y_differences[i] / x_differences[i] for i in range(len(y_differences))]\n\n# Determine if the function is linear\nis_linear = all(slope == slopes[0] for slope in slopes)\nanswer = 'linear' if is_linear else 'nonlinear'\n\nprint(answer)", "# Define the x and y values\nx_values = [16, 17, 18]\ny_values = [18, 11, 8]\n\n# Calculate the differences in y-values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if the differences are constant\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'slopes' is not defined\")", "NameError(\"name 'differences' is not defined\")"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ncucumber | $1.30\npumpkin | $7.38\nwatermelon | $4.86\ngrapefruit | $1.20\nred pepper | $1.25", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ncucumber | $1.30\npumpkin | $7.38\nwatermelon | $4.86\ngrapefruit | $1.20\nred pepper | $1.25\n\nRuben has $8.50. Does he have enough to buy a red pepper and a pumpkin? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# Prices of red pepper and pumpkin\nprice_red_pepper = 1.25\nprice_pumpkin = 7.38\n# Total cost for both\ntotal_cost = price_red_pepper + price_pumpkin\n# Ruben's available amount\nruben_money = 8.50\n# Determine if Ruben has enough money\nif ruben_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "# Prices of the items\nprice_red_pepper = 1.25\nprice_pumpkin = 7.38\n\n# Total cost of red pepper and pumpkin\ntotal_cost = price_red_pepper + price_pumpkin\n\n# Ruben's available money\nruben_money = 8.50\n\n# Check if Ruben has enough money\nif ruben_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the prices of the items  \nprice_red_pepper = 1.25  \nprice_pumpkin = 7.38  \n\n# Calculate the total cost  \ntotal_cost = price_red_pepper + price_pumpkin  \n\n# Amount of money Ruben has  \nruben_money = 8.50  \n\n# Determine if Ruben has enough money  \nif ruben_money >= total_cost:  \n    answer = 'yes'  \nelse:  \n    answer = 'no'  \n\nprint(answer)", "# Define the prices of the items\nprice_red_pepper = 1.25  \nprice_pumpkin = 7.38  \n\n# Calculate the total cost\ntotal_cost = price_red_pepper + price_pumpkin  \n\n# Amount of money Ruben has\nruben_money = 8.50  \n\n# Check if Ruben has enough money and assign the answer\nif ruben_money >= total_cost:  \n    answer = 'yes'  \nelse:  \n    answer = 'no'  \n\nprint(answer)"
], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Light rail train schedule\" and then answer a question.\n\nLocation | Time\nlibrary | 10:30 A.M.\nsoccer field | 10:35 A.M.\ntown square | 10:55 A.M.\nuniversity | 11:20 A.M.\ngrocery store | 11:40 A.M.\nswimming pool | 12:10 P.M.\nbaseball stadium | 12:30 P.M.\nart museum | 12:35 P.M.\nshopping mall | 12:55 P.M.\nscience museum | 1:10 P.M.", "question": "Read the following table regarding \"Light rail train schedule\" and then write Python code to answer a question.\n\nLocation | Time\nlibrary | 10:30 A.M.\nsoccer field | 10:35 A.M.\ntown square | 10:55 A.M.\nuniversity | 11:20 A.M.\ngrocery store | 11:40 A.M.\nswimming pool | 12:10 P.M.\nbaseball stadium | 12:30 P.M.\nart museum | 12:35 P.M.\nshopping mall | 12:55 P.M.\nscience museum | 1:10 P.M.\n\nLook at the following schedule. At which stop does the train arrive at 12.30 P.M.? Choose from the the options: ['shopping mall', 'science museum', 'art museum', 'baseball stadium']", "answer": "baseball stadium", "ques_type": "multi_choice", "choices": ["shopping mall", "science museum", "art museum", "baseball stadium"], "code": [
  "# Python code, return answer \n# Defining the schedule in a dictionary\nschedule = {\n    'library': '10:30 A.M.',\n    'soccer field': '10:35 A.M.',\n    'town square': '10:55 A.M.',\n    'university': '11:20 A.M.',\n    'grocery store': '11:40 A.M.',\n    'swimming pool': '12:10 P.M.',\n    'baseball stadium': '12:30 P.M.',\n    'art museum': '12:35 P.M.',\n    'shopping mall': '12:55 P.M.',\n    'science museum': '1:10 P.M.'\n}\n\n# Finding the location with the specified arrival time\narrival_time = '12:30 P.M.'\nfor location, time in schedule.items():\n    if time == arrival_time:\n        answer = location\nprint(answer)", "# Define the train schedule as a dictionary\nschedule = {\n    'library': '10:30 A.M.',\n    'soccer field': '10:35 A.M.',\n    'town square': '10:55 A.M.',\n    'university': '11:20 A.M.',\n    'grocery store': '11:40 A.M.',\n    'swimming pool': '12:10 P.M.',\n    'baseball stadium': '12:30 P.M.',\n    'art museum': '12:35 P.M.',\n    'shopping mall': '12:55 P.M.',\n    'science museum': '1:10 P.M.'\n}\n\n# Specify the arrival time to search for\narrival_time = '12:30 P.M.'\n\n# Find the location where the train arrives at the specified time\nanswer = next(location for location, time in schedule.items() if time == arrival_time)\n\nprint(answer)", "schedule = {\n    'library': '10:30 A.M.',\n    'soccer field': '10:35 A.M.',\n    'town square': '10:55 A.M.',\n    'university': '11:20 A.M.',\n    'grocery store': '11:40 A.M.',\n    'swimming pool': '12:10 P.M.',\n    'baseball stadium': '12:30 P.M.',\n    'art museum': '12:35 P.M.',\n    'shopping mall': '12:55 P.M.',\n    'science museum': '1:10 P.M.'\n}\n\narrival_time = '12:30 P.M.'\nanswer = [location for location, time in schedule.items() if time == arrival_time][0]\nprint(answer)", "schedule = {\n    'library': '10:30 A.M.',\n    'soccer field': '10:35 A.M.',\n    'town square': '10:55 A.M.',\n    'university': '11:20 A.M.',\n    'grocery store': '11:40 A.M.',\n    'swimming pool': '12:10 P.M.',\n    'baseball stadium': '12:30 P.M.',\n    'art museum': '12:35 P.M.',\n    'shopping mall': '12:55 P.M.',\n    'science museum': '1:10 P.M.'\n}\n\narrival_time = '12:30 P.M.'\nmatching_locations = [location for location, time in schedule.items() if time == arrival_time]\n\nif matching_locations:\n    answer = matching_locations[0]\nelse:\n    answer = None  # or handle the case when no location matches\n\nprint(answer)"
], "prediction": ["baseball stadium", null, "baseball stadium", "baseball stadium"], "report": ["Done", "NameError(\"name 'arrival_time' is not defined\")", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Sweatshirts\" and then answer a question.\n\nNumber of sweatshirts | Frequency\n0 | 10\n1 | 12\n2 | 19\n3 | 11", "question": "Read the following table regarding \"Sweatshirts\" and then write Python code to answer a question.\n\nNumber of sweatshirts | Frequency\n0 | 10\n1 | 12\n2 | 19\n3 | 11\n\nThe Cedarburg Middle School fundraising committee found out how many sweatshirts students already had, in order to decide whether to sell sweatshirts for a fundraiser. How many students have at least 2 sweatshirts?", "answer": "30", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of students with at least 2 sweatshirts\nfrequency_at_least_2 = 19 + 11  # Students with 2 or more sweatshirts\nanswer = frequency_at_least_2\nprint(answer)", "frequency_at_least_2 = 19 + 11  # Students with 2 or more sweatshirts\nanswer = frequency_at_least_2\nprint(answer)  # This will output 30 as an integer", "# Define the frequency of students with different numbers of sweatshirts\nfrequency = {\n    0: 10,\n    1: 12,\n    2: 19,\n    3: 11\n}\n\n# Calculate the number of students with at least 2 sweatshirts\nfrequency_at_least_2 = frequency[2] + frequency[3]  # Students with 2 or more sweatshirts\nanswer = frequency_at_least_2\nprint(answer)  # This will output 30 as an integer", "frequency = {\n    0: 10,\n    1: 12,\n    2: 19,\n    3: 11\n}\nfrequency_at_least_2 = frequency[2] + frequency[3]  # Students with 2 or more sweatshirts\nanswer = int(frequency_at_least_2)  # Ensure the result is an integer\nprint(answer)  # This will output 30 as an integer"], "prediction": [30.0, 30.0, 30.0, 30.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$25 | 20,200 | 5,700\n$55 | 16,300 | 7,600\n$85 | 12,400 | 9,500\n$115 | 8,500 | 11,400\n$145 | 4,600 | 13,300", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$25 | 20,200 | 5,700\n$55 | 16,300 | 7,600\n$85 | 12,400 | 9,500\n$115 | 8,500 | 11,400\n$145 | 4,600 | 13,300\n\nLook at the table. Then answer the question. At a price of $55, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "shortage", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": ["# Python code, return answer \nquantity_demanded_at_55 = 16300\nquantity_supplied_at_55 = 7600\n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_55 > quantity_supplied_at_55:\n    answer = 'shortage'\nelse:\n    answer = 'surplus'\n\nprint(answer)", "quantity_demanded_at_55 = 16300\nquantity_supplied_at_55 = 7600\n\nif quantity_demanded_at_55 > quantity_supplied_at_55:\n    answer = 'shortage'\nelif quantity_demanded_at_55 < quantity_supplied_at_55:\n    answer = 'surplus'\nelse:\n    answer = 'equilibrium'\n\nprint(answer)", "# Define the quantities demanded and supplied at the price of $55\nquantity_demanded_at_55 = 16300\nquantity_supplied_at_55 = 7600\n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_55 > quantity_supplied_at_55:\n    answer = 'shortage'\nelif quantity_demanded_at_55 < quantity_supplied_at_55:\n    answer = 'surplus'\nelse:\n    answer = 'equilibrium'\n\n# Output the answer\nprint(answer)", "quantity_demanded_at_55 = 16300\nquantity_supplied_at_55 = 7600\n\n# Determine if there's a shortage or surplus\nanswer = 'shortage' if quantity_demanded_at_55 > quantity_supplied_at_55 else 'surplus' if quantity_demanded_at_55 < quantity_supplied_at_55 else 'equilibrium'\n\nprint(answer)"], "prediction": ["shortage", "shortage", "shortage", "shortage"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Going to the library last month\" and then answer a question.\n\nNumber of trips | Frequency\n1 | 20\n2 | 10\n3 | 2\n4 | 4", "question": "Read the following table regarding \"Going to the library last month\" and then write Python code to answer a question.\n\nNumber of trips | Frequency\n1 | 20\n2 | 10\n3 | 2\n4 | 4\n\nIn considering whether to open a new branch, the city council examined the number of times some typical residents went to the library last month. How many people went to the library at least 2 times last month?", "answer": "16", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of trips to the library\nfrequency_data = {\n    1: 20,\n    2: 10,\n    3: 2,\n    4: 4\n}\n\n# Calculate the number of people who went to the library at least 2 times\npeople_at_least_2_times = frequency_data[2] + frequency_data[3] + frequency_data[4]\nanswer = people_at_least_2_times\nprint(answer)", "frequency_data = {\n    1: 20,\n    2: 10,\n    3: 2,\n    4: 4\n}\n\n# Calculate the number of people who went to the library at least 2 times\npeople_at_least_2_times = frequency_data[2] + frequency_data[3] + frequency_data[4]\nanswer = people_at_least_2_times  # This will be an integer\n\nprint(answer)", "frequency_data = {\n    1: 20,\n    2: 10,\n    3: 2,\n    4: 4\n}\n\n# Calculate the number of people who went to the library at least 2 times\npeople_at_least_2_times = frequency_data[2] + frequency_data[3] + frequency_data[4]\nanswer = int(people_at_least_2_times)  # Ensure the result is an integer\nprint(answer)", "frequency_data = {\n    1: 20,\n    2: 10,\n    3: 2,\n    4: 4\n}\n\n# Calculate the number of people who went to the library at least 2 times\npeople_at_least_2_times = frequency_data[2] + frequency_data[3] + frequency_data[4]\nanswer = people_at_least_2_times  # No need to convert to int since they are already integers\n\nprint(answer)"], "prediction": [16.0, 16.0, 16.0, 16.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n3 | 3\n7 | 19\n10 | 18\n14 | 1", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n3 | 3\n7 | 19\n10 | 18\n14 | 1\n\nLook at this table. Is this relation a function? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# A relation is a function if each input (x value) is associated with exactly one output (y value).\n# We will check if any x values are repeated.\ndata = {\n    3: 3,\n    7: 19,\n    10: 18,\n    14: 1\n}\n# Check for duplicate keys in the data\nis_function = len(data) == len(set(data.keys()))\nanswer = 'yes' if is_function else 'no'\nprint(answer)", "# Define the relation as a dictionary where keys are x-values and values are y-values\nrelation = {\n    3: 3,\n    7: 19,\n    10: 18,\n    14: 1\n}\n\n# Check if the relation is a function by ensuring each x-value is unique\nis_function = len(relation) == len(set(relation.keys()))\n\n# Assign the result to the answer variable\nanswer = 'yes' if is_function else 'no'\nprint(answer)", "# Define the relation as a dictionary\nrelation = {\n    3: 3,\n    7: 19,\n    10: 18,\n    14: 1\n}\n\n# Check if the relation is a function by ensuring all x-values (keys) are unique\nis_function = len(relation) == len(set(relation.keys()))\n\n# Assign the appropriate answer based on the function check\nanswer = 'yes' if is_function else 'no'\n\n# Print the answer\nprint(answer)", "# Define the relation as a dictionary\nrelation = {\n    3: 3,\n    7: 19,\n    10: 18,\n    14: 1\n}\n\n# Check if the relation is a function by ensuring all keys are unique\nis_function = len(relation) == len(set(relation.keys()))\n\n# Store the answer in the variable 'answer'\nanswer = 'yes' if is_function else 'no'"
], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of aquariums | Number of orange fish\n1 | 10\n2 | 20\n3 | 30\n4 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of aquariums | Number of orange fish\n1 | 10\n2 | 20\n3 | 30\n4 | ?\n\nEach aquarium has 10 orange fish. How many orange fish are in 4 aquariums?", "answer": "40", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nnumber_of_aquariums = 4 \nfish_per_aquarium = 10 \n# Calculate total number of orange fish\ntotal_orange_fish = number_of_aquariums * fish_per_aquarium\nanswer = total_orange_fish\nprint(answer)", "number_of_aquariums = 4 \nfish_per_aquarium = 10 \ntotal_orange_fish = number_of_aquariums * fish_per_aquarium\nanswer = int(total_orange_fish)  # Ensure the result is an integer\nprint(answer)", "number_of_aquariums = 4 \nfish_per_aquarium = 10 \ntotal_orange_fish = number_of_aquariums * fish_per_aquarium\nanswer = total_orange_fish  # No need for conversion, it will naturally be an integer\nprint(answer)", "number_of_aquariums = 4 \nfish_per_aquarium = 10 \ntotal_orange_fish = number_of_aquariums * fish_per_aquarium\nanswer = int(total_orange_fish)  # Ensure the result is an integer\nprint(answer)"], "prediction": [40.0, 40.0, 40.0, 40.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Miniature golf scores\" and then answer a question.\n\nName | Score\nMarshall | 150\nBarbara | 131\nDarius | 114\nErica | 128\nSandeep | 175", "question": "Read the following table regarding \"Miniature golf scores\" and then write Python code to answer a question.\n\nName | Score\nMarshall | 150\nBarbara | 131\nDarius | 114\nErica | 128\nSandeep | 175\n\nSome friends played miniature golf and wrote down their scores. How many more strokes did Sandeep take than Erica?", "answer": "47", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nsandeep_score = 175 \nerica_score = 128 \n# Calculate the difference in strokes\nstrokes_difference = sandeep_score - erica_score\nanswer = strokes_difference\nprint(answer)", "sandeep_score = 175 \nerica_score = 128 \nstrokes_difference = sandeep_score - erica_score\nanswer = int(strokes_difference)  # Convert to integer\nprint(answer)", "sandeep_score = 175 \nerica_score = 128 \nstrokes_difference = sandeep_score - erica_score\nanswer = strokes_difference  # No need for conversion\nprint(answer)", "sandeep_score = 175 \nerica_score = 128 \nstrokes_difference = sandeep_score - erica_score\nanswer = strokes_difference  # No conversion needed since it's already an integer\nprint(answer)"], "prediction": [47.0, 47.0, 47.0, 47.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nx | y\n14 | 14\n15 | 13\n16 | 7", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nx | y\n14 | 14\n15 | 13\n16 | 7\n\nThe table shows a function. Is the function linear or nonlinear? Choose from the the options: ['linear', 'nonlinear']", "answer": "nonlinear", "ques_type": "multi_choice", "choices": ["linear", "nonlinear"], "code": [
  "# Python code, return answer \n# To determine if the function is linear, we can check the differences in y-values for equal differences in x-values.\nx_values = [14, 15, 16]\ny_values = [14, 13, 7]\n\n# Calculate the differences\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n# If the differences are not constant, the function is nonlinear\nis_linear = all(diff == differences[0] for diff in differences)\n\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define x and y values\nx_values = [14, 15, 16]\ny_values = [14, 13, 7]\n\n# Calculate the differences between consecutive y-values\ndifferences = [y_values[i + 1] - y_values[i] for i in range(len(y_values) - 1)]\n\n# Check if all differences are the same\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "x_values = [14, 15, 16]\ny_values = [14, 13, 7]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if all differences are the same\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Determine if the function is linear or nonlinear\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)", "# Define the x and y values from the table\nx_values = [14, 15, 16]\ny_values = [14, 13, 7]\n\n# Calculate the differences between consecutive y values\ndifferences = [y_values[i+1] - y_values[i] for i in range(len(y_values)-1)]\n\n# Check if all differences are the same to determine if the function is linear\nis_linear = all(diff == differences[0] for diff in differences)\n\n# Assign the answer based on the linearity check\nanswer = 'linear' if is_linear else 'nonlinear'\nprint(answer)"
], "prediction": [null, null, null, null], "report": ["NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")", "NameError(\"name 'differences' is not defined\")"]
}
{
  "context": "Read the following table regarding \"People interviewed\" and then answer a question.\n\nDay | Number of people\nSunday | 19\nMonday | 12\nTuesday | 12\nWednesday | 21\nThursday | 8\nFriday | 7\nSaturday | 12", "question": "Read the following table regarding \"People interviewed\" and then write Python code to answer a question.\n\nDay | Number of people\nSunday | 19\nMonday | 12\nTuesday | 12\nWednesday | 21\nThursday | 8\nFriday | 7\nSaturday | 12\n\nA reporter looked through her notebook to remember how many people she had interviewed in the past 7 days. What is the mean of the numbers?", "answer": "13", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of the number of people interviewed each day\npeople_interviewed = [19, 12, 12, 21, 8, 7, 12]\n# Calculate the mean\nmean_interviewed = sum(people_interviewed) / len(people_interviewed)\nanswer = mean_interviewed\nprint(answer)", "# Define the number of people interviewed each day\npeople_interviewed = [19, 12, 12, 21, 8, 7, 12]\n\n# Calculate the mean of the numbers\nmean_interviewed = sum(people_interviewed) / len(people_interviewed)\n\n# Store the result in the variable 'answer'\nanswer = mean_interviewed\n\n# Print the answer\nprint(answer)", "# List of the number of people interviewed each day\npeople_interviewed = [19, 12, 12, 21, 8, 7, 12]\n\n# Calculate the mean of the numbers\nmean_interviewed = sum(people_interviewed) / len(people_interviewed)\n\n# Store the result in the variable 'answer'\nanswer = mean_interviewed\n\n# Output the answer\nprint(answer)", "# List of the number of people interviewed each day\npeople_interviewed = [19, 12, 12, 21, 8, 7, 12]\n\n# Calculate the mean of the numbers\nmean_interviewed = sum(people_interviewed) / len(people_interviewed)\n\n# Store the result in the variable 'answer'\nanswer = mean_interviewed\n\n# Print the answer\nprint(answer)"], "prediction": [13.0, 13.0, 13.0, 13.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Shells Mona found\" and then answer a question.\n\nDay | Number of shells\nTuesday | 2\nWednesday | 0\nThursday | 3\nFriday | 6\nSaturday | 1", "question": "Read the following table regarding \"Shells Mona found\" and then write Python code to answer a question.\n\nDay | Number of shells\nTuesday | 2\nWednesday | 0\nThursday | 3\nFriday | 6\nSaturday | 1\n\nMona spent a week at the beach and recorded the number of shells she found each day. According to the table, what was the rate of change between Tuesday and Wednesday?", "answer": "-2", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of shells found on Tuesday and Wednesday\nshells_tuesday = 2\nshells_wednesday = 0\n\n# Calculate the rate of change\nrate_of_change = shells_wednesday - shells_tuesday\nanswer = rate_of_change\nprint(answer)", "shells_tuesday = 2\nshells_wednesday = 0\n# Calculate the change in shells\nchange_in_shells = shells_wednesday - shells_tuesday\n# Since this is over 1 day, the rate of change is simply the change\nrate_of_change = change_in_shells / 1\nanswer = rate_of_change\nprint(answer)", "# Define the number of shells found on Tuesday and Wednesday\nshells_tuesday = 2\nshells_wednesday = 0\n\n# Calculate the change in shells and the rate of change\nchange_in_shells = shells_wednesday - shells_tuesday\ndays_between = 1  # The change occurs over one day\nrate_of_change = change_in_shells / days_between\n\n# Store the result in the answer variable\nanswer = rate_of_change\nprint(answer)", "# Number of shells found on Tuesday and Wednesday\nshells_found_tuesday = 2\nshells_found_wednesday = 0\n\n# Calculate the change in the number of shells\nchange_in_shells = shells_found_wednesday - shells_found_tuesday\n\n# Define the time interval (in days)\ndays_between = 1  # The change occurs over one day\n\n# Calculate the rate of change\nrate_of_change = change_in_shells / days_between\n\n# Store the result in the answer variable\nanswer = rate_of_change\n\n# Output the answer\nprint(answer)"], "prediction": [-2.0, -2.0, -2.0, -2.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nshrimp | $8 per pound\ncrab meat | $6 per pound\noysters | $10 per pound\nscallops | $5 per pound\nlobster meat | $6 per pound\nmussels | $3 per pound", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nshrimp | $8 per pound\ncrab meat | $6 per pound\noysters | $10 per pound\nscallops | $5 per pound\nlobster meat | $6 per pound\nmussels | $3 per pound\n\nWhat is the total cost for 3/10 of a pound of crab meat?", "answer": "1.80", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_crab_meat = 6  # price of crab meat per pound\namount_in_pounds = 3 / 10  # amount in pounds\n# Calculate the total cost\ntotal_cost_crab_meat = price_per_pound_crab_meat * amount_in_pounds\nanswer = total_cost_crab_meat\nprint(answer)", "# Define the price per pound of crab meat\nprice_per_pound_crab_meat = 6  # price of crab meat per pound\n\n# Define the amount in pounds\namount_in_pounds = 3 / 10  # amount in pounds\n\n# Calculate the total cost for the specified amount of crab meat\ntotal_cost_crab_meat = price_per_pound_crab_meat * amount_in_pounds\n\n# Store the result in the answer variable\nanswer = total_cost_crab_meat\n\n# Print the answer\nprint(answer)", "price_per_pound_crab_meat = 6  # price of crab meat per pound\namount_in_pounds = 3 / 10  # amount in pounds\ntotal_cost_crab_meat = price_per_pound_crab_meat * amount_in_pounds\nanswer = total_cost_crab_meat\nprint(answer)  # Output the result", "price_per_pound_crab_meat = 6  # price of crab meat per pound\namount_in_pounds = 3 / 10  # amount in pounds\ntotal_cost_crab_meat = price_per_pound_crab_meat * amount_in_pounds\nanswer = total_cost_crab_meat\nprint(f\"The total cost for 3/10 of a pound of crab meat is: ${answer:.2f}\")  # Output the result with clarity"], "prediction": [1.8, 1.8, 1.8, 1.8], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Cows per farm\" and then answer a question.\n\nStem | Leaf \n2 | 5, 5\n3 | 3, 8, 9\n4 | \n5 | 5\n6 | 7", "question": "Read the following table regarding \"Cows per farm\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 5, 5\n3 | 3, 8, 9\n4 | \n5 | 5\n6 | 7\n\nA researcher recorded the number of cows on each farm in the county. How many farms have exactly 25 cows?", "answer": "2", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The stem-and-leaf display indicates that the number of cows on the farms is represented as follows:\n# Stem \"2\" represents 20-29 cows\n# Leaf \"5, 5\" indicates there are two farms with exactly 25 cows\n\nnumber_of_farms_with_25_cows = 2\nanswer = number_of_farms_with_25_cows\nprint(answer)", "# Define stem and leaf data structure as a list of tuples\nstem_and_leaf = [(2, [5, 5]), (3, [3, 8, 9]), (4, []), (5, [5]), (6, [7])]\n\n# Initialize counter for farms with exactly 25 cows\nfarms_with_25_cows = 0\n\n# Iterate through the stem and leaf data structure and count relevant farms\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        cows_per_farm = stem * 10 + leaf\n        if cows_per_farm == 25:\n            farms_with_25_cows += 1\n\nanswer = farms_with_25_cows\nprint(answer)", "# Define the stem and leaf data structure  \nstem_and_leaf = [(2, [5, 5]), (3, [3, 8, 9]), (4, []), (5, [5]), (6, [7])]  \n\n# Initialize counter for farms with exactly 25 cows  \nfarms_with_25_cows = 0  \n\n# Iterate through the stem and leaf data structure and count relevant farms  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        cows_per_farm = stem * 10 + leaf  \n        if cows_per_farm == 25:  \n            farms_with_25_cows += 1  \n\n# Since the stem 2 with leaf 5 represents 25 cows, we need to account for the count of leaves  \n# Each leaf '5' corresponds to 25 cows, so we should count how many leaves are there  \nif 2 in [s for s, _ in stem_and_leaf]:  \n    farms_with_25_cows += stem_and_leaf[0][1].count(5)  # Count the occurrences of leaf '5' under stem '2'  \n\nanswer = farms_with_25_cows  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [5, 5]), (3, [3, 8, 9]), (4, []), (5, [5]), (6, [7])]  \n\n# Initialize counter for farms with exactly 25 cows  \nfarms_with_25_cows = 0  \n\n# Iterate through the stem and leaf data structure and count farms with exactly 25 cows  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        cows_per_farm = stem * 10 + leaf  \n        if cows_per_farm == 25:  \n            farms_with_25_cows += 1  \n\nanswer = farms_with_25_cows  \nprint(answer)  # This will output the correct count of farms with exactly 25 cows."
], "prediction": [2.0, 2.0, 4.0, 2.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Gymnastics meet schedule\" and then answer a question.\n\nEvent | Begin | End\nmen's parallel bars | 11:30 A.M. | 12:05 P.M.\nwomen's balance beam | 12:20 P.M. | 12:55 P.M.\nmen's floor exercise | 12:50 P.M. | 1:40 P.M.\nmen's vault | 1:45 P.M. | 2:30 P.M.\nmen's rings | 2:30 P.M. | 2:50 P.M.\nmen's pommel horse | 2:35 P.M. | 3:00 P.M.\nmen's high bar | 2:45 P.M. | 3:45 P.M.", "question": "Read the following table regarding \"Gymnastics meet schedule\" and then write Python code to answer a question.\n\nEvent | Begin | End\nmen's parallel bars | 11:30 A.M. | 12:05 P.M.\nwomen's balance beam | 12:20 P.M. | 12:55 P.M.\nmen's floor exercise | 12:50 P.M. | 1:40 P.M.\nmen's vault | 1:45 P.M. | 2:30 P.M.\nmen's rings | 2:30 P.M. | 2:50 P.M.\nmen's pommel horse | 2:35 P.M. | 3:00 P.M.\nmen's high bar | 2:45 P.M. | 3:45 P.M.\n\nLook at the following schedule. When does the men's vault event end? Choose from the the options: ['2:45 P.M.', '1:40 P.M.', '2:30 P.M.', '1:45 P.M.']", "answer": "2:30 P.M.", "ques_type": "multi_choice", "choices": ["2:45 P.M.", "1:40 P.M.", "2:30 P.M.", "1:45 P.M."], "code": ["# Python code, return answer \n# The end time for the men's vault event as per the schedule\nend_mens_vault = '2:30 P.M.'\nanswer = end_mens_vault\nprint(answer)", "# Define the end time for the men's vault event\nend_mens_vault = '2:30 P.M.'\n\n# Define the options\noptions = ['2:45 P.M.', '1:40 P.M.', '2:30 P.M.', '1:45 P.M.']\n\n# Check if the end time is in the options\nif end_mens_vault in options:\n    answer = end_mens_vault\nelse:\n    answer = \"Not in options\"\n\nprint(answer)", "# Define the end time for the men's vault event\nend_mens_vault = '2:30 P.M.'\n\n# Define the options for the answer\noptions = ['2:45 P.M.', '1:40 P.M.', '2:30 P.M.', '1:45 P.M.']\n\n# Check if the end time is in the provided options\nif end_mens_vault in options:\n    answer = end_mens_vault\nelse:\n    answer = \"Not in options\"\n\n# Print the answer\nprint(answer)", "# Define the end time of the men's vault event\nend_mens_vault = '2:30 P.M.'\n\n# List of options to choose from\noptions = ['2:45 P.M.', '1:40 P.M.', '2:30 P.M.', '1:45 P.M.']\n\n# Check if the end time is in the options and assign it to answer\nanswer = end_mens_vault if end_mens_vault in options else \"Not in options\"\n\nprint(answer)"], "prediction": ["2:30 P.M.", "2:30 P.M.", "2:30 P.M.", "2:30 P.M."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nEuropean vacation package | $643.00\nCaribbean vacation package | $839.00\nAfrican safari vacation package | $962.00\nJamaican vacation package | $608.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nEuropean vacation package | $643.00\nCaribbean vacation package | $839.00\nAfrican safari vacation package | $962.00\nJamaican vacation package | $608.00\n\nBryant has $1,544.00. Does he have enough to buy an African safari vacation package and a Jamaican vacation package? Choose from the the options: ['yes', 'no']", "answer": "no", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# Prices of the vacation packages\nafrican_safari_price = 962.00\njamaican_price = 608.00\n# Total cost for both packages\ntotal_cost = african_safari_price + jamaican_price\n# Bryant's budget\nbryant_budget = 1544.00\n# Determine if Bryant has enough money\nif bryant_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "african_safari_price = 962.00\njamaican_price = 608.00\ntotal_cost = african_safari_price + jamaican_price\nbryant_budget = 1544.00\n\nif bryant_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the prices of the vacation packages\nafrican_safari_price = 962.00\njamaican_price = 608.00\n\n# Calculate the total cost of the two vacation packages\ntotal_cost = african_safari_price + jamaican_price\n\n# Define Bryant's budget\nbryant_budget = 1544.00\n\n# Check if Bryant has enough money to buy both packages\nif bryant_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the prices of the vacation packages\nafrican_safari_price = 962.00\njamaican_price = 608.00\n\n# Calculate the total cost of the vacation packages\ntotal_cost = african_safari_price + jamaican_price\n\n# Define Bryant's budget\nbryant_budget = 1544.00\n\n# Check if Bryant has enough money\nif bryant_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)"
], "prediction": ["no", "no", "no", "no"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Making greeting cards\" and then answer a question.\n\nGreeting cards made | Frequency\n0 | 14\n1 | 12\n2 | 17\n3 | 4\n4 | 15", "question": "Read the following table regarding \"Making greeting cards\" and then write Python code to answer a question.\n\nGreeting cards made | Frequency\n0 | 14\n1 | 12\n2 | 17\n3 | 4\n4 | 15\n\nFor a fundraiser, the children in the art club made greeting cards and kept track of how many they produced. How many children made more than 1 greeting card?", "answer": "36", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of children who made greeting cards\nfrequency = {\n    0: 14,\n    1: 12,\n    2: 17,\n    3: 4,\n    4: 15\n}\n\n# Calculate the number of children who made more than 1 greeting card\nchildren_more_than_one = frequency[2] + frequency[3] + frequency[4]\nanswer = children_more_than_one\nprint(answer)", "frequency = {\n    0: 14,\n    1: 12,\n    2: 17,\n    3: 4,\n    4: 15\n}\nchildren_more_than_one = frequency[2] + frequency[3] + frequency[4]\nanswer = children_more_than_one  # This will be an integer\nprint(answer)", "frequency = {\n    0: 14,\n    1: 12,\n    2: 17,\n    3: 4,\n    4: 15\n}\n\n# Calculate the number of children who made more than 1 greeting card\nchildren_more_than_one = frequency[2] + frequency[3] + frequency[4]\nanswer = int(children_more_than_one)  # Ensure the result is an integer\nprint(answer)", "frequency = {\n    0: 14,\n    1: 12,\n    2: 17,\n    3: 4,\n    4: 15\n}\n\n# Calculate the number of children who made more than 1 greeting card\nchildren_more_than_one = frequency[2] + frequency[3] + frequency[4]\nanswer = children_more_than_one  # No need to convert to int, already an integer\n\nprint(answer)"], "prediction": [36.0, 36.0, 36.0, 36.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Track team sizes (number of members)\" and then answer a question.\n\nStem | Leaf \n2 | 0, 3, 3, 4, 6, 6\n3 | 2, 2, 5, 8\n4 | 9\n5 | 0, 4, 4\n6 | 2, 6\n7 | 0, 1, 3, 5\n8 | 3, 4", "question": "Read the following table regarding \"Track team sizes (number of members)\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 0, 3, 3, 4, 6, 6\n3 | 2, 2, 5, 8\n4 | 9\n5 | 0, 4, 4\n6 | 2, 6\n7 | 0, 1, 3, 5\n8 | 3, 4\n\nMr. Middleton, a track coach, recorded the sizes of all the nearby track teams. How many teams have at least 27 members?", "answer": "16", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The sizes of the track teams according to the stem-and-leaf display.\nteam_sizes = [\n    20, 23, 23, 24, 26, 26,  # 20s\n    32, 32, 35, 38,          # 30s\n    49,                      # 40s\n    50, 54, 54,              # 50s\n    62, 66,                  # 60s\n    70, 71, 73, 75,          # 70s\n    83, 84                   # 80s\n]\n\n# Count teams with at least 27 members\nteams_at_least_27 = sum(1 for size in team_sizes if size >= 27)\nanswer = teams_at_least_27\nprint(answer)", "# List of team sizes recorded by Mr. Middleton\nteam_sizes = [\n    20, 23, 23, 24, 26, 26,  # 20s\n    32, 32, 35, 38,          # 30s\n    49,                      # 40s\n    50, 54, 54,              # 50s\n    62, 66,                  # 60s\n    70, 71, 73, 75,          # 70s\n    83, 84                   # 80s\n]\n\n# Count the number of teams with at least 27 members\nteams_at_least_27 = sum(1 for size in team_sizes if size >= 27)\nanswer = int(teams_at_least_27)  # Ensure the result is an integer\nprint(answer)", "team_sizes = [\n    20, 23, 23, 24, 26, 26,  # 20s\n    32, 32, 35, 38,          # 30s\n    49,                      # 40s\n    50, 54, 54,              # 50s\n    62, 66,                  # 60s\n    70, 71, 73, 75,          # 70s\n    83, 84                   # 80s\n]\n\n# Count the number of teams with at least 27 members\nteams_at_least_27 = sum(1 for size in team_sizes if size >= 27)\n\n# Store the result in the variable 'answer'\nanswer = teams_at_least_27\n\nprint(answer)", "team_sizes = [\n    20, 23, 23, 24, 26, 26,  # 20s\n    32, 32, 35, 38,          # 30s\n    49,                      # 40s\n    50, 54, 54,              # 50s\n    62, 66,                  # 60s\n    70, 71, 73, 75,          # 70s\n    83, 84                   # 80s\n]\nteams_at_least_27 = sum(1 for size in team_sizes if size >= 27)\nanswer = int(teams_at_least_27)  # Convert to integer\nprint(answer)"
], "prediction": [16.0, 16.0, 16.0, 16.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Trivia game scores\" and then answer a question.\n\nName | Score\nVijay | 46\nScott | 55\nBob | 55\nJason | 46\nHeather | 48\nCharlie | 55\nAiden | 48", "question": "Read the following table regarding \"Trivia game scores\" and then write Python code to answer a question.\n\nName | Score\nVijay | 46\nScott | 55\nBob | 55\nJason | 46\nHeather | 48\nCharlie | 55\nAiden | 48\n\nSome friends played a trivia game and recorded their scores. What is the mode of the numbers?", "answer": "55", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nfrom statistics import mode\n\n# List of scores\nscores = [46, 55, 55, 46, 48, 55, 48]\n\n# Calculate the mode of the scores\nanswer = mode(scores)\nprint(answer)", "from statistics import mode\n\nscores = [46, 55, 55, 46, 48, 55, 48]\nanswer = int(mode(scores))  # Convert the mode to an integer\nprint(answer)", "from statistics import mode\n\nscores = [46, 55, 55, 46, 48, 55, 48]\nanswer = mode(scores)  # The mode function already returns the correct type\nprint(answer)", "from statistics import mode\n\nscores = [46, 55, 55, 46, 48, 55, 48]\nanswer = int(mode(scores))  # Convert the mode result to an integer\nprint(answer)"], "prediction": [55.0, 55.0, 55.0, 55.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nOption | Change in phone price\nAdd an upgrade | $60\nBuy a used phone | -$75", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nOption | Change in phone price\nAdd an upgrade | $60\nBuy a used phone | -$75\n\nAriel is looking at the price of new cell phones online. Her favorite company, OrangeTech, has a special this weekend. Ariel can add an upgrade to a phone for an additional cost, or she can buy a used phone to get a discount. The change in price for each option is shown in the table. Which option results in a greater change in price? Choose from the the options: ['adding an upgrade', 'buying a used phone']", "answer": "buying a used phone", "ques_type": "multi_choice", "choices": ["adding an upgrade", "buying a used phone"], "code": ["# Python code, return answer \nchange_upgrade = 60 \nchange_used_phone = -75 \n# Compare the changes in price (considering the discount)\nif change_upgrade > abs(change_used_phone): \n    answer = 'adding an upgrade'\nelse:\n    answer = 'buying a used phone'\nprint(answer)", "change_upgrade = 60 \nchange_used_phone = -75 \n\n# Compare the changes directly\nif change_upgrade > abs(change_used_phone): \n    answer = 'adding an upgrade'\nelse:\n    answer = 'buying a used phone'\n\nprint(answer)", "change_upgrade = 60 \nchange_used_phone = -75 \n\nif change_upgrade > change_used_phone: \n    answer = 'adding an upgrade'\nelse:\n    answer = 'buying a used phone'\n\nprint(answer)", "change_upgrade = 60 \nchange_used_phone = -75 \n\n# Since buying a used phone results in a decrease in price, we need to compare the absolute changes\nif abs(change_upgrade) > abs(change_used_phone): \n    answer = 'adding an upgrade'\nelse:\n    answer = 'buying a used phone'\n\nprint(answer)"], "prediction": ["buying a used phone", "buying a used phone", "adding an upgrade", "buying a used phone"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$180 | 11,600 | 22,500\n$260 | 11,100 | 22,800\n$340 | 10,600 | 23,100\n$420 | 10,100 | 23,400\n$500 | 9,600 | 23,700", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$180 | 11,600 | 22,500\n$260 | 11,100 | 22,800\n$340 | 10,600 | 23,100\n$420 | 10,100 | 23,400\n$500 | 9,600 | 23,700\n\nLook at the table. Then answer the question. At a price of $180, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "surplus", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": [
  "# Python code, return answer \nquantity_demanded = 11600\nquantity_supplied = 22500\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'\nelse:\n    answer = 'shortage'\n\nprint(answer)", "# Define the quantities demanded and supplied at the price of $180\nquantity_demanded = 11600\nquantity_supplied = 22500\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'  # A surplus occurs when quantity supplied exceeds quantity demanded\nelse:\n    answer = 'shortage'  # A shortage occurs when quantity demanded exceeds quantity supplied\n\nprint(answer)", "quantity_demanded = 11600\nquantity_supplied = 22500\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'  # A surplus occurs when quantity supplied exceeds quantity demanded\nelse:\n    answer = 'shortage'  # A shortage occurs when quantity demanded exceeds quantity supplied\n\nprint(answer)", "# Define the quantities demanded and supplied at a price of $180\nquantity_demanded = 11600\nquantity_supplied = 22500\n\n# Determine if there is a shortage or surplus\nif quantity_demanded < quantity_supplied:\n    answer = 'surplus'  # A surplus occurs when quantity supplied exceeds quantity demanded\nelse:\n    answer = 'shortage'  # A shortage occurs when quantity demanded exceeds quantity supplied\n\n# Output the result\nprint(answer)"
], "prediction": ["surplus", "surplus", "surplus", "surplus"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nNumber of branches | Number of caterpillars\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | ?", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nNumber of branches | Number of caterpillars\n1 | 5\n2 | 10\n3 | 15\n4 | 20\n5 | ?\n\nEach branch has 5 caterpillars. How many caterpillars are on 5 branches?", "answer": "25", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Each branch has 5 caterpillars\ncaterpillars_per_branch = 5 \n# Number of branches \nnumber_of_branches = 5 \n# Calculate the total number of caterpillars on 5 branches\ntotal_caterpillars = caterpillars_per_branch * number_of_branches\nanswer = total_caterpillars\nprint(answer)", "caterpillars_per_branch = 5 \nnumber_of_branches = 5 \ntotal_caterpillars = caterpillars_per_branch * number_of_branches\nanswer = int(total_caterpillars)  # Ensure the answer is an integer\nprint(answer)", "caterpillars_per_branch = 5 \nnumber_of_branches = 5 \ntotal_caterpillars = caterpillars_per_branch * number_of_branches\nanswer = total_caterpillars  # The result will be an integer\nprint(answer)", "caterpillars_per_branch = 5 \nnumber_of_branches = 5 \ntotal_caterpillars = caterpillars_per_branch * number_of_branches\nanswer = total_caterpillars  # The result will be an integer\nprint(answer)"], "prediction": [25.0, 25.0, 25.0, 25.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | E-readers | Paperback books\nAbout 1 hour per week | 3 | 6\nAbout 3 hours per week | 6 | 3", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | E-readers | Paperback books\nAbout 1 hour per week | 3 | 6\nAbout 3 hours per week | 6 | 3\n\nLena joined a book club to spend more quality time with her cousin. At the first meeting, club members recorded how many hours a week they typically read and whether they preferred e-readers or paperback books. What is the probability that a randomly selected club member reads about 3 hours per week and prefers e-readers? Simplify any fractions.", "answer": "1/3", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total number of club members\ntotal_members = 3 + 6 + 6 + 3  # (3 + 6 from about 1 hour, and 6 + 3 from about 3 hours)\n\n# Members who read about 3 hours per week and prefer e-readers\nmembers_3_hours_e_readers = 6\n\n# Calculate the probability\nprobability = members_3_hours_e_readers / total_members\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(members_3_hours_e_readers, total_members).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Define the number of members based on their reading habits and preferences\ne_readers_1_hour = 3\npaperback_1_hour = 6\ne_readers_3_hours = 6\npaperback_3_hours = 3\n\n# Calculate total members\ntotal_members = e_readers_1_hour + paperback_1_hour + e_readers_3_hours + paperback_3_hours\n\n# Members who read about 3 hours per week and prefer e-readers\nmembers_3_hours_e_readers = e_readers_3_hours\n\n# Calculate probability\nfrom fractions import Fraction\nprobability = Fraction(members_3_hours_e_readers, total_members).limit_denominator()\n\nanswer = probability\nprint(answer)", "# Define the number of e-readers and paperback books for each reading duration\ne_readers_1_hour = 3\npaperback_1_hour = 6\ne_readers_3_hours = 6\npaperback_3_hours = 3\n\n# Calculate the total number of club members\ntotal_members = e_readers_1_hour + paperback_1_hour + e_readers_3_hours + paperback_3_hours\n\n# Count the number of members who read about 3 hours per week and prefer e-readers\nmembers_3_hours_e_readers = e_readers_3_hours\n\n# Calculate the probability as a fraction\nfrom fractions import Fraction\nprobability = Fraction(members_3_hours_e_readers, total_members).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = probability\n\n# Print the answer\nprint(answer)", "# Define the number of members who read e-readers and paperback books at different hours\ne_readers_1_hour = 3\npaperback_1_hour = 6\ne_readers_3_hours = 6\npaperback_3_hours = 3\n\n# Calculate the total number of members\ntotal_members = e_readers_1_hour + paperback_1_hour + e_readers_3_hours + paperback_3_hours\n\n# Number of members who read about 3 hours per week and prefer e-readers\nmembers_3_hours_e_readers = e_readers_3_hours\n\n# Calculate the probability as a fraction\nfrom fractions import Fraction\nprobability = Fraction(members_3_hours_e_readers, total_members).limit_denominator()\n\n# Store the probability in the answer variable\nanswer = probability\nprint(answer)"
], "prediction": [0.33333, 0.33333, 0.33333, 0.33333], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\ndesigner coat | $6,487.00\ndesigner watch | $5,254.00\ndesigner ball gown | $1,830.00\ndesigner handbag | $2,288.00\npair of designer boots | $1,906.00\npair of designer shoes | $8,293.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\ndesigner coat | $6,487.00\ndesigner watch | $5,254.00\ndesigner ball gown | $1,830.00\ndesigner handbag | $2,288.00\npair of designer boots | $1,906.00\npair of designer shoes | $8,293.00\n\nHow much money does Laura need to buy 8 designer watches and 8 designer ball gowns?", "answer": "56,672", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices of the items\nprice_designer_watch = 5254.00\nprice_designer_ball_gown = 1830.00\n\n# Quantity of items Laura wants to buy\nquantity_watches = 8\nquantity_ball_gowns = 8\n\n# Total cost for watches and ball gowns\ntotal_cost_watches = price_designer_watch * quantity_watches\ntotal_cost_ball_gowns = price_designer_ball_gown * quantity_ball_gowns\ntotal_cost = total_cost_watches + total_cost_ball_gowns\n\nanswer = total_cost\nprint(answer)", "# Define the prices of the designer items\nprice_designer_watch = 5254.00\nprice_designer_ball_gown = 1830.00\n\n# Define the quantities needed\nquantity_watches = 8\nquantity_ball_gowns = 8\n\n# Calculate the total cost for watches and ball gowns\ntotal_cost_watches = price_designer_watch * quantity_watches\ntotal_cost_ball_gowns = price_designer_ball_gown * quantity_ball_gowns\n\n# Calculate the total cost\ntotal_cost = total_cost_watches + total_cost_ball_gowns\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "# Prices of the items\nprice_designer_watch = 5254.00\nprice_designer_ball_gown = 1830.00\n\n# Quantities of each item\nquantity_watches = 8\nquantity_ball_gowns = 8\n\n# Calculate total costs\ntotal_cost_watches = price_designer_watch * quantity_watches\ntotal_cost_ball_gowns = price_designer_ball_gown * quantity_ball_gowns\n\n# Calculate total cost\ntotal_cost = total_cost_watches + total_cost_ball_gowns\n\n# Store the result in the variable answer\nanswer = total_cost\n\n# Print the answer\nprint(answer)", "price_designer_watch = 5254.00\nprice_designer_ball_gown = 1830.00\nquantity_watches = 8\nquantity_ball_gowns = 8\n\n# Calculate total cost for watches and ball gowns\ntotal_cost_watches = price_designer_watch * quantity_watches\ntotal_cost_ball_gowns = price_designer_ball_gown * quantity_ball_gowns\n\n# Sum total costs\ntotal_cost = total_cost_watches + total_cost_ball_gowns\n\n# Store the result in the answer variable\nanswer = total_cost\n\n# Output the answer\nprint(answer)"
], "prediction": [56672.0, 56672.0, 56672.0, 56672.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Mint | Fruity\nCaffeine-free | 3 | 5\nCaffeinated | 2 | 5", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Mint | Fruity\nCaffeine-free | 3 | 5\nCaffeinated | 2 | 5\n\nSavannah works at a coffee shop on weekends. Every now and then, a customer will order a hot tea and ask Savannah to surprise them with the flavor. The teas are categorized by flavor and caffeine level. What is the probability that a randomly selected tea is caffeine-free and mint? Simplify any fractions.", "answer": "1/5", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total number of teas\ntotal_teas = 3 + 5 + 2 + 5\n# Number of caffeine-free mint teas\ncaffeine_free_mint = 3\n# Probability of selecting a caffeine-free mint tea\nprobability = caffeine_free_mint / total_teas\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(caffeine_free_mint, total_teas).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Define the counts of teas by flavor and caffeine level\ncaffeine_free_mint = 3\ntotal_teas = 3 + 5 + 2 + 5\n\n# Calculate the probability of selecting a caffeine-free mint tea\nprobability = Fraction(caffeine_free_mint, total_teas).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = probability\nprint(answer)", "# Define the counts of the teas based on flavor and caffeine level\ncaffeine_free_mint = 3\ncaffeine_free_fruity = 5\ncaffeinated_mint = 2\ncaffeinated_fruity = 5\n\n# Calculate the total number of teas\ntotal_teas = caffeine_free_mint + caffeine_free_fruity + caffeinated_mint + caffeinated_fruity\n\n# Calculate the probability of selecting a caffeine-free mint tea\nprobability = Fraction(caffeine_free_mint, total_teas).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = probability\nprint(answer)", "# Define the counts of teas based on flavor and caffeine level\ncaffeine_free_mint = 3\ntotal_teas = 3 + 5 + 2 + 5\n\n# Calculate the probability of selecting a caffeine-free mint tea\nfrom fractions import Fraction\nprobability = Fraction(caffeine_free_mint, total_teas).limit_denominator()\n\n# Store the simplified probability in the answer variable\nanswer = probability\nprint(answer)"
], "prediction": [0.2, null, null, 0.2], "report": ["Done", "NameError(\"name 'Fraction' is not defined\")", "NameError(\"name 'Fraction' is not defined\")", "Done"]
}
{
  "context": "Read the following table regarding \"Broken tiles per shipment\" and then answer a question.\n\nStem | Leaf \n2 | 2, 6\n3 | 1, 5, 9\n4 | 6\n5 | 2, 3, 6, 6\n6 | 2, 2\n7 | 2, 3, 7\n8 | 0, 3, 8", "question": "Read the following table regarding \"Broken tiles per shipment\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 2, 6\n3 | 1, 5, 9\n4 | 6\n5 | 2, 3, 6, 6\n6 | 2, 2\n7 | 2, 3, 7\n8 | 0, 3, 8\n\nWildgrove Flooring tracked the number of broken tiles in each shipment it received last year. What is the smallest number of broken tiles?", "answer": "22", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The smallest number of broken tiles corresponds to the smallest value in the stem-and-leaf display.\nsmallest_broken_tiles = 22  # From the stem \"2 | 2\", the value is 22.\nanswer = smallest_broken_tiles\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [2, 6]), (3, [1, 5, 9]), (4, [6]), (5, [2, 3, 6, 6]), (6, [2, 2]), (7, [2, 3, 7]), (8, [0, 3, 8])]  \n\n# Initialize variable to store the smallest number of broken tiles  \nsmallest_broken_tiles = float('inf')  \n\n# Iterate through the stem and leaf data structure to find the smallest number  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        broken_tiles = stem * 10 + leaf  \n        if broken_tiles < smallest_broken_tiles:  \n            smallest_broken_tiles = broken_tiles  \n\nanswer = smallest_broken_tiles  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [2, 6]), (3, [1, 5, 9]), (4, [6]), (5, [2, 3, 6, 6]), (6, [2, 2]), (7, [2, 3, 7]), (8, [0, 3, 8])]  \n\n# Initialize counter for the smallest number of broken tiles  \nsmallest_broken_tiles = 100  # A sufficiently high integer value  \n\n# Iterate through the stem and leaf data structure to find the smallest number of broken tiles  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        broken_tiles = stem * 10 + leaf  \n        if broken_tiles < smallest_broken_tiles:  \n            smallest_broken_tiles = broken_tiles  \n\nanswer = smallest_broken_tiles  \nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(2, [2, 6]), (3, [1, 5, 9]), (4, [6]), (5, [2, 3, 6, 6]), (6, [2, 2]), (7, [2, 3, 7]), (8, [0, 3, 8])]  \n\n# Initialize the smallest broken tiles with a sufficiently high integer value  \nsmallest_broken_tiles = float('inf')  \n\n# Iterate through the stem and leaf data structure and find the smallest number of broken tiles  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        broken_tiles = stem * 10 + leaf  \n        if broken_tiles < smallest_broken_tiles:  \n            smallest_broken_tiles = broken_tiles  \n\n# Store the result as an integer  \nanswer = int(smallest_broken_tiles)  \nprint(answer)"
], "prediction": [22.0, 22.0, 22.0, 22.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Hours spent volunteering\" and then answer a question.\n\nDay | Hours\nThursday | 4\nFriday | 8\nSaturday | 6\nSunday | 2\nMonday | 10", "question": "Read the following table regarding \"Hours spent volunteering\" and then write Python code to answer a question.\n\nDay | Hours\nThursday | 4\nFriday | 8\nSaturday | 6\nSunday | 2\nMonday | 10\n\nTo get credit for meeting her school's community service requirement, Lola kept a volunteering log. What is the median of the numbers?", "answer": "6", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# List of hours spent volunteering\nhours_volunteering = [4, 8, 6, 2, 10]\n# Sort the list to find the median\nhours_volunteering.sort()\n\n# Calculate the median\nn = len(hours_volunteering)\nif n % 2 == 0:  # If even number of elements\n    median = (hours_volunteering[n//2 - 1] + hours_volunteering[n//2]) / 2\nelse:  # If odd number of elements\n    median = hours_volunteering[n//2]\n\nanswer = median\nprint(answer)", "# List of hours spent volunteering\nhours_volunteering = [4, 8, 6, 2, 10]\n\n# Sort the list to find the median\nhours_volunteering.sort()\n\n# Calculate the median\nn = len(hours_volunteering)\nif n % 2 == 0:  # If even number of elements\n    median = (hours_volunteering[n//2 - 1] + hours_volunteering[n//2]) / 2\nelse:  # If odd number of elements\n    median = hours_volunteering[n//2]\n\n# Store the median in the answer variable\nanswer = median\n\n# Output the answer\nprint(answer)", "# List of hours spent volunteering\nhours_volunteering = [4, 8, 6, 2, 10]\n\n# Sorting the list to find the median\nhours_volunteering.sort()\n\n# Finding the length of the list\nn = len(hours_volunteering)\n\n# Calculating the median\nif n % 2 == 0:  # If even number of elements\n    median = (hours_volunteering[n // 2 - 1] + hours_volunteering[n // 2]) / 2\nelse:  # If odd number of elements\n    median = hours_volunteering[n // 2]\n\n# Storing the median in the answer variable\nanswer = median\n\n# Outputting the answer\nprint(answer)", "hours_volunteering = [4, 8, 6, 2, 10]\nhours_volunteering.sort()\nn = len(hours_volunteering)\nif n % 2 == 0:  # If even number of elements\n    median = (hours_volunteering[n // 2 - 1] + hours_volunteering[n // 2]) / 2\nelse:  # If odd number of elements\n    median = hours_volunteering[n // 2]\nanswer = median\nprint(answer)"
], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Science articles read\" and then answer a question.\n\nName | Number of science articles\nIrma | 659\nRose | 635\nCarmen | 638\nHugo | 665", "question": "Read the following table regarding \"Science articles read\" and then write Python code to answer a question.\n\nName | Number of science articles\nIrma | 659\nRose | 635\nCarmen | 638\nHugo | 665\n\nIrma's classmates revealed how many science articles they read. Who read the fewest science articles? Choose from the the options: ['Irma', 'Rose', 'Carmen', 'Hugo']", "answer": "Rose", "ques_type": "multi_choice", "choices": ["Irma", "Rose", "Carmen", "Hugo"], "code": [
  "# Python code, return answer \narticles_read = {\n    'Irma': 659,\n    'Rose': 635,\n    'Carmen': 638,\n    'Hugo': 665\n}\n# Find the classmate who read the fewest articles\nfewest_articles = min(articles_read, key=articles_read.get)\nanswer = fewest_articles\nprint(answer)", "# Store the names and their corresponding number of science articles in a dictionary  \narticles_read = {\n    'Irma': 659,\n    'Rose': 635,\n    'Carmen': 638,\n    'Hugo': 665\n}\n\n# Find the name of the person who read the fewest science articles  \nfewest_articles = min(articles_read, key=articles_read.get)\nanswer = fewest_articles\n\nprint(answer)", "# Store the names and their corresponding number of science articles in a dictionary  \narticles_read = {\n    'Irma': 659,\n    'Rose': 635,\n    'Carmen': 638,\n    'Hugo': 665\n}\n\n# Find the person who read the fewest science articles  \nfewest_articles = min(articles_read, key=articles_read.get)\nanswer = fewest_articles\n\nprint(answer)  # Output the answer", "articles_read = {\n    'Irma': 659,\n    'Rose': 635,\n    'Carmen': 638,\n    'Hugo': 665\n}\n\nfewest_articles = min(articles_read, key=articles_read.get)\nfewest_articles_count = articles_read[fewest_articles]\nanswer = (fewest_articles, fewest_articles_count)\nprint(answer)  # Output the answer"
], "prediction": ["Rose", "Rose", "Rose", "Rose"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Drawing a card between 2 and 8\" and then answer a question.\n\nNumber drawn | Frequency\n2 | 16\n3 | 20\n4 | 19\n5 | 5\n6 | 7\n7 | 0\n8 | 11", "question": "Read the following table regarding \"Drawing a card between 2 and 8\" and then write Python code to answer a question.\n\nNumber drawn | Frequency\n2 | 16\n3 | 20\n4 | 19\n5 | 5\n6 | 7\n7 | 0\n8 | 11\n\nAs part of a math lab, Rosanne tracked the number of times her classmates drew a number between 2 and 8. Which number was drawn the fewest times?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency data for each number drawn\nfrequency = {\n    2: 16,\n    3: 20,\n    4: 19,\n    5: 5,\n    6: 7,\n    7: 0,\n    8: 11\n}\n# Find the number drawn the fewest times\nfewest_drawn_number = min(frequency, key=frequency.get)\nanswer = fewest_drawn_number\nprint(answer)", "frequency = {\n    2: 16,\n    3: 20,\n    4: 19,\n    5: 5,\n    6: 7,\n    7: 0,\n    8: 11\n}\n\n# Find the number drawn the fewest times and its frequency\nfewest_drawn_number = min(frequency, key=frequency.get)\nfewest_drawn_frequency = frequency[fewest_drawn_number]\n\n# Store the result in the answer variable\nanswer = (fewest_drawn_number, fewest_drawn_frequency)\nprint(answer)", "frequency = {\n    2: 16,\n    3: 20,\n    4: 19,\n    5: 5,\n    6: 7,\n    7: 0,\n    8: 11\n}\n\n# Find the number drawn the fewest times\nfewest_drawn_number = min(frequency, key=frequency.get)\nanswer = fewest_drawn_number\n\nprint(answer)", "frequency = {\n    2: 16,\n    3: 20,\n    4: 19,\n    5: 5,\n    6: 7,\n    7: 0,\n    8: 11\n}\nfewest_drawn_number = min(frequency, key=frequency.get)\nanswer = int(fewest_drawn_number)  # Convert to integer for clarity\nprint(answer)"], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Student council committees\" and then answer a question.\n\nCommittee | Students | Teachers\nCafeteria | 13 | 7\nParty | 18 | 16\nSports | 13 | 8\nGraduation | 9 | 15", "question": "Read the following table regarding \"Student council committees\" and then write Python code to answer a question.\n\nCommittee | Students | Teachers\nCafeteria | 13 | 7\nParty | 18 | 16\nSports | 13 | 8\nGraduation | 9 | 15\n\nSparrowtown High School's student council recruited teachers and students to serve on each of its committees. Are there fewer people on the party committee or the cafeteria committee? Choose from the the options: ['cafeteria', 'party']", "answer": "cafeteria", "ques_type": "multi_choice", "choices": ["cafeteria", "party"], "code": [
  "# Python code, return answer \n# Calculate the total number of people on each committee\ncafeteria_total = 13 + 7\nparty_total = 18 + 16\n\n# Determine which committee has fewer people\nif cafeteria_total < party_total:\n    answer = 'cafeteria'\nelse:\n    answer = 'party'\n\nprint(answer)", "# Calculate total number of people on each committee\ncafeteria_total = 13 + 7\nparty_total = 18 + 16\n\n# Compare the totals and assign the correct answer\nif party_total < cafeteria_total:\n    answer = 'party'\nelse:\n    answer = 'cafeteria'\n\nprint(answer)", "# Define the number of students and teachers in each committee\ncafeteria_students = 13\ncafeteria_teachers = 7\nparty_students = 18\nparty_teachers = 16\n\n# Calculate the total number of people in each committee\ncafeteria_total = cafeteria_students + cafeteria_teachers\nparty_total = party_students + party_teachers\n\n# Determine which committee has fewer people\nif party_total < cafeteria_total:\n    answer = 'party'\nelse:\n    answer = 'cafeteria'\n\nprint(answer)", "cafeteria_students = 13\ncafeteria_teachers = 7\nparty_students = 18\nparty_teachers = 16\n\ncafeteria_total = cafeteria_students + cafeteria_teachers\nparty_total = party_students + party_teachers\n\nif party_total < cafeteria_total:\n    answer = 'party'\nelse:\n    answer = 'cafeteria'\n\nprint(answer)"
], "prediction": ["cafeteria", "cafeteria", "cafeteria", "cafeteria"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Billboards per city\" and then answer a question.\n\nStem | Leaf \n0 | 2, 4, 6\n1 | 4, 6, 7, 9, 9\n2 | 4\n3 | 3\n4 | 3, 5, 6\n5 | 5, 6", "question": "Read the following table regarding \"Billboards per city\" and then write Python code to answer a question.\n\nStem | Leaf \n0 | 2, 4, 6\n1 | 4, 6, 7, 9, 9\n2 | 4\n3 | 3\n4 | 3, 5, 6\n5 | 5, 6\n\nThe advertising agency counted the number of billboards in each city in the state. What is the largest number of billboards?", "answer": "56", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# The largest number of billboards corresponds to the largest value in the stem-and-leaf display.\nlargest_billboards = 56  # From the stem \"5 | 5, 6\", the largest value is 56.\nanswer = largest_billboards\nprint(answer)", "# Define the stem and leaf data structure as a list of tuples\nstem_and_leaf = [(0, [2, 4, 6]), (1, [4, 6, 7, 9, 9]), (2, [4]), (3, [3]), (4, [3, 5, 6]), (5, [5, 6])]\n\n# Initialize a variable to hold the largest number of billboards\nlargest_billboards = 0\n\n# Iterate through the stem and leaf data structure to find the largest number\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        billboards = stem * 10 + leaf\n        if billboards > largest_billboards:\n            largest_billboards = billboards\n\nanswer = largest_billboards\nprint(answer)", "stem_and_leaf = [(0, [2, 4, 6]), (1, [4, 6, 7, 9, 9]), (2, [4]), (3, [3]), (4, [3, 5, 6]), (5, [5, 6])]\nlargest_billboards = 0\n\nfor stem, leaf_list in stem_and_leaf:\n    for leaf in leaf_list:\n        billboards = stem * 10 + leaf\n        if billboards > largest_billboards:\n            largest_billboards = billboards\n\nanswer = largest_billboards  # Ensuring the answer is stored as an integer\nprint(answer)", "# Define stem and leaf data structure as a list of tuples  \nstem_and_leaf = [(0, [2, 4, 6]), (1, [4, 6, 7, 9, 9]), (2, [4]), (3, [3]), (4, [3, 5, 6]), (5, [5, 6])]  \n  \n# Initialize variable to track the largest number of billboards  \nlargest_billboards = 0  \n  \n# Iterate through the stem and leaf data structure to find the largest number of billboards  \nfor stem, leaf_list in stem_and_leaf:  \n    for leaf in leaf_list:  \n        billboards = stem * 10 + leaf  \n        if billboards > largest_billboards:  \n            largest_billboards = billboards  \n  \n# Store the result as an integer  \nanswer = largest_billboards  \nprint(answer)  # Output the answer"
], "prediction": [56.0, 56.0, 56.0, 56.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npepper | $8 per lb\ncinnamon | $7 per lb\nturmeric | $6 per lb\ncumin | $8 per lb\npaprika | $4 per lb", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npepper | $8 per lb\ncinnamon | $7 per lb\nturmeric | $6 per lb\ncumin | $8 per lb\npaprika | $4 per lb\n\nDerek bought 1.3 pounds of pepper. How much did he spend?", "answer": "10.40", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_pepper = 8  # price of pepper per lb\npounds_bought = 1.3  # amount of pepper bought\n# Calculate total cost\ntotal_cost = price_per_pound_pepper * pounds_bought\nanswer = total_cost\nprint(answer)", "# Define the price per pound of pepper and the amount bought\nprice_per_pound_pepper = 8  # price of pepper per lb\npounds_bought = 1.3  # amount of pepper bought\n\n# Calculate the total cost\ntotal_cost = price_per_pound_pepper * pounds_bought\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the price per pound of pepper and the amount bought\nprice_per_pound_pepper = 8  # price of pepper per lb\npounds_bought = 1.3  # amount of pepper bought\n\n# Calculate total cost\ntotal_cost = price_per_pound_pepper * pounds_bought\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the price per pound of pepper and the amount bought\nprice_per_pound_pepper = 8  # price of pepper per lb\npounds_bought = 1.3  # amount of pepper bought\n\n# Calculate total cost\ntotal_cost = price_per_pound_pepper * pounds_bought\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)"], "prediction": [10.4, 10.4, 10.4, 10.4], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPattern A | add | 2 6 | 8 | 10 | 12\nPattern B | add | 8 22 | 30 | 38 | 46", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPattern A | add | 2 6 | 8 | 10 | 12\nPattern B | add | 8 22 | 30 | 38 | 46\n\nCompare pattern A to pattern B. Which statement is true?  Choose from the the options: ['Each term in pattern B can be found by subtracting the corresponding term in pattern A from 28.', 'Each term in pattern B can be found by multiplying the corresponding term in pattern A by 4 and then subtracting 2.']", "answer": "Each term in pattern B can be found by multiplying the corresponding term in pattern A by 4 and then subtracting 2.", "ques_type": "multi_choice", "choices": ["Each term in pattern B can be found by subtracting the corresponding term in pattern A from 28.", "Each term in pattern B can be found by multiplying the corresponding term in pattern A by 4 and then subtracting 2."], "code": [
  "# Python code, return answer \n# Values from pattern A\npattern_a = [2, 6, 8, 10, 12]\n# Values from pattern B\npattern_b = [8, 22, 30, 38, 46]\n\n# Check the first option\noption_1_true = all((28 - a == b) for a, b in zip(pattern_a, pattern_b))\n\n# Check the second option\noption_2_true = all((a * 4 - 2 == b) for a, b in zip(pattern_a, pattern_b))\n\n# Determine the correct statement\nif option_1_true:\n    answer = 'Each term in pattern B can be found by subtracting the corresponding term in pattern A from 28.'\nelif option_2_true:\n    answer = 'Each term in pattern B can be found by multiplying the corresponding term in pattern A by 4 and then subtracting 2.'\nelse:\n    answer = 'Neither statement is true.'\n\nprint(answer)", "pattern_a = [2, 6, 8, 10, 12]\npattern_b = [8, 22, 30, 38, 46]\n\n# Check if each term in pattern B is found by subtracting the corresponding term in pattern A from 28\noption_1_true = all((28 - a == b) for a, b in zip(pattern_a, pattern_b))\n\n# Check if each term in pattern B is found by multiplying the corresponding term in pattern A by 4 and then subtracting 2\noption_2_true = all((a * 4 - 2 == b) for a, b in zip(pattern_a, pattern_b))\n\nif option_1_true:\n    answer = 'Each term in pattern B can be found by subtracting the corresponding term in pattern A from 28.'\nelif option_2_true:\n    answer = 'Each term in pattern B can be found by multiplying the corresponding term in pattern A by 4 and then subtracting 2.'\nelse:\n    answer = 'Neither statement is true.'\n\nprint(answer)", "pattern_a = [2, 6, 8, 10, 12]\npattern_b = [8, 22, 30, 38, 46]\n\n# Check the first option\noption_1_true = all((28 - a == b) for a, b in zip(pattern_a, pattern_b))\n\n# Check the second option\noption_2_true = all((a * 4 - 2 == b) for a, b in zip(pattern_a, pattern_b))\n\n# Determine the correct statement\nif option_1_true:\n    answer = 'Each term in pattern B can be found by subtracting the corresponding term in pattern A from 28.'\nelif option_2_true:\n    answer = 'Each term in pattern B can be found by multiplying the corresponding term in pattern A by 4 and then subtracting 2.'\nelse:\n    answer = 'Neither statement is true.'\n\nprint(answer)", "# Define the patterns\npattern_a = [2, 6, 8, 10, 12]\npattern_b = [8, 22, 30, 38, 46]\n\n# Check the first option\noption_1_true = all((28 - a == b) for a, b in zip(pattern_a, pattern_b))\n\n# Check the second option\noption_2_true = all((a * 4 - 2 == b) for a, b in zip(pattern_a, pattern_b))\n\n# Determine the correct answer based on the checks\nif option_1_true:\n    answer = 'Each term in pattern B can be found by subtracting the corresponding term in pattern A from 28.'\nelif option_2_true:\n    answer = 'Each term in pattern B can be found by multiplying the corresponding term in pattern A by 4 and then subtracting 2.'\nelse:\n    answer = 'Neither statement is true.'\n\nprint(answer)"
], "prediction": ["Neither statement is true.", "Neither statement is true.", "Neither statement is true.", "Neither statement is true."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Law firm hours billed\" and then answer a question.\n\nPartner | Hours billed\nKendall | 760\nMelissa | 910\nAllie | 1,000\nBob | 930\nGordon | 820\nGina | 750", "question": "Read the following table regarding \"Law firm hours billed\" and then write Python code to answer a question.\n\nPartner | Hours billed\nKendall | 760\nMelissa | 910\nAllie | 1,000\nBob | 930\nGordon | 820\nGina | 750\n\nA law firm in Kensington kept track of how many hours were billed by each partner last year. What fraction of the hours were billed by Bob? Simplify your answer.", "answer": "93/517", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total hours billed by all partners\ntotal_hours = 760 + 910 + 1000 + 930 + 820 + 750\n# Hours billed by Bob\nbob_hours = 930\n# Calculate the fraction of hours billed by Bob\nfraction_bob = bob_hours / total_hours\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_fraction = Fraction(bob_hours, total_hours).limit_denominator()\nanswer = simplified_fraction\nprint(answer)", "# Define the hours billed by each partner\nhours_billed = {\n    'Kendall': 760,\n    'Melissa': 910,\n    'Allie': 1000,\n    'Bob': 930,\n    'Gordon': 820,\n    'Gina': 750\n}\n\n# Calculate total hours billed\ntotal_hours = sum(hours_billed.values())\n\n# Get Bob's hours\nbob_hours = hours_billed['Bob']\n\n# Calculate the fraction of hours billed by Bob and simplify it\nfrom fractions import Fraction\nfraction_bob = Fraction(bob_hours, total_hours).limit_denominator()\n\n# Store the result in the answer variable\nanswer = fraction_bob\nprint(answer)", "# Store the hours billed by each partner in a dictionary  \nhours_billed = {  \n    'Kendall': 760,  \n    'Melissa': 910,  \n    'Allie': 1000,  \n    'Bob': 930,  \n    'Gordon': 820,  \n    'Gina': 750  \n}  \n  \n# Calculate the total hours billed  \ntotal_hours = sum(hours_billed.values())  \n  \n# Get the hours billed by Bob  \nbob_hours = hours_billed['Bob']  \n  \n# Calculate the fraction of hours billed by Bob and simplify it  \nfrom fractions import Fraction  \nfraction_bob = Fraction(bob_hours, total_hours).limit_denominator()  \n  \n# Store the result in the variable 'answer'  \nanswer = fraction_bob  \nprint(answer)", "# Dictionary storing the hours billed by each partner\nhours_billed = {  \n    'Kendall': 760,  \n    'Melissa': 910,  \n    'Allie': 1000,  \n    'Bob': 930,  \n    'Gordon': 820,  \n    'Gina': 750  \n}  \n\n# Calculate total hours billed\ntotal_hours = sum(hours_billed.values())  \n\n# Get the hours billed by Bob\nbob_hours = hours_billed['Bob']  \n\n# Calculate the fraction of hours billed by Bob\nfrom fractions import Fraction  \nfraction_bob = Fraction(bob_hours, total_hours).limit_denominator()  \n\n# Store the result in the variable 'answer'\nanswer = fraction_bob  \nprint(answer)"
], "prediction": [0.17988, 0.17988, 0.17988, 0.17988], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Trips to the zoo last year\" and then answer a question.\n\nNumber of trips | Frequency\n0 | 13\n1 | 4\n2 | 16\n3 | 0\n4 | 3\n5 | 5", "question": "Read the following table regarding \"Trips to the zoo last year\" and then write Python code to answer a question.\n\nNumber of trips | Frequency\n0 | 13\n1 | 4\n2 | 16\n3 | 0\n4 | 3\n5 | 5\n\nThe members of the science club shared how many times they had been to the zoo last year. How many members went to the zoo more than 3 times?", "answer": "8", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of trips to the zoo more than 3 times\nfrequency_data = {\n    0: 13,\n    1: 4,\n    2: 16,\n    3: 0,\n    4: 3,\n    5: 5\n}\n\n# Calculate the number of members who went to the zoo more than 3 times\nmembers_more_than_3_trips = frequency_data[4] + frequency_data[5]\nanswer = members_more_than_3_trips\nprint(answer)", "frequency_data = {\n    0: 13,\n    1: 4,\n    2: 16,\n    3: 0,\n    4: 3,\n    5: 5\n}\n\n# Calculate the number of members who went to the zoo more than 3 times\nmembers_more_than_3_trips = frequency_data[4] + frequency_data[5]\nanswer = int(members_more_than_3_trips)  # Ensure the answer is an integer\nprint(answer)", "frequency_data = {\n    0: 13,\n    1: 4,\n    2: 16,\n    3: 0,\n    4: 3,\n    5: 5\n}\nmembers_more_than_3_trips = frequency_data[4] + frequency_data[5]\nanswer = members_more_than_3_trips  # No need to convert to int since it's already an integer\nprint(answer)", "frequency_data = {\n    0: 13,\n    1: 4,\n    2: 16,\n    3: 0,\n    4: 3,\n    5: 5\n}\nmembers_more_than_3_trips = frequency_data[4] + frequency_data[5]\nanswer = members_more_than_3_trips  # This will be an integer\nprint(answer)"], "prediction": [8.0, 8.0, 8.0, 8.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\njar of pickles | $0.87\njar of olives | $0.42\ncan of mushrooms | $0.95\njar of applesauce | $0.88", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\njar of pickles | $0.87\njar of olives | $0.42\ncan of mushrooms | $0.95\njar of applesauce | $0.88\n\nHow much money does Cody need to buy 5 jars of olives?", "answer": "2.10", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_jar_olives = 0.42 \njars_bought = 5 \ntotal_cost = price_per_jar_olives * jars_bought\nanswer = total_cost\nprint(answer)", "price_per_jar_olives = 0.42 \njars_bought = 5 \ntotal_cost = price_per_jar_olives * jars_bought\nanswer = \"${:.2f}\".format(total_cost)\nprint(answer)", "price_per_jar_olives = 0.42 \njars_bought = 5 \ntotal_cost = price_per_jar_olives * jars_bought\nanswer = total_cost  # Store as a float for further calculations\nprint(answer)", "price_per_jar_olives = 0.42 \njars_bought = 5 \ntotal_cost = price_per_jar_olives * jars_bought\nanswer = \"${:.2f}\".format(total_cost)  # Format as a string with two decimal places\nprint(answer)"], "prediction": [2.1, "$2.10", 2.1, "$2.10"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Stock prices\" and then answer a question.\n\nCompany | Wednesday | Thursday\nThompson Corporation | $19 | $18\nWatson and Partners | $20 | $6\nComputer Data Company | $4 | $18\nWhite and Company | $14 | $12\nHouston Sporting Goods | $14 | $13", "question": "Read the following table regarding \"Stock prices\" and then write Python code to answer a question.\n\nCompany | Wednesday | Thursday\nThompson Corporation | $19 | $18\nWatson and Partners | $20 | $6\nComputer Data Company | $4 | $18\nWhite and Company | $14 | $12\nHouston Sporting Goods | $14 | $13\n\nA stock broker followed the stock prices of a certain set of companies. On Wednesday, how much more did Thompson Corporation's stock cost than Houston Sporting Goods's stock?", "answer": "5", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \nthompson_corporation_price_wednesday = 19 \nhouston_sporting_goods_price_wednesday = 14 \n\n# Calculate the difference\ndifference = thompson_corporation_price_wednesday - houston_sporting_goods_price_wednesday\nanswer = difference\nprint(answer)", "# Prices of stocks on Wednesday\nthompson_corporation_price_wednesday = 19 \nhouston_sporting_goods_price_wednesday = 14 \n\n# Calculate the difference\ndifference = thompson_corporation_price_wednesday - houston_sporting_goods_price_wednesday\n\n# Store the result in the variable 'answer'\nanswer = difference\n\n# Print the result with context\nprint(f\"Thompson Corporation's stock cost ${answer} more than Houston Sporting Goods's stock on Wednesday.\")", "# Define stock prices on Wednesday\nthompson_corporation_price_wednesday = 19 \nhouston_sporting_goods_price_wednesday = 14 \n\n# Calculate the difference in stock prices\ndifference = thompson_corporation_price_wednesday - houston_sporting_goods_price_wednesday\n\n# Store the result in the variable 'answer'\nanswer = difference\n\n# Print the answer\nprint(f\"Thompson Corporation's stock cost ${answer} more than Houston Sporting Goods's stock on Wednesday.\")", "# Define the stock prices for Wednesday\nthompson_corporation_price_wednesday = 19 \nhouston_sporting_goods_price_wednesday = 14 \n\n# Calculate the difference in stock prices\ndifference = thompson_corporation_price_wednesday - houston_sporting_goods_price_wednesday\n\n# Store the result in the variable 'answer'\nanswer = difference\n\n# Print the result with a clear message\nprint(f\"Thompson Corporation's stock cost ${answer} more than Houston Sporting Goods's stock on Wednesday.\")"
], "prediction": [5.0, 5.0, 5.0, 5.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Writing letters\" and then answer a question.\n\nLetters written | Frequency\n0 | 3\n1 | 16\n2 | 9\n3 | 6", "question": "Read the following table regarding \"Writing letters\" and then write Python code to answer a question.\n\nLetters written | Frequency\n0 | 3\n1 | 16\n2 | 9\n3 | 6\n\nA researcher asked people how many letters they had written in the past year and recorded the results. How many people did not write letters?", "answer": "3", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Frequency of people who wrote 0 letters\nfrequency_zero_letters = 3\nanswer = frequency_zero_letters\nprint(answer)", "frequency_zero_letters = 3\nanswer = frequency_zero_letters  # Keeping it as an integer\nprint(answer)", "# Number of people who did not write letters\nfrequency_zero_letters = 3\nanswer = frequency_zero_letters  # Keeping it as an integer\nprint(answer)", "# Define the frequency of letters written\nfrequency_zero_letters = 3\n\n# Store the result in the variable 'answer'\nanswer = frequency_zero_letters\n\n# Output the answer\nprint(answer)  # This will output 3 as an integer"], "prediction": [3.0, 3.0, 3.0, 3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbook about helicopters | $2.00\nbook about reptiles | $6.00\nbook about dinosaurs | $3.00\nbook about outer space | $1.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbook about helicopters | $2.00\nbook about reptiles | $6.00\nbook about dinosaurs | $3.00\nbook about outer space | $1.00\n\nMiguel has $6.00. Does he have enough to buy a book about dinosaurs and a book about helicopters? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \ncost_book_helicopters = 2.00\ncost_book_dinosaurs = 3.00\ntotal_cost = cost_book_helicopters + cost_book_dinosaurs\nmiguel_budget = 6.00\n\n# Check if Miguel has enough money\nif miguel_budget >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "# Define the costs of the books\ncost_book_helicopters = 2.00\ncost_book_dinosaurs = 3.00\n\n# Calculate the total cost\ntotal_cost = cost_book_helicopters + cost_book_dinosaurs\n\n# Define Miguel's budget\nmiguel_budget = 6.00\n\n# Determine if Miguel has enough money\nanswer = 'yes' if miguel_budget >= total_cost else 'no'\n\nprint(answer)", "# Define the cost of the books\ncost_book_helicopters = 2.00\ncost_book_dinosaurs = 3.00\n\n# Calculate the total cost\ntotal_cost = cost_book_helicopters + cost_book_dinosaurs\n\n# Define Miguel's budget\nmiguel_budget = 6.00\n\n# Determine if Miguel has enough money and assign the result to 'answer'\nanswer = 'yes' if miguel_budget >= total_cost else 'no'\n\n# Print the answer\nprint(answer)", "cost_book_helicopters = 2.00\ncost_book_dinosaurs = 3.00\ntotal_cost = cost_book_helicopters + cost_book_dinosaurs\nmiguel_budget = 6.00\nanswer = 'yes' if miguel_budget >= total_cost else 'no'"
], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Chocolate preferences\" and then answer a question.\n\nType | Number of respondents\nDark chocolate | 480\nMilk chocolate | 530\nWhite chocolate | 1,000", "question": "Read the following table regarding \"Chocolate preferences\" and then write Python code to answer a question.\n\nType | Number of respondents\nDark chocolate | 480\nMilk chocolate | 530\nWhite chocolate | 1,000\n\nA survey was conducted to learn people's chocolate preferences. What fraction of the respondents preferred milk chocolate? Simplify your answer.", "answer": "53/201", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total respondents\ntotal_respondents = 480 + 530 + 1000\n# Respondents who preferred milk chocolate\nmilk_chocolate_respondents = 530\n# Calculate the fraction of respondents who preferred milk chocolate\nfraction_milk_chocolate = milk_chocolate_respondents / total_respondents\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_fraction = Fraction(milk_chocolate_respondents, total_respondents).limit_denominator()\nanswer = simplified_fraction\nprint(answer)", "# Define the number of respondents for each type of chocolate\ndark_chocolate_respondents = 480\nmilk_chocolate_respondents = 530\nwhite_chocolate_respondents = 1000\n\n# Calculate the total number of respondents\ntotal_respondents = dark_chocolate_respondents + milk_chocolate_respondents + white_chocolate_respondents\n\n# Calculate the fraction of respondents who preferred milk chocolate\nfrom fractions import Fraction\nfraction_milk_chocolate = Fraction(milk_chocolate_respondents, total_respondents).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = fraction_milk_chocolate\nprint(answer)", "dark_chocolate_respondents = 480\nmilk_chocolate_respondents = 530\nwhite_chocolate_respondents = 1000\ntotal_respondents = dark_chocolate_respondents + milk_chocolate_respondents + white_chocolate_respondents\n\nfrom fractions import Fraction\nfraction_milk_chocolate = Fraction(milk_chocolate_respondents, total_respondents).limit_denominator()\nanswer = fraction_milk_chocolate\nprint(answer)", "dark_chocolate_respondents = 480\nmilk_chocolate_respondents = 530\nwhite_chocolate_respondents = 1000\ntotal_respondents = dark_chocolate_respondents + milk_chocolate_respondents + white_chocolate_respondents\n\nfrom fractions import Fraction\nfraction_milk_chocolate = Fraction(milk_chocolate_respondents, total_respondents).limit_denominator()\n\nanswer = f\"{fraction_milk_chocolate.numerator}/{fraction_milk_chocolate.denominator}\"\nprint(answer)"
], "prediction": [0.26368, 0.26368, 0.26368, "53/201"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Pieces of fruit picked\" and then answer a question.\n\nFruits | Pieces of fruit\nLemons | 41\nNectarines | 100\nApples | 71\nPlums | 13\nPears | 55", "question": "Read the following table regarding \"Pieces of fruit picked\" and then write Python code to answer a question.\n\nFruits | Pieces of fruit\nLemons | 41\nNectarines | 100\nApples | 71\nPlums | 13\nPears | 55\n\nBrett, who has five different fruit trees growing in his yard, kept track of how many pieces of fruit he picked this year. What fraction of the pieces of fruit picked were pears? Simplify your answer.", "answer": "11/56", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total pieces of fruit picked\ntotal_fruit = 41 + 100 + 71 + 13 + 55\n# Pieces of pears picked\npears_picked = 55\n# Calculate the fraction of pieces of fruit picked that were pears\nfraction_pears = pears_picked / total_fruit\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_fraction = Fraction(pears_picked, total_fruit).limit_denominator()\nanswer = simplified_fraction\nprint(answer)", "# Define the number of pieces of fruit picked\nlemons = 41\nnectarines = 100\napples = 71\nplums = 13\npears = 55\n\n# Calculate the total number of pieces of fruit picked\ntotal_fruit = lemons + nectarines + apples + plums + pears\n\n# Define the number of pears picked\npears_picked = pears\n\n# Calculate the fraction of pears picked and simplify it\nfrom fractions import Fraction\nfraction_pears = Fraction(pears_picked, total_fruit).limit_denominator()\n\n# Store the result in the answer variable\nanswer = fraction_pears\nprint(answer)", "lemons = 41\nnectarines = 100\napples = 71\nplums = 13\npears = 55\ntotal_fruit = lemons + nectarines + apples + plums + pears\npears_picked = pears\n\nfrom fractions import Fraction\nfraction_pears = Fraction(pears_picked, total_fruit).limit_denominator()\nanswer = fraction_pears\nprint(answer)", "# Define the number of pieces of fruit picked\nlemons = 41\nnectarines = 100\napples = 71\nplums = 13\npears = 55\n\n# Calculate the total number of pieces of fruit\ntotal_fruit = lemons + nectarines + apples + plums + pears\n\n# Calculate the fraction of pieces of fruit that were pears\nfrom fractions import Fraction\nfraction_pears = Fraction(pears, total_fruit).limit_denominator()\n\n# Store the result in the variable 'answer'\nanswer = fraction_pears\n\n# Output the answer\nprint(answer)"
], "prediction": [0.19643, 0.19643, 0.19643, 0.19643], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Cows per farm\" and then answer a question.\n\nStem | Leaf \n3 | 0, 2, 2, 3, 9\n4 | 2, 6\n5 | 4\n6 | 3\n7 | 8\n8 | 8\n9 | 0", "question": "Read the following table regarding \"Cows per farm\" and then write Python code to answer a question.\n\nStem | Leaf \n3 | 0, 2, 2, 3, 9\n4 | 2, 6\n5 | 4\n6 | 3\n7 | 8\n8 | 8\n9 | 0\n\nA researcher recorded the number of cows on each farm in the county. How many farms have at least 70 cows but fewer than 100 cows?", "answer": "3", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Listing the number of cows based on the stem-and-leaf display\ncows_per_farm = [\n    30, 32, 32, 33, 39,  # Stem 3\n    42, 46,              # Stem 4\n    54,                  # Stem 5\n    63,                  # Stem 6\n    78,                  # Stem 7\n    88,                  # Stem 8\n    90                   # Stem 9\n]\n\n# Counting the farms with at least 70 and fewer than 100 cows\ncount_farms = sum(1 for cows in cows_per_farm if 70 <= cows < 100)\nanswer = count_farms\nprint(answer)", "# List of cows per farm based on the stem and leaf data\ncows_per_farm = [\n    30, 32, 32, 33, 39,  # Stem 3\n    42, 46,              # Stem 4\n    54,                  # Stem 5\n    63,                  # Stem 6\n    78,                  # Stem 7\n    88,                  # Stem 8\n    90                   # Stem 9\n]\n\n# Count the number of farms with at least 70 cows but fewer than 100 cows\ncount_farms = sum(1 for cows in cows_per_farm if 70 <= cows < 100)\nanswer = int(count_farms)  # Ensure the result is an integer\nprint(answer)", "cows_per_farm = [\n    30, 32, 32, 33, 39,  # Stem 3\n    42, 46,              # Stem 4\n    54,                  # Stem 5\n    63,                  # Stem 6\n    78,                  # Stem 7\n    88,                  # Stem 8\n    90                   # Stem 9\n]\n\n# Count farms with at least 70 cows but fewer than 100 cows\ncount_farms = sum(1 for cows in cows_per_farm if 70 <= cows < 100)\nanswer = count_farms  # This will be an integer by default\nprint(answer)", "cows_per_farm = [\n    30, 32, 32, 33, 39,  # Stem 3\n    42, 46,              # Stem 4\n    54,                  # Stem 5\n    63,                  # Stem 6\n    78,                  # Stem 7\n    88,                  # Stem 8\n    90                   # Stem 9\n]\n\n# Count the number of farms with at least 70 cows but fewer than 100 cows\ncount_farms = len([cows for cows in cows_per_farm if 70 <= cows < 100])\nanswer = count_farms\nprint(answer)"
], "prediction": [3.0, 3.0, 3.0, 3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Vacation days taken by Abby\" and then answer a question.\n\nYear | Vacation days\n2013 | 26\n2014 | 39\n2015 | 34\n2016 | 39\n2017 | 26", "question": "Read the following table regarding \"Vacation days taken by Abby\" and then write Python code to answer a question.\n\nYear | Vacation days\n2013 | 26\n2014 | 39\n2015 | 34\n2016 | 39\n2017 | 26\n\nTo figure out how many vacation days she had left to use, Abby looked over her old calendars to figure out how many days of vacation she had taken each year. According to the table, what was the rate of change between 2014 and 2015?", "answer": "-5", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nvacation_days_2014 = 39\nvacation_days_2015 = 34\n\n# Calculate the rate of change\nrate_of_change = vacation_days_2015 - vacation_days_2014\nanswer = rate_of_change\nprint(answer)", "# Define the vacation days taken by Abby in 2014 and 2015\nvacation_days_2014 = 39\nvacation_days_2015 = 34\n\n# Calculate the rate of change in vacation days\nrate_of_change = vacation_days_2015 - vacation_days_2014\n\n# Store the result in the answer variable\nanswer = f\"The rate of change in vacation days taken by Abby between 2014 and 2015 is {rate_of_change} days.\"\n\nprint(answer)", "vacation_days_2014 = 39\nvacation_days_2015 = 34\nrate_of_change = vacation_days_2015 - vacation_days_2014\nanswer = rate_of_change\nprint(answer)", "# Define the number of vacation days taken by Abby in 2014 and 2015\nvacation_days_2014 = 39\nvacation_days_2015 = 34\n\n# Calculate the rate of change in vacation days taken between 2014 and 2015\nrate_of_change = vacation_days_2015 - vacation_days_2014\n\n# Store the result in the variable 'answer'\nanswer = rate_of_change\n\n# Print the result with context\nprint(f\"The rate of change in vacation days taken from 2014 to 2015 is: {answer} days\")"], "prediction": [-5.0, "The rate of change in vacation days taken by Abby between 2014 and 2015 is -5 days.", -5.0, -5.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$130 | 14,500 | 3,600\n$180 | 11,500 | 6,000\n$230 | 8,500 | 8,400\n$280 | 5,500 | 10,800\n$330 | 2,500 | 13,200", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nPrice | Quantity demanded | Quantity supplied\n$130 | 14,500 | 3,600\n$180 | 11,500 | 6,000\n$230 | 8,500 | 8,400\n$280 | 5,500 | 10,800\n$330 | 2,500 | 13,200\n\nLook at the table. Then answer the question. At a price of $180, is there a shortage or a surplus? Choose from the the options: ['shortage', 'surplus']", "answer": "shortage", "ques_type": "multi_choice", "choices": ["shortage", "surplus"], "code": ["# Python code, return answer \nquantity_demanded_at_180 = 11500 \nquantity_supplied_at_180 = 6000 \n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_180 > quantity_supplied_at_180:\n    answer = 'shortage'\nelse:\n    answer = 'surplus'\n\nprint(answer)", "quantity_demanded_at_180 = 11500 \nquantity_supplied_at_180 = 6000 \n\nif quantity_demanded_at_180 > quantity_supplied_at_180:\n    answer = 'shortage'\nelif quantity_demanded_at_180 < quantity_supplied_at_180:\n    answer = 'surplus'\nelse:\n    answer = 'equilibrium'  # In case of equality\n\nprint(answer)", "# Define the quantities demanded and supplied at a price of $180\nquantity_demanded_at_180 = 11500 \nquantity_supplied_at_180 = 6000 \n\n# Determine if there is a shortage or surplus\nif quantity_demanded_at_180 > quantity_supplied_at_180:\n    answer = 'shortage'\nelse:\n    answer = 'surplus'  # No need for equilibrium check since it's not asked\n\nprint(answer)", "quantity_demanded_at_180 = 11500 \nquantity_supplied_at_180 = 6000 \n\nif quantity_demanded_at_180 > quantity_supplied_at_180:\n    answer = 'shortage'\nelse:\n    answer = 'surplus'\n\nprint(answer)"], "prediction": ["shortage", "shortage", "shortage", "shortage"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\npurple clam shell | $0.07\nwhite spindle shell | $0.07\nspiral snail shell | $0.05\nscallop shell | $0.01\npink and white striped shell | $0.07", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\npurple clam shell | $0.07\nwhite spindle shell | $0.07\nspiral snail shell | $0.05\nscallop shell | $0.01\npink and white striped shell | $0.07\n\nDerek has $0.13. Does he have enough to buy a spiral snail shell and a pink and white striped shell? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \nprice_spiral_snail_shell = 0.05\nprice_pink_white_striped_shell = 0.07\ntotal_cost = price_spiral_snail_shell + price_pink_white_striped_shell\nderek_money = 0.13\n\n# Check if Derek has enough money\nif derek_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)", "# Define the prices of the shells\nprice_spiral_snail_shell = 0.05\nprice_pink_white_striped_shell = 0.07\n\n# Calculate total cost\ntotal_cost = price_spiral_snail_shell + price_pink_white_striped_shell\n\n# Derek's available money\nderek_money = 0.13\n\n# Determine if Derek has enough money\nanswer = 'yes' if derek_money >= total_cost else 'no'\n\nprint(answer)", "# Define the prices of the shells\nprice_spiral_snail_shell = 0.05\nprice_pink_white_striped_shell = 0.07\n\n# Calculate the total cost\ntotal_cost = price_spiral_snail_shell + price_pink_white_striped_shell\n\n# Define the amount of money Derek has\nderek_money = 0.13\n\n# Determine if Derek has enough money\nanswer = 'yes' if derek_money >= total_cost else 'no'\n\n# Print the answer\nprint(answer)", "# Define the prices of the shells\nprice_spiral_snail_shell = 0.05\nprice_pink_white_striped_shell = 0.07\n\n# Calculate the total cost of the shells\ntotal_cost = price_spiral_snail_shell + price_pink_white_striped_shell\n\n# Amount of money Derek has\nderek_money = 0.13\n\n# Determine if Derek has enough money to buy the shells\nanswer = 'yes' if derek_money >= total_cost else 'no'\n\nprint(answer)"
], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Photographs taken\" and then answer a question.\n\nDay | Number of photographs\nSaturday | 6\nSunday | 0\nMonday | 8\nTuesday | 3\nWednesday | 8", "question": "Read the following table regarding \"Photographs taken\" and then write Python code to answer a question.\n\nDay | Number of photographs\nSaturday | 6\nSunday | 0\nMonday | 8\nTuesday | 3\nWednesday | 8\n\nChad looked at the dates of the digital photos on his computer to find out how many he had taken in the past 5 days. What is the mean of the numbers?", "answer": "5", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of photographs taken each day\nphotographs = [6, 0, 8, 3, 8]\n# Calculate the mean\nmean_photographs = sum(photographs) / len(photographs)\nanswer = mean_photographs\nprint(answer)", "photographs = [6, 0, 8, 3, 8]\nmean_photographs = sum(photographs) / len(photographs)\nanswer = round(mean_photographs)  # Rounding to the nearest whole number\nprint(answer)", "photographs = [6, 0, 8, 3, 8]\nmean_photographs = sum(photographs) // len(photographs)  # Using integer division to get an integer result\nanswer = mean_photographs\nprint(answer)", "photographs = [6, 0, 8, 3, 8]\nmean_photographs = sum(photographs) / len(photographs)  # Using regular division to get a floating-point result\nanswer = mean_photographs\nprint(answer)"], "prediction": [5.0, 5.0, 5.0, 5.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Horizontally | Vertically\n50 photos | 8 | 5\n100 photos | 2 | 3", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Horizontally | Vertically\n50 photos | 8 | 5\n100 photos | 2 | 3\n\nNatalie just returned from a spring break volunteer trip. She is shopping for a photo album that will showcase her photos from the trip. The albums range in photo capacity and orientation. What is the probability that a randomly selected photo album holds exactly 100 photos and is oriented horizontally? Simplify any fractions.", "answer": "1/9", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total options available\ntotal_albums = 2 + 3 + 8 + 5  # Total albums: (Horizontally 50 photos) + (Horizontally 100 photos) + (Vertically 50 photos) + (Vertically 100 photos)\n\n# Options for 100 photos and horizontal orientation\nalbums_100_horizontal = 2  \n\n# Probability calculation\nprobability = albums_100_horizontal / total_albums\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(albums_100_horizontal, total_albums).limit_denominator()\nanswer = simplified_probability\nprint(answer)", "# Total number of albums in each orientation and capacity\nalbums_50_horizontal = 8\nalbums_100_horizontal = 2\nalbums_50_vertical = 5\nalbums_100_vertical = 3\n\n# Calculate the total number of albums\ntotal_albums = albums_50_horizontal + albums_100_horizontal + albums_50_vertical + albums_100_vertical\n\n# Number of albums that hold exactly 100 photos and are oriented horizontally\nalbums_100_horizontal = 2  \n\n# Calculate the probability\nfrom fractions import Fraction\nprobability = Fraction(albums_100_horizontal, total_albums).limit_denominator()\n\n# Store the result in the answer variable\nanswer = probability\nprint(answer)", "albums_50_horizontal = 8\nalbums_100_horizontal = 2\nalbums_50_vertical = 5\nalbums_100_vertical = 3\n\n# Calculate the total number of albums\ntotal_albums = (albums_50_horizontal + albums_100_horizontal + \n                albums_50_vertical + albums_100_vertical)\n\n# The number of albums that hold exactly 100 photos and are oriented horizontally\nalbums_100_horizontal = 2  \n\n# Calculate the probability\nfrom fractions import Fraction\nprobability = Fraction(albums_100_horizontal, total_albums).limit_denominator()\n\n# Store the result in 'answer'\nanswer = probability\nprint(answer)", "albums_50_horizontal = 8\nalbums_100_horizontal = 2\nalbums_50_vertical = 5\nalbums_100_vertical = 3\n\n# Calculate total number of albums\ntotal_albums = (albums_50_horizontal + albums_100_horizontal + \n                albums_50_vertical + albums_100_vertical)\n\n# Probability of selecting an album that holds exactly 100 photos and is oriented horizontally\nalbums_100_horizontal = 2  \nfrom fractions import Fraction\n\n# Calculate the probability and simplify it\nprobability = Fraction(albums_100_horizontal, total_albums).limit_denominator()\nanswer = probability\nprint(answer)"
], "prediction": [0.11111, 0.11111, 0.11111, 0.11111], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Pages per magazine\" and then answer a question.\n\nStem | Leaf \n2 | 6, 6, 6\n3 | \n4 | 9\n5 | 0\n6 | \n7 | 3, 4, 6", "question": "Read the following table regarding \"Pages per magazine\" and then write Python code to answer a question.\n\nStem | Leaf \n2 | 6, 6, 6\n3 | \n4 | 9\n5 | 0\n6 | \n7 | 3, 4, 6\n\nRosa, a journalism student, counted the number of pages in several major magazines. How many magazines had exactly 26 pages?", "answer": "3", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# From the stem-and-leaf display, the leaf for stem '2' indicates the magazines with exactly 26 pages.\n# Stem '2' represents 20s, and the leaf '6' means 26 pages.\nmagazines_with_26_pages = 3  # There are three '6's under the stem '2'.\nanswer = magazines_with_26_pages\nprint(answer)", "# Count the number of magazines with exactly 26 pages  \nmagazines_with_26_pages = 3  # There are three '6's under the stem '2', representing 26 pages.\nanswer = int(magazines_with_26_pages)  # Ensure the answer is an integer\nprint(answer)", "# Count of magazines with exactly 26 pages\nmagazines_with_26_pages = 3  # There are three '6's under the stem '2', representing 26 pages.\nanswer = magazines_with_26_pages  # Keep it as an integer\nprint(answer)", "# Count the number of magazines with exactly 26 pages\nmagazines_with_26_pages = 3  # There are three '6's under the stem '2', representing 26 pages.\nanswer = int(magazines_with_26_pages)  # Ensure the answer is an integer\nprint(answer)"], "prediction": [3.0, 3.0, 3.0, 3.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Track meet schedule\" and then answer a question.\n\nEvent | Begin | End\njavelin throw | 11:00 A.M. | 11:15 A.M.\nsteeplechase | 11:30 A.M. | 11:45 A.M.\nmen's relay | 11:50 A.M. | 12:40 P.M.\ndiscus throw | 12:45 P.M. | 1:45 P.M.\npole vault | 1:55 P.M. | 2:25 P.M.\nlong jump | 2:40 P.M. | 3:15 P.M.", "question": "Read the following table regarding \"Track meet schedule\" and then write Python code to answer a question.\n\nEvent | Begin | End\njavelin throw | 11:00 A.M. | 11:15 A.M.\nsteeplechase | 11:30 A.M. | 11:45 A.M.\nmen's relay | 11:50 A.M. | 12:40 P.M.\ndiscus throw | 12:45 P.M. | 1:45 P.M.\npole vault | 1:55 P.M. | 2:25 P.M.\nlong jump | 2:40 P.M. | 3:15 P.M.\n\nLook at the following schedule. When does the discus throw end? Choose from the the options: ['11:45 A.M.', '2:25 P.M.', '1:45 P.M.', '12:40 P.M.']", "answer": "1:45 P.M.", "ques_type": "multi_choice", "choices": ["11:45 A.M.", "2:25 P.M.", "1:45 P.M.", "12:40 P.M."], "code": [
  "# Python code, return answer \n# The end time for the discus throw as per the schedule.\nend_time_discuss_throw = '1:45 P.M.'\nanswer = end_time_discuss_throw\nprint(answer)", "# Define the schedule as a dictionary\nschedule = {\n    'javelin throw': ('11:00 A.M.', '11:15 A.M.'),\n    'steeplechase': ('11:30 A.M.', '11:45 A.M.'),\n    'men\\'s relay': ('11:50 A.M.', '12:40 P.M.'),\n    'discus throw': ('12:45 P.M.', '1:45 P.M.'),\n    'pole vault': ('1:55 P.M.', '2:25 P.M.'),\n    'long jump': ('2:40 P.M.', '3:15 P.M.')\n}\n\n# Get the end time for the discus throw\nend_time_discus_throw = schedule['discus throw'][1]\n\n# Define the options\noptions = ['11:45 A.M.', '2:25 P.M.', '1:45 P.M.', '12:40 P.M.']\n\n# Check if the end time is in the options\nif end_time_discus_throw in options:\n    answer = end_time_discus_throw\nelse:\n    answer = \"End time not in options\"\n\nprint(answer)", "schedule = {\n    'javelin throw': ('11:00 A.M.', '11:15 A.M.'),\n    'steeplechase': ('11:30 A.M.', '11:45 A.M.'),\n    'men\\'s relay': ('11:50 A.M.', '12:40 P.M.'),\n    'discus throw': ('12:45 P.M.', '1:45 P.M.'),\n    'pole vault': ('1:55 P.M.', '2:25 P.M.'),\n    'long jump': ('2:40 P.M.', '3:15 P.M.')\n}\n\nend_time_discus_throw = schedule['discus throw'][1]\noptions = ['11:45 A.M.', '2:25 P.M.', '1:45 P.M.', '12:40 P.M.']\n\nif end_time_discus_throw in options:\n    answer = end_time_discus_throw\nelse:\n    answer = \"End time not in options\"\n\nprint(answer)", "schedule = {\n    'javelin throw': ('11:00 A.M.', '11:15 A.M.'),\n    'steeplechase': ('11:30 A.M.', '11:45 A.M.'),\n    'men\\'s relay': ('11:50 A.M.', '12:40 P.M.'),\n    'discus throw': ('12:45 P.M.', '1:45 P.M.'),\n    'pole vault': ('1:55 P.M.', '2:25 P.M.'),\n    'long jump': ('2:40 P.M.', '3:15 P.M.')\n}\n\n# Get the end time of the discus throw\nanswer = schedule['discus throw'][1]  # This is '1:45 P.M.'\n\nprint(answer)"
], "prediction": ["1:45 P.M.", "1:45 P.M.", "1:45 P.M.", "1:45 P.M."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nred sports car | $8,473.00\nblack motorcycle | $9,734.00\nred two-door coupe | $7,702.00\nblack convertible | $6,084.00\nold white van | $8,178.00\ndark blue hatchback | $5,038.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nred sports car | $8,473.00\nblack motorcycle | $9,734.00\nred two-door coupe | $7,702.00\nblack convertible | $6,084.00\nold white van | $8,178.00\ndark blue hatchback | $5,038.00\n\nHow much money does Darnel need to buy a black motorcycle, a red two-door coupe, and a black convertible?", "answer": "23,520", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices of the vehicles\nblack_motorcycle_price = 9734.00\nred_two_door_coupe_price = 7702.00\nblack_convertible_price = 6084.00\n\n# Total amount needed to buy the three vehicles\ntotal_amount_needed = black_motorcycle_price + red_two_door_coupe_price + black_convertible_price\nanswer = total_amount_needed\nprint(answer)", "# Prices of the vehicles\nblack_motorcycle_price = 9734.00\nred_two_door_coupe_price = 7702.00\nblack_convertible_price = 6084.00\n\n# Calculate the total amount needed\ntotal_amount_needed = black_motorcycle_price + red_two_door_coupe_price + black_convertible_price\n\n# Format the total amount as currency\nanswer = f\"${total_amount_needed:,.2f}\"\n\n# Print the answer\nprint(answer)", "# Prices of the vehicles\nblack_motorcycle_price = 9734.00\nred_two_door_coupe_price = 7702.00\nblack_convertible_price = 6084.00\n\n# Calculate the total amount needed\ntotal_amount_needed = black_motorcycle_price + red_two_door_coupe_price + black_convertible_price\n\n# Store the numerical value in the answer variable\nanswer = total_amount_needed\n\nprint(answer)", "black_motorcycle_price = 9734.00\nred_two_door_coupe_price = 7702.00\nblack_convertible_price = 6084.00\ntotal_amount_needed = black_motorcycle_price + red_two_door_coupe_price + black_convertible_price\nanswer = f\"${total_amount_needed:,.2f}\"  # Format as currency with two decimal places\nprint(answer)"
], "prediction": [23520.0, "$23,520.00", 23520.0, "$23,520.00"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Cookies baked\" and then answer a question.\n\nName | Number of cookies\nRiley | 71\nHannah | 75\nLayla | 78\nMadelyn | 79", "question": "Read the following table regarding \"Cookies baked\" and then write Python code to answer a question.\n\nName | Number of cookies\nRiley | 71\nHannah | 75\nLayla | 78\nMadelyn | 79\n\nThe art club examined how many cookies each student baked for the bake sale. Who baked the most cookies? Choose from the the options: ['Riley', 'Hannah', 'Layla', 'Madelyn']", "answer": "Madelyn", "ques_type": "multi_choice", "choices": ["Riley", "Hannah", "Layla", "Madelyn"], "code": ["# Python code, return answer \ncookies_baked = {\n    'Riley': 71,\n    'Hannah': 75,\n    'Layla': 78,\n    'Madelyn': 79\n}\n# Find the student who baked the most cookies\nmost_cookies_student = max(cookies_baked, key=cookies_baked.get)\nanswer = most_cookies_student\nprint(answer)", "# Store the number of cookies baked by each student in a dictionary\ncookies_baked = {\n    'Riley': 71,\n    'Hannah': 75,\n    'Layla': 78,\n    'Madelyn': 79\n}\n\n# Find the student who baked the most cookies\nmost_cookies_student = max(cookies_baked, key=cookies_baked.get)\nanswer = most_cookies_student\n\nprint(answer)", "cookies_baked = {\n    'Riley': 71,\n    'Hannah': 75,\n    'Layla': 78,\n    'Madelyn': 79\n}\nanswer = max(cookies_baked, key=cookies_baked.get)\nprint(answer)", "# Store the number of cookies baked by each student in a dictionary\ncookies_baked = {\n    'Riley': 71,\n    'Hannah': 75,\n    'Layla': 78,\n    'Madelyn': 79\n}\n\n# Find the student who baked the most cookies\nanswer = max(cookies_baked, key=cookies_baked.get)\n\n# Print the answer\nprint(answer)"], "prediction": ["Madelyn", "Madelyn", "Madelyn", "Madelyn"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nbag of marshmallows | $2.97\nbag of chocolate chips | $2.61\nblock of cheddar cheese | $3.47\ncan of coffee beans | $5.16\nbag of almonds | $4.05", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nbag of marshmallows | $2.97\nbag of chocolate chips | $2.61\nblock of cheddar cheese | $3.47\ncan of coffee beans | $5.16\nbag of almonds | $4.05\n\nTerrell has $14.49. How much money will Terrell have left if he buys a can of coffee beans and a block of cheddar cheese?", "answer": "5.86", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Prices of the items\nprice_coffee_beans = 5.16\nprice_cheddar_cheese = 3.47\n# Total cost of items purchased\ntotal_cost = price_coffee_beans + price_cheddar_cheese\n# Terrell's initial amount of money\nterrell_money = 14.49\n# Remaining money after purchases\nremaining_money = terrell_money - total_cost\nanswer = remaining_money\nprint(answer)", "# Define the prices of the items\nprice_coffee_beans = 5.16\nprice_cheddar_cheese = 3.47\n\n# Calculate the total cost of the items\ntotal_cost = price_coffee_beans + price_cheddar_cheese\n\n# Define Terrell's initial amount of money\nterrell_money = 14.49\n\n# Calculate the remaining money after the purchase\nremaining_money = terrell_money - total_cost\n\n# Store the result in the answer variable\nanswer = remaining_money\n\n# Output the answer\nprint(answer)", "# Prices of items\nprice_coffee_beans = 5.16\nprice_cheddar_cheese = 3.47\n\n# Total cost of items\ntotal_cost = price_coffee_beans + price_cheddar_cheese\n\n# Terrell's initial amount of money\nterrell_money = 14.49\n\n# Remaining money after purchases\nremaining_money = terrell_money - total_cost\n\n# Store the result in 'answer' variable\nanswer = remaining_money\n\n# Output the answer\nprint(answer)", "# Prices of the items\nprice_coffee_beans = 5.16\nprice_cheddar_cheese = 3.47\n\n# Calculate total cost of the items\ntotal_cost = price_coffee_beans + price_cheddar_cheese\n\n# Terrell's initial amount of money\nterrell_money = 14.49\n\n# Calculate remaining money after the purchase\nremaining_money = terrell_money - total_cost\n\n# Store the result in 'answer' variable\nanswer = remaining_money\n\n# Print the answer\nprint(answer)"
], "prediction": [5.86, 5.86, 5.86, 5.86], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\n | Age 8 | Age 10\nIn-line skates | 2 | 3\nRoller skates | 2 | 3", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\n | Age 8 | Age 10\nIn-line skates | 2 | 3\nRoller skates | 2 | 3\n\nA skating rink attendant monitored the number of injuries at the rink over the past year. He tracked the ages of those injured and the kinds of skates worn during injury. What is the probability that a randomly selected injured skater was wearing in-line skates and was age 8? Simplify any fractions.", "answer": "1/5", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Total number of injuries\ninjuries_age_8_inline = 2\ninjuries_age_8_roller = 2\ninjuries_age_10_inline = 3\ninjuries_age_10_roller = 3\n\ntotal_injuries = injuries_age_8_inline + injuries_age_8_roller + injuries_age_10_inline + injuries_age_10_roller\n\n# Probability of randomly selecting an injured skater wearing in-line skates and age 8\nprobability_injured_inline_age_8 = injuries_age_8_inline / total_injuries\n\n# Simplifying the fraction\nfrom fractions import Fraction\nsimplified_probability = Fraction(injuries_age_8_inline, total_injuries).limit_denominator()\n\nanswer = simplified_probability\nprint(answer)", "injuries_age_8_inline = 2\ninjuries_age_8_roller = 2\ninjuries_age_10_inline = 3\ninjuries_age_10_roller = 3\n\n# Calculate the total number of injuries\ntotal_injuries = injuries_age_8_inline + injuries_age_8_roller + injuries_age_10_inline + injuries_age_10_roller\n\n# Calculate the probability of being injured while wearing in-line skates and being age 8\nfrom fractions import Fraction\nprobability_injured_inline_age_8 = Fraction(injuries_age_8_inline, total_injuries).limit_denominator()\n\n# Store the result in the answer variable\nanswer = probability_injured_inline_age_8\nprint(answer)", "injuries_age_8_inline = 2\ninjuries_age_8_roller = 2\ninjuries_age_10_inline = 3\ninjuries_age_10_roller = 3\n\n# Calculate the total number of injuries\ntotal_injuries = injuries_age_8_inline + injuries_age_8_roller + injuries_age_10_inline + injuries_age_10_roller\n\n# Calculate the probability of being injured while wearing in-line skates and being age 8\nfrom fractions import Fraction\nprobability_injured_inline_age_8 = Fraction(injuries_age_8_inline, total_injuries).limit_denominator()\n\n# Store the answer in a variable named 'answer'\nanswer = probability_injured_inline_age_8\n\n# Print the answer\nprint(answer)", "injuries_age_8_inline = 2\ninjuries_age_8_roller = 2\ninjuries_age_10_inline = 3\ninjuries_age_10_roller = 3\ntotal_injuries = injuries_age_8_inline + injuries_age_8_roller + injuries_age_10_inline + injuries_age_10_roller\n\n# Calculate the probability as a simplified fraction\nfrom fractions import Fraction\nprobability_injured_inline_age_8 = Fraction(injuries_age_8_inline, total_injuries).limit_denominator()\n\n# Store the result in a more readable format\nanswer = f\"{probability_injured_inline_age_8.numerator}/{probability_injured_inline_age_8.denominator}\"\nprint(answer)"
], "prediction": [0.2, 0.2, 0.2, "1/5"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nset of golf clubs | $390.00\nsnowboard | $910.00\nmountain bike | $763.00\nwetsuit | $660.00", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nset of golf clubs | $390.00\nsnowboard | $910.00\nmountain bike | $763.00\nwetsuit | $660.00\n\nNolan has $1,425.00. Does he have enough to buy a wetsuit and a mountain bike? Choose from the the options: ['yes', 'no']", "answer": "yes", "ques_type": "multi_choice", "choices": ["yes", "no"], "code": [
  "# Python code, return answer \n# Prices of the items\nwetsuit_price = 660.00\nmountain_bike_price = 763.00\n# Total cost for the wetsuit and mountain bike\ntotal_cost = wetsuit_price + mountain_bike_price\n# Amount of money Nolan has\nnolan_money = 1425.00\n# Check if Nolan has enough money\nif nolan_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\nprint(answer)", "wetsuit_price = 660.00\nmountain_bike_price = 763.00\ntotal_cost = wetsuit_price + mountain_bike_price\nnolan_money = 1425.00\n\nif nolan_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)  # This will output 'no'", "# Prices of the items\nwetsuit_price = 660.00\nmountain_bike_price = 763.00\n\n# Total cost of the items\ntotal_cost = wetsuit_price + mountain_bike_price\n\n# Amount of money Nolan has\nnolan_money = 1425.00\n\n# Check if Nolan has enough money\nif nolan_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)  # This will output 'no'", "# Prices of items\nwetsuit_price = 660.00\nmountain_bike_price = 763.00\n\n# Calculate the total cost\ntotal_cost = wetsuit_price + mountain_bike_price\n\n# Amount of money Nolan has\nnolan_money = 1425.00\n\n# Check if Nolan has enough money\nif nolan_money >= total_cost:\n    answer = 'yes'\nelse:\n    answer = 'no'\n\nprint(answer)  # This will output 'no' if the calculation is correct"
], "prediction": ["yes", "yes", "yes", "yes"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"None\" and then answer a question.\n\nsalami | $2 per pound\nliverwurst | $4 per pound\nlinguica | $4 per pound\npepperoni | $5 per pound\nchorizo | $2 per pound\nItalian sausage | $6 per pound\nbratwurst | $6 per pound", "question": "Read the following table regarding \"None\" and then write Python code to answer a question.\n\nsalami | $2 per pound\nliverwurst | $4 per pound\nlinguica | $4 per pound\npepperoni | $5 per pound\nchorizo | $2 per pound\nItalian sausage | $6 per pound\nbratwurst | $6 per pound\n\nReba buys 2.6 pounds of liverwurst. How much does she spend?", "answer": "10.40", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nprice_per_pound_liverwurst = 4  # $4 per pound\npounds_bought = 2.6\n# Calculate the total cost\ntotal_cost = price_per_pound_liverwurst * pounds_bought\nanswer = total_cost\nprint(answer)", "# Define the price per pound for liverwurst\nprice_per_pound_liverwurst = 4  # $4 per pound\n\n# Define the amount of liverwurst bought\npounds_bought = 2.6\n\n# Calculate the total cost\ntotal_cost = price_per_pound_liverwurst * pounds_bought\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the price per pound for liverwurst\nprice_per_pound_liverwurst = 4  # $4 per pound\n\n# Define the amount of liverwurst bought\npounds_bought = 2.6\n\n# Calculate the total cost\ntotal_cost = price_per_pound_liverwurst * pounds_bought\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Output the answer\nprint(answer)", "# Define the price per pound for liverwurst\nprice_per_pound_liverwurst = 4  # $4 per pound\n\n# Define the amount of liverwurst bought\npounds_bought = 2.6\n\n# Calculate the total cost\ntotal_cost = price_per_pound_liverwurst * pounds_bought\n\n# Store the result in the variable 'answer'\nanswer = total_cost\n\n# Print the answer\nprint(answer)"], "prediction": [10.4, 10.4, 10.4, 10.4], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Computers in classrooms\" and then answer a question.\n\nTeacher | Number of computers\nMs. Rojas | 6\nMs. Cohen | 4\nMr. Lim | 5\nMrs. Rossi | 6\nMr. Morales | 9\nMr. Schmidt | 4\nMiss Murphy | 6\nMrs. Tan | 5", "question": "Read the following table regarding \"Computers in classrooms\" and then write Python code to answer a question.\n\nTeacher | Number of computers\nMs. Rojas | 6\nMs. Cohen | 4\nMr. Lim | 5\nMrs. Rossi | 6\nMr. Morales | 9\nMr. Schmidt | 4\nMiss Murphy | 6\nMrs. Tan | 5\n\nThe teachers at a middle school counted how many computers they had in their classrooms. What is the mode of the numbers?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \nfrom statistics import mode\n\n# List of the number of computers in each classroom\ncomputers = [6, 4, 5, 6, 9, 4, 6, 5]\n\n# Calculate the mode of the numbers\nmode_computers = mode(computers)\nanswer = mode_computers\nprint(answer)", "from statistics import mode\n\ncomputers = [6, 4, 5, 6, 9, 4, 6, 5]\nmode_computers = mode(computers)\nanswer = int(mode_computers)  # Convert to integer for clarity\nprint(answer)", "from statistics import mode\n\ncomputers = [6, 4, 5, 6, 9, 4, 6, 5]\nmode_computers = mode(computers)\nanswer = int(mode_computers)  # Convert to integer for clarity\nprint(answer)", "from statistics import mode\n\ncomputers = [6, 4, 5, 6, 9, 4, 6, 5]\nmode_computers = mode(computers)\nanswer = mode_computers  # No need to convert to int, as mode already returns an integer\nprint(answer)"], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Photographs taken\" and then answer a question.\n\nDay | Number of photographs\nSunday | 0\nMonday | 7\nTuesday | 4\nWednesday | 8\nThursday | 5\nFriday | 12\nSaturday | 6", "question": "Read the following table regarding \"Photographs taken\" and then write Python code to answer a question.\n\nDay | Number of photographs\nSunday | 0\nMonday | 7\nTuesday | 4\nWednesday | 8\nThursday | 5\nFriday | 12\nSaturday | 6\n\nSally looked at the dates of the digital photos on her computer to find out how many she had taken in the past 7 days. What is the mean of the numbers?", "answer": "6", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# Number of photographs taken each day\nphotographs = [0, 7, 4, 8, 5, 12, 6]\n# Calculate the mean\nmean_photographs = sum(photographs) / len(photographs)\nanswer = mean_photographs\nprint(answer)", "photographs = [0, 7, 4, 8, 5, 12, 6]\nmean_photographs = sum(photographs) / len(photographs)\nanswer = int(mean_photographs) if mean_photographs.is_integer() else mean_photographs\nprint(answer)", "photographs = [0, 7, 4, 8, 5, 12, 6]\nmean_photographs = sum(photographs) / len(photographs)\nanswer = mean_photographs  # Keep the mean as a float\nprint(answer)", "photographs = [0, 7, 4, 8, 5, 12, 6]\nmean_photographs = sum(photographs) / len(photographs)\n\n# Format the answer based on whether it's a whole number or not\nif mean_photographs.is_integer():\n    answer = int(mean_photographs)  # Convert to int if it's a whole number\nelse:\n    answer = mean_photographs  # Keep as float if it has a decimal part\n\nprint(answer)"], "prediction": [6.0, 6.0, 6.0, 6.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Bags of popcorn sold\" and then answer a question.\n\nDay | Number of bags of popcorn\nFriday | 1\nSaturday | 6\nSunday | 3\nMonday | 2\nTuesday | 3\nWednesday | 3\nThursday | 8", "question": "Read the following table regarding \"Bags of popcorn sold\" and then write Python code to answer a question.\n\nDay | Number of bags of popcorn\nFriday | 1\nSaturday | 6\nSunday | 3\nMonday | 2\nTuesday | 3\nWednesday | 3\nThursday | 8\n\nA concession stand worker at the movie theater looked up how many bags of popcorn were sold in the past 7 days. What is the range of the numbers?", "answer": "7", "ques_type": "free_text", "choices": null, "code": ["# Python code, return answer \n# List of bags of popcorn sold each day\npopcorn_sold = [1, 6, 3, 2, 3, 3, 8]\n# Calculate the range\nrange_popcorn = max(popcorn_sold) - min(popcorn_sold)\nanswer = range_popcorn\nprint(answer)", "popcorn_sold = [1, 6, 3, 2, 3, 3, 8]\nrange_popcorn = max(popcorn_sold) - min(popcorn_sold)\nanswer = int(range_popcorn)  # Convert to integer\nprint(answer)", "popcorn_sold = [1, 6, 3, 2, 3, 3, 8]\nrange_popcorn = max(popcorn_sold) - min(popcorn_sold)\nanswer = range_popcorn  # No need to convert to integer\nprint(answer)", "popcorn_sold = [1, 6, 3, 2, 3, 3, 8]\nrange_popcorn = max(popcorn_sold) - min(popcorn_sold)\nanswer = int(range_popcorn)  # Convert to integer\nprint(answer)"], "prediction": [7.0, 7.0, 7.0, 7.0], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Stock prices\" and then answer a question.\n\nCompany | Wednesday | Thursday\nWatson and Partners | $17 | $18\nWhite and Company | $19 | $16\nJonas Incorporated | $20 | $18", "question": "Read the following table regarding \"Stock prices\" and then write Python code to answer a question.\n\nCompany | Wednesday | Thursday\nWatson and Partners | $17 | $18\nWhite and Company | $19 | $16\nJonas Incorporated | $20 | $18\n\nA stock broker followed the stock prices of a certain set of companies. Which company's stock cost more on Wednesday, Watson and Partners or White and Company? Choose from the the options: ['White and Company', 'Watson and Partners']", "answer": "White and Company", "ques_type": "multi_choice", "choices": ["White and Company", "Watson and Partners"], "code": ["# Python code, return answer \n# Stock prices on Wednesday\nwatson_price_wednesday = 17\nwhite_price_wednesday = 19\n\n# Determine which company's stock cost more on Wednesday\nif white_price_wednesday > watson_price_wednesday:\n    answer = 'White and Company'\nelse:\n    answer = 'Watson and Partners'\n    \nprint(answer)", "watson_price_wednesday = 17\nwhite_price_wednesday = 19\n\nif white_price_wednesday > watson_price_wednesday:\n    answer = 'White and Company'\nelif white_price_wednesday < watson_price_wednesday:\n    answer = 'Watson and Partners'\nelse:\n    answer = 'Both companies have the same stock price'\n\nprint(answer)", "watson_price_wednesday = 17\nwhite_price_wednesday = 19\n\nif white_price_wednesday > watson_price_wednesday:\n    answer = 'White and Company'\nelse:\n    answer = 'Watson and Partners'\n\nprint(answer)", "watson_price_wednesday = 17\nwhite_price_wednesday = 19\n\nif white_price_wednesday > watson_price_wednesday:\n    answer = 'White and Company'\nelif white_price_wednesday < watson_price_wednesday:\n    answer = 'Watson and Partners'\nelse:\n    answer = 'Both companies have the same stock price on Wednesday'\n\nprint(answer)"], "prediction": ["White and Company", "White and Company", "White and Company", "White and Company"], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Tour boat schedule\" and then answer a question.\n\nSea Town | 8:00 A.M. | 8:15 A.M. | 8:30 A.M. | 9:30 A.M.\nFisherman's Cove | 9:45 A.M. | 10:00 A.M. | 10:15 A.M. | 11:15 A.M.\nStarfish Point | 10:30 A.M. | 10:45 A.M. | 11:00 A.M. | 12:00 P.M.\nRocky Cliffs | 11:45 A.M. | 12:00 P.M. | 12:15 P.M. | 1:15 P.M.\nPalm Tree Island | 1:15 P.M. | 1:30 P.M. | 1:45 P.M. | 2:45 P.M.", "question": "Read the following table regarding \"Tour boat schedule\" and then write Python code to answer a question.\n\nSea Town | 8:00 A.M. | 8:15 A.M. | 8:30 A.M. | 9:30 A.M.\nFisherman's Cove | 9:45 A.M. | 10:00 A.M. | 10:15 A.M. | 11:15 A.M.\nStarfish Point | 10:30 A.M. | 10:45 A.M. | 11:00 A.M. | 12:00 P.M.\nRocky Cliffs | 11:45 A.M. | 12:00 P.M. | 12:15 P.M. | 1:15 P.M.\nPalm Tree Island | 1:15 P.M. | 1:30 P.M. | 1:45 P.M. | 2:45 P.M.\n\nLook at the following schedule. Linda got on the boat at Fisherman's Cove at 9.45 A.M. What time will she get to Palm Tree Island? Choose from the the options: ['1:45 P.M.', '9:45 A.M.', '10:45 A.M.', '1:15 P.M.']", "answer": "1:15 P.M.", "ques_type": "multi_choice", "choices": ["1:45 P.M.", "9:45 A.M.", "10:45 A.M.", "1:15 P.M."], "code": [
  "# Python code, return answer \n# According to the schedule, the boat from Fisherman's Cove at 9:45 A.M. arrives at Palm Tree Island at 1:15 P.M.\narrival_time = '1:15 P.M.'\nanswer = arrival_time\nprint(answer)", "# Define the schedule as a dictionary where keys are departure points and values are lists of departure times\nschedule = {\n    'Fisherman\\'s Cove': ['9:45 A.M.', '10:00 A.M.', '10:15 A.M.', '11:15 A.M.'],\n    'Palm Tree Island': ['1:15 P.M.', '1:30 P.M.', '1:45 P.M.', '2:45 P.M.']\n}\n\n# Linda boards the boat at Fisherman's Cove at 9:45 A.M.\ndeparture_time = '9:45 A.M.'\n\n# The next available departure time from Fisherman's Cove after 9:45 A.M. is 10:00 A.M.\nnext_departure_time = '10:00 A.M.'\n\n# The travel time from Fisherman's Cove to Palm Tree Island is determined by the schedule\n# The next available boat from Fisherman's Cove is at 10:00 A.M. and will arrive at Palm Tree Island at 1:15 P.M.\narrival_time = '1:15 P.M.'\n\n# Assign the arrival time to the answer variable\nanswer = arrival_time\nprint(answer)", "# Define the tour boat schedule as a dictionary\nschedule = {\n    'Fisherman\\'s Cove': ['9:45 A.M.', '10:00 A.M.', '10:15 A.M.', '11:15 A.M.'],\n    'Palm Tree Island': ['1:15 P.M.', '1:30 P.M.', '1:45 P.M.', '2:45 P.M.']\n}\n\n# Linda departs at 9:45 A.M. from Fisherman's Cove\ndeparture_time = '9:45 A.M.'\n\n# The next available departure time from Fisherman's Cove after 9:45 A.M. is 10:00 A.M.\nnext_departure_time = '10:00 A.M.'\n\n# Based on the schedule, if she departs at 10:00 A.M., she arrives at Palm Tree Island at 1:15 P.M.\narrival_time = '1:15 P.M.'\n\nanswer = arrival_time\nprint(answer)", "# Define the schedule for the tour boats\nschedule = {\n    'Fisherman\\'s Cove': ['9:45 A.M.', '10:00 A.M.', '10:15 A.M.', '11:15 A.M.'],\n    'Palm Tree Island': ['1:15 P.M.', '1:30 P.M.', '1:45 P.M.', '2:45 P.M.']\n}\n\n# Linda departs Fisherman's Cove at 9:45 A.M.\ndeparture_time = '9:45 A.M.'\n\n# The next available departure from Fisherman's Cove after 9:45 A.M. is at 10:00 A.M.\n# Now we need to find the corresponding arrival time at Palm Tree Island\n# The schedule indicates that the boat from Fisherman's Cove arrives at Palm Tree Island at 1:15 P.M. after a certain travel time.\n\n# Since the boat from Fisherman's Cove at 9:45 A.M. does not go directly to Palm Tree Island,\n# we will check the next available boat from Fisherman's Cove after 10:00 A.M.\narrival_time = '1:15 P.M.'  # This is the arrival time for the boat that leaves at 1:15 P.M. from Fisherman's Cove\n\n# Assign the final answer\nanswer = arrival_time\nprint(answer)"
], "prediction": ["1:15 P.M.", "1:15 P.M.", "1:15 P.M.", "1:15 P.M."], "report": ["Done", "Done", "Done", "Done"]
}
{
  "context": "Read the following table regarding \"Convenience store beverage sales\" and then answer a question.\n\nBeverage | Thursday | Friday\nNatural Goodness Juice | $18 | $10\nPearl's Soda | $7 | $4\nNature's Nectar | $2 | $4\nBrenner's Juices | $5 | $13", "question": "Read the following table regarding \"Convenience store beverage sales\" and then write Python code to answer a question.\n\nBeverage | Thursday | Friday\nNatural Goodness Juice | $18 | $10\nPearl's Soda | $7 | $4\nNature's Nectar | $2 | $4\nBrenner's Juices | $5 | $13\n\nJoseph, an employee at Morrison's Convenience Store, looked at the sales of each of its soda products. How much more did the convenience store make from Nature's Nectar sales on Friday than on Thursday?", "answer": "2", "ques_type": "free_text", "choices": null, "code": [
  "# Python code, return answer \n# Sales for Nature's Nectar on each day\nsales_thursday = 2  # Nature's Nectar sales on Thursday\nsales_friday = 4    # Nature's Nectar sales on Friday\n\n# Calculate the difference in sales between Friday and Thursday\ndifference = sales_friday - sales_thursday\nanswer = difference\nprint(answer)", "# Define the sales amounts for Nature's Nectar on both days\nprice_per_unit = 2  # price of Nature's Nectar\nunits_sold_thursday = 1  # units sold on Thursday\nunits_sold_friday = 2  # units sold on Friday\n\n# Calculate total sales for each day\nsales_thursday = price_per_unit * units_sold_thursday\nsales_friday = price_per_unit * units_sold_friday\n\n# Calculate the difference in sales\ndifference = sales_friday - sales_thursday\nanswer = difference\nprint(answer)", "# Sales data for Nature's Nectar on Thursday and Friday\nsales_thursday = 2  # sales amount on Thursday\nsales_friday = 4     # sales amount on Friday\n\n# Calculate the difference in sales\ndifference = sales_friday - sales_thursday\nanswer = difference\nprint(answer)", "# Define the sales data for Nature's Nectar\nsales_nature_nectar_thursday = 2  # Sales on Thursday\nsales_nature_nectar_friday = 4      # Sales on Friday\n\n# Calculate the difference in sales\ndifference = sales_nature_nectar_friday - sales_nature_nectar_thursday\nanswer = difference\nprint(answer)"
], "prediction": [2.0, 2.0, 2.0, 2.0], "report": ["Done", "Done", "Done", "Done"]
}
